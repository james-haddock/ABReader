<?xml version="1.0" encoding="UTF-8"?>
<html xml:lang="en-us" lang="en-us" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ns="http://www.w3.org/2001/10/synthesis">
<head>
<title>Refactoring: Improving the Design of Existing Code</title>
<link rel="stylesheet" type="text/css" href="9780134757704.css"/>
</head>
<body>
<section epub:type="bodymatter">
<h2 class="h2" id="ch05"><span epub:type="pagebreak" id="page_101"/>Chapter 5<br/>Introducing the Catalog</h2>
<p class="noindent">The rest of this book is a catalog of refactorings. This catalog started from my personal notes that I made to remind myself how to do refactorings in a safe and efficient way. Since then, I&#8217;ve refined the catalog, and there&#8217;s more of it that comes from deliberate exploration of some refactoring moves. It&#8217;s still something I use when I do a refactoring I haven&#8217;t done in a while.</p>
<h3 class="h3" id="ch05lev1sec1">Format of the Refactorings</h3>
<p class="noindent">As I describe the refactorings in the catalog, I use a standard format. Each refactoring has five parts, as follows:</p>
<ul class="square">
<li><p>I begin with a <strong>name</strong>. The name is important to building a vocabulary of refactorings. This is the name I use elsewhere in the book. Refactorings often go by different names now, so I also list any aliases that seem to be common.</p></li>
<li><p>I follow the name with a short <strong>sketch</strong> of the refactoring. This helps you find a refactoring more quickly.</p></li>
<li><p>The <strong>motivation</strong> describes why the refactoring should be done and describes circumstances in which it shouldn&#8217;t be done.</p></li>
<li><p>The <strong>mechanics</strong> are a concise, step-by-step description of how to carry out the refactoring.</p></li>
<li><p>The <strong>examples</strong> show a very simple use of the refactoring to illustrate how it works.</p></li>
</ul>
<p class="indent">The sketch shows a code example of the transformation of the refactoring. It&#8217;s not meant to explain what the refactoring is, let alone how to do it, but it should remind you what the refactoring is if you&#8217;ve come across it before. If not, you&#8217;ll probably need to work through the example to get a better idea. I also include <span epub:type="pagebreak" id="page_102"/>a small graphic; again, I don&#8217;t intend it to be explanatory&#8212;it&#8217;s more of a graphic memory-jogger.</p>
<p class="indent">The mechanics come from my own notes to remember how to do the refactoring when I haven&#8217;t done it for a while. As such, they are somewhat terse, usually without explanations of why the steps are done that way. I give a more expansive explanation in the example. This way, the mechanics are short notes you can refer to easily when you know the refactoring but need to look up the steps (at least this is how I use them). You&#8217;ll probably need to read the examples when you first do the refactoring.</p>
<p class="indent">I&#8217;ve written the mechanics in such a way that each step of each refactoring is as small as possible. I emphasize the safe way of doing the refactoring&#8212;which is to take very small steps and test after every one. At work, I usually take larger steps than some of the baby steps described, but if I run into a bug, I back out the last step and take the smaller steps. The steps include a number of references to special cases. The steps thus also function as a checklist; I often forget these things myself.</p>
<p class="indent">Although I (with few exceptions) only list one set of mechanics, they aren&#8217;t the only way to carry out the refactoring. I selected the mechanics in the book because they work pretty well most of the time. It&#8217;s likely you&#8217;ll vary them as you get more practice in refactoring, and that&#8217;s fine. Just remember that the key is to take small steps&#8212;and the trickier the situation, the smaller the steps.</p>
<p class="indent">The examples are of the laughably simple textbook kind. My aim with the examples is to help explain the basic refactoring with minimal distractions, so I hope you&#8217;ll forgive the simplicity. (They are certainly not examples of good business modeling.) I&#8217;m sure you&#8217;ll be able to apply them to your rather more complex situations. Some very simple refactorings don&#8217;t have examples because I didn&#8217;t think an example would add much.</p>
<p class="indent">In particular, remember that the examples are included only to illustrate the one refactoring under discussion. In most cases, there are still problems with the code at the end&#8212;but fixing these problems requires other refactorings. In a few cases in which refactorings often go together, I carry examples from one re-factoring to another. In most cases, I leave the code as it is after the single refactoring. I do this to make each refactoring self-contained, because the primary role of the catalog is to be a reference.</p>
<p class="indent">I use color to highlight changed code where it may be difficult to spot among code that has not been changed. I do not use highlighting for all changed code, because too much defeats the purpose.</p>
<h3 class="h3" id="ch05lev1sec2">The Choice of Refactorings</h3>
<p class="noindent">This is by no means a complete catalog of refactorings. It is, I hope, a collection of those most useful to have them written down. By &#8220;most useful&#8221; I mean those <span epub:type="pagebreak" id="page_103"/>that are both commonly used and worthwhile to name and describe. I find something worthwhile to describe for a combination of reasons: Some have interesting mechanics which help general refactoring skills, some have a strong effect on improving the design of code.</p>
<p class="indent">Some refactorings are missing because they are so small and straightforward that I don&#8217;t feel they are worth writing up. An example in the first edition was <em><span class="pd_maroon"><a class="pd_maroon" href="ch08.xhtml#ch08lev1sec6">Slide Statements</a> (<a class="pd_maroon" href="ch08.xhtml#page_223">223</a>)</span></em>&#8212;which I use frequently but didn&#8217;t recognize as something I should include in the catalog (obviously, I changed my mind for this edition). These may well get added to the book over time, depending on how much energy I devote to new refactorings in the future.</p>
<p class="indent">Another category is refactorings that logically exist, but either aren&#8217;t used much by me or show a simple similarity to other refactorings. Every refactoring in this book has a logical inverse refactoring, but I didn&#8217;t write all of them up because I don&#8217;t find many inverses interesting. <em><span class="pd_maroon"><a class="pd_maroon" href="ch06.xhtml#ch06lev1sec6">Encapsulate Variable</a> (<a class="pd_maroon" href="ch06.xhtml#page_132">132</a>)</span></em> is a common and powerful refactoring but its inverse is something I hardly ever do (and it is easy to perform anyway) so I didn&#8217;t think we need a catalog entry for it.</p>
</section>
</body>
</html>