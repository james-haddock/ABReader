<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/>
<title>Introduction to Algorithms</title>
<link href="css/stylesheet.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:4a9ccac5-f2db-4081-af1f-a5a376b433e1" name="Adept.expected.resource"/>
</head>
<body>
<div class="body"><a id="p1153"/>
<p class="line-c"/>
<section epub:type="backmatter" title="B Sets, Etc.">
<p class="chapter-title"><a href="toc.xhtml#app-2"><strong><span class="blue1">B Sets, Etc.</span></strong></a></p>
<p class="noindent">Many chapters of this book touch on the elements of discrete mathematics. This appendix reviews the notations, definitions, and elementary properties of sets, relations, functions, graphs, and trees. If you are already well versed in this material, you can probably just skim this chapter.</p>
<p class="line1"/>
<section title="B.1 Sets">
<a id="Sec_B.1"/>
<p class="level1" id="h1-218"><a href="toc.xhtml#Rh1-218"><strong>B.1 Sets</strong></a></p>
<p class="noindent">A <strong><em><span class="blue">set</span></em></strong> is a collection of distinguishable objects, called its <strong><em><span class="blue">members</span></em></strong> or <strong><em><span class="blue">elements</span></em></strong>. If an object <em>x</em> is a member of a set <em>S</em>, we write <em>x</em> ∈ <em>S</em> (read “<em>x</em> is a member of <em>S</em>” or, more briefly, “<em>x</em> belongs to <em>S</em>”). If <em>x</em> is not a member of <em>S</em>, we write <em>x</em> ∉ <em>S</em>. To describe a set explicitly, write its members as a list inside braces. For example, to define a set <em>S</em> to contain precisely the numbers 1, 2, and 3, write <em>S</em> = {1, 2, 3}. Since 2 belongs to the set <em>S</em>, we can write 2 ∈ <em>S</em>, and since 4 is not a member, we can write 4 ∉ <em>S</em>. A set cannot contain the same object more than once,<sup><a epub:type="footnote" href="#footnote_1" id="footnote_ref_1">1</a></sup> and its elements are not ordered. Two sets <em>A</em> and <em>B</em> are <strong><em><span class="blue">equal</span></em></strong>, written <em>A</em> = <em>B</em>, if they contain the same elements. For example, {1, 2, 3, 1} = {1, 2, 3} = {3, 2, 1}.</p>
<p>We adopt special notations for frequently encountered sets:</p>
<ul class="ulnoindent" epub:type="list">
<li>Ø denotes the <strong><em><span class="blue">empty set</span></em></strong>, that is, the set containing no members.</li>
<li class="litop"><span class="font1">ℤ</span> denotes the set of <strong><em><span class="blue">integers</span></em></strong>, that is, the set {… −2, −1, 0, 1, 2,…}.</li>
<li class="litop"><span class="font1">ℝ</span> denotes the set of <strong><em><span class="blue">real numbers</span></em></strong>.</li>
<li class="litop"><span class="font1">ℕ</span> denotes the set of <strong><em><span class="blue">natural numbers</span></em></strong>, that is, the set {0, 1, 2,…}.<sup><a epub:type="footnote" href="#footnote_2" id="footnote_ref_2">2</a></sup></li></ul>
<a id="p1154"/>
<p>If all the elements of a set <em>A</em> are contained in a set <em>B</em>, that is, if <em>x</em> ∈ <em>A</em> implies <em>x</em> ∈ <em>B</em>, then we write <em>A</em> ⊆ <em>B</em> and say that <em>A</em> is a <strong><em><span class="blue">subset</span></em></strong> of <em>B</em>. A set <em>A</em> is a <strong><em><span class="blue">proper subset</span></em></strong> of set <em>B</em>, written <em>A</em> ⊂ <em>B</em>, if <em>A</em> ⊆ <em>B</em> but <em>A</em> ≠ <em>B</em>. (Some authors use the symbol “⊂” to denote the ordinary subset relation, rather than the proper-subset relation.) Every set is a subset of itself: <em>A</em> ⊆ <em>A</em> for any set <em>A</em>. For two sets <em>A</em> and <em>B</em>, we have <em>A</em> = <em>B</em> if and only if <em>A</em> ⊆ <em>B</em> and <em>B</em> ⊆ <em>A</em>. The subset relation is transitive (see page 1159): for any three sets <em>A</em>, <em>B</em>, and <em>C</em>, if <em>A</em> ⊆ <em>B</em> and <em>B</em> ⊆ <em>C</em>, then <em>A</em> ⊆ <em>C</em>. The proper-subset relation is transitive as well. The empty set is a subset of all sets: for any set <em>A</em>, we have Ø ⊆ <em>A</em>.</p>
<p>Sets can be specified in terms of other sets. Given a set <em>A</em>, a set <em>B</em> ⊆ <em>A</em> can be defined by stating a property that distinguishes the elements of <em>B</em>. For example, one way to define the set of even integers is {<em>x</em> : <em>x</em> ∈ <span class="font1">ℤ</span> and <em>x</em>/2 is an integer}. The colon in this notation is read “such that.” (Some authors use a vertical bar in place of the colon.)</p>
<p>Given two sets <em>A</em> and <em>B</em>, <strong><em><span class="blue">set operations</span></em></strong> define new sets:</p>
<ul class="ulnoindent" epub:type="list">
<li>The <strong><em><span class="blue">intersection</span></em></strong> of sets <em>A</em> and <em>B</em> is the set
<p class="eql"><em>A</em> ∩ <em>B</em> = {<em>x</em> : <em>x</em> ∈ <em>A</em> and <em>x</em> ∈ <em>B</em>}.</p></li>
<li class="litop">The <strong><em><span class="blue">union</span></em></strong> of sets <em>A</em> and <em>B</em> is the set
<p class="eql"><em>A</em> ∪ <em>B</em> = {<em>x</em> : <em>x</em> ∈ <em>A</em> or <em>x</em> ∈ <em>B</em>}.</p></li>
<li class="litop">The <strong><em><span class="blue">difference</span></em></strong> between two sets <em>A</em> and <em>B</em> is the set
<p class="eql"><em>A</em> − <em>B</em> = {<em>x</em> : <em>x</em> ∈ <em>A</em> and <em>x</em> ∉ <em>B</em>}.</p></li></ul>
<p>Set operations obey the following laws:</p>
<p class="level4"><strong>Empty set laws:</strong></p>
<table class="table2bd">
<tr>
<td class="td2"><em>A</em> ∩ Ø</td>
<td class="td2">=</td>
<td class="td2">Ø,</td>
</tr>
<tr>
<td class="td2"><em>A</em> ∪ Ø</td>
<td class="td2">=</td>
<td class="td2"><em>A.</em></td>
</tr>
</table>
<p class="level4"><strong>Idempotency laws:</strong></p>
<table class="table2bd">
<tr>
<td class="td2"><em>A</em> ∩ <em>A</em></td>
<td class="td2">=</td>
<td class="td2"><em>A</em>,</td>
</tr>
<tr>
<td class="td2"><em>A</em> ∪ <em>A</em></td>
<td class="td2">=</td>
<td class="td2"><em>A.</em></td>
</tr>
</table>
<p class="level4"><strong>Commutative laws:</strong></p>
<table class="table2bd">
<tr>
<td class="td2"><em>A</em> ∩ <em>B</em></td>
<td class="td2">=</td>
<td class="td2"><em>B</em> ∩ <em>A</em>,</td>
</tr>
<tr>
<td class="td2"><em>A</em> ∪ <em>B</em></td>
<td class="td2">=</td>
<td class="td2"><em>B</em> ∪ <em>A</em>.</td>
</tr>
</table>
<a id="p1155"/>
<div class="divimage">
<p class="fig-imga" id="Fig_B-1"><img alt="art" src="images/Art_P1613.jpg"/></p>
<p class="caption"><strong>Figure B.1</strong> A Venn diagram illustrating the first of DeMorgan’s laws (B.2). Each of the sets <em>A</em>, <em>B</em>, and <em>C</em> is represented as a circle.</p>
</div>
<p class="level4"><strong>Associative laws:</strong></p>
<table class="table2bd">
<tr>
<td class="td2"><em>A</em> ∩ (<em>B</em> ∩ <em>C</em>)</td>
<td class="td2">=</td>
<td class="td2">(<em>A</em> ∩ <em>B</em>) ∩ <em>C</em>,</td>
</tr>
<tr>
<td class="td2"><em>A</em> ∪ (<em>B</em> ∪ <em>C</em>)</td>
<td class="td2">=</td>
<td class="td2">(<em>A</em> ∪ <em>B</em>) ∪ <em>C.</em></td>
</tr>
</table>
<p class="level4"><strong>Distributive laws:</strong></p>
<p class="eqr"><img alt="art" src="images/Art_P1614.jpg"/></p>
<p class="level4"><strong>Absorption laws:</strong></p>
<table class="table2bd">
<tr>
<td class="td2"><em>A</em> ∩ (<em>A</em> ∪ <em>B</em>)</td>
<td class="td2">=</td>
<td class="td2"><em>A</em>,</td>
</tr>
<tr>
<td class="td2"><em>A</em> ∪ (<em>A</em> ∩ <em>B</em>)</td>
<td class="td2">=</td>
<td class="td2"><em>A.</em></td>
</tr>
</table>
<p class="level4"><strong>DeMorgan’s laws:</strong></p>
<p class="eqr"><img alt="art" src="images/Art_P1615.jpg"/></p>
<p class="noindent"><a href="#Fig_B-1">Figure B.1</a> illustrates the first of DeMorgan’s laws, using a <strong><em><span class="blue">Venn diagram</span></em></strong>: a graphical picture in which sets are represented as regions of the plane.</p>
<p>Often, all the sets under consideration are subsets of some larger set <em>U</em> called the <strong><em><span class="blue">universe</span></em></strong>. For example, when considering various sets made up only of integers, the set <span class="font1">ℤ</span> of integers is an appropriate universe. Given a universe <em>U</em>, we define the <strong><em><span class="blue">complement</span></em></strong> of a set <em>A</em> as <em><span class="font1">Ā</span></em> = <em>U</em> − <em>A</em> = {<em>x</em> : <em>x</em> ∈ <em>U</em> and <em>x</em> ∉ <em>A</em>}. For any set <em>A</em> ⊆ <em>U</em>, we have the following laws:</p>
<table class="table2bd">
<tr>
<td class="td2"><p class="right"><img alt="art" src="images/Art_P1616.jpg"/></p></td>
<td class="td2"><p class="center">=</p></td>
<td class="td2"><p class="noindent"><em>A</em>,</p></td>
</tr>
<tr>
<td class="td2"><p class="right"><em>A</em> ∩ <em><span class="font1">Ā</span></em></p></td>
<td class="td2"><p class="center">=</p></td>
<td class="td2"><p class="noindent">Ø,</p></td>
</tr>
<tr>
<td class="td2"><p class="right"><em>A</em> ∪ <em><span class="font1">Ā</span></em></p></td>
<td class="td2"><p class="center">=</p></td>
<td class="td2"><p class="noindent"><em>U</em>.</p></td>
</tr>
</table>
<a id="p1156"/>
<p class="noindent">An equivalent way to express DeMorgan’s laws (B.2) uses set complements. For any two sets <em>B, C</em> ⊆ <em>U</em>, we have</p>
<table class="table2b">
<tr>
<td class="td2"><span class="overline"><em>B</em> ∩ <em>C</em></span></td>
<td class="td2">=</td>
<td class="td2"><span class="overline"><em>B</em></span> ∪ <span class="overline"><em>C</em></span>,</td>
</tr>
<tr>
<td class="td2"><span class="overline"><em>B</em> ∪ <em>C</em></span></td>
<td class="td2">=</td>
<td class="td2"><span class="overline"><em>B</em></span> ∩ <span class="overline"><em>C</em></span>.</td>
</tr>
</table>
<p>Two sets <em>A</em> and <em>B</em> are <strong><em><span class="blue">disjoint</span></em></strong> if they have no elements in common, that is, if <em>A</em> ∩ <em>B</em> = Ø. A <strong><em><span class="blue">collection</span></em></strong> of sets <em>S</em><sub>1</sub>, <em>S</em><sub>2</sub>, … , either finite or infinite, is a set of sets, in which each member is a set <em>S<sub>i</sub></em>. A collection <span class="scriptfont">S</span> = {<em>S<sub>i</sub></em>} of nonempty sets forms a <strong><em><span class="blue">partition</span></em></strong> of a set <em>S</em> if</p>
<ul class="ulnoindent" epub:type="list">
<li>the sets are <strong><em><span class="blue">pairwise disjoint</span></em></strong>, that is, <em>S<sub>i</sub></em>, <em>S<sub>j</sub></em> ∈ <span class="scriptfont">S</span> and <em>i</em> ≠ <em>j</em> imply <em>S<sub>i</sub></em> ∩ <em>S<sub>j</sub></em> = Ø,</li>
<li class="litop">their union is <em>S</em>, that is,
<p class="eql"><img alt="art" src="images/Art_P1617.jpg"/></p></li></ul>
<p class="noindent">In other words, <span class="scriptfont">S</span> forms a partition of <em>S</em> if each element of <em>S</em> appears in exactly one set <em>S<sub>i</sub></em> ∈ <span class="scriptfont">S</span>.</p>
<p>The number of elements in a set is the <strong><em><span class="blue">cardinality</span></em></strong> (or <strong><em><span class="blue">size</span></em></strong>) of the set, denoted |<em>S</em>|. Two sets have the same cardinality if their elements can be put into a one-to-one correspondence. The cardinality of the empty set is |Ø| = 0. If the cardinality of a set is a natural number, the set is <strong><em><span class="blue">finite</span></em></strong>, and otherwise, it is <strong><em><span class="blue">infinite</span></em></strong>. An infinite set that can be put into a one-to-one correspondence with the natural numbers <span class="font1">ℕ</span> is <strong><em><span class="blue">countably infinite</span></em></strong>, and otherwise, it is <strong><em><span class="blue">uncountable</span></em></strong>. For example, the integers <span class="font1">ℤ</span> are countable, but the reals <span class="font1">ℝ</span> are uncountable.</p>
<p>For any two finite sets <em>A</em> and <em>B</em>, we have the identity</p>
<p class="eqr"><img alt="art" src="images/Art_P1618.jpg"/></p>
<p class="noindent">from which we can conclude that</p>
<p class="eql">|<em>A</em> ∪ <em>B</em>| ≤ |<em>A</em>| + |<em>B</em>|.</p>
<p class="noindent">If <em>A</em> and <em>B</em> are disjoint, then |<em>A</em> ∩ <em>B</em>| = 0 and thus |<em>A</em> ∪ <em>B</em>| = |<em>A</em>| + |<em>B</em>|. If <em>A</em> ⊆ <em>B</em>, then |<em>A</em>| ≤ |<em>B</em>|.</p>
<p>A finite set of <em>n</em> elements is sometimes called an <strong><em><span class="blue">n-set</span></em></strong>. A 1-set is called a <strong><em><span class="blue">singleton</span></em></strong>. A subset of <em>k</em> elements of a set is sometimes called a <strong><em><span class="blue">k-subset</span></em></strong>.</p>
<p>We denote the set of all subsets of a set <em>S</em>, including the empty set and <em>S</em> itself, by 2<sup><em>S</em></sup>, called the <strong><em><span class="blue">power set</span></em></strong> of <em>S</em>. For example, 2<sup>{<em>a</em>,<em>b</em>}</sup> = {Ø, {<em>a</em>}, {<em>b</em>}, {<em>a, b</em>}}. The power set of a finite set <em>S</em> has cardinality 2<sup>|<em>S</em>|</sup> (see Exercise B.1-5).</p>
<p>We sometimes care about setlike structures in which the elements are ordered. An <strong><em><span class="blue">ordered pair</span></em></strong> of two elements <em>a</em> and <em>b</em> is denoted (<em>a</em>, <em>b</em>) and is defined formally <a id="p1157"/>as the set (<em>a</em>, <em>b</em>) = {<em>a,</em> {<em>a, b</em>}}. Thus, the ordered pair (<em>a</em>, <em>b</em>) is <em>not</em> the same as the ordered pair (<em>b</em>, <em>a</em>).</p>
<p>The <strong><em><span class="blue">Cartesian product</span></em></strong> of two sets <em>A</em> and <em>B</em>, denoted <em>A</em> × <em>B</em>, is the set of all ordered pairs such that the first element of the pair is an element of <em>A</em> and the second is an element of <em>B</em>. More formally,</p>
<p class="eql"><em>A</em> × <em>B</em> = {(<em>a</em>, <em>b</em>) : <em>a</em> ∈ <em>A</em> and <em>b</em> ∈ <em>B</em>}.</p>
<p class="noindent">For example, {<em>a, b</em>}×{<em>a, b, c</em>} = {(<em>a</em>, <em>a</em>), (<em>a, b</em>), (<em>a, c</em>), (<em>b, a</em>), (<em>b, b</em>), (<em>b, c</em>)}. When <em>A</em> and <em>B</em> are finite sets, the cardinality of their Cartesian product is</p>
<p class="eqr"><img alt="art" src="images/Art_P1619.jpg"/></p>
<p>The Cartesian product of <em>n</em> sets <em>A</em><sub>1</sub>, <em>A</em><sub>2</sub>, … , <em>A<sub>n</sub></em> is the set of <strong><em><span class="blue">n-tuples</span></em></strong></p>
<p class="eql"><em>A</em><sub>1</sub> × <em>A</em><sub>2</sub> × … × <em>A<sub>n</sub></em> = {(<em>a</em><sub>1</sub>, <em>a</em><sub>2</sub>, … , <em>a<sub>n</sub></em>) : <em>a<sub>i</sub></em> ∈ <em>A<sub>i</sub></em> for <em>i</em> = 1, 2, … , <em>n</em>},</p>
<p class="noindent">whose cardinality is</p>
<p class="eql">|<em>A</em><sub>1</sub> × <em>A</em><sub>2</sub> × … × <em>A<sub>n</sub></em>| = |<em>A</em><sub>1</sub>| · |<em>A</em><sub>2</sub>| · |<em>A<sub>n</sub></em>|</p>
<p class="noindent">if all sets <em>A<sub>i</sub></em> are finite. We denote an <em>n</em>-fold Cartesian product over a single set <em>A</em> by the set</p>
<p class="eql"><img alt="art" src="images/Art_P1620.jpg"/></p>
<p class="noindent">whose cardinality is |<em>A<sup>n</sup></em>| = |<em>A</em>|<em><sup>n</sup></em> if <em>A</em> is finite. We can also view an <em>n</em>-tuple as a finite sequence of length <em>n</em> (see page 1162).</p>
<p>Intervals are continuous sets of real numbers. We denote them with parentheses and/or brackets. Given real numbers <em>a</em> and <em>b</em>, the <strong><em><span class="blue">closed interval</span></em></strong> [<em>a, b</em>] is the set {<em>x</em> ∈ <span class="font1">ℝ</span> : <em>a</em> ≤ <em>x</em> ≤ <em>b</em>} of reals between <em>a</em> and <em>b</em>, including both <em>a</em> and <em>b</em>. (If <em>a</em> &gt; <em>b</em>, this definition implies that [<em>a, b</em>] = Ø.) The <strong><em><span class="blue">open interval</span></em></strong> (<em>a</em>, <em>b</em>) = {<em>x</em> ∈ <span class="font1">ℝ</span> : <em>a</em> &lt; <em>x</em> &lt; <em>b</em>} omits both of the endpoints from the set. There are two <strong><em><span class="blue">half-open intervals</span></em></strong> [<em>a, b</em>) = {<em>x</em> ∈ <span class="font1">ℝ</span> : <em>a</em> ≤ <em>x</em> &lt; <em>b</em>} and (<em>a</em>, <em>b</em>] = {<em>x</em> ∈ <span class="font1">ℝ</span> : <em>a</em> &lt; <em>x</em> ≤ <em>b</em>}, each of which excludes one endpoint.</p>
<p>Intervals can also be defined on the integers by replacing <span class="font1">ℝ</span> in the these definitions by <span class="font1">ℤ</span>. Whether the interval is defined over the reals or integers can usually be inferred from context.</p>
<p class="exe"><strong>Exercises</strong></p>
<p class="level3"><strong><em>B.1-1</em></strong></p>
<p class="noindent">Draw Venn diagrams that illustrate the first of the distributive laws (B.1).</p>
<a id="p1158"/>
<p class="level3"><strong><em>B.1-2</em></strong></p>
<p class="noindent">Prove the generalization of DeMorgan’s laws to any finite collection of sets:</p>
<table class="table2b">
<tr>
<td class="td2"><span class="overline"><em>A</em><sub>1</sub> ∩ <em>A</em><sub>2</sub> ∩ … ∩ <em>A<sub>n</sub></em></span></td>
<td class="td2">=</td>
<td class="td2"><span class="overline"><em>A</em><sub>1</sub></span> ∪ <span class="overline"><em>A</em><sub>2</sub></span> ∪ … ∪ <span class="overline"><em>A<sub><em>n</em></sub></em></span>,</td>
</tr>
<tr>
<td class="td2"><span class="overline"><em>A</em><sub>1</sub> ∪ <em>A</em><sub>2</sub> ∪ … ∪ <em>A<sub>n</sub></em></span></td>
<td class="td2">=</td>
<td class="td2"><span class="overline"><em>A</em><sub>1</sub></span> ∩ <span class="overline"><em>A</em><sub>2</sub></span> ∩ … ∩ <span class="overline"><em>A<sub><em>n</em></sub>.</em></span></td>
</tr>
</table>
<p class="level3"><span class="font1">★</span> <strong><em>B.1-3</em></strong></p>
<p class="noindent">Prove the generalization of equation (B.3), which is called the <strong><em><span class="blue">principle of inclusion and exclusion</span></em></strong>:</p>
<table class="table2b">
<tr>
<td class="td2" colspan="3">|<em>A</em><sub>1</sub> ∪ <em>A</em><sub>2</sub> ∪ … ∪ <em>A<sub>n</sub></em>| =</td>
</tr>
<tr>
<td class="td2"/>
<td class="td2">|<em>A</em><sub>1</sub>| + |<em>A</em><sub>2</sub>| + … + |<em>A<sub>n</sub></em>|</td>
<td class="td2"/>
</tr>
<tr>
<td class="td2"/>
<td class="td2">− |<em>A</em><sub>1</sub> ∩ <em>A</em><sub>2</sub>| − |<em>A</em><sub>1</sub> ∩ <em>A</em><sub>3</sub>| − …</td>
<td class="td2">(all pairs)</td>
</tr>
<tr>
<td class="td2"/>
<td class="td2">+ |<em>A</em><sub>1</sub> ∩ <em>A</em><sub>2</sub> ∩ <em>A</em><sub>3</sub>| + …</td>
<td class="td2">(all triples)</td>
</tr>
<tr>
<td class="td2"/>
<td class="td2"><p class="center"><span class="font1">⋮</span></p></td>
<td class="td2"/>
</tr>
<tr>
<td class="td2"/>
<td class="td2">+ (−1)<sup><em>n</em>−1</sup> |<em>A</em><sub>1</sub> ∩ <em>A</em><sub>2</sub> ∩ … ∩ <em>A<sub>n</sub></em>|.</td>
<td class="td2"/>
</tr>
</table>
<p class="level3"><strong><em>B.1-4</em></strong></p>
<p class="noindent">Show that the set of odd natural numbers is countable.</p>
<p class="level3"><strong><em>B.1-5</em></strong></p>
<p class="noindent">Show that for any finite set <em>S</em>, the power set 2<sup><em>S</em></sup> has 2<sup>|<em>S</em>|</sup> elements (that is, there are 2<sup>|<em>S</em>|</sup> distinct subsets of <em>S</em>).</p>
<p class="level3"><strong><em>B.1-6</em></strong></p>
<p class="noindent">Give an inductive definition for an <em>n</em>-tuple by extending the set-theoretic definition for an ordered pair.</p>
</section>
<p class="line1"/>
<section title="B.2 Relations">
<a id="Sec_B.2"/>
<p class="level1" id="h1-219"><a href="toc.xhtml#Rh1-219"><strong>B.2 Relations</strong></a></p>
<p class="noindent">A <strong><em><span class="blue">binary relation</span></em></strong> <em>R</em> on two sets <em>A</em> and <em>B</em> is a subset of the Cartesian product <em>A</em>×<em>B</em>. If (<em>a</em>, <em>b</em>) ∈ <em>R</em>, we sometimes write <em>a R b</em>. When we say that <em>R</em> is a binary relation on a set <em>A</em>, we mean that <em>R</em> is a subset of <em>A</em> × <em>A</em>. For example, the “less than” relation on the natural numbers is the set {(<em>a</em>, <em>b</em>) : <em>a, b</em> ∈ <span class="font1">ℕ</span> and <em>a</em> &lt; <em>b</em>}. An <em>n</em>-ary relation on sets <em>A</em><sub>1</sub>, <em>A</em><sub>2</sub>, … , <em>A<sub>n</sub></em> is a subset of <em>A</em><sub>1</sub> × <em>A</em><sub>2</sub> × … × <em>A<sub>n</sub></em>.</p>
<p>A binary relation <em>R</em> ⊆ <em>A</em> × <em>A</em> is <strong><em><span class="blue">reflexive</span></em></strong> if</p>
<p class="eql"><em>a R a</em></p>
<a id="p1159"/>
<p class="noindent">for all <em>a</em> ∈ <em>A</em>. For example, “=” and “≤” are reflexive relations on <span class="font1">ℕ</span>, but “&lt;” is not. The relation <em>R</em> is <strong><em><span class="blue">symmetric</span></em></strong> if</p>
<p class="eql"><em>a R b</em> implies <em>b R a</em></p>
<p class="noindent">for all <em>a, b</em> ∈ <em>A</em>. For example, “=” is symmetric, but “&lt;” and “≤” are not. The relation <em>R</em> is <strong><em><span class="blue">transitive</span></em></strong> if</p>
<p class="eql"><em>a R b</em> and <em>b R c</em> imply <em>a R c</em></p>
<p class="noindent">for all <em>a, b, c</em> ∈ <em>A</em>. For example, the relations “&lt;,” “≤,” and “=” are transitive, but the relation <em>R</em> = {(<em>a</em>, <em>b</em>) : <em>a, b</em> ∈ <span class="font1">ℕ</span> and <em>a</em> = <em>b</em> − 1} is not, since 3 <em>R</em> 4 and 4 <em>R</em> 5 do not imply 3 <em>R</em> 5.</p>
<p>A relation that is reflexive, symmetric, and transitive is an <strong><em><span class="blue">equivalence relation</span></em></strong>. For example, “=” is an equivalence relation on the natural numbers, but “&lt;” is not. If <em>R</em> is an equivalence relation on a set <em>A</em>, then for <em>a</em> ∈ <em>A</em>, the <strong><em><span class="blue">equivalence class</span></em></strong> of <em>a</em> is the set [<em>a</em>] = {<em>b</em> ∈ <em>A</em> : <em>a R b</em>}, that is, the set of all elements equivalent to <em>a</em>. For example, if we define <em>R</em> = {(<em>a</em>, <em>b</em>) : <em>a, b</em> ∈ <span class="font1">ℕ</span> and <em>a</em> + <em>b</em> is an even number}, then <em>R</em> is an equivalence relation, since <em>a</em> + <em>a</em> is even (reflexive), <em>a</em> + <em>b</em> is even implies <em>b</em> + <em>a</em> is even (symmetric), and <em>a</em> + <em>b</em> is even and <em>b</em> + <em>c</em> is even imply <em>a</em> + <em>c</em> is even (transitive). The equivalence class of 4 is [4] = {0, 2, 4, 6,…}, and the equivalence class of 3 is [3] = {1, 3, 5, 7,…}. A basic theorem of equivalence classes is the following.</p>
<p class="theo"><strong><em>Theorem B.1 (An equivalence relation is the same as a partition)</em></strong></p>
<p class="noindent">The equivalence classes of any equivalence relation <em>R</em> on a set <em>A</em> form a partition of <em>A</em>, and any partition of <em>A</em> determines an equivalence relation on <em>A</em> for which the sets in the partition are the equivalence classes.</p>
<p class="prof"><strong><em>Proof</em></strong>   For the first part of the proof, we must show that the equivalence classes of <em>R</em> are nonempty, pairwise-disjoint sets whose union is <em>A</em>. Because <em>R</em> is reflexive, <em>a</em> ∈ [<em>a</em>], and so the equivalence classes are nonempty. Moreover, since every element <em>a</em> ∈ <em>A</em> belongs to the equivalence class [<em>a</em>], the union of the equivalence classes is <em>A</em>. It remains to show that the equivalence classes are pairwise disjoint, that is, if two equivalence classes [<em>a</em>] and [<em>b</em>] have an element <em>c</em> in common, then they are in fact the same set. Suppose that <em>a R c</em> and <em>b R c</em>. Symmetry gives that <em>c R b</em> and, by transitivity, <em>a R b</em>. Thus, we have <em>x R a</em> for any arbitrary element <em>x</em> ∈ [<em>a</em>] and, by transitivity, <em>x R b</em>, and thus [<em>a</em>] ⊆ [<em>b</em>]. Similarly, [<em>b</em>] ⊆ [<em>a</em>], and thus [<em>a</em>] = [<em>b</em>].</p>
<p>For the second part of the proof, let <span class="font">A</span> = {<em>A<sub>i</sub></em>} be a partition of <em>A</em>, and define <em>R</em> = {(<em>a</em>, <em>b</em>) : there exists <em>i</em> such that <em>a</em> ∈ <em>A<sub>i</sub></em> and <em>b</em> ∈ <em>A<sub>i</sub></em>}. We claim that <em>R</em> is an equivalence relation on <em>A</em>. Reflexivity holds, since <em>a</em> ∈ <em>A<sub>i</sub></em> implies <em>a R a</em>. Symmetry holds, because if <em>a R b</em>, then <em>a</em> and <em>b</em> belong to the same set <em>A<sub>i</sub></em>, and <a id="p1160"/>hence <em>b R a</em>. If <em>a R b</em> and <em>b R c</em>, then all three elements are in the same set <em>A<sub>i</sub></em>, and thus <em>a R c</em> and transitivity holds. To see that the sets in the partition are the equivalence classes of <em>R</em>, observe that if <em>a</em> ∈ <em>A<sub>i</sub></em>, then <em>x</em> ∈ [<em>a</em>] implies <em>x</em> ∈ <em>A<sub>i</sub></em>, and <em>x</em> ∈ <em>A<sub>i</sub></em> implies <em>x</em> ∈ [<em>a</em>].</p>
<p class="right"><span class="font1">▪</span></p>
<p class="space-break">A binary relation <em>R</em> on a set <em>A</em> is <strong><em><span class="blue">antisymmetric</span></em></strong> if</p>
<p class="eql"><em>a R b</em> and <em>b R a</em> imply <em>a</em> = <em>b</em>.</p>
<p class="noindent">For example, the “≤” relation on the natural numbers is antisymmetric, since <em>a</em> ≤ <em>b</em> and <em>b</em> ≤ <em>a</em> imply <em>a</em> = <em>b</em>. A relation that is reflexive, antisymmetric, and transitive is a <strong><em><span class="blue">partial order</span></em></strong>, and we call a set on which a partial order is defined a <strong><em><span class="blue">partially ordered set</span></em></strong>. For example, the relation “is a descendant of” is a partial order on the set of all people (if we view individuals as being their own descendants).</p>
<p>In a partially ordered set <em>A</em>, there may be no single “maximum” element <em>a</em> such that <em>b R a</em> for all <em>b</em> ∈ <em>A</em>. Instead, the set may contain several <strong><em><span class="blue">maximal</span></em></strong> elements <em>a</em> such that for no <em>b</em> ∈ <em>A</em>, where <em>b</em> ≠ <em>a</em>, is it the case that <em>a R b</em>. For example, a collection of different-sized boxes may contain several maximal boxes that don’t fit inside any other box, yet it has no single “maximum” box into which any other box will fit.<sup><a epub:type="footnote" href="#footnote_3" id="footnote_ref_3">3</a></sup></p>
<p>A relation <em>R</em> on a set <em>A</em> is a <strong><em><span class="blue">total relation</span></em></strong> if for all <em>a, b</em> ∈ <em>A</em>, we have <em>a R b</em> or <em>b R a</em> (or both), that is, if every pairing of elements of <em>A</em> is related by <em>R</em>. A partial order that is also a total relation is a <strong><em><span class="blue">total order</span></em></strong> or <strong><em><span class="blue">linear order</span></em></strong>. For example, the relation “≤” is a total order on the natural numbers, but the “is a descendant of” relation is not a total order on the set of all people, since there are individuals neither of whom is descended from the other. A total relation that is transitive, but not necessarily either symmetric or antisymmetric, is a <strong><em><span class="blue">total preorder</span></em></strong>.</p>
<p class="exe"><strong>Exercises</strong></p>
<p class="level3"><strong><em>B.2-1</em></strong></p>
<p class="noindent">Prove that the subset relation “⊆” on all subsets of <span class="font1">ℤ</span> is a partial order but not a total order.</p>
<p class="level3"><strong><em>B.2-2</em></strong></p>
<p class="noindent">Show that for any positive integer <em>n</em>, the relation “equivalent modulo <em>n</em>” is an equivalence relation on the integers. (We say that <em>a</em> = <em>b</em> (mod <em>n</em>) if there exists an integer <em>q</em> such that <em>a</em> − <em>b</em> = <em>qn</em>.) Into what equivalence classes does this relation partition the integers?</p>
<a id="p1161"/>
<p class="level3"><strong><em>B.2-3</em></strong></p>
<p class="noindent">Give examples of relations that are</p>
<p class="nl-1list-d"><strong><em>a.</em></strong> reflexive and symmetric but not transitive,</p>
<p class="nl-1list-d"><strong><em>b.</em></strong> reflexive and transitive but not symmetric,</p>
<p class="nl-1list-d"><strong><em>c.</em></strong> symmetric and transitive but not reflexive.</p>
<p class="level3"><strong><em>B.2-4</em></strong></p>
<p class="noindent">Let <em>S</em> be a finite set, and let <em>R</em> be an equivalence relation on <em>S</em> × <em>S</em>. Show that if in addition <em>R</em> is antisymmetric, then the equivalence classes of <em>S</em> with respect to <em>R</em> are singletons.</p>
<p class="level3"><strong><em>B.2-5</em></strong></p>
<p class="noindent">Professor Narcissus claims that if a relation <em>R</em> is symmetric and transitive, then it is also reflexive. He offers the following proof. By symmetry, <em>a R b</em> implies <em>b R a</em>. Transitivity, therefore, implies <em>a R a</em>. Is the professor correct?</p>
</section>
<p class="line1"/>
<section title="B.3 Functions">
<a id="Sec_B.3"/>
<p class="level1" id="h1-220"><a href="toc.xhtml#Rh1-220"><strong>B.3 Functions</strong></a></p>
<p class="noindent">Given two sets <em>A</em> and <em>B</em>, a <strong><em><span class="blue">function</span></em></strong> <em>f</em> is a binary relation on <em>A</em> and <em>B</em> such that for all <em>a</em> ∈ <em>A</em>, there exists precisely one <em>b</em> ∈ <em>B</em> such that (<em>a</em>, <em>b</em>) ∈ <em>f</em>. The set <em>A</em> is called the <strong><em><span class="blue">domain</span></em></strong> of <em>f</em>, and the set <em>B</em> is called the <strong><em><span class="blue">codomain</span></em></strong> of <em>f</em>. We sometimes write <em>f</em> : <em>A</em> → <em>B</em>, and if (<em>a</em>, <em>b</em>) ∈ <em>f</em>, we write <em>b</em> = <em>f</em> (<em>a</em>), since the choice of <em>a</em> uniquely determines <em>b</em>.</p>
<p>Intuitively, the function <em>f</em> assigns an element of <em>B</em> to each element of <em>A</em>. No element of <em>A</em> is assigned two different elements of <em>B</em>, but the same element of <em>B</em> can be assigned to two different elements of <em>A</em>. For example, the binary relation</p>
<p class="eql"><em>f</em> = {(<em>a</em>, <em>b</em>) : <em>a, b</em> ∈ <span class="font1">ℕ</span> and <em>b</em> = <em>a</em> mod 2}</p>
<p class="noindent">is a function <em>f</em> : → {0, 1}, since for each natural number <em>a</em>, there is exactly one value <em>b</em> in {0, 1} such that <em>b</em> = <em>a</em> mod 2. For this example, 0 = <em>f</em> (0), 1 = <em>f</em> (1), 0 = <em>f</em> (2), 1 = <em>f</em> (3), etc. In contrast, the binary relation</p>
<p class="eql"><em>g</em> = {(<em>a</em>, <em>b</em>) : <em>a, b</em> ∈ <span class="font1">ℕ</span> and <em>a</em> + <em>b</em> is even}</p>
<p class="noindent">is not a function, since (1, 3) and (1, 5) are both in <em>g</em>, and thus for the choice <em>a</em> = 1, there is not precisely one <em>b</em> such that (<em>a</em>, <em>b</em>) ∈ <em>g</em>.</p>
<p>Given a function <em>f</em> : <em>A</em> → <em>B</em>, if <em>b</em> = <em>f</em> (<em>a</em>), we say that <em>a</em> is the <strong><em><span class="blue">argument</span></em></strong> of <em>f</em> and that <em>b</em> is the <strong><em><span class="blue">value</span></em></strong> of <em>f</em> at <em>a</em>. We can define a function by stating its value for <a id="p1162"/>every element of its domain. For example, we might define <em>f</em> (<em>n</em>) = 2<em>n</em> for <em>n</em> ∈ <span class="font1">ℕ</span>, which means <em>f</em> = {(<em>n</em>, 2<em>n</em>) : <em>n</em> ∈ <span class="font1">ℕ</span>}. Two functions <em>f</em> and <em>g</em> are <strong><em><span class="blue">equal</span></em></strong> if they have the same domain and codomain and if <em>f</em> (<em>a</em>) = <em>g</em>(<em>a</em>) for all <em>a</em> in the domain.</p>
<p>A <strong><em><span class="blue">finite sequence</span></em></strong> of length <em>n</em> is a function <em>f</em> whose domain is the set of <em>n</em> integers {0, 1, … , <em>n</em> − 1}. We often denote a finite sequence by listing its values in angle brackets: <span class="font1">〈</span><em>f</em> (0), <em>f</em> (1), … , <em>f</em> (<em>n</em>−1)<span class="font1">〉</span>. An <strong><em><span class="blue">infinite sequence</span></em></strong> is a function whose domain is the set <span class="font1">ℕ</span> of natural numbers. For example, the Fibonacci sequence, defined by recurrence (3.31), is the infinite sequence <span class="font1">〈</span>0, 1, 1, 2, 3, 5, 8, 13, 21,…<span class="font1">〉</span>.</p>
<p>When the domain of a function <em>f</em> is a Cartesian product, we often omit the extra parentheses surrounding the argument of <em>f</em>. For example, if we have a function <em>f</em> : <em>A</em><sub>1</sub> × <em>A</em><sub>2</sub> × … <em>A</em><sub><em>n</em></sub> → <em>B</em>, we write <em>b</em> = <em>f</em> (<em>a</em><sub>1</sub>, <em>a</em><sub>2</sub>, … <em>a<sub>n</sub></em>) instead of writing <em>b</em> = <em>f</em> ((<em>a</em><sub>1</sub>, <em>a</em><sub>2</sub>, … <em>a<sub>n</sub></em>)). We also call each <em>a<sub>i</sub></em> an <strong><em><span class="blue">argument</span></em></strong> to the function <em>f</em>, though technically <em>f</em> has just a single argument, which is the <em>n</em>-tuple (<em>a</em><sub>1</sub>, <em>a</em><sub>2</sub>, … <em>a</em><sub><em>n</em></sub>).</p>
<p>If <em>f</em> : <em>A</em> → <em>B</em> is a function and <em>b</em> = <em>f</em> (<em>a</em>), then we sometimes say that <em>b</em> is the <strong><em><span class="blue">image</span></em></strong> of <em>a</em> under <em>f</em>. The image of a set <em>A</em>′ ⊆ <em>A</em> under <em>f</em> is defined by</p>
<p class="eql"><em>f</em> (<em>A</em>′) = {<em>b</em> ∈ <em>B</em> : <em>b</em> = <em>f</em> (<em>a</em>) for some <em>a</em> ∈ <em>A</em>′}.</p>
<p class="noindent">The <strong><em><span class="blue">range</span></em></strong> of <em>f</em> is the image of its domain, that is, <em>f</em> (<em>A</em>). For example, the range of the function <em>f</em> : <span class="font1">ℕ</span> → <span class="font1">ℕ</span> defined by <em>f</em> (<em>n</em>) = 2<em>n</em> is <em>f</em>(<span class="font1">ℕ</span>) = {<em>m</em> : <em>m</em> = 2<em>n</em> for some <em>n</em> ∈ <span class="font1">ℕ</span>}, in other words, the set of nonnegative even integers.</p>
<p>A function is a <strong><em><span class="blue">surjection</span></em></strong> if its range is its codomain. For example, the function <em>f</em> (<em>n</em>) = <span class="font1">⌊</span><em>n</em>/2<span class="font1">⌋</span> is a surjective function from <span class="font1">ℕ</span> to <span class="font1">ℕ</span>, since every element in <span class="font1">ℕ</span> appears as the value of <em>f</em> for some argument. In contrast, the function <em>f</em> (<em>n</em>) = 2<em>n</em> is not a surjective function from <span class="font1">ℕ</span> to <span class="font1">ℕ</span>, since no argument to <em>f</em> can produce any odd natural number as a value. The function <em>f</em> (<em>n</em>) = 2<em>n</em> is, however, a surjective function from the natural numbers to the even numbers. A surjection <em>f</em> : <em>A</em> → <em>B</em> is sometimes described as mapping <em>A <strong>onto</strong> B</em>. When we say that <em>f</em> is onto, we mean that it is surjective.</p>
<p>A function <em>f</em> : <em>A</em> → <em>B</em> is an <strong><em><span class="blue">injection</span></em></strong> if distinct arguments to <em>f</em> produce distinct values, that is, if <em>a</em> ≠ <em>a</em>′ implies <em>f</em> (<em>a</em>) ≠ <em>f</em> (<em>a</em>′). For example, the function <em>f</em> (<em>n</em>) = 2<em>n</em> is an injective function from <span class="font1">ℕ</span> to <span class="font1">ℕ</span>, since each even number <em>b</em> is the image under <em>f</em> of at most one element of the domain, namely <em>b</em>/2. The function <em>f</em> (<em>n</em>) = <span class="font1">⌊</span><em>n</em>/2<span class="font1">⌋</span> is not injective, since the value 1 is produced by two arguments: <em>f</em> (2) = 1 and <em>f</em> (3) = 1. An injection is sometimes called a <strong><em><span class="blue">one-to-one</span></em></strong> function.</p>
<p>A function <em>f</em> : <em>A</em> → <em>B</em> is a <strong><em><span class="blue">bijection</span></em></strong> if it is injective and surjective. For example, the function <em>f</em> (<em>n</em>) = (−1)<em><sup>n</sup></em><span class="font1">⌈</span><em>n</em>/2<span class="font1">⌉</span> is a bijection from <span class="font1">ℕ</span> to <span class="font1">ℤ</span>:</p>
<a id="p1163"/>
<table class="table2b">
<tr>
<td class="td2"><p class="noindent">0</p></td>
<td class="td2"><p class="center">→</p></td>
<td class="td2"><p class="right">0,</p></td>
</tr>
<tr>
<td class="td2"><p class="noindent">1</p></td>
<td class="td2"><p class="center">→</p></td>
<td class="td2"><p class="right">−1,</p></td>
</tr>
<tr>
<td class="td2"><p class="noindent">2</p></td>
<td class="td2"><p class="center">→</p></td>
<td class="td2"><p class="right">1,</p></td>
</tr>
<tr>
<td class="td2"><p class="noindent">3</p></td>
<td class="td2"><p class="center">→</p></td>
<td class="td2"><p class="right">−2,</p></td>
</tr>
<tr>
<td class="td2"><p class="noindent">4</p></td>
<td class="td2"><p class="center">→</p></td>
<td class="td2"><p class="right">2,</p></td>
</tr>
<tr>
<td class="td2"/>
<td class="td2"><p class="center"><span class="font1">⋮</span></p></td>
<td class="td2"/>
</tr>
</table>
<p class="noindent">The function is injective, since no element of <span class="font1">ℤ</span> is the image of more than one element of <span class="font1">ℕ</span>. It is surjective, since every element of <span class="font1">ℤ</span> appears as the image of some element of <span class="font1">ℕ</span>. Hence, the function is bijective. A bijection is sometimes called a <strong><em><span class="blue">one-to-one correspondence</span></em></strong>, since it pairs elements in the domain and codomain. A bijection from a set <em>A</em> to itself is sometimes called a <strong><em><span class="blue">permutation</span></em></strong>.</p>
<p>When a function <em>f</em> is bijective, we define its <strong><em><span class="blue">inverse</span></em></strong> <em>f</em><sup>−1</sup> as</p>
<p class="eql"><em>f</em> <sup>−1</sup>(<em>b</em>) = <em>a</em> if and only if <em>f</em> (<em>a</em>) = <em>b</em>.</p>
<p class="noindent">For example, the inverse of the function <em>f</em> (<em>n</em>) = (−1)<em><sup>n</sup></em><span class="font1">⌈</span><em>n</em>/2<span class="font1">⌉</span> is</p>
<p class="eql"><img alt="art" src="images/Art_P1621.jpg"/></p>
<p class="exe"><strong>Exercises</strong></p>
<p class="level3"><strong><em>B.3-1</em></strong></p>
<p class="noindent">Let <em>A</em> and <em>B</em> be finite sets, and let <em>f</em> : <em>A</em> → <em>B</em> be a function. Show the following:</p>
<p class="nl-1list-d"><strong><em>a.</em></strong> If <em>f</em> is injective, then |<em>A</em>| ≤ |<em>B</em>|.</p>
<p class="nl-1list-d"><strong><em>b.</em></strong> If <em>f</em> is surjective, then |<em>A</em>| ≥ |<em>B</em>|.</p>
<p class="level3"><strong><em>B.3-2</em></strong></p>
<p class="noindent">Is the function <em>f</em> (<em>x</em>) = <em>x</em> + 1 bijective when the domain and the codomain are the set <span class="font1">ℕ</span>? Is it bijective when the domain and the codomain are the set <span class="font1">ℤ</span>?</p>
<p class="level3"><strong><em>B.3-3</em></strong></p>
<p class="noindent">Give a natural definition for the inverse of a binary relation such that if a relation is in fact a bijective function, its relational inverse is its functional inverse.</p>
<p class="level3"><span class="font1">★</span> <strong><em>B.3-4</em></strong></p>
<p class="noindent">Give a bijection from <span class="font1">ℤ</span> to <span class="font1">ℤ</span> × <span class="font1">ℤ</span>.</p>
<a id="p1164"/>
</section>
<p class="line1"/>
<section title="B.4 Graphs">
<a id="Sec_B.4"/>
<p class="level1" id="h1-221"><a href="toc.xhtml#Rh1-221"><strong>B.4 Graphs</strong></a></p>
<p class="noindent">This section presents two kinds of graphs: directed and undirected. Certain definitions in the literature differ from those given here, but for the most part, the differences are slight. <a href="chapter020.xhtml#Sec_20.1">Section 20.1</a> shows how to represent graphs in computer memory.</p>
<p>A <strong><em><span class="blue">directed graph</span></em></strong> (or <strong><em><span class="blue">digraph</span></em></strong>) <em>G</em> is a pair (<em>V</em>, <em>E</em>), where <em>V</em> is a finite set and <em>E</em> is a binary relation on <em>V</em>. The set <em>V</em> is called the <strong><em><span class="blue">vertex set</span></em></strong> of <em>G</em>, and its elements are called <strong><em><span class="blue">vertices</span></em></strong> (singular: <strong><em><span class="blue">vertex</span></em></strong>). The set <em>E</em> is called the <strong><em><span class="blue">edge set</span></em></strong> of <em>G</em>, and its elements are called <strong><em><span class="blue">edges</span></em></strong>. <a href="#Fig_B-2">Figure B.2(a)</a> is a pictorial representation of a directed graph on the vertex set {1, 2, 3, 4, 5, 6}. Vertices are represented by circles in the figure, and edges are represented by arrows. <strong><em><span class="blue">Self-loops</span></em></strong>—edges from a vertex to itself—are possible.</p>
<p>In an <strong><em><span class="blue">undirected graph</span></em></strong> <em>G</em> = (<em>V</em>, <em>E</em>), the edge set <em>E</em> consists of <em>unordered</em> pairs of vertices, rather than ordered pairs. That is, an edge is a set {<em>u, v</em>}, where <em>u, v</em> ∈ <em>V</em> and <em>u</em> ≠ <em>v</em>. By convention, we use the notation (<em>u</em>, <em>v</em>) for an edge, rather than the set notation {<em>u, v</em>}, and we consider (<em>u</em>, <em>v</em>) and (<em>v</em>, <em>u</em>) to be the same edge. In an undirected graph, self-loops are forbidden, so that every edge consists of two distinct vertices. <a href="#Fig_B-2">Figure B.2(b)</a> shows an undirected graph on the vertex set {1, 2, 3, 4, 5, 6}.</p>
<div class="divimage">
<p class="fig-imga" id="Fig_B-2"><img alt="art" src="images/Art_P1622.jpg"/></p>
<p class="caption"><strong>Figure B.2</strong> Directed and undirected graphs. <strong>(a)</strong> A directed graph <em>G</em> = (<em>V</em>, <em>E</em>), where <em>V</em> = {1, 2, 3, 4, 5, 6} and <em>E</em> = {(1, 2), (2, 2), (2, 4), (2, 5), (4, 1), (4, 5), (5, 4), (6, 3)}. The edge (2, 2) is a self-loop. <strong>(b)</strong> An undirected graph <em>G</em> = (<em>V</em>, <em>E</em>), where <em>V</em> = {1, 2, 3, 4, 5, 6} and <em>E</em> = {(1, 2), (1, 5), (2, 5), (3, 6)}. The vertex 4 is isolated. <strong>(c)</strong> The subgraph of the graph in part (a) induced by the vertex set {1, 2, 3, 6}.</p>
</div>
<p>Many definitions for directed and undirected graphs are the same, although certain terms have slightly different meanings in the two contexts. If (<em>u</em>, <em>v</em>) is an edge in a directed graph <em>G</em> = (<em>V</em>, <em>E</em>), we say that (<em>u</em>, <em>v</em>) is <strong><em><span class="blue">incident from</span></em></strong> or <strong><em><span class="blue">leaves</span></em></strong> vertex <em>u</em> and is <strong><em><span class="blue">incident to</span></em></strong> or <strong><em><span class="blue">enters</span></em></strong> vertex <em>v</em>. For example, the edges leaving vertex 2 <a id="p1165"/>in <a href="#Fig_B-2">Figure B.2(a)</a> are (2, 2), (2, 4), and (2, 5). The edges entering vertex 2 are (1, 2) and (2, 2). If (<em>u</em>, <em>v</em>) is an edge in an undirected graph <em>G</em> = (<em>V</em>, <em>E</em>), we say that (<em>u</em>, <em>v</em>) is <strong><em><span class="blue">incident on</span></em></strong> vertices <em>u</em> and <em>v</em>. In <a href="#Fig_B-2">Figure B.2(b)</a>, the edges incident on vertex 2 are (1, 2) and (2, 5).</p>
<p>If (<em>u</em>, <em>v</em>) is an edge in a graph <em>G</em> = (<em>V</em>, <em>E</em>), we say that vertex <em>v</em> is <strong><em><span class="blue">adjacent</span></em></strong> to vertex <em>u</em>. When the graph is undirected, the adjacency relation is symmetric. When the graph is directed, the adjacency relation is not necessarily symmetric. If <em>v</em> is adjacent to <em>u</em> in a directed graph, we can write <em>u</em> → <em>v</em>. In parts (a) and (b) of <a href="#Fig_B-2">Figure B.2</a>, vertex 2 is adjacent to vertex 1, since the edge (1, 2) belongs to both graphs. Vertex 1 is <em>not</em> adjacent to vertex 2 in <a href="#Fig_B-2">Figure B.2(a)</a>, since the edge (2, 1) is absent.</p>
<p>The <strong><em><span class="blue">degree</span></em></strong> of a vertex in an undirected graph is the number of edges incident on it. For example, vertex 2 in <a href="#Fig_B-2">Figure B.2(b)</a> has degree 2. A vertex whose degree is 0, such as vertex 4 in <a href="#Fig_B-2">Figure B.2(b)</a>, is <strong><em><span class="blue">isolated</span></em></strong>. In a directed graph, the <strong><em><span class="blue">out-degree</span></em></strong> of a vertex is the number of edges leaving it, and the <strong><em><span class="blue">in-degree</span></em></strong> of a vertex is the number of edges entering it. The <strong><em><span class="blue">degree</span></em></strong> of a vertex in a directed graph is its in-degree plus its out-degree. Vertex 2 in <a href="#Fig_B-2">Figure B.2(a)</a> has in-degree 2, out-degree 3, and degree 5.</p>
<p>A <strong><em><span class="blue">path</span></em></strong> of <strong><em><span class="blue">length</span></em></strong> <em>k</em> from a vertex <em>u</em> to a vertex <em>u</em>′ in a graph <em>G</em> = (<em>V</em>, <em>E</em>) is a sequence <span class="font1">〈</span><em>v</em><sub>0</sub>, <em>v</em><sub>1</sub>, <em>v</em><sub>2</sub>, … , <em>v<sub>k</sub></em><span class="font1">〉</span> of vertices such that <em>u</em> = <em>v</em><sub>0</sub>, <em>u</em>′ = <em>v<sub>k</sub></em>, and (<em>v</em><sub><em>i</em>−1</sub>, <em>v<sub>i</sub></em>) ∈ <em>E</em> for <em>i</em> = 1, 2, … , <em>k</em>. The length of the path is the number of edges in the path, which is 1 less than the number of vertices in the path. The path <strong><em><span class="blue">contains</span></em></strong> the vertices <em>v</em><sub>0</sub>, <em>v</em><sub>1</sub>, … , <em>v<sub>k</sub></em> and the edges (<em>v</em><sub>0</sub>, <em>v</em><sub>1</sub>), (<em>v</em><sub>1</sub>, <em>v</em><sub>2</sub>), … , (<em>v</em><sub><em>k</em>−1</sub>, <em>v<sub>k</sub></em>). (There is always a 0-length path from <em>u</em> to <em>u</em>.) If there is a path <em>p</em> from <em>u</em> to <em>u</em>′, we say that <em>u</em>′ is <strong><em><span class="blue">reachable</span></em></strong> from <em>u</em> via <em>p</em>, which we can write as <img alt="art" src="images/Art_P1623.jpg"/>. A path is <strong><em><span class="blue">simple</span></em></strong><sup><a epub:type="footnote" href="#footnote_4" id="footnote_ref_4">4</a></sup> if all vertices in the path are distinct. In <a href="#Fig_B-2">Figure B.2(a)</a>, the path <span class="font1">〈</span>1, 2, 5, 4<span class="font1">〉</span> is a simple path of length 3. The path <span class="font1">〈</span>2, 5, 4, 5<span class="font1">〉</span> is not simple. A <strong><em><span class="blue">subpath</span></em></strong> of path <em>p</em> = <span class="font1">〈</span><em>v</em><sub>0</sub>, <em>v</em><sub>1</sub>, … , <em>v<sub>k</sub></em><span class="font1">〉</span> is a contiguous subsequence of its vertices. That is, for any 0 ≤ <em>i</em> ≤ <em>j</em> ≤ <em>k</em>, the subsequence of vertices <span class="font1">〈</span><em>v<sub>i</sub></em>, <em>v</em><sub><em>i</em>+1</sub>, … , <em>v<sub>j</sub></em><span class="font1">〉</span> is a subpath of <em>p</em>.</p>
<p>In a directed graph, a path <span class="font1">〈</span><em>v</em><sub>0</sub>, <em>v</em><sub>1</sub>, … , <em>v<sub>k</sub></em><span class="font1">〉</span> forms a <strong><em><span class="blue">cycle</span></em></strong> if <em>v</em><sub>0</sub> = <em>v<sub>k</sub></em> and the path contains at least one edge. The cycle is <strong><em><span class="blue">simple</span></em></strong> if, in addition, <em>v</em><sub>1</sub>, <em>v</em><sub>2</sub>, … , <em>v<sub>k</sub></em> are distinct. A cycle consisting of <em>k</em> vertices has <strong><em><span class="blue">length</span></em></strong> <em>k</em>. A self-loop is a cycle of length 1. Two paths <span class="font1">〈</span><em>v</em><sub>0</sub>, <em>v</em><sub>1</sub>, <em>v</em><sub>2</sub>, … , <em>v</em><sub><em>k</em>−1</sub>, <em>v</em><sub>0</sub><span class="font1">〉</span> and <img alt="art" src="images/Art_P1623a.jpg"/> form the same cycle if there exists an integer <em>j</em> such that <img alt="art" src="images/Art_P1623b.jpg"/> for <em>i</em> = 0, 1, … , <em>k</em>−1. In <a href="#Fig_B-2">Figure B.2(a)</a>, the path <span class="font1">〈</span>1,2,4,1<span class="font1">〉</span> forms the same cycle as the paths <span class="font1">〈</span>2, 4, 1, 2<span class="font1">〉</span> and <span class="font1">〈</span>4, 1, 2, 4<span class="font1">〉</span>. This cycle is simple, but the cycle <span class="font1">〈</span>1, 2, 4, 5, 4, 1<span class="font1">〉</span> is not. The cycle <span class="font1">〈</span>2, 2<span class="font1">〉</span> formed by the edge (2, 2) is a self-loop. A directed graph <a id="p1166"/>with no self-loops is <strong><em><span class="blue">simple</span></em></strong>. In an undirected graph, a path <span class="font1">〈</span><em>v</em><sub>0</sub>, <em>v</em><sub>1</sub>, …, <em>v</em><sub><em>k</em></sub><span class="font1">〉</span> forms a <strong><em><span class="blue">cycle</span></em></strong> if <em>k</em> &gt; 0, <em>v</em><sub>0</sub> = <em>v<sub>k</sub></em>, and all edges on the path are distinct. The cycle is <strong><em><span class="blue">simple</span></em></strong> if <em>v</em><sub>1</sub>, <em>v</em><sub>2</sub>, … , <em>v<sub>k</sub></em> are distinct. For example, in <a href="#Fig_B-2">Figure B.2(b)</a>, the path <span class="font1">〈</span>1, 2, 5, 1<span class="font1">〉</span> is a simple cycle. A graph with no simple cycles is <strong><em><span class="blue">acyclic</span></em></strong>.</p>
<p>An undirected graph is <strong><em><span class="blue">connected</span></em></strong> if every vertex is reachable from all other vertices. The <strong><em><span class="blue">connected components</span></em></strong> of an undirected graph are the equivalence classes of vertices under the “is reachable from” relation. The graph shown in <a href="#Fig_B-2">Figure B.2(b)</a> has three connected components: {1, 2, 5}, {3, 6}, and {4}. Every vertex in the connected component {1, 2, 5} is reachable from every other vertex in {1, 2, 5}. An undirected graph is connected if it has exactly one connected component. The edges of a connected component are those that are incident on only the vertices of the component. In other words, edge (<em>u</em>, <em>v</em>) is an edge of a connected component only if both <em>u</em> and <em>v</em> are vertices of the component.</p>
<p>A directed graph is <strong><em><span class="blue">strongly connected</span></em></strong> if every two vertices are reachable from each other. The <strong><em><span class="blue">strongly connected components</span></em></strong> of a directed graph are the equivalence classes of vertices under the “are mutually reachable” relation. A directed graph is strongly connected if it has only one strongly connected component. The graph in <a href="#Fig_B-2">Figure B.2(a)</a> has three strongly connected components: {1, 2, 4, 5}, {3}, and {6}. All pairs of vertices in {1, 2, 4, 5} are mutually reachable. The vertices {3, 6} do not form a strongly connected component, since vertex 6 cannot be reached from vertex 3.</p>
<p>Two graphs <em>G</em> = (<em>V</em>, <em>E</em>) and <em>G</em>′ = (<em>V</em>′, <em>E</em>′) are <strong><em><span class="blue">isomorphic</span></em></strong> if there exists a bijection <em>f</em> : <em>V</em> → <em>V</em>′ such that (<em>u</em>, <em>v</em>) ∈ <em>E</em> if and only if (<em>f</em> (<em>u</em>), <em>f</em> (<em>v</em>)) ∈ <em>E</em>′. In other words, <em>G</em> and <em>G</em>′ are isomorphic if the vertices of <em>G</em> can be relabeled to be vertices of <em>G</em>′, maintaining the corresponding edges in <em>G</em> and <em>G</em>′. <a href="#Fig_B-3">Figure B.3(a)</a> shows a pair of isomorphic graphs <em>G</em> and <em>G</em>′ with respective vertex sets <em>V</em> = {1, 2, 3, 4, 5, 6} and <em>V</em>′ = {<em>u, v, w, x, y, z</em>}. The mapping from <em>V</em> to <em>V</em>′ given by <em>f</em> (1) = <em>u, f</em> (2) = <em>v, f</em> (3) = <em>w, f</em> (4) = <em>x, f</em> (5) = <em>y, f</em> (6) = <em>z</em> provides the required bijective function. The graphs in <a href="#Fig_B-3">Figure B.3(b)</a> are not isomorphic. Although both graphs have 5 vertices and 7 edges, the top graph has a vertex of degree 4 and the bottom graph does not.</p>
<p>We say that a graph <em>G</em>′ = (<em>V</em>′, <em>E</em>′) is a <strong><em><span class="blue">subgraph</span></em></strong> of <em>G</em> = (<em>V</em>, <em>E</em>) if <em>V</em>′ ⊆ <em>V</em> and <em>E</em>′ ⊆ <em>E</em>. Given a set <em>V</em>′ ⊆ <em>V</em>, the subgraph of <em>G <strong>induced</strong></em> by <em>V</em>′ is the graph <em>G</em>′ = (<em>V</em>′, <em>E</em>′), where</p>
<p class="eql"><em>E</em>′ = {(<em>u</em>, <em>v</em>) ∈ <em>E</em> : <em>u, v</em> ∈ <em>V</em>′}.</p>
<p class="noindent">The subgraph induced by the vertex set {1, 2, 3, 6} in <a href="#Fig_B-2">Figure B.2(a)</a> appears in <a href="#Fig_B-2">Figure B.2(c)</a> and has the edge set {(1, 2), (2, 2), (6, 3)}.</p>
<p>Given an undirected graph <em>G</em> = (<em>V</em>, <em>E</em>), the <strong><em><span class="blue">directed version</span></em></strong> of <em>G</em> is the directed graph <em>G</em>′ = (<em>V</em>, <em>E</em>′), where (<em>u</em>, <em>v</em>) ∈ <em>E</em>′ if and only if (<em>u</em>, <em>v</em>) ∈ <em>E</em>. That is, each undirected edge (<em>u</em>, <em>v</em>) in <em>G</em> turns into two directed edges, (<em>u</em>, <em>v</em>) and (<em>v</em>, <em>u</em>), in the <a id="p1167"/>directed version. Given a directed graph <em>G</em> = (<em>V</em>, <em>E</em>), the <strong><em><span class="blue">undirected version</span></em></strong> of <em>G</em> is the undirected graph <em>G</em>′ = (<em>V</em>, <em>E</em>′), where (<em>u</em>, <em>v</em>) ∈ <em>E</em>′ if and only if <em>u</em> ≠ <em>v</em> and <em>E</em> contains at least one of the edges (<em>u</em>, <em>v</em>) and (<em>v</em>, <em>u</em>). That is, the undirected version contains the edges of <em>G</em> “with their directions removed” and with self-loops eliminated. (Since (<em>u</em>, <em>v</em>) and (<em>v</em>, <em>u</em>) are the same edge in an undirected graph, the undirected version of a directed graph contains it only once, even if the directed graph contains both edges (<em>u</em>, <em>v</em>) and (<em>v</em>, <em>u</em>).) In a directed graph <em>G</em> = (<em>V</em>, <em>E</em>), a <strong><em><span class="blue">neighbor</span></em></strong> of a vertex <em>u</em> is any vertex that is adjacent to <em>u</em> in the undirected version of <em>G</em>. That is, <em>v</em> is a neighbor of <em>u</em> if <em>u</em> ≠ <em>v</em> and either (<em>u</em>, <em>v</em>) ∈ <em>E</em> or (<em>v</em>, <em>u</em>) ∈ <em>E</em>. In an undirected graph, <em>u</em> and <em>v</em> are neighbors if they are adjacent.</p>
<div class="divimage">
<p class="fig-imga" id="Fig_B-3"><img alt="art" src="images/Art_P1624.jpg"/></p>
<p class="caption"><strong>Figure B.3 (a)</strong> A pair of isomorphic graphs. The vertices of the top graph are mapped to the vertices of the bottom graph by <em>f</em> (1) = <em>u, f</em> (2) = <em>v, f</em> (3) = <em>w, f</em> (4) = <em>x, f</em> (5) = <em>y, f</em> (6) = <em>z</em>. <strong>(b)</strong> Two graphs that are not isomorphic. The top graph has a vertex of degree 4, and the bottom graph does not.</p>
</div>
<p>Several kinds of graphs have special names. A <strong><em><span class="blue">complete graph</span></em></strong> is an undirected graph in which every pair of vertices is adjacent. An undirected graph <em>G</em> = (<em>V</em>, <em>E</em>) is <strong><em><span class="blue">bipartite</span></em></strong> if <em>V</em> can be partitioned into two sets <em>V</em><sub>1</sub> and <em>V</em><sub>2</sub> such that (<em>u</em>, <em>v</em>) ∈ <em>E</em> implies either <em>u</em> ∈ <em>V</em><sub>1</sub> and <em>v</em> ∈ <em>V</em><sub>2</sub> or <em>u</em> ∈ <em>V</em><sub>2</sub> and <em>v</em> ∈ <em>V</em><sub>1</sub>. That is, all edges go between the two sets <em>V</em><sub>1</sub> and <em>V</em><sub>2</sub>. An acyclic, undirected graph is a <strong><em><span class="blue">forest</span></em></strong>, and a connected, acyclic, undirected graph is a <strong><em><span class="blue">(free) tree</span></em></strong> (see <a href="appendix002.xhtml#Sec_B.5">Section B.5</a>). We often take the first letters of “directed acyclic graph” and call such a graph a <strong><em><span class="blue">dag</span></em></strong>.</p>
<p>There are two variants of graphs that you may occasionally encounter. A <strong><em><span class="blue">multigraph</span></em></strong> is like an undirected graph, but it can have both multiple edges between vertices (such as two distinct edges (<em>u</em>, <em>v</em>) and (<em>u</em>, <em>v</em>)) and self-loops. A <strong><em><span class="blue">hypergraph</span></em></strong> is like an undirected graph, but each <strong><em><span class="blue">hyperedge</span></em></strong>, rather than connecting two vertices, <a id="p1168"/>connects an arbitrary subset of vertices. Many algorithms written for ordinary directed and undirected graphs can be adapted to run on these graphlike structures.</p>
<p>The <strong><em><span class="blue">contraction</span></em></strong> of an undirected graph <em>G</em> = (<em>V</em>, <em>E</em>) by an edge <em>e</em> = (<em>u</em>, <em>v</em>) is a graph <em>G</em>′ = (<em>V</em>′, <em>E</em>′), where <em>V</em>′ = <em>V</em> − {<em>u, v</em>} ∪ {<em>x</em>} and <em>x</em> is a new vertex. The set of edges <em>E</em>′ is formed from <em>E</em> by deleting the edge (<em>u</em>, <em>v</em>) and, for each vertex <em>w</em> adjacent to <em>u</em> or <em>v</em>, deleting whichever of (<em>u</em>, <em>w</em>) and (<em>v</em>, <em>w</em>) belongs to <em>E</em> and adding the new edge (<em>x</em>, <em>w</em>). In effect, <em>u</em> and <em>v</em> are “contracted” into a single vertex.</p>
<p class="exe"><strong>Exercises</strong></p>
<p class="level3"><strong><em>B.4-1</em></strong></p>
<p class="noindent">Attendees of a faculty party shake hands to greet each other, with every pair of professors shaking hands one time. Each professor remembers the number of times he or she shook hands. At the end of the party, the department head asks the professors for their totals and adds them all up. Show that the result is even by proving the <strong><em><span class="blue">handshaking lemma</span></em></strong>: if <em>G</em> = (<em>V</em>, <em>E</em>) is an undirected graph, then</p>
<p class="eql"><img alt="art" src="images/Art_P1625.jpg"/></p>
<p class="level3"><strong><em>B.4-2</em></strong></p>
<p class="noindent">Show that if a directed or undirected graph contains a path between two vertices <em>u</em> and <em>v</em>, then it contains a simple path between <em>u</em> and <em>v</em>. Show that if a directed graph contains a cycle, then it contains a simple cycle.</p>
<p class="level3"><strong><em>B.4-3</em></strong></p>
<p class="noindent">Show that any connected, undirected graph <em>G</em> = (<em>V</em>, <em>E</em>) satisfies |<em>E</em>| ≥ |<em>V</em> | − 1.</p>
<p class="level3"><strong><em>B.4-4</em></strong></p>
<p class="noindent">Verify that in an undirected graph, the “is reachable from” relation is an equivalence relation on the vertices of the graph. Which of the three properties of an equivalence relation hold in general for the “is reachable from” relation on the vertices of a directed graph?</p>
<p class="level3"><strong><em>B.4-5</em></strong></p>
<p class="noindent">What is the undirected version of the directed graph in <a href="#Fig_B-2">Figure B.2(a)</a>? What is the directed version of the undirected graph in <a href="#Fig_B-2">Figure B.2(b)</a>?</p>
<p class="level3"><strong><em>B.4-6</em></strong></p>
<p class="noindent">Show how a bipartite graph can represent a hypergraph by letting incidence in the hypergraph correspond to adjacency in the bipartite graph. (<em>Hint:</em> Let one set of <a id="p1169"/>vertices in the bipartite graph correspond to vertices of the hypergraph, and let the other set of vertices of the bipartite graph correspond to hyperedges.)</p>
</section>
<p class="line1"/>
<section title="B.5 Trees">
<a id="Sec_B.5"/>
<p class="level1" id="h1-222"><a href="toc.xhtml#Rh1-222"><strong>B.5 Trees</strong></a></p>
<p class="noindent">As with graphs, there are many related, but slightly different, notions of trees. This section presents definitions and mathematical properties of several kinds of trees. <a href="chapter010.xhtml#Sec_10.3">Sections 10.3</a> and <a href="chapter020.xhtml#Sec_20.1">20.1</a> describe how to represent trees in computer memory.</p>
<section title="B.5.1 Free trees">
<p class="level2" id="Sec_B.5.1"><strong>B.5.1 Free trees</strong></p>
<p class="noindent">As defined in <a href="appendix002.xhtml#Sec_B.4">Section B.4</a>, a <strong><em><span class="blue">free tree</span></em></strong> is a connected, acyclic, undirected graph. We often omit the adjective “free” when we say that a graph is a tree. If an undirected graph is acyclic but possibly disconnected, it is a <strong><em><span class="blue">forest</span></em></strong>. Many algorithms that work for trees also work for forests. <a href="#Fig_B-4">Figure B.4(a)</a> shows a free tree, and <a href="#Fig_B-4">Figure B.4(b)</a> shows a forest. The forest in <a href="#Fig_B-4">Figure B.4(b)</a> is not a tree because it is not connected. The graph in <a href="#Fig_B-4">Figure B.4(c)</a> is connected but neither a tree nor a forest, because it contains a cycle.</p>
<p>The following theorem captures many important facts about free trees.</p>
<p class="theo"><strong><em>Theorem B.2 (Properties of free trees)</em></strong></p>
<div class="divimage">
<p class="fig-imga" id="Fig_B-4"><img alt="art" src="images/Art_P1626.jpg"/></p>
<p class="caption"><strong>Figure B.4 (a)</strong> A free tree. <strong>(b)</strong> A forest. <strong>(c)</strong> A graph that contains a cycle and is therefore neither a tree nor a forest.</p>
</div>
<p class="noindent">Let <em>G</em> = (<em>V</em>, <em>E</em>) be an undirected graph. The following statements are equivalent.</p>
<ol class="olnoindent" epub:type="list">
<li><em>G</em> is a free tree.</li>
<li class="litop">Any two vertices in <em>G</em> are connected by a unique simple path.</li>
<li class="litop"><em>G</em> is connected, but if any edge is removed from <em>E</em>, the resulting graph is disconnected.<a id="p1170"/></li>
<li class="litop"><em>G</em> is connected, and |<em>E</em>| = |<em>V</em> | − 1.</li>
<li class="litop"><em>G</em> is acyclic, and |<em>E</em>| = |<em>V</em> | − 1.</li>
<li class="litop"><em>G</em> is acyclic, but if any edge is added to <em>E</em>, the resulting graph contains a cycle.</li></ol>
<div class="divimage">
<p class="fig-imga" id="Fig_B-5"><img alt="art" src="images/Art_P1627.jpg"/></p>
<p class="caption"><strong>Figure B.5</strong> A step in the proof of Theorem B.2: if (1) <em>G</em> is a free tree, then (2) any two vertices in <em>G</em> are connected by a unique simple path. Assume for the sake of contradiction that vertices <em>u</em> and <em>v</em> are connected by two distinct simple paths. These paths first diverge at vertex <em>w</em>, and they first reconverge at vertex <em>z</em>. The path <em>p</em>′ concatenated with the reverse of the path <em>p</em>″ forms a cycle, which yields the contradiction.</p>
</div>
<p class="prof"><strong><em>Proof</em></strong>   (1) ⇒ (2): Since a tree is connected, any two vertices in <em>G</em> are connected by at least one simple path. Suppose for the sake of contradiction that vertices <em>u</em> and <em>v</em> are connected by two distinct simple paths as shown in <a href="#Fig_B-5">Figure B.5</a>. Let <em>w</em> be the vertex at which the paths first diverge. That is, if we call the paths <em>p</em><sub>1</sub> and <em>p</em><sub>2</sub>, then <em>w</em> is the first vertex on both <em>p</em><sub>1</sub> and <em>p</em><sub>2</sub> whose successor on <em>p</em><sub>1</sub> is <em>x</em> and whose successor on <em>p</em><sub>2</sub> is <em>y</em>, where <em>x</em> ≠ <em>y</em>. Let <em>z</em> be the first vertex at which the paths reconverge, that is, <em>z</em> is the first vertex following <em>w</em> on <em>p</em><sub>1</sub> that is also on <em>p</em><sub>2</sub>. Let <em>p</em>′ = <em>w</em> → <em>x</em> <span class="font1">⇝</span> <em>z</em> be the subpath of <em>p</em><sub>1</sub> from <em>w</em> through <em>x</em> to <em>z</em>, so that <img alt="art" src="images/Art_P1628.jpg"/>, and let <em>p</em>″ = <em>w</em> → <em>y</em> <span class="font1">⇝</span> <em>z</em> be the subpath of <em>p</em><sub>2</sub> from <em>w</em> through <em>y</em> to <em>z</em>, so that <img alt="art" src="images/Art_P1630.jpg"/>. Paths <em>p</em>′ and <em>p</em>″ share no vertices except their endpoints. Then, as <a href="#Fig_B-5">Figure B.5</a> shows, the path obtained by concatenating <em>p</em>′ and the reverse of <em>p</em>″ is a cycle, which contradicts our assumption that <em>G</em> is a tree. Thus, if <em>G</em> is a tree, there can be at most one simple path between two vertices.</p>
<p>(2) ⇒ (3): If any two vertices in <em>G</em> are connected by a unique simple path, then <em>G</em> is connected. Let (<em>u</em>, <em>v</em>) be any edge in <em>E</em>. This edge is a path from <em>u</em> to <em>v</em>, and so it must be the unique path from <em>u</em> to <em>v</em>. If (<em>u</em>, <em>v</em>) were to be removed from <em>G</em>, there would be no path from <em>u</em> to <em>v</em>, and <em>G</em> would be disconnected.</p>
<p>(3) ⇒ (4): By assumption, the graph <em>G</em> is connected, so Exercise B.4-3 gives that |<em>E</em>| ≥ |<em>V</em>| − 1. We prove |<em>E</em>| ≤ |<em>V</em>| − 1 by induction on |<em>V</em>|. The base cases are when |<em>V</em>| = 1 or |<em>V</em>| = 2, and in either case, |<em>E</em>| = |<em>V</em>| − 1. For the inductive step, suppose that |<em>V</em>| ≥ 3 for graph <em>G</em> and that any graph <em>G</em>′ = (<em>V</em>′, <em>E</em>′), where <a id="p1171"/>|<em>V</em>′| &lt; |<em>V</em>|, that satisfies (3) also satisfies |<em>E</em>′| ≤ |<em>V</em>′| − 1. Removing an arbitrary edge from <em>G</em> separates the graph into <em>k</em> ≥ 2 connected components (actually <em>k</em> = 2). Each component satisfies (3), or else <em>G</em> would not satisfy (3). Consider each connected component <em>V<sub>i</sub></em>, with edge set <em>E<sub>i</sub></em>, as a separate free tree. Then, because each connected component has fewer than |<em>V</em>| vertices, the inductive hypothesis implies that |<em>E<sub>i</sub></em>| ≤ |<em>V<sub>i</sub></em>| − 1. Thus, the number of edges in all <em>k</em> connected components combined is at most |<em>V</em>| − <em>k</em> ≤ |<em>V</em>| − 2. Adding in the removed edge yields |<em>E</em>| ≤ |<em>V</em>| − 1.</p>
<p>(4) ⇒ (5): Suppose that <em>G</em> is connected and that |<em>E</em>| = |<em>V</em>| − 1. We must show that <em>G</em> is acyclic. Suppose that <em>G</em> has a cycle containing <em>k</em> vertices <em>v</em><sub>1</sub>, <em>v</em><sub>2</sub>, … , <em>v<sub>k</sub></em>, and without loss of generality assume that this cycle is simple. Let <em>G<sub>k</sub></em> = (<em>V<sub>k</sub>, E<sub>k</sub></em>) be the subgraph of <em>G</em> consisting of the cycle, so that |<em>V<sub>k</sub></em>| = |<em>E<sub>k</sub></em>| = <em>k</em>. If <em>k</em> &lt; |<em>V</em>|, then because <em>G</em> is connected, there must be a vertex <em>v</em><sub><em>k</em>+1</sub>∈ <em>V</em> − <em>V<sub>k</sub></em> that is adjacent to some vertex <em>v<sub>i</sub></em> ∈ <em>V<sub>k</sub></em>. Define <em>G</em><sub><em>k</em>+1</sub> = (<em>V</em><sub><em>k</em>+1</sub>, <em>E</em><sub><em>k</em>+1</sub>) to be the subgraph of <em>G</em> with <em>V</em><sub><em>k</em>+1</sub> = <em>V<sub>k</sub></em> ∪ {<em>v</em><sub><em>k</em>+1</sub>} and <em>E</em><sub><em>k</em>+1</sub> = <em>E<sub>k</sub></em> ∪ {(<em>v</em><sub><em>i</em></sub>, <em>v</em><sub><em>k</em>+1</sub>)}. Note that |<em>V</em><sub><em>k</em>+1</sub>| = |<em>E</em><sub><em>k</em>+1</sub>| = <em>k</em> + 1. If <em>k</em> + 1 &lt; |<em>V</em>|, then continue, defining <em>G</em><sub><em>k</em>+2</sub> in the same manner, and so forth, until we obtain <em>G<sub>n</sub></em> = (<em>V<sub>n</sub>, E<sub>n</sub></em>), where <em>n</em> = |<em>V</em>|, <em>V<sub>n</sub></em> = <em>V</em>, and |<em>E<sub>n</sub></em>| = |<em>V<sub>n</sub></em>| = |<em>V</em>|. Since <em>G<sub>n</sub></em> is a subgraph of <em>G</em>, we have <em>E<sub>n</sub></em> ⊆ <em>E</em>, and hence |<em>E</em>| ≥ |<em>E<sub>n</sub></em>| = |<em>V<sub>n</sub></em>| = |<em>V</em>|, which contradicts the assumption that |<em>E</em>| = |<em>V</em>| − 1. Thus, <em>G</em> is acyclic.</p>
<p>(5) ⇒ (6): Suppose that <em>G</em> is acyclic and that |<em>E</em>| = |<em>V</em>| − 1. Let <em>k</em> be the number of connected components of <em>G</em>. Each connected component is a free tree by definition, and since (1) implies (5), the sum of all edges in all connected components of <em>G</em> is |<em>V</em>| − <em>k</em>. Consequently, <em>k</em> must equal 1, and <em>G</em> is in fact a tree. Since (1) implies (2), any two vertices in <em>G</em> are connected by a unique simple path. Thus, adding any edge to <em>G</em> creates a cycle.</p>
<p>(6) ⇒ (1): Suppose that <em>G</em> is acyclic but that adding any edge to <em>E</em> creates a cycle. We must show that <em>G</em> is connected. Let <em>u</em> and <em>v</em> be arbitrary vertices in <em>G</em>. If <em>u</em> and <em>v</em> are not already adjacent, adding the edge (<em>u</em>, <em>v</em>) creates a cycle in which all edges but (<em>u</em>, <em>v</em>) belong to <em>G</em>. Thus, the cycle minus edge (<em>u</em>, <em>v</em>) must contain a path from <em>u</em> to <em>v</em>, and since <em>u</em> and <em>v</em> were chosen arbitrarily, <em>G</em> is connected.</p>
<p class="right"><span class="font1">▪</span></p>
</section>
<section title="B.5.2 Rooted and ordered trees">
<p class="level2" id="Sec_B.5.2"><strong>B.5.2 Rooted and ordered trees</strong></p>
<p class="noindent">A <strong><em><span class="blue">rooted tree</span></em></strong> is a free tree in which one of the vertices is distinguished from the others. We call the distinguished vertex the <strong><em><span class="blue">root</span></em></strong> of the tree. We often refer to a <a id="p1172"/>vertex of a rooted tree as a <strong><em><span class="blue">node</span></em></strong><sup><a epub:type="footnote" href="#footnote_5" id="footnote_ref_5">5</a></sup> of the tree. <a href="#Fig_B-6">Figure B.6(a)</a> shows a rooted tree on a set of 12 nodes with root 7.</p>
<div class="divimage">
<p class="fig-imga" id="Fig_B-6"><img alt="art" src="images/Art_P1631.jpg"/></p>
<p class="caption"><strong>Figure B.6</strong> Rooted and ordered trees. <strong>(a)</strong> A rooted tree with height 4. The tree is drawn in a standard way: the root (node 7) is at the top, its children (nodes with depth 1) are beneath it, their children (nodes with depth 2) are beneath them, and so forth. If the tree is ordered, the relative left-to-right order of the children of a node matters; otherwise, it doesn’t. <strong>(b)</strong> Another rooted tree. As a rooted tree, it is identical to the tree in (a), but as an ordered tree it is different, since the children of node 3 appear in a different order.</p>
</div>
<p>Consider a node <em>x</em> in a rooted tree <em>T</em> with root <em>r</em>. We call any node <em>y</em> on the unique simple path from <em>r</em> to <em>x</em> an <strong><em><span class="blue">ancestor</span></em></strong> of <em>x</em>. If <em>y</em> is an ancestor of <em>x</em>, then <em>x</em> is a <strong><em><span class="blue">descendant</span></em></strong> of <em>y</em>. (Every node is both an ancestor and a descendant of itself.) If <em>y</em> is an ancestor of <em>x</em> and <em>x</em> ≠ <em>y</em>, then <em>y</em> is a <strong><em><span class="blue">proper ancestor</span></em></strong> of <em>x</em> and <em>x</em> is a <strong><em><span class="blue">proper descendant</span></em></strong> of <em>y</em>. The <strong><em><span class="blue">subtree rooted at x</span></em></strong> is the tree induced by descendants of <em>x</em>, rooted at <em>x</em>. For example, the subtree rooted at node 8 in <a href="#Fig_B-6">Figure B.6(a)</a> contains nodes 8, 6, 5, and 9.</p>
<p>If the last edge on the simple path from the root <em>r</em> of a tree <em>T</em> to a node <em>x</em> is (<em>y</em>, <em>x</em>), then <em>y</em> is the <strong><em><span class="blue">parent</span></em></strong> of <em>x</em>, and <em>x</em> is a <strong><em><span class="blue">child</span></em></strong> of <em>y</em>. The root is the only node in <em>T</em> with no parent. If two nodes have the same parent, they are <strong><em><span class="blue">siblings</span></em></strong>. A node with no children is a <strong><em><span class="blue">leaf</span></em></strong> or <strong><em><span class="blue">external node</span></em></strong>. A nonleaf node is an <strong><em><span class="blue">internal node</span></em></strong>.</p>
<a id="p1173"/>
<p>The number of children of a node <em>x</em> in a rooted tree <em>T</em> is the <strong><em><span class="blue">degree</span></em></strong> of <em>x</em>.<sup><a epub:type="footnote" href="#footnote_6" id="footnote_ref_6">6</a></sup> The length of the simple path from the root <em>r</em> to a node <em>x</em> is the <strong><em><span class="blue">depth</span></em></strong> of <em>x</em> in <em>T</em>. A <strong><em><span class="blue">level</span></em></strong> of a tree consists of all nodes at the same depth. The <strong><em><span class="blue">height</span></em></strong> of a node in a tree is the number of edges on the longest simple downward path from the node to a leaf, and the height of a tree is the height of its root. The height of a tree is also equal to the largest depth of any node in the tree.</p>
<p>An <strong><em><span class="blue">ordered tree</span></em></strong> is a rooted tree in which the children of each node are ordered. That is, if a node has <em>k</em> children, then there is a first child, a second child, and so on, up to and including a <em>k</em>th child. The two trees in <a href="#Fig_B-6">Figure B.6</a> are different when considered to be ordered trees, but the same when considered to be just rooted trees.</p>
</section>
<section title="B.5.3 Binary and positional trees">
<p class="level2" id="Sec_B.5.3"><strong>B.5.3 Binary and positional trees</strong></p>
<p class="noindent">We define binary trees recursively. A <strong><em><span class="blue">binary tree</span></em></strong> <em>T</em> is a structure defined on a finite set of nodes that either</p>
<ul class="ulnoindent" epub:type="list">
<li>contains no nodes, or</li>
<li class="litop">is composed of three disjoint sets of nodes: a <strong><em><span class="blue">root</span></em></strong> node, a binary tree called its <strong><em><span class="blue">left subtree</span></em></strong>, and a binary tree called its <strong><em><span class="blue">right subtree</span></em></strong>.</li></ul>
<p class="noindent">The binary tree that contains no nodes is called the <strong><em><span class="blue">empty tree</span></em></strong> or <strong><em><span class="blue">null tree</span></em></strong>, sometimes denoted NIL. If the left subtree is nonempty, its root is called the <strong><em><span class="blue">left child</span></em></strong> of the root of the entire tree. Likewise, the root of a nonnull right subtree is the <strong><em><span class="blue">right child</span></em></strong> of the root of the entire tree. If a subtree is the null tree NIL, we say that the child is <strong><em><span class="blue">absent</span></em></strong> or <strong><em><span class="blue">missing</span></em></strong>. <a href="#Fig_B-7">Figure B.7(a)</a> shows a binary tree.</p>
<p>A binary tree is not simply an ordered tree in which each node has degree at most 2. For example, in a binary tree, if a node has just one child, the position of the child—whether it is the <strong><em><span class="blue">left child</span></em></strong> or the <strong><em><span class="blue">right child</span></em></strong>—matters. In an ordered tree, there is no distinguishing a sole child as being either left or right. <a href="#Fig_B-7">Figure B.7(b)</a> shows a binary tree that differs from the tree in <a href="#Fig_B-7">Figure B.7(a)</a> because of the position of one node. Considered as ordered trees, however, the two trees are identical.</p>
<p>One way to represent the positioning information in a binary tree is by the internal nodes of an ordered tree, as shown in <a href="#Fig_B-7">Figure B.7(c)</a>. The idea is to replace each missing child in the binary tree with a node having no children. These leaf nodes <a id="p1174"/>are drawn as squares in the figure. The tree that results is a <strong><em><span class="blue">full binary tree</span></em></strong>: each node is either a leaf or has degree exactly 2. No nodes have degree 1. Consequently, the order of the children of a node preserves the position information.</p>
<div class="divimage">
<p class="fig-imga" id="Fig_B-7"><img alt="art" src="images/Art_P1632.jpg"/></p>
<p class="caption"><strong>Figure B.7</strong> Binary trees. <strong>(a)</strong> A binary tree drawn in a standard way. The left child of a node is drawn beneath the node and to the left. The right child is drawn beneath and to the right. <strong>(b)</strong> A binary tree different from the one in (a). In (a), the left child of node 7 is 5 and the right child is absent. In (b), the left child of node 7 is absent and the right child is 5. As ordered trees, these trees are the same, but as binary trees, they are distinct. <strong>(c)</strong> The binary tree in (a) represented by the internal nodes of a full binary tree: an ordered tree in which each internal node has degree 2. The leaves in the tree are shown as squares.</p>
</div>
<p>The positioning information that distinguishes binary trees from ordered trees extends to trees with more than two children per node. In a <strong><em><span class="blue">positional tree</span></em></strong>, the children of a node are labeled with distinct positive integers. The <em>i</em>th child of a node is <strong><em><span class="blue">absent</span></em></strong> if no child is labeled with integer <em>i</em>. A <strong><em><span class="blue">k-ary</span></em></strong> tree is a positional tree in which for every node, all children with labels greater than <em>k</em> are missing. Thus, a binary tree is a <em>k</em>-ary tree with <em>k</em> = 2.</p>
<p>A <strong><em><span class="blue">complete k-ary tree</span></em></strong> is a <em>k</em>-ary tree in which all leaves have the same depth and all internal nodes have degree <em>k</em>. <a href="#Fig_B-8">Figure B.8</a> shows a complete binary tree of height 3. How many leaves does a complete <em>k</em>-ary tree of height <em>h</em> have? The root has <em>k</em> children at depth 1, each of which has <em>k</em> children at depth 2, etc. Thus, the number of nodes at depth <em>d</em> is <em>k<sup>d</sup></em>. In a complete <em>k</em>-ary tree with height <em>h</em>, the leaves are at depth <em>h</em>, so that there are <em>k<sup>h</sup></em> leaves. Consequently, the height of a complete <em>k</em>-ary tree with <em>n</em> leaves is log<sub><em>k</em></sub><em>n</em>. A complete <em>k</em>-ary tree of height <em>h</em> has</p>
<p class="eql"><img alt="art" src="images/Art_P1633.jpg"/></p>
<p class="noindent">internal nodes. Thus, a complete binary tree has 2<sup><em>h</em></sup> − 1 internal nodes.</p>
<a id="p1175"/>
<div class="divimage">
<p class="fig-imga" id="Fig_B-8"><img alt="art" src="images/Art_P1634.jpg"/></p>
<p class="caption"><strong>Figure B.8</strong> A complete binary tree of height 3 with 8 leaves and 7 internal nodes.</p>
</div>
<p class="exe"><strong>Exercises</strong></p>
<p class="level3"><strong><em>B.5-1</em></strong></p>
<p class="noindent">Draw all the free trees composed of the three vertices <em>x</em>, <em>y</em>, and <em>z</em>. Draw all the rooted trees with nodes <em>x</em>, <em>y</em>, and <em>z</em> with <em>x</em> as the root. Draw all the ordered trees with nodes <em>x</em>, <em>y</em>, and <em>z</em> with <em>x</em> as the root. Draw all the binary trees with nodes <em>x</em>, <em>y</em>, and <em>z</em> with <em>x</em> as the root.</p>
<p class="level3"><strong><em>B.5-2</em></strong></p>
<p class="noindent">Let <em>G</em> = (<em>V</em>, <em>E</em>) be a directed acyclic graph in which there is a vertex <em>v</em><sub>0</sub> ∈ <em>V</em> such that there exists a unique path from <em>v</em><sub>0</sub> to every vertex <em>v</em> ∈ <em>V</em>. Prove that the undirected version of <em>G</em> forms a tree.</p>
<p class="level3"><strong><em>B.5-3</em></strong></p>
<p class="noindent">Show by induction that the number of degree-2 nodes in any nonempty binary tree is one less than the number of leaves. Conclude that the number of internal nodes in a full binary tree is one less than the number of leaves.</p>
<p class="level3"><strong><em>B.5-4</em></strong></p>
<p class="noindent">Prove that for any integer <em>k</em> ≥ 1, there is a full binary tree with <em>k</em> leaves.</p>
<p class="level3"><strong><em>B.5-5</em></strong></p>
<p class="noindent">Use induction to show that a nonempty binary tree with <em>n</em> nodes has height at least <span class="font1">⌊</span>lg <em>n</em><span class="font1">⌋</span>.</p>
<p class="level3"><span class="font1">★</span> <strong><em>B.5-6</em></strong></p>
<p class="noindent">The <strong><em><span class="blue">internal path length</span></em></strong> of a full binary tree is the sum, taken over all internal nodes of the tree, of the depth of each node. Likewise, the <strong><em><span class="blue">external path length</span></em></strong> is the sum, taken over all leaves of the tree, of the depth of each leaf. Consider a full binary tree with <em>n</em> internal nodes, internal path length <em>i</em>, and external path length <em>e</em>. Prove that <em>e</em> = <em>i</em> + 2<em>n</em>.</p>
<a id="p1176"/>
<p class="level3"><span class="font1">★</span> <strong><em>B.5-7</em></strong></p>
<p class="noindent">Associate a “weight” <em>w</em>(<em>x</em>) = 2<sup>−<em>d</em></sup> with each leaf <em>x</em> of depth <em>d</em> in a binary tree <em>T</em>, and let <em>L</em> be the set of leaves of <em>T</em>. Prove the <strong><em><span class="blue">Kraft inequality</span></em></strong>: Σ<sub><em>x</em>∈<em>L</em></sub> <em>w</em>(<em>x</em>) ≤ 1.</p>
<p class="level3"><span class="font1">★</span> <strong><em>B.5-8</em></strong></p>
<p class="noindent">Show that if <em>L</em> ≥ 2, then every binary tree with <em>L</em> leaves contains a subtree having between <em>L</em>/3 and 2<em>L</em>/3 leaves, inclusive.</p>
</section>
</section>
<p class="line1"/>
<section title="Problems">
<p class="level1" id="h1-223"><strong>Problems</strong></p>
<section title="B-1 Graph coloring">
<p class="level2"><strong><em>B-1 Graph coloring</em></strong></p>
<p class="noindent">A <strong><em><span class="blue">k-coloring</span></em></strong> of undirected graph <em>G</em> = (<em>V</em>, <em>E</em>) is a function <em>c</em> : <em>V</em> → {1, 2, … , <em>k</em>} such that <em>c</em>(<em>u</em>) ≠ <em>c</em>(<em>v</em>) for every edge (<em>u</em>, <em>v</em>) ∈ <em>E</em>. In other words, the numbers 1, 2, … , <em>k</em> represent the <em>k</em> colors, and adjacent vertices must have different colors.</p>
<p class="nl-1list-d"><strong><em>a.</em></strong> Show that any tree is 2-colorable.</p>
<p class="nl-1list-d"><strong><em>b.</em></strong> Show that the following are equivalent:</p>
<ol class="olnoindent-d" epub:type="list">
<li><em>G</em> is bipartite.</li>
<li class="litop"><em>G</em> is 2-colorable.</li>
<li class="litop"><em>G</em> has no cycles of odd length.</li></ol>
<p class="nl-1list-d"><strong><em>c.</em></strong> Let <em>d</em> be the maximum degree of any vertex in a graph <em>G</em>. Prove that <em>G</em> can be colored with <em>d</em> + 1 colors.</p>
<p class="nl-1list-d"><strong><em>d.</em></strong> Show that if <em>G</em> has <em>O</em>(|<em>V</em>|) edges, then <em>G</em> can be colored with <img alt="art" src="images/Art_P1635.jpg"/> colors.</p>
</section>
<section title="B-2 Friendly graphs">
<p class="level2"><strong><em>B-2 Friendly graphs</em></strong></p>
<p class="noindent">Reword each of the following statements as a theorem about undirected graphs, and then prove it. Assume that friendship is symmetric but not reflexive.</p>
<p class="nl-1list-d"><strong><em>a.</em></strong> Any group of at least two people contains at least two people with the same number of friends in the group.</p>
<p class="nl-1list-d"><strong><em>b.</em></strong> Every group of six people contains either at least three mutual friends or at least three mutual strangers.</p>
<p class="nl-1list-d"><strong><em>c.</em></strong> Any group of people can be partitioned into two subgroups such that at least half the friends of each person belong to the subgroup of which that person is <em>not</em> a member.</p>
<a id="p1177"/>
<p class="nl-1list-d"><strong><em>d.</em></strong> If everyone in a group is the friend of at least half the people in the group, then the group can be seated around a table in such a way that everyone is seated between two friends.</p>
</section>
<section title="B-3 Bisecting trees">
<p class="level2"><strong><em>B-3 Bisecting trees</em></strong></p>
<p class="noindent">Many divide-and-conquer algorithms that operate on graphs require that the graph be bisected into two nearly equal-sized subgraphs, which are induced by a partition of the vertices. This problem investigates bisections of trees formed by removing a small number of edges. We require that whenever two vertices end up in the same subtree after removing edges, then they must belong to the same partition.</p>
<p class="nl-1list-d"><strong><em>a.</em></strong> Show that the vertices of any <em>n</em>-vertex binary tree can be partitioned into two sets <em>A</em> and <em>B</em>, such that |<em>A</em>| ≤ 3<em>n</em>/4 and |<em>B</em>| ≤ 3<em>n</em>/4, by removing a single edge.</p>
<p class="nl-1list-d"><strong><em>b.</em></strong> Show that the constant 3/4 in part (a) is optimal in the worst case by giving an example of a simple binary tree whose most evenly balanced partition upon removal of a single edge has |<em>A</em>| = 3<em>n</em>/4.</p>
<p class="nl-1list-d"><strong><em>c.</em></strong> Show that by removing at most <em>O</em>(lg <em>n</em>) edges, we can partition the vertices of any <em>n</em>-vertex binary tree into two sets <em>A</em> and <em>B</em> such that |<em>A</em>| = <span class="font1">⌊</span><em>n</em>/2<span class="font1">⌋</span> and |<em>B</em>| = <span class="font1">⌈</span><em>n</em>/2<span class="font1">⌉</span>.</p>
</section>
</section>
<p class="line1"/>
<section title="Appendix notes">
<p class="level1" id="h1-224"><strong>Appendix notes</strong></p>
<p class="noindent">G. Boole pioneered the development of symbolic logic, and he introduced many of the basic set notations in a book published in 1854. Modern set theory was created by G. Cantor during the period 1874–1895. Cantor focused primarily on sets of infinite cardinality. The term “function” is attributed to G. W. Leibniz, who used it to refer to several kinds of mathematical formulas. His limited definition has been generalized many times. Graph theory originated in 1736, when L. Euler proved that it was impossible to cross each of the seven bridges in the city of Königsberg exactly once and return to the starting point.</p>
<p>The book by Harary [<a epub:type="noteref" href="bibliography001.xhtml#endnote_208">208</a>] provides a useful compendium of many definitions and results from graph theory.</p>
<p class="footnote" id="footnote_1"><a href="#footnote_ref_1"><sup>1</sup></a> A variation of a set, which can contain the same object more than once, is called a <strong><em><span class="blue">multiset</span></em></strong>.</p>
<p class="footnote1" id="footnote_2"><a href="#footnote_ref_2"><sup>2</sup></a> Some authors start the natural numbers with 1 instead of 0. The modern trend seems to be to start with 0.</p>
<p class="footnote1" id="footnote_3"><a href="#footnote_ref_3"><sup>3</sup></a> To be precise, in order for the “fit inside” relation to be a partial order, we need to view a box as fitting inside itself.</p>
<p class="footnote1" id="footnote_4"><a href="#footnote_ref_4"><sup>4</sup></a> Some authors refer to what we call a path as a “walk” and to what we call a simple path as just a “path.”</p>
<p class="footnote1" id="footnote_5"><a href="#footnote_ref_5"><sup>5</sup></a> The term “node” is often used in the graph theory literature as a synonym for “vertex.” We reserve the term “node” to mean a vertex of a rooted tree.</p>
<p class="footnote1" id="footnote_6"><a href="#footnote_ref_6"><sup>6</sup></a> The degree of a node depends on whether we consider <em>T</em> to be a rooted tree or a free tree. The degree of a vertex in a free tree is, as in any undirected graph, the number of adjacent vertices. In a rooted tree, however, the degree is the number of children—the parent of a node does not count toward its degree.</p>
</section>
</section>
</div>
</body>
</html>