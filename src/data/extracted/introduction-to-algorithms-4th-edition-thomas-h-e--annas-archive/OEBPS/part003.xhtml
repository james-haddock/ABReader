<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/>
<title>Introduction to Algorithms</title>
<link href="css/stylesheet.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:4a9ccac5-f2db-4081-af1f-a5a376b433e1" name="Adept.expected.resource"/>
</head>
<body>
<div class="body"><a id="p248"/>
<p class="line-p"/>
<section epub:type="bodymatter part" title="Part III Data Structures">
<p class="part-title"><a href="toc.xhtml#part-3"><strong><em><span class="blue1">Part III    Data Structures</span></em></strong></a></p>
<a id="p249"/>
<p class="cp"/>
<p class="noindent1-top1"> </p>
<p class="noindent1-top1"> </p>
<section title="Introduction">
<p class="level1a" id="h1-56"><a href="toc.xhtml#Rh1-56"><strong>Introduction</strong></a></p>
<p class="noindent">Sets are as fundamental to computer science as they are to mathematics. Whereas mathematical sets are unchanging, the sets manipulated by algorithms can grow, shrink, or otherwise change over time. We call such sets <strong><em><span class="blue1">dynamic</span></em></strong>. The next four chapters present some basic techniques for representing finite dynamic sets and manipulating them on a computer.</p>
<p>Algorithms may require several types of operations to be performed on sets. For example, many algorithms need only the ability to insert elements into, delete elements from, and test membership in a set. We call a dynamic set that supports these operations a <strong><em><span class="blue1">dictionary</span></em></strong>. Other algorithms require more complicated operations. For example, min-priority queues, which <a href="chapter006.xhtml">Chapter 6</a> introduced in the context of the heap data structure, support the operations of inserting an element into and extracting the smallest element from a set. The best way to implement a dynamic set depends upon the operations that you need to support.</p>
<section title="Elements of a dynamic set">
<p class="level4"><strong>Elements of a dynamic set</strong></p>
<p class="noindent">In a typical implementation of a dynamic set, each element is represented by an object whose attributes can be examined and manipulated given a pointer to the object. Some kinds of dynamic sets assume that one of the object’s attributes is an identifying <strong><em><span class="blue1">key</span></em></strong>. If the keys are all different, we can think of the dynamic set as being a set of key values. The object may contain <strong><em><span class="blue1">satellite data</span></em></strong>, which are carried around in other object attributes but are otherwise unused by the set implementation. It may also have attributes that are manipulated by the set operations. These attributes may contain data or pointers to other objects in the set.</p>
<p>Some dynamic sets presuppose that the keys are drawn from a totally ordered set, such as the real numbers, or the set of all words under the usual alphabetic <a id="p250"/>ordering. A total ordering allows us to define the minimum element of the set, for example, or to speak of the next element larger than a given element in a set.</p>
</section>
<section title="Operations on dynamic sets">
<p class="level4"><strong>Operations on dynamic sets</strong></p>
<p class="noindent">Operations on a dynamic set can be grouped into two categories: <strong><em><span class="blue1">queries</span></em></strong>, which simply return information about the set, and <strong><em><span class="blue1">modifying operations</span></em></strong>, which change the set. Here is a list of typical operations. Any specific application will usually require only a few of these to be implemented.</p>
<p class="noindent1-top">S<small>EARCH</small>(<em>S</em>, <em>k</em>)</p>
<div class="pull-quoteb">
<p class="pq-noindent">A query that, given a set <em>S</em> and a key value <em>k</em>, returns a pointer <em>x</em> to an element in <em>S</em> such that <em>x.key</em> = <em>k</em>, or <small>NIL</small> if no such element belongs to <em>S</em>.</p>
</div>
<p class="noindent">I<small>NSERT</small>(<em>S</em>, <em>x</em>)</p>
<div class="pull-quoteb">
<p class="pq-noindent">A modifying operation that adds the element pointed to by <em>x</em> to the set <em>S</em>. We usually assume that any attributes in element <em>x</em> needed by the set implementation have already been initialized.</p>
</div>
<p class="noindent">D<small>ELETE</small>(<em>S</em>, <em>x</em>)</p>
<div class="pull-quoteb">
<p class="pq-noindent">A modifying operation that, given a pointer <em>x</em> to an element in the set <em>S</em>, removes <em>x</em> from <em>S</em>. (Note that this operation takes a pointer to an element <em>x</em>, not a key value.)</p>
</div>
<p class="noindent">M<small>INIMUM</small>(<em>S</em>) and M<small>AXIMUM</small>(<em>S</em>)</p>
<div class="pull-quoteb">
<p class="pq-noindent">Queries on a totally ordered set <em>S</em> that return a pointer to the element of <em>S</em> with the smallest (for M<small>INIMUM</small>) or largest (for M<small>AXIMUM</small>) key.</p>
</div>
<p class="noindent">S<small>UCCESSOR</small>(<em>S</em>, <em>x</em>)</p>
<div class="pull-quoteb">
<p class="pq-noindent">A query that, given an element <em>x</em> whose key is from a totally ordered set <em>S</em>, returns a pointer to the next larger element in <em>S</em>, or <small>NIL</small> if <em>x</em> is the maximum element.</p>
</div>
<p class="noindent">P<small>REDECESSOR</small>(<em>S</em>, <em>x</em>)</p>
<div class="pull-quoteb">
<p class="pq-noindent">A query that, given an element <em>x</em> whose key is from a totally ordered set <em>S</em>, returns a pointer to the next smaller element in <em>S</em>, or <small>NIL</small> if <em>x</em> is the minimum element.</p>
</div>
<p class="noindent">In some situations, we can extend the queries S<small>UCCESSOR</small> and P<small>REDECESSOR</small> so that they apply to sets with nondistinct keys. For a set on <em>n</em> keys, the normal presumption is that a call to M<small>INIMUM</small> followed by <em>n</em> – 1 calls to S<small>UCCESSOR</small> enumerates the elements in the set in sorted order.</p>
<p>We usually measure the time taken to execute a set operation in terms of the size of the set. For example, <a href="chapter013.xhtml">Chapter 13</a> describes a data structure that can support any of the operations listed above on a set of size <em>n</em> in <em>O</em>(lg <em>n</em>) time.</p>
<a id="p251"/>
<p>Of course, you can always choose to implement a dynamic set with an array. The advantage of doing so is that the algorithms for the dynamic-set operations are simple. The downside, however, is that many of these operations have a worst-case running time of Θ(<em>n</em>). If the array is not sorted, I<small>NSERT</small> and D<small>ELETE</small> can take Θ(1) time, but the remaining operations take Θ(<em>n</em>) time. If instead the array is maintained in sorted order, then M<small>INIMUM</small>, M<small>AXIMUM</small>, S<small>UCCESSOR</small>, and P<small>REDECESSOR</small> take Θ(1) time; S<small>EARCH</small> takes <em>O</em>(lg <em>n</em>) time if implemented with binary search; but I<small>NSERT</small> and D<small>ELETE</small> take Θ(<em>n</em>) time in the worst case. The data structures studied in this part improve on the array implementation for many of the dynamic-set operations.</p>
</section>
<section title="Overview of Part III">
<p class="level4"><strong>Overview of Part III</strong></p>
<p class="noindent"><a href="chapter010.xhtml">Chapters 10</a>–<a href="chapter013.xhtml">13</a> describe several data structures that we can use to implement dynamic sets. We’ll use many of these data structures later to construct efficient algorithms for a variety of problems. We already saw another important data structure—the heap—in <a href="chapter006.xhtml">Chapter 6</a>.</p>
<p><a href="chapter010.xhtml">Chapter 10</a> presents the essentials of working with simple data structures such as arrays, matrices, stacks, queues, linked lists, and rooted trees. If you have taken an introductory programming course, then much of this material should be familiar to you.</p>
<p><a href="chapter011.xhtml">Chapter 11</a> introduces hash tables, a widely used data structure supporting the dictionary operations I<small>NSERT</small>, D<small>ELETE</small>, and S<small>EARCH</small>. In the worst case, hash tables require Θ(<em>n</em>) time to perform a S<small>EARCH</small> operation, but the expected time for hash-table operations is <em>O</em>(1). We rely on probability to analyze hash-table operations, but you can understand how the operations work even without probability.</p>
<p>Binary search trees, which are covered in <a href="chapter012.xhtml">Chapter 12</a>, support all the dynamic-set operations listed above. In the worst case, each operation takes Θ(<em>n</em>) time on a tree with <em>n</em> elements. Binary search trees serve as the basis for many other data structures.</p>
<p><a href="chapter013.xhtml">Chapter 13</a> introduces red-black trees, which are a variant of binary search trees. Unlike ordinary binary search trees, red-black trees are guaranteed to perform well: operations take <em>O</em>(lg <em>n</em>) time in the worst case. A red-black tree is a balanced search tree. <a href="chapter018.xhtml">Chapter 18</a> in <a href="part005.xhtml">Part V</a> presents another kind of balanced search tree, called a B-tree. Although the mechanics of red-black trees are somewhat intricate, you can glean most of their properties from the chapter without studying the mechanics in detail. Nevertheless, you probably will find walking through the code to be instructive.</p>
</section>
</section>
</section>
</div>
</body>
</html>