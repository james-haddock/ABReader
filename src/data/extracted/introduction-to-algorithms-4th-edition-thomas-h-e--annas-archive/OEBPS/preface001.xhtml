<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/>
<title>Introduction to Algorithms</title>
<link href="css/stylesheet.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:4a9ccac5-f2db-4081-af1f-a5a376b433e1" name="Adept.expected.resource"/>
</head>
<body>
<div class="body"><a id="pxiii"/>
<section epub:type="frontmatter" title="Preface">
<p class="front-title"><a href="toc.xhtml#pref-1"><span class="blue1">Preface</span></a></p>
<p class="noindent">Not so long ago, anyone who had heard the word “algorithm” was almost certainly a computer scientist or mathematician. With computers having become prevalent in our modern lives, however, the term is no longer esoteric. If you look around your home, you’ll find algorithms running in the most mundane places: your microwave oven, your washing machine, and, of course, your computer. You ask algorithms to make recommendations to you: what music you might like or what route to take when driving. Our society, for better or for worse, asks algorithms to suggest sentences for convicted criminals. You even rely on algorithms to keep you alive, or at least not to kill you: the control systems in your car or in medical equipment.<sup><a epub:type="footnote" href="#footnote_1" id="footnote_ref_1">1</a></sup> The word “algorithm” appears somewhere in the news seemingly every day.</p>
<p>Therefore, it behooves you to understand algorithms not just as a student or practitioner of computer science, but as a citizen of the world. Once you understand algorithms, you can educate others about what algorithms are, how they operate, and what their limitations are.</p>
<p>This book provides a comprehensive introduction to the modern study of computer algorithms. It presents many algorithms and covers them in considerable depth, yet makes their design accessible to all levels of readers. All the analyses are laid out, some simple, some more involved. We have tried to keep explanations clear without sacrificing depth of coverage or mathematical rigor.</p>
<p>Each chapter presents an algorithm, a design technique, an application area, or a related topic. Algorithms are described in English and in a pseudocode designed to be readable by anyone who has done a little programming. The book contains 231 figures—many with multiple parts—illustrating how the algorithms work. Since we emphasize <em>efficiency</em> as a design criterion, we include careful analyses of the running times of the algorithms.</p>
<a id="pxiv"/>
<p>The text is intended primarily for use in undergraduate or graduate courses in algorithms or data structures. Because it discusses engineering issues in algorithm design, as well as mathematical aspects, it is equally well suited for self-study by technical professionals.</p>
<p>In this, the fourth edition, we have once again updated the entire book. The changes cover a broad spectrum, including new chapters and sections, color illustrations, and what we hope you’ll find to be a more engaging writing style.</p>
<section title="To the teacher">
<p class="level4"><strong>To the teacher</strong></p>
<p class="noindent">We have designed this book to be both versatile and complete. You should find it useful for a variety of courses, from an undergraduate course in data structures up through a graduate course in algorithms. Because we have provided considerably more material than can fit in a typical one-term course, you can select the material that best supports the course you wish to teach.</p>
<p>You should find it easy to organize your course around just the chapters you need. We have made chapters relatively self-contained, so that you need not worry about an unexpected and unnecessary dependence of one chapter on another. Whereas in an undergraduate course, you might use only some sections from a chapter, in a graduate course, you might cover the entire chapter.</p>
<p>We have included 931 exercises and 162 problems. Each section ends with exercises, and each chapter ends with problems. The exercises are generally short questions that test basic mastery of the material. Some are simple self-check thought exercises, but many are substantial and suitable as assigned homework. The problems include more elaborate case studies which often introduce new material. They often consist of several parts that lead the student through the steps required to arrive at a solution.</p>
<p>As with the third edition of this book, we have made publicly available solutions to some, but by no means all, of the problems and exercises. You can find these solutions on our website, <a href="http://mitpress.mit.edu/algorithms/">http://mitpress.mit.edu/algorithms/</a>. You will want to check this site to see whether it contains the solution to an exercise or problem that you plan to assign. Since the set of solutions that we post might grow over time, we recommend that you check the site each time you teach the course.</p>
<p>We have starred (<span class="font1">★</span>) the sections and exercises that are more suitable for graduate students than for undergraduates. A starred section is not necessarily more difficult than an unstarred one, but it may require an understanding of more advanced mathematics. Likewise, starred exercises may require an advanced background or more than average creativity.</p>
<a id="pxv"/>
</section>
<section title="To the student">
<p class="level4"><strong>To the student</strong></p>
<p class="noindent">We hope that this textbook provides you with an enjoyable introduction to the field of algorithms. We have attempted to make every algorithm accessible and interesting. To help you when you encounter unfamiliar or difficult algorithms, we describe each one in a step-by-step manner. We also provide careful explanations of the mathematics needed to understand the analysis of the algorithms and supporting figures to help you visualize what is going on.</p>
<p>Since this book is large, your class will probably cover only a portion of its material. Although we hope that you will find this book helpful to you as a course textbook now, we have also tried to make it comprehensive enough to warrant space on your future professional bookshelf.</p>
<p>What are the prerequisites for reading this book?</p>
<ul class="ulnoindent" epub:type="list">
<li>You need some programming experience. In particular, you should understand recursive procedures and simple data structures, such as arrays and linked lists (although <a href="chapter010.xhtml#Sec_10.2">Section 10.2</a> covers linked lists and a variant that you may find new).</li>
<li class="litop">You should have some facility with mathematical proofs, and especially proofs by mathematical induction. A few portions of the book rely on some knowledge of elementary calculus. Although this book uses mathematics throughout, <a href="part001.xhtml">Part I</a> and <a href="appendix001.xhtml">Appendices A</a>–<a href="appendix004.xhtml">D</a> teach you all the mathematical techniques you will need.</li></ul>
<p>Our website, <a href="http://mitpress.mit.edu/algorithms/">http://mitpress.mit.edu/algorithms/</a>, links to solutions for some of the problems and exercises. Feel free to check your solutions against ours. We ask, however, that you not send your solutions to us.</p>
</section>
<section title="To the professional">
<p class="level4"><strong>To the professional</strong></p>
<p class="noindent">The wide range of topics in this book makes it an excellent handbook on algorithms. Because each chapter is relatively self-contained, you can focus on the topics most relevant to you.</p>
<p>Since most of the algorithms we discuss have great practical utility, we address implementation concerns and other engineering issues. We often provide practical alternatives to the few algorithms that are primarily of theoretical interest.</p>
<p>If you wish to implement any of the algorithms, you should find the translation of our pseudocode into your favorite programming language to be a fairly straightforward task. We have designed the pseudocode to present each algorithm clearly and succinctly. Consequently, we do not address error handling and other software-engineering issues that require specific assumptions about your programming environment. We attempt to present each algorithm simply and directly without allowing the idiosyncrasies of a particular programming language to obscure its essence. If you are used to 0-origin arrays, you might find our frequent practice of <a id="pxvi"/>indexing arrays from 1 a minor stumbling block. You can always either subtract 1 from our indices or just overallocate the array and leave position 0 unused.</p>
<p>We understand that if you are using this book outside of a course, then you might be unable to check your solutions to problems and exercises against solutions provided by an instructor. Our website, <a href="http://mitpress.mit.edu/algorithms/">http://mitpress.mit.edu/algorithms/</a>, links to solutions for some of the problems and exercises so that you can check your work. Please do not send your solutions to us.</p>
</section>
<section title="To our colleagues">
<p class="level4"><strong>To our colleagues</strong></p>
<p class="noindent">We have supplied an extensive bibliography and pointers to the current literature. Each chapter ends with a set of chapter notes that give historical details and references. The chapter notes do not provide a complete reference to the whole field of algorithms, however. Though it may be hard to believe for a book of this size, space constraints prevented us from including many interesting algorithms.</p>
<p>Despite myriad requests from students for solutions to problems and exercises, we have adopted the policy of not citing references for them, removing the temptation for students to look up a solution rather than to discover it themselves.</p>
</section>
<section title="Changes for the fourth edition">
<p class="level4"><strong>Changes for the fourth edition</strong></p>
<p class="noindent">As we said about the changes for the second and third editions, depending on how you look at it, the book changed either not much or quite a bit. A quick look at the table of contents shows that most of the third-edition chapters and sections appear in the fourth edition. We removed three chapters and several sections, but we have added three new chapters and several new sections apart from these new chapters.</p>
<p>We kept the hybrid organization from the first three editions. Rather than organizing chapters only by problem domains or only according to techniques, this book incorporates elements of both. It contains technique-based chapters on divide-and-conquer, dynamic programming, greedy algorithms, amortized analysis, augmenting data structures, NP-completeness, and approximation algorithms. But it also has entire parts on sorting, on data structures for dynamic sets, and on algorithms for graph problems. We find that although you need to know how to apply techniques for designing and analyzing algorithms, problems seldom announce to you which techniques are most amenable to solving them.</p>
<p>Some of the changes in the fourth edition apply generally across the book, and some are specific to particular chapters or sections. Here is a summary of the most significant general changes:</p>
<ul class="ulnoindent" epub:type="list">
<li>We added 140 new exercises and 22 new problems. We also improved many of the old exercises and problems, often as the result of reader feedback. (Thanks to all readers who made suggestions.)<a id="pxvii"/></li>
<li class="litop">We have color! With designers from the MIT Press, we selected a limited palette, devised to convey information and to be pleasing to the eye. (We are delighted to display red-black trees in—get this—red and black!) To enhance readability, defined terms, pseudocode comments, and page numbers in the index are in color.</li>
<li class="litop">Pseudocode procedures appear on a tan background to make them easier to spot, and they do not necessarily appear on the page of their first reference. When they don’t, the text directs you to the relevant page. In the same vein, nonlocal references to numbered equations, theorems, lemmas, and corollaries include the page number.</li>
<li class="litop">We removed topics that were rarely taught. We dropped in their entirety the chapters on Fibonacci heaps, van Emde Boas trees, and computational geometry. In addition, the following material was excised: the maximum-subarray problem, implementing pointers and objects, perfect hashing, randomly built binary search trees, matroids, push-relabel algorithms for maximum flow, the iterative fast Fourier transform method, the details of the simplex algorithm for linear programming, and integer factorization. You can find all the removed material on our website, <a href="http://mitpress.mit.edu/algorithms/">http://mitpress.mit.edu/algorithms/</a>.</li>
<li class="litop">We reviewed the entire book and rewrote sentences, paragraphs, and sections to make the writing clearer, more personal, and gender neutral. For example, the “traveling-salesman problem” in the previous editions is now called the “traveling-salesperson problem.” We believe that it is critically important for engineering and science, including our own field of computer science, to be welcoming to everyone. (The one place that stumped us is in <a href="chapter013.xhtml">Chapter 13</a>, which requires a term for a parent’s sibling. Because the English language has no such gender-neutral term, we regretfully stuck with “uncle.”)</li>
<li class="litop">The chapter notes, bibliography, and index were updated, reflecting the dramatic growth of the field of algorithms since the third edition.</li>
<li class="litop">We corrected errors, posting most corrections on our website of third-edition errata. Those that were reported while we were in full swing preparing this edition were not posted, but were corrected in this edition. (Thanks again to all readers who helped us identify issues.)</li></ul>
<p class="noindent">The specific changes for the fourth edition include the following:</p>
<ul class="ulnoindent" epub:type="list">
<li>We renamed <a href="chapter003.xhtml">Chapter 3</a> and added a section giving an overview of asymptotic notation before delving into the formal definitions.</li>
<li class="litop"><a href="chapter004.xhtml">Chapter 4</a> underwent substantial changes to improve its mathematical foundation and make it more robust and intuitive. The notion of an algorithmic recurrence was introduced, and the topic of ignoring floors and ceilings in recurrences <a id="pxviii"/>was addressed more rigorously. The second case of the master theorem incorporates polylogarithmic factors, and a rigorous proof of a “continuous” version of the master theorem is now provided. We also present the powerful and general Akra-Bazzi method (without proof).</li>
<li class="litop">The deterministic order-statistic algorithm in <a href="chapter009.xhtml">Chapter 9</a> is slightly different, and the analyses of both the randomized and deterministic order-statistic algorithms have been revamped.</li>
<li class="litop">In addition to stacks and queues, <a href="chapter010.xhtml#Sec_10.1">Section 10.1</a> discusses ways to store arrays and matrices.</li>
<li class="litop"><a href="chapter011.xhtml">Chapter 11</a> on hash tables includes a modern treatment of hash functions. It also emphasizes linear probing as an efficient method for resolving collisions when the underlying hardware implements caching to favor local searches.</li>
<li class="litop">To replace the sections on matroids in <a href="chapter015.xhtml">Chapter 15</a>, we converted a problem in the third edition about offline caching into a full section.</li>
<li class="litop"><a href="chapter016.xhtml#Sec_16.4">Section 16.4</a> now contains a more intuitive explanation of the potential functions to analyze table doubling and halving.</li>
<li class="litop"><a href="chapter017.xhtml">Chapter 17</a> on augmenting data structures was relocated from <a href="part003.xhtml">Part III</a> to Part <a href="part005.xhtml">V</a>, reflecting our view that this technique goes beyond basic material.</li>
<li class="litop"><a href="chapter025.xhtml">Chapter 25</a> is a new chapter about matchings in bipartite graphs. It presents algorithms to find a matching of maximum cardinality, to solve the stable-marriage problem, and to find a maximum-weight matching (known as the “assignment problem”).</li>
<li class="litop"><a href="chapter026.xhtml">Chapter 26</a>, on task-parallel computing, has been updated with modern terminology, including the name of the chapter.</li>
<li class="litop"><a href="chapter027.xhtml">Chapter 27</a>, which covers online algorithms, is another new chapter. In an online algorithm, the input arrives over time, rather than being available in its entirety at the start of the algorithm. The chapter describes several examples of online algorithms, including determining how long to wait for an elevator before taking the stairs, maintaining a linked list via the move-to-front heuristic, and evaluating replacement policies for caches.</li>
<li class="litop">In <a href="chapter029.xhtml">Chapter 29</a>, we removed the detailed presentation of the simplex algorithm, as it was math heavy without really conveying many algorithmic ideas. The chapter now focuses on the key aspect of how to model problems as linear programs, along with the essential duality property of linear programming.</li>
<li class="litop"><a href="chapter032.xhtml#Sec_32.5">Section 32.5</a> adds to the chapter on string matching the simple, yet powerful, structure of suffix arrays.<a id="pxix"/></li>
<li class="litop"><a href="chapter033.xhtml">Chapter 33</a>, on machine learning, is the third new chapter. It introduces several basic methods used in machine learning: clustering to group similar items together, weighted-majority algorithms, and gradient descent to find the minimizer of a function.</li>
<li class="litop"><a href="chapter034.xhtml#Sec_34.5.6">Section 34.5.6</a> summarizes strategies for polynomial-time reductions to show that problems are NP-hard.</li>
<li class="litop">The proof of the approximation algorithm for the set-covering problem in <a href="chapter035.xhtml#Sec_35.3">Section 35.3</a> has been revised.</li></ul>
</section>
<section title="Website">
<p class="level4"><strong>Website</strong></p>
<p class="noindent">You can use our website, <a href="http://mitpress.mit.edu/algorithms/">http://mitpress.mit.edu/algorithms/</a>, to obtain supplementary information and to communicate with us. The website links to a list of known errors, material from the third edition that is not included in the fourth edition, solutions to selected exercises and problems, Python implementations of many of the algorithms in this book, a list explaining the corny professor jokes (of course), as well as other content, which we may add to. The website also tells you how to report errors or make suggestions.</p>
</section>
<section title="How we produced this book">
<p class="level4"><strong>How we produced this book</strong></p>
<p class="noindent">Like the previous three editions, the fourth edition was produced in L<sup>A</sup>T<sub>E</sub>X 2<em><sub>ε</sub></em>. We used the Times font with mathematics typeset using the MathTime Professional II fonts. As in all previous editions, we compiled the index using Windex, a C program that we wrote, and produced the bibliography using BIBT<sub>E</sub>X. The PDF files for this book were created on a MacBook Pro running macOS 10.14.</p>
<p>Our plea to Apple in the preface of the third edition to update MacDraw Pro for macOS 10 went for naught, and so we continued to draw illustrations on pre-Intel Macs running MacDraw Pro under the Classic environment of older versions of macOS 10. Many of the mathematical expressions appearing in illustrations were laid in with the psfrag package for L<sup>A</sup>T<sub>E</sub>X 2<em><sub>ε</sub></em>.</p>
</section>
<section title="Acknowledgments for the fourth edition">
<p class="level4"><strong>Acknowledgments for the fourth edition</strong></p>
<p class="noindent">We have been working with the MIT Press since we started writing the first edition in 1987, collaborating with several directors, editors, and production staff. Throughout our association with the MIT Press, their support has always been outstanding. Special thanks to our editors Marie Lee, who put up with us for far too long, and Elizabeth Swayze, who pushed us over the finish line. Thanks also to Director Amy Brand and to Alex Hoopes.</p>
<a id="pxx"/>
<p>As in the third edition, we were geographically distributed while producing the fourth edition, working in the Dartmouth College Department of Computer Science; the MIT Computer Science and Artificial Intelligence Laboratory and the MIT Department of Electrical Engineering and Computer Science; and the Columbia University Department of Industrial Engineering and Operations Research, Department of Computer Science, and Data Science Institute. During the COVID-19 pandemic, we worked largely from home. We thank our respective universities and colleagues for providing such supportive and stimulating environments. As we complete this book, those of us who are not retired are eager to return to our respective universities now that the pandemic seems to be abating.</p>
<p>Julie Sussman, P.P.A., came to our rescue once again with her technical copy-editing under tremendous time pressure. If not for Julie, this book would be riddled with errors (or, let’s say, many more errors than it has) and would be far less readable. Julie, we will be forever indebted to you. Errors that remain are the responsibility of the authors (and probably were inserted after Julie read the material).</p>
<p>Dozens of errors in previous editions were corrected in the process of creating this edition. We thank our readers—too many to list them all—who have reported errors and suggested improvements over the years.</p>
<p>We received considerable help in preparing some of the new material in this edition. Neville Campbell (unaffiliated), Bill Kuszmaul of MIT, and Chee Yap of NYU provided valuable advice regarding the treatment of recurrences in <a href="chapter004.xhtml">Chapter 4</a>. Yan Gu of the University of California, Riverside, provided feedback on parallel algorithms in <a href="chapter026.xhtml">Chapter 26</a>. Rob Shapire of Microsoft Research altered our approach to the material on machine learning with his detailed comments on <a href="chapter033.xhtml">Chapter 33</a>. Qi Qi of MIT helped with the analysis of the Monty Hall problem (Problem C-1).</p>
<p>Molly Seaman and Mary Reilly of the MIT Press helped us select the color palette in the illustrations, and Wojciech Jarosz of Dartmouth College suggested design improvements to our newly colored figures. Yichen (Annie) Ke and Linda Xiao, who have since graduated from Dartmouth, aided in colorizing the illustrations, and Linda also produced many of the Python implementations that are available on the book’s website.</p>
<p>Finally, we thank our wives—Wendy Leiserson, Gail Rivest, Rebecca Ivry, and the late Nicole Cormen—and our families. The patience and encouragement of those who love us made this project possible. We affectionately dedicate this book to them.</p>
<p> </p>
<table class="table1">
<tr>
<td class="td1"><p class="noindent">T<small>HOMAS</small> H. C<small>ORMEN</small></p></td>
<td class="td1"><p class="right"><em>Lebanon, New Hampshire</em></p></td>
</tr>
<tr>
<td class="td1"><p class="noindent">C<small>HARLES</small> E. L<small>EISERSON</small></p></td>
<td class="td1"><p class="right"><em>Cambridge, Massachusetts</em></p></td>
</tr>
<tr>
<td class="td1"><p class="noindent">R<small>ONALD</small> L. R<small>IVEST</small></p></td>
<td class="td1"><p class="right"><em>Cambridge, Massachusetts</em></p></td>
</tr>
<tr>
<td class="td1"><p class="noindent">C<small>LIFFORD</small> S<small>TEIN</small></p></td>
<td class="td1"><p class="right"><em>New York, New York</em></p></td>
</tr>
<tr>
<td class="td1"><p class="noindent1-top"><em>June,</em> 2021</p></td>
<td class="td1"/>
</tr>
</table>
<p class="footnote" id="footnote_1"><a href="#footnote_ref_1"><sup>1</sup></a> To understand many of the ways in which algorithms influence our daily lives, see the book by Fry [<a epub:type="noteref" href="bibliography001.xhtml#endnote_162">162</a>].</p>
<a id="pxxi"/>
</section>
</section>
</div>
</body>
</html>