<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 4. The Factory Pattern: Baking with OO Goodness</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch03.html"/><link rel="next" href="ch05.html"/></head><body><section class="chapter" epub:type="chapter" id="factory_pattern_baking_with_oo_goodness"><div class="titlepage" id="aid-AFM62"><div><div><h2 class="title">Chapter 4. The Factory Pattern: Baking with OO Goodness</h2></div></div></div><div class="informalfigure"><a id="med_id00161a"></a><div class="mediaobject"><a id="med_id00161"></a><img src="../Images/image00660.jpeg" alt="image with no caption" hisrc="figs/web/111fig01.png.jpg"/></div></div><p><span class="strong"><strong>Get ready to bake some loosely coupled OO designs.</strong></span> There is more to making objects than just using the <span class="strong"><strong>new</strong></span> operator. You’ll learn that instantiation is an activity that shouldn’t always be done in public and can often lead to <span class="emphasis"><em>coupling problems</em></span>. And you don’t want <span class="emphasis"><em>that</em></span>, do you? Find out how Factory Patterns can help save you from embarrassing dependencies.</p><div class="informalfigure"><a id="med_id00162a"></a><div class="mediaobject"><a id="med_id00162"></a><img src="../Images/image00661.jpeg" alt="image with no caption" hisrc="figs/web/112fig01.png.jpg"/></div></div><p><a id="iddle1132" class="indexterm"></a><a id="iddle1293" class="indexterm"></a><a id="iddle1672" class="indexterm"></a><a id="iddle1791" class="indexterm"></a><a id="iddle1797" class="indexterm"></a><a id="iddle2326" class="indexterm"></a><span class="strong"><strong>When you see “new,” think “concrete.”</strong></span></p><p>Yes, when you use <span class="strong"><strong>new</strong></span> you are certainly instantiating a concrete class, so that’s definitely an implementation, not an interface. And it’s a good question; you’ve learned that tying your code to a concrete class can make it more fragile and less flexible.</p><div class="informalfigure"><a id="med_id00163a"></a><div class="mediaobject"><a id="med_id00163"></a><img src="../Images/image00662.jpeg" alt="image with no caption" hisrc="figs/web/112fig02.png.jpg"/></div></div><p>When you have a whole set of related concrete classes, often you’re forced to write code like this:</p><div class="informalfigure"><a id="med_id00164a"></a><div class="mediaobject"><a id="med_id00164"></a><img src="../Images/image00663.jpeg" alt="image with no caption" hisrc="figs/web/112fig03.png.jpg"/></div></div><p>Here we’ve got several concrete classes being instantiated, and the decision of which to instantiate is made at runtime depending on some set of conditions.</p><p>When you see code like this, you know that when it comes time for changes or extensions, you’ll have to reopen this code and examine what needs to be added (or deleted). Often this kind of code ends up in several parts of the application making maintenance and updates more difficult and error-prone.</p><div class="informalfigure"><a id="med_id00165a"></a><div class="mediaobject"><a id="med_id00165"></a><img src="../Images/image00664.jpeg" alt="image with no caption" hisrc="figs/web/113fig01.png.jpg"/></div></div><p><span class="strong"><strong>What’s wrong with “new”?</strong></span></p><p>Technically there’s nothing wrong with <span class="strong"><strong>new</strong></span>. After all, it’s a fundamental part of Java. The real culprit is our old friend CHANGE and how change impacts our use of <span class="strong"><strong>new</strong></span>.</p><p>By coding to an interface, you know you can insulate yourself from a lot of changes that might happen to a system down the road. Why? If your code is written to an interface, then it will work with any new classes implementing that interface through polymorphism. However, when you have code that makes use of lots of concrete classes, you’re looking for trouble because that code may have to be changed as new concrete classes are added. So, in other words, your code will not be “closed for modification.” To extend it with new concrete types, you’ll have to reopen it.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note01"></a>Note</h3><p>Remember that designs should be “open for extension but closed for modification” - see <a class="xref" href="part0010.xhtml#aid-9H5K2">Chapter 3</a> for a review.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>So what can you do? It’s times like these that you can fall back on OO Design Principles to look for clues. Remember, our first principle deals with change and guides us to <span class="emphasis"><em>identify the aspects that vary and separate them from what stays the same</em></span>.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note02"></a>Brain Power</h3><p>How might you take all the parts of your application that instantiate concrete classes and separate or encapsulate them from the rest of your application?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="identifying_the_aspects_that_vary">Identifying the aspects that vary</h2></div></div></div><div class="informalfigure"><a id="med_id00166a"></a><div class="mediaobject"><a id="med_id00166"></a><img src="../Images/image00665.jpeg" alt="image with no caption" hisrc="figs/web/114fig01.png.jpg"/></div></div><p><a id="iddle2126" class="indexterm"></a>Let’s say you have a pizza shop, and as a cutting-edge pizza store owner in Objectville you might end up writing some code like this:</p><div class="informalfigure"><a id="med_id00167a"></a><div class="mediaobject"><a id="med_id00167"></a><img src="../Images/image00666.jpeg" alt="image with no caption" hisrc="figs/web/114fig02.png.jpg"/></div></div><p><span class="strong"><strong>But you need more than one type of pizza...</strong></span></p><p>So then you’d add some code that <span class="emphasis"><em>determines</em></span> the appropriate type of pizza and then goes about <span class="emphasis"><em>making</em></span> the pizza:</p><div class="informalfigure"><a id="med_id00168a"></a><div class="mediaobject"><a id="med_id00168"></a><img src="../Images/image00667.jpeg" alt="image with no caption" hisrc="figs/web/114fig03.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="but_the_pressure_is_on_to_add_more_pizza">But the pressure is on to add more pizza types</h2></div></div></div><p>You realize that all of your competitors have added a couple of trendy pizzas to their menus: the Clam Pizza and the Veggie Pizza. Obviously you need to keep up with the competition, so you’ll add these items to your menu. And you haven’t been selling many Greek Pizzas lately, so you decide to take that off the menu:</p><div class="informalfigure"><a id="med_id00169a"></a><div class="mediaobject"><a id="med_id00169"></a><img src="../Images/image00668.jpeg" alt="image with no caption" hisrc="figs/web/115fig01.png.jpg"/></div></div><p>Clearly, dealing with <span class="emphasis"><em>which</em></span> concrete class is instantiated is really messing up our orderPizza() method and preventing it from being closed for modification. But now that we know what is varying and what isn’t, it’s probably time to encapsulate it.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="encapsulating_object_creation">Encapsulating object creation</h2></div></div></div><p><a id="iddle1488" class="indexterm"></a><a id="iddle1621" class="indexterm"></a><a id="iddle1667" class="indexterm"></a><a id="iddle2004" class="indexterm"></a><a id="iddle2121" class="indexterm"></a><a id="iddle2321" class="indexterm"></a>So now we know we’d be better off moving the object creation out of the orderPizza() method. But how? Well, what we’re going to do is take the creation code and move it out into another object that is only going to be concerned with creating pizzas.</p><div class="informalfigure"><a id="med_id00170a"></a><div class="mediaobject"><a id="med_id00170"></a><img src="../Images/image00669.jpeg" alt="image with no caption" hisrc="figs/web/116fig01.png.jpg"/></div></div><p><span class="strong"><strong>We’ve got a name for this new object: we call it a Factory.</strong></span></p><p>Factories handle the details of object creation. Once we have a SimplePizzaFactory, our orderPizza() method just becomes a client of that object. Any time it needs a pizza it asks the pizza factory to make one. Gone are the days when the orderPizza() method needs to know about Greek versus Clam pizzas. Now the orderPizza() method just cares that it gets a pizza that implements the Pizza interface so that it can call prepare(), bake(), cut(), and box().</p><p>We’ve still got a few details to fill in here; for instance, what does the orderPizza() method replace its creation code with? Let’s implement a simple factory for the pizza store and find out...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="building_a_simple_pizza_factory">Building a simple pizza factory</h2></div></div></div><p><a id="iddle1332" class="indexterm"></a><a id="iddle1668" class="indexterm"></a><a id="iddle2117" class="indexterm"></a><a id="iddle2322" class="indexterm"></a><a id="iddle2406" class="indexterm"></a>We’ll start with the factory itself. What we’re going to do is define a class that encapsulates the object creation for all pizzas. Here it is...</p><div class="informalfigure"><a id="med_id00171a"></a><div class="mediaobject"><a id="med_id00171"></a><img src="../Images/image00670.jpeg" alt="image with no caption" hisrc="figs/web/117fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00028"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch04qa1qe1"></a><a id="ch04qa1q1"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: What’s the advantage of this? It looks like we are just pushing the problem off to another object.</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch04qa1q1a1"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> One thing to remember is that the SimplePizzaFactory may have many clients. We’ve only seen the orderPizza() method; however, there may be a PizzaShopMenu class that uses the factory to get pizzas for their current description and price. We might also have a HomeDelivery class that handles pizzas in a different way than our PizzaShop class but is also a client of the factory.</p><p>So, by encapsulating the pizza creating in one class, we now have only one place to make modifications when the implementation changes.</p><p>Don’t forget, we are also just about to remove the concrete instantiations from our client code.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch04qa1qe2"></a><a id="ch04qa1q2"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: I’ve seen a similar design where a factory like this is defined as a static method. What is the difference?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch04qa1q2a2"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> Defining a simple factory as a static method is a common technique and is often called a static factory. Why use a static method? Because you don’t need to instantiate an object to make use of the create method. But remember it also has the disadvantage that you can’t subclass and change the behavior of the create method.</p></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="reworking_the_pizzastore_class">Reworking the PizzaStore class</h2></div></div></div><p><a id="iddle1291" class="indexterm"></a><a id="iddle1331" class="indexterm"></a><a id="iddle1964" class="indexterm"></a>Now it’s time to fix up our client code. What we want to do is rely on the factory to create the pizzas for us. Here are the changes:</p><div class="informalfigure"><a id="med_id00172a"></a><div class="mediaobject"><a id="med_id00172"></a><img src="../Images/image00671.jpeg" alt="image with no caption" hisrc="figs/web/118fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note03"></a>Brain Power</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch04qa2qe1"></a><a id="ch04qa2q1"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p>We know that object composition allows us to change behavior dynamically at runtime (among other things) because we can swap in and out implementations. How might we be able to use that in the PizzaStore? What factory implementations might we be able to swap in and out?</p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch04qa2q1a1"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p>We don’t know about you, but we’re thinking New York, Chicago, and California style pizza factories (let’s not forget New Haven, too)</p></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="simple_factory_defined">The Simple Factory defined</h2></div></div></div><div class="informalfigure"><a id="med_id00173a"></a><div class="mediaobject"><a id="med_id00173"></a><img src="../Images/image00543.jpeg" alt="image with no caption" hisrc="figs/web/common3.png.jpg"/></div></div><p><a id="iddle1385" class="indexterm"></a><a id="iddle1669" class="indexterm"></a><a id="iddle1671" class="indexterm"></a><a id="iddle1777" class="indexterm"></a><a id="iddle2323" class="indexterm"></a><a id="iddle2325" class="indexterm"></a><span class="strong"><strong>Pattern Honorable Mention</strong></span></p><p>The Simple Factory isn’t actually a Design Pattern; it’s more of a programming idiom. But it is commonly used, so we’ll give it a Head First Pattern Honorable Mention. Some developers do mistake this idiom for the “Factory Pattern,” so the next time there is an awkward silence between you and another developer, you’ve got a nice topic to break the ice.</p><p>Just because Simple Factory isn’t a REAL pattern doesn’t mean we shouldn’t check out how it’s put together. Let’s take a look at the class diagram of our new Pizza Store:</p><div class="informalfigure"><a id="med_id00174a"></a><div class="mediaobject"><a id="med_id00174"></a><img src="../Images/image00672.jpeg" alt="image with no caption" hisrc="figs/web/119fig01.png.jpg"/></div></div><p>Think of Simple Factory as a warm up. Next, we’ll explore two heavy-duty patterns that are both factories. But don’t worry, there’s more pizza to come!</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note04"></a>Note</h3><p>*Just another reminder: in design patterns, the phrase “implement an interface” does NOT always mean “write a class that implements a Java interface, by using the ‘implements’ keyword in the class declaration.” In the general use of the phrase, a concrete class implementing a method from a supertype (which could be a class OR interface) is still considered to be “implementing the interface” of that supertype.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="franchising_the_pizza_store">Franchising the pizza store</h2></div></div></div><p><a id="iddle2125" class="indexterm"></a>Your Objectville PizzaStore has done so well that you’ve trounced the competition and now everyone wants a PizzaStore in their own neighborhood. As the franchiser, you want to ensure the quality of the franchise operations and so you want them to use your time-tested code.</p><p>But what about regional differences? Each franchise might want to offer different styles of pizzas (New York, Chicago, and California, to name a few), depending on where the franchise store is located and the tastes of the local pizza connoisseurs.</p><div class="informalfigure"><a id="med_id00175a"></a><div class="mediaobject"><a id="med_id00175"></a><img src="../Images/image00673.jpeg" alt="image with no caption" hisrc="figs/web/120fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="weapostropheve_seen_one_approachhellip">We’ve seen one approach...</h3></div></div></div><p>If we take out SimplePizzaFactory and create three different factories — NYPizzaFactory, ChicagoPizzaFactory and CaliforniaPizzaFactory — then we can just compose the PizzaStore with the appropriate factory and a franchise is good to go. That’s one approach.</p><p>Let’s see what that would look like...</p><div class="informalfigure"><a id="med_id00176a"></a><div class="mediaobject"><a id="med_id00176"></a><img src="../Images/image00674.jpeg" alt="image with no caption" hisrc="figs/web/121fig01.png.jpg"/></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="but_youapostrophed_like_a_little_more_qu">But you’d like a little more quality control...</h3></div></div></div><p>So you test-marketed the SimpleFactory idea, and what you found was that the franchises were using your factory to create pizzas, but starting to employ their own home-grown procedures for the rest of the process: they’d bake things a little differently, they’d forget to cut the pizza and they’d use third-party boxes.</p><p>Rethinking the problem a bit, you see that what you’d really like to do is create a framework that ties the store and the pizza creation together, yet still allows things to remain flexible.</p><p>In our early code, before the SimplePizzaFactory, we had the pizza-making code tied to the PizzaStore, but it wasn’t flexible. So, how can we have our pizza and eat it too?</p><div class="informalfigure"><a id="med_id00177a"></a><div class="mediaobject"><a id="med_id00177"></a><img src="../Images/image00675.jpeg" alt="image with no caption" hisrc="figs/web/121fig02.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="framework_for_the_pizza_store">A framework for the pizza store</h2></div></div></div><p><a id="iddle2124" class="indexterm"></a>There <span class="emphasis"><em>is</em></span> a way to localize all the pizza-making activities to the PizzaStore class, and yet give the franchises freedom to have their own regional style.</p><p>What we’re going to do is put the createPizza() method back into PizzaStore, but this time as an <span class="strong"><strong>abstract method</strong></span>, and then create a PizzaStore subclass for each regional style.</p><p>First, let’s look at the changes to the PizzaStore:</p><div class="informalfigure"><a id="med_id00178a"></a><div class="mediaobject"><a id="med_id00178"></a><img src="../Images/image00676.jpeg" alt="image with no caption" hisrc="figs/web/122fig01.png.jpg"/></div></div><p>Now we’ve got a store waiting for subclasses; we’re going to have a subclass for each regional type (NYPizzaStore, ChicagoPizzaStore, CaliforniaPizzaStore) and each subclass is going to make the decision about what makes up a pizza. Let’s take a look at how this is going to work.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="allowing_the_subclasses_to_decide">Allowing the subclasses to decide</h2></div></div></div><p><a id="iddle1299" class="indexterm"></a><a id="iddle1333" class="indexterm"></a><a id="iddle2118" class="indexterm"></a><a id="iddle2437" class="indexterm"></a>Remember, the PizzaStore already has a well-honed order system in the orderPizza() method and you want to ensure that it’s consistent across all franchises.</p><p>What varies among the regional PizzaStores is the style of pizzas they make — New York Pizza has thin crust, Chicago Pizza has thick, and so on — and we are going to push all these variations into the createPizza() method and make it responsible for creating the right kind of pizza. The way we do this is by letting each subclass of PizzaStore define what the createPizza() method looks like. So, we will have a number of concrete subclasses of PizzaStore, each with its own pizza variations, all fitting within the PizzaStore framework and still making use of the well-tuned orderPizza() method.</p><div class="informalfigure"><a id="med_id00179a"></a><div class="mediaobject"><a id="med_id00179"></a><img src="../Images/image00677.jpeg" alt="image with no caption" hisrc="figs/web/123fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00180a"></a><div class="mediaobject"><a id="med_id00180"></a><img src="../Images/image00678.jpeg" alt="image with no caption" hisrc="figs/web/124fig01.png.jpg"/></div></div><p>Well, think about it from the point of view of the PizzaStore’s orderPizza() method: it is defined in the abstract PizzaStore, but concrete types are only created in the subclasses.</p><div class="informalfigure"><a id="med_id00181a"></a><div class="mediaobject"><a id="med_id00181"></a><img src="../Images/image00679.jpeg" alt="image with no caption" hisrc="figs/web/124fig02.png.jpg"/></div></div><p>Now, to take this a little further, the orderPizza() method does a lot of things with a Pizza object (like prepare, bake, cut, box), but because Pizza is abstract, orderPizza() has no idea what real concrete classes are involved. In other words, it’s decoupled!</p><div class="informalfigure"><a id="med_id00182a"></a><div class="mediaobject"><a id="med_id00182"></a><img src="../Images/image00680.jpeg" alt="image with no caption" hisrc="figs/web/124fig03.png.jpg"/></div></div><p>When orderPizza() calls createPizza(), one of your subclasses will be called into action to create a pizza. Which kind of pizza will be made? Well, that’s decided by the choice of pizza store you order from, NYStylePizzaStore or ChicagoStylePizzaStore.</p><div class="informalfigure"><a id="med_id00183a"></a><div class="mediaobject"><a id="med_id00183"></a><img src="../Images/image00681.jpeg" alt="image with no caption" hisrc="figs/web/124fig04.png.jpg"/></div></div><p>So, is there a real-time decision that subclasses make? No, but from the perspective of orderPizza(), if you chose a NYStylePizzaStore, that subclass gets to determine which pizza is made. So the subclasses aren’t really “deciding” — it was <span class="emphasis"><em>you</em></span> who decided by choosing which store you wanted — but they do determine which kind of pizza gets made.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="letapostrophes_make_a_pizzastore">Let’s make a PizzaStore</h2></div></div></div><p><a id="iddle2128" class="indexterm"></a>Being a franchise has its benefits. You get all the PizzaStore functionality for free. All the regional stores need to do is subclass PizzaStore and supply a createPizza() method that implements their style of Pizza. We’ll take care of the big three pizza styles for the franchisees.</p><p>Here’s the New York regional style:</p><div class="informalfigure"><a id="med_id00184a"></a><div class="mediaobject"><a id="med_id00184"></a><img src="../Images/image00682.jpeg" alt="image with no caption" hisrc="figs/web/125fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note05"></a>Note</h3><p>* Note that the orderPizza() method in the superclass has no clue which Pizza we are creating; it just knows it can prepare, bake, cut, and box it!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Once we’ve got our PizzaStore subclasses built, it will be time to see about ordering up a pizza or two. But before we do that, why don’t you take a crack at building the Chicago Style and California Style pizza stores on the next page.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00029"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle2293" class="indexterm"></a>We’ve knocked out the NYPizzaStore; just two more to go and we’ll be ready to franchise! Write the Chicago and California PizzaStore implementations here:</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="declaring_a_factory_method">Declaring a factory method</h2></div></div></div><p><a id="iddle1615" class="indexterm"></a><a id="iddle1618" class="indexterm"></a><a id="iddle1626" class="indexterm"></a><a id="iddle1656" class="indexterm"></a>With just a couple of transformations to the PizzaStore we’ve gone from having an object handle the instantiation of our concrete classes to a set of subclasses that are now taking on that responsibility. Let’s take a closer look:</p><div class="informalfigure"><a id="med_id00185a"></a><div class="mediaobject"><a id="med_id00185"></a><img src="../Images/image00683.jpeg" alt="image with no caption" hisrc="figs/web/127fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_up_close"></a><h3 class="title">Code Up Close</h3><p>A factory method handles object creation and encapsulates it in a subclass. This decouples the client code in the superclass from the object creation code in the subclass.</p><div class="informalfigure"><a id="med_id00186a"></a><div class="mediaobject"><a id="med_id00186"></a><img src="../Images/image00684.jpeg" alt="image with no caption" hisrc="figs/web/127fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="letapostrophes_see_how_it_works_ordering">Let’s see how it works: ordering pizzas with the pizza factory method</h3></div></div></div><div class="informalfigure"><a id="med_id00187a"></a><div class="mediaobject"><a id="med_id00187"></a><img src="../Images/image00685.jpeg" alt="image with no caption" hisrc="figs/web/128fig01.png.jpg"/></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="so_how_do_they_orderquestion_mark">So how do they order?</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① First, Joel and Ethan need an instance of a PizzaStore. Joel needs to instantiate a ChicagoPizzaStore and Ethan needs a NYPizzaStore.</li><li class="listitem" style="list-style-type: none">② With a PizzaStore in hand, both Ethan and Joel call the orderPizza() method and pass in the type of pizza they want (cheese, veggie, and so on).</li><li class="listitem" style="list-style-type: none">③ To create the pizzas, the createPizza() method is called, which is defined in the two subclasses NYPizzaStore and ChicagoPizzaStore. As we defined them, the NYPizzaStore instantiates a NY style pizza, and the ChicagoPizzaStore instantiates a Chicago style pizza. In either case, the Pizza is returned to the orderPizza() method.</li><li class="listitem" style="list-style-type: none">④ The orderPizza() method has no idea what kind of pizza was created, but it knows it is a pizza and it prepares, bakes, cuts, and boxes it for Ethan and Joel.</li></ul></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="letapostrophes_check_out_how_these_pizza">Let’s check out how these pizzas are really made to order...</h3></div></div></div><div class="informalfigure"><a id="med_id00188a"></a><div class="mediaobject"><a id="med_id00188"></a><img src="../Images/image00686.jpeg" alt="image with no caption" hisrc="figs/web/common17.png.jpg"/></div></div><p><span class="strong"><strong>Behind the Scenes</strong></span></p><div class="informalfigure"><a id="med_id00189a"></a><div class="mediaobject"><a id="med_id00189"></a><img src="../Images/image00687.jpeg" alt="image with no caption" hisrc="figs/web/129fig01.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="weapostrophere_just_missing_one_thing_pi">We’re just missing one thing: PIZZA!</h2></div></div></div><div class="informalfigure"><a id="med_id00190a"></a><div class="mediaobject"><a id="med_id00190"></a><img src="../Images/image00688.jpeg" alt="image with no caption" hisrc="figs/web/common11.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="our_pizzastore_isnapostrophet_going_to_b">Our PizzaStore isn’t going to be very popular without some pizzas, so let’s implement them</h3></div></div></div><div class="informalfigure"><a id="med_id00191a"></a><div class="mediaobject"><a id="med_id00191"></a><img src="../Images/image00689.jpeg" alt="image with no caption" hisrc="figs/web/130fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note06"></a>Note</h3><p><a id="iddle1001" class="indexterm"></a><a id="iddle1107" class="indexterm"></a><a id="iddle1778" class="indexterm"></a><a id="iddle2093" class="indexterm"></a><a id="iddle2129" class="indexterm"></a>REMEMBER: we don’t provide import and package statements in the code listings. Get the complete source code from the wickedlysmart website. You’ll find the URL on page xxxiii in the Intro.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="now_we_just_need_some_concrete_subclasse">Now we just need some concrete subclasses... how about defining New York and Chicago style cheese pizzas?</h3></div></div></div><div class="informalfigure"><a id="med_id00192a"></a><div class="mediaobject"><a id="med_id00192"></a><img src="../Images/image00690.jpeg" alt="image with no caption" hisrc="figs/web/131fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00193a"></a><div class="mediaobject"><a id="med_id00193"></a><img src="../Images/image00691.jpeg" alt="image with no caption" hisrc="figs/web/131fig02.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="youapostropheve_waited_long_enoughdot_ti">You’ve waited long enough. Time for some pizzas!</h2></div></div></div><div class="informalfigure"><a id="med_id00194a"></a><div class="mediaobject"><a id="med_id00194"></a><img src="../Images/image00692.jpeg" alt="image with no caption" hisrc="figs/web/132fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00195a"></a><div class="mediaobject"><a id="med_id00195"></a><img src="../Images/image00693.jpeg" alt="image with no caption" hisrc="figs/web/132fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="itapostrophes_finally_time_to_meet_the_f">It’s finally time to meet the Factory Method Pattern</h2></div></div></div><p><a id="iddle1117" class="indexterm"></a><a id="iddle1337" class="indexterm"></a><a id="iddle1620" class="indexterm"></a><a id="iddle1625" class="indexterm"></a><a id="iddle1635" class="indexterm"></a><a id="iddle1649" class="indexterm"></a><a id="iddle1655" class="indexterm"></a><a id="iddle1665" class="indexterm"></a>All factory patterns encapsulate object creation. The Factory Method Pattern encapsulates object creation by letting subclasses decide what objects to create. Let’s check out these class diagrams to see who the players are in this pattern:</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="creator_classes">The Creator classes</h3></div></div></div><div class="informalfigure"><a id="med_id00196a"></a><div class="mediaobject"><a id="med_id00196"></a><img src="../Images/image00694.jpeg" alt="image with no caption" hisrc="figs/web/133fig01.png.jpg"/></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="product_classes">The Product classes</h3></div></div></div><div class="informalfigure"><a id="med_id00197a"></a><div class="mediaobject"><a id="med_id00197"></a><img src="../Images/image00695.jpeg" alt="image with no caption" hisrc="figs/web/133fig02.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="another_perspective_parallel_class_hiera">Another perspective: parallel class hierarchies</h2></div></div></div><p><a id="iddle1133" class="indexterm"></a><a id="iddle1619" class="indexterm"></a><a id="iddle1634" class="indexterm"></a><a id="iddle1664" class="indexterm"></a><a id="iddle2094" class="indexterm"></a>We’ve seen that the factory method provides a framework by supplying an orderPizza() method that is combined with a factory method. Another way to look at this pattern as a framework is in the way it encapsulates product knowledge into each creator.</p><p>Let’s look at the two parallel class hierarchies and see how they relate:</p><div class="informalfigure"><a id="med_id00198a"></a><div class="mediaobject"><a id="med_id00198"></a><img src="../Images/image00696.jpeg" alt="image with no caption" hisrc="figs/web/134fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note07"></a>Note</h3><p>The factory method is the key to encapsulating this knowledge.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle-id00030"></a><h3 class="title">Design Puzzle</h3><p><a id="iddle1430" class="indexterm"></a><a id="iddle1629" class="indexterm"></a><a id="iddle1659" class="indexterm"></a><a id="iddle2119" class="indexterm"></a>We need another kind of pizza for those crazy Californians (crazy in a <span class="emphasis"><em>good</em></span> way, of course). Draw another parallel set of classes that you’d need to add a new California region to our PizzaStore.</p><div class="informalfigure"><a id="med_id00199a"></a><div class="mediaobject"><a id="med_id00199"></a><img src="../Images/image00697.jpeg" alt="image with no caption" hisrc="figs/web/135fig01.png.jpg"/></div></div><p>Okay, now write the five <span class="emphasis"><em>most bizarre</em></span> things you can think of to put on a pizza. Then, you’ll be ready to go into business making pizza in California!</p><p>___________________________________________________________</p><p>___________________________________________________________</p><p>___________________________________________________________</p><p>___________________________________________________________</p><p>___________________________________________________________</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="factory_method_pattern_defined">Factory Method Pattern defined</h2></div></div></div><p><a id="iddle1290" class="indexterm"></a><a id="iddle1338" class="indexterm"></a><a id="iddle1616" class="indexterm"></a><a id="iddle1624" class="indexterm"></a><a id="iddle1627" class="indexterm"></a><a id="iddle1657" class="indexterm"></a><a id="iddle2019" class="indexterm"></a><a id="iddle2434" class="indexterm"></a>It’s time to roll out the official definition of the Factory Method Pattern:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note08"></a>Note</h3><p><span class="strong"><strong>The Factory Method Pattern</strong></span> defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>As with every factory, the Factory Method Pattern gives us a way to encapsulate the instantiations of concrete types. Looking at the class diagram below, you can see that the abstract Creator gives you an interface with a method for creating objects, also known as the “factory method.” Any other methods implemented in the abstract Creator are written to operate on products produced by the factory method. Only subclasses actually implement the factory method and create products.</p><p>As in the official definition, you’ll often hear developers say that the Factory Method lets subclasses decide which class to instantiate. They say “decide” not because the pattern allows subclasses themselves to decide at runtime, but because the creator class is written without knowledge of the actual products that will be created, which is decided purely by the choice of the subclass that is used.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note09"></a>Note</h3><p>You could ask them what “decides” means, but we bet you now understand this better than they do!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00200a"></a><div class="mediaobject"><a id="med_id00200"></a><img src="../Images/image00698.jpeg" alt="image with no caption" hisrc="figs/web/136fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00031"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3qe1"></a><a id="ch04qa3q1"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><a id="iddle1295" class="indexterm"></a><a id="iddle1617" class="indexterm"></a><a id="iddle1636" class="indexterm"></a><a id="iddle1653" class="indexterm"></a><a id="iddle1666" class="indexterm"></a><a id="iddle1670" class="indexterm"></a><a id="iddle2251" class="indexterm"></a><a id="iddle2324" class="indexterm"></a><a id="iddle2483" class="indexterm"></a><span class="strong"><strong>Q: What’s the advantage of the Factory Method Pattern when you only have one ConcreteCreator?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3q1a1"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> The Factory Method Pattern is useful if you’ve only got one concrete creator because you are decoupling the implementation of the product from its use. If you add additional products or change a product’s implementation, it will not affect your Creator (because the Creator is not tightly coupled to any ConcreteProduct).</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3qe2"></a><a id="ch04qa3q2"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: Would it be correct to say that our NY and Chicago stores are implemented using Simple Factory? They look just like it.</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3q2a2"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> They’re similar, but used in different ways. Even though the implementation of each concrete store looks a lot like the SimplePizzaFactory, remember that the concrete stores are extending a class that has defined createPizza() as an abstract method. It is up to each store to define the behavior of the createPizza() method. In Simple Factory, the factory is another object that is composed with the PizzaStore.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3qe3"></a><a id="ch04qa3q3"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: Are the factory method and the Creator always abstract?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3q3a3"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> No, you can define a default factory method to produce some concrete product. Then you always have a means of creating products even if there are no subclasses of the Creator.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3qe4"></a><a id="ch04qa3q4"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: Each store can make four different kinds of pizzas based on the type passed in. Do all concrete creators make multiple products, or do they sometimes just make one?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3q4a4"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> We implemented what is known as the parameterized factory method. It can make more than one object based on a parameter passed in, as you noticed. Often, however, a factory just produces one object and is not parameterized. Both are valid forms of the pattern.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3qe5"></a><a id="ch04qa3q5"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: Your parameterized types don’t seem “type-safe.” I’m just passing in a String! What if I asked for a “CalmPizza”?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3q5a5"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> You are certainly correct and that would cause, what we call in the business, a “runtime error.” There are several other more sophisticated techniques that can be used to make parameters more “type safe,” or, in other words, to ensure errors in parameters can be caught at compile time. For instance, you can create objects that represent the parameter types, use static constants, or use enums.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3qe6"></a><a id="ch04qa3q6"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: I’m still a bit confused about the difference between Simple Factory and Factory Method. They look very similar, except that in Factory Method, the class that returns the pizza is a subclass. Can you explain?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch04qa3q6a6"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> You’re right that the subclasses do look a lot like Simple Factory; however, think of Simple Factory as a one-shot deal, while with Factory Method you are creating a framework that lets the subclasses decide which implementation will be used. For example, the orderPizza() method in the Factory Method provides a general framework for creating pizzas that relies on a factory method to actually create the concrete classes that go into making a pizza. By subclassing the PizzaStore class, you decide what concrete products go into making the pizza that orderPizza() returns. Compare that with SimpleFactory, which gives you a way to encapsulate object creation, but doesn’t give you the flexibility of the Factory Method because there is no way to vary the products you’re creating.</p></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="master_and_studenthellip-id00032"></a><h3 class="title">Master and Student...</h3><p><a id="iddle1405" class="indexterm"></a><a id="iddle1472" class="indexterm"></a><a id="iddle1489" class="indexterm"></a><a id="iddle2005" class="indexterm"></a><span class="bolditalic">Master:</span> <span class="emphasis"><em>Grasshopper, tell me how your training is going.</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>Master, I have taken my study of “encapsulate what varies” further.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>Go on...</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>I have learned that one can encapsulate the code that creates objects. When you have code that instantiates concrete classes, this is an area of frequent change. I’ve learned a technique called “factories” that allows you to encapsulate this behavior of instantiation.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>And these “factories,” of what benefit are they?</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>There are many. By placing all my creation code in one object or method, I avoid duplication in my code and provide one place to perform maintenance. That also means clients depend only upon interfaces rather than the concrete classes required to instantiate objects. As I have learned in my studies, this allows me to program to an interface, not an implementation, and that makes my code more flexible and extensible in the future.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>Yes Grasshopper, your OO instincts are growing. Do you have any questions for your master today?</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>Master, I know that by encapsulating object creation I am coding to abstractions and decoupling my client code from actual implementations. But my factory code must still use concrete classes to instantiate real objects. Am I not pulling the wool over my own eyes?</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>Grasshopper, object creation is a reality of life; we must create objects or we will never create a single Java program. But, with knowledge of this reality, we can design our code so that we have corralled this creation code like the sheep whose wool you would pull over your eyes. Once corralled, we can protect and care for the creation code. If we let our creation code run wild, then we will never collect its “wool.”</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>Master, I see the truth in this.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>As I knew you would. Now, please go and meditate on object dependencies.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="very_dependent_pizzastore">A very dependent PizzaStore</h2></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00033"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle2278" class="indexterm"></a>Let’s pretend you’ve never heard of an OO factory. Here’s a version of the PizzaStore that doesn’t use a factory; make a count of the number of concrete pizza objects this class is dependent on. If you added California style pizzas to this PizzaStore, how many objects would it be dependent on then?</p><div class="informalfigure"><a id="med_id00201a"></a><div class="mediaobject"><a id="med_id00201"></a><img src="../Images/image00699.jpeg" alt="image with no caption" hisrc="figs/web/139fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="looking_at_object_dependencies">Looking at object dependencies</h2></div></div></div><p><a id="iddle1292" class="indexterm"></a><a id="iddle1633" class="indexterm"></a><a id="iddle1663" class="indexterm"></a><a id="iddle1790" class="indexterm"></a>When you directly instantiate an object, you are depending on its concrete class. Take a look at our very dependent PizzaStore one page back. It creates all the pizza objects right in the PizzaStore class instead of delegating to a factory.</p><p>If we draw a diagram representing that version of the PizzaStore and all the objects it depends on, here’s what it looks like:</p><div class="informalfigure"><a id="med_id00202a"></a><div class="mediaobject"><a id="med_id00202"></a><img src="../Images/image00700.jpeg" alt="image with no caption" hisrc="figs/web/140fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="dependency_inversion_principle">The Dependency Inversion Principle</h2></div></div></div><p><a id="iddle1119" class="indexterm"></a><a id="iddle1370" class="indexterm"></a><a id="iddle1400" class="indexterm"></a><a id="iddle1401" class="indexterm"></a><a id="iddle1628" class="indexterm"></a><a id="iddle1658" class="indexterm"></a><a id="iddle1729" class="indexterm"></a><a id="iddle2006" class="indexterm"></a><a id="iddle2077" class="indexterm"></a>It should be pretty clear that reducing dependencies to concrete classes in our code is a “good thing.” In fact, we’ve got an OO design principle that formalizes this notion; it even has a big, formal name: <span class="emphasis"><em>Dependency Inversion Principle</em></span>.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note10"></a>Note</h3><p>Yet another phrase you can use to impress the execs in the room! Your raise will more than offset the cost of this book, and you’ll gain the admiration of your fellow developers.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Here’s the general principle:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note11"></a>Design Principle</h3><p><span class="emphasis"><em>Depend upon abstractions. Do not depend upon concrete classes.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>At first, this principle sounds a lot like “Program to an interface, not an implementation,” right? It is similar; however, the Dependency Inversion Principle makes an even stronger statement about abstraction. It suggests that our high-level components should not depend on our low-level components; rather, they should <span class="emphasis"><em>both</em></span> depend on abstractions.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note12"></a>Note</h3><p>A “high-level” component is a class with behavior defined in terms of other, “low-level” components.</p><p>For example, PizzaStore is a high-level component because its behavior is defined in terms of pizzas - it creates all the different pizza objects, and prepares, bakes, cuts, and boxes them, while the pizzas it uses are low-level components.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>But what the heck does that mean?</p><p>Well, let’s start by looking again at the pizza store diagram on the previous page. PizzaStore is our “high-level component” and the pizza implementations are our “low-level components,” and clearly the PizzaStore is dependent on the concrete pizza classes.</p><p>Now, this principle tells us we should instead write our code so that we are depending on abstractions, not concrete classes. That goes for both our high-level modules and our low-level modules.</p><p>But how do we do this? Let’s think about how we’d apply this principle to our Very Dependent PizzaStore implementation...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="applying_the_principle">Applying the Principle</h2></div></div></div><p>Now, the main problem with the Very Dependent PizzaStore is that it depends on every type of pizza because it actually instantiates concrete types in its orderPizza() method.</p><p>While we’ve created an abstraction, Pizza, we’re nevertheless creating concrete Pizzas in this code, so we don’t get a lot of leverage out of this abstraction.</p><p>How can we get those instantiations out of the orderPizza() method? Well, as we know, the Factory Method allows us to do just that.</p><p>So, after we’ve applied the Factory Method, our diagram looks like this:</p><div class="informalfigure"><a id="med_id00203a"></a><div class="mediaobject"><a id="med_id00203"></a><img src="../Images/image00701.jpeg" alt="image with no caption" hisrc="figs/web/142fig01.png.jpg"/></div></div><p>After applying the Factory Method, you’ll notice that our high-level component, the PizzaStore, and our low-level components, the pizzas, both depend on Pizza, the abstraction. Factory Method is not the only technique for adhering to the Dependency Inversion Principle, but it is one of the more powerful ones.</p><div class="informalfigure"><a id="med_id00204a"></a><div class="mediaobject"><a id="med_id00204"></a><img src="../Images/image00702.jpeg" alt="image with no caption" hisrc="figs/web/143fig01.png.jpg"/></div></div><p><a id="iddle1804" class="indexterm"></a><span class="strong"><strong>Where’s the “inversion” in Dependency Inversion Principle?</strong></span></p><p>The “inversion” in the name Dependency Inversion Principle is there because it inverts the way you typically might think about your OO design. Look at the diagram on the previous page. Notice that the low-level components now depend on a higher level abstraction. Likewise, the high-level component is also tied to the same abstraction. So, the top-to-bottom dependency chart we drew a couple of pages back has inverted itself, with both high-level and low-level modules now depending on the abstraction.</p><p>Let’s also walk through the thinking behind the typical design process and see how introducing the principle can invert the way we think about the design...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="inverting_your_thinkinghellip">Inverting your thinking...</h2></div></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><a id="iddle2127" class="indexterm"></a><span class="inlinemediaobject"><a id="inline_id00205a"></a><img src="../Images/image00703.jpeg" alt="" hisrc="figs/web/144fig01.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Okay, so you need to implement a PizzaStore. What’s the first thought that pops into your head?</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00206a"></a><img src="../Images/image00704.jpeg" alt="" hisrc="figs/web/144fig02.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Right, you start at the top and follow things down to the concrete classes. But, as you’ve seen, you don’t want your store to know about the concrete pizza types, because then it’ll be dependent on all those concrete classes!</p>
<p>Now, let’s “invert” your thinking... instead of starting at the top, start at the Pizzas and think about what you can abstract.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; " rowspan="2"><p><span class="inlinemediaobject"><a id="inline_id00207a"></a><img src="../Images/image00705.jpeg" alt="" hisrc="figs/web/144fig03.png.jpg"/></span></p></td><td style="vertical-align: top; "><p>Right! You are thinking about the abstraction <span class="emphasis"><em>Pizza</em></span>. So now, go back and think about the design of the Pizza Store again.</p>
<p>Close. But to do that you’ll have to rely on a factory to get those concrete classes out of your Pizza Store. Once you’ve done that, your different concrete pizza types depend only on an abstraction and so does your store. We’ve taken a design where the store depended on concrete classes and inverted those dependencies (along with your thinking).</p></td></tr></tbody></table></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="few_guidelines_to_help_you_follow_the_pr">A few guidelines to help you follow the Principle...</h2></div></div></div><p><a id="iddle1289" class="indexterm"></a><a id="iddle1294" class="indexterm"></a><a id="iddle1915" class="indexterm"></a><a id="iddle2014" class="indexterm"></a><a id="iddle2085" class="indexterm"></a><a id="iddle2493" class="indexterm"></a>The following guidelines can help you avoid OO designs that violate the Dependency Inversion Principle:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">No variable should hold a reference to a concrete class.<div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note13"></a>Note</h3><p>If you use <span class="strong"><strong>new</strong></span>, you’ll be holding a reference to a concrete class. Use a factory to get around that!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem">No class should derive from a concrete class.<div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note14"></a>Note</h3><p>If you derive from a concrete class, you’re depending on a concrete class. Derive from an abstraction, like an interface or an abstract class.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem">No method should override an implemented method of any of its base classes.<div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note15"></a>Note</h3><p>If you override an implemented method, then your base class wasn’t really an abstraction to start with. Those methods implemented in the base class are meant to be shared by all your subclasses.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li></ul></div><p>You’re exactly right! Like many of our principles, this is a guideline you should strive for, rather than a rule you should follow all the time. Clearly, every single Java program ever written violates these guidelines!</p><p>But, if you internalize these guidelines and have them in the back of your mind when you design, you’ll know when you are violating the principle and you’ll have a good reason for doing so. For instance, if you have a class that isn’t likely to change, and you know it, then it’s not the end of the world if you instantiate a concrete class in your code. Think about it; we instantiate String objects all the time without thinking twice. Does that violate the principle? Yes. Is that okay? Yes. Why? Because String is very unlikely to change.</p><p>If, on the other hand, a class you write is likely to change, you have some good techniques like Factory Method to encapsulate that change.</p><div class="informalfigure"><a id="med_id00208a"></a><div class="mediaobject"><a id="med_id00208"></a><img src="../Images/image00706.jpeg" alt="image with no caption" hisrc="figs/web/145fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="meanwhilecomma_back_at_the_pizzastorehel">Meanwhile, back at the PizzaStore...</h2></div></div></div><p><a id="iddle2122" class="indexterm"></a>The design for the PizzaStore is really shaping up: it’s got a flexible framework and it does a good job of adhering to design principles.</p><p>Now, the key to Objectville Pizza’s success has always been fresh, quality ingredients, and what you’ve discovered is that with the new framework your franchises have been following your <span class="emphasis"><em>procedures</em></span>, but a few franchises have been substituting inferior ingredients in their pies to lower costs and increase their margins. You know you’ve got to do something, because in the long term this is going to hurt the Objectville brand!</p><div class="informalfigure"><a id="med_id00209a"></a><div class="mediaobject"><a id="med_id00209"></a><img src="../Images/image00707.jpeg" alt="image with no caption" hisrc="figs/web/146fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="ensuring_consistency_in_your_ingredients">Ensuring consistency in your ingredients</h3></div></div></div><p>So how are you going to ensure each franchise is using quality ingredients? You’re going to build a factory that produces them and ships them to your franchises!</p><p>Now there is only one problem with this plan: the franchises are located in different regions and what is red sauce in New York is not red sauce in Chicago. So, you have one set of ingredients that needs to be shipped to New York and a <span class="emphasis"><em>different</em></span> set that needs to be shipped to Chicago. Let’s take a closer look:</p><div class="informalfigure"><a id="med_id00210a"></a><div class="mediaobject"><a id="med_id00210"></a><img src="../Images/image00708.jpeg" alt="image with no caption" hisrc="figs/web/146fig02.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="families_of_ingredientshellip">Families of ingredients...</h2></div></div></div><p><span class="strong"><strong>New York uses one set of ingredients and Chicago another. Given the popularity of Objectville Pizza, it won’t be long before you also need to ship another set of regional ingredients to California, and what’s next? Seattle?</strong></span></p><p><span class="strong"><strong>For this to work, you are going to have to figure out how to handle families of ingredients.</strong></span></p><div class="informalfigure"><a id="med_id00211a"></a><div class="mediaobject"><a id="med_id00211"></a><img src="../Images/image00709.jpeg" alt="image with no caption" hisrc="figs/web/147fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="building_the_ingredient_factories">Building the ingredient factories</h2></div></div></div><p><a id="iddle1005" class="indexterm"></a><a id="iddle1638" class="indexterm"></a><span class="strong"><strong>Now we’re going to build a factory to create our ingredients; the factory will be responsible for creating each ingredient in the ingredient family. In other words, the factory will need to create dough, sauce, cheese, and so on... You’ll see how we are going to handle the regional differences shortly.</strong></span></p><p><span class="strong"><strong>Let’s start by defining an interface for the factory that is going to create all our ingredients:</strong></span></p><div class="informalfigure"><a id="med_id00212a"></a><div class="mediaobject"><a id="med_id00212"></a><img src="../Images/image00710.jpeg" alt="image with no caption" hisrc="figs/web/148fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note16"></a>Note</h3><p>If we’d had some common “machinery” to implement in each instance of factory, we could have made this an abstract class instead...</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><span class="strong"><strong>Here’s what we’re going to do:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① Build a factory for each region. To do this, you’ll create a subclass of PizzaIngredientFactory that implements each create method.</li><li class="listitem" style="list-style-type: none">② Implement a set of ingredient classes to be used with the factory, like ReggianoCheese, RedPeppers, and ThickCrustDough. These classes can be shared among regions where appropriate.</li><li class="listitem" style="list-style-type: none">③ Then we still need to hook all this up by working our new ingredient factories into our old PizzaStore code.</li></ul></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="building_the_new_york_ingredient_factory">Building the New York ingredient factory</h2></div></div></div><p><span class="strong"><strong>Okay, here’s the implementation for the New York ingredient factory. This factory specializes in Marinara Sauce, Reggiano Cheese, Fresh Clams...</strong></span></p><div class="informalfigure"><a id="med_id00213a"></a><div class="mediaobject"><a id="med_id00213"></a><img src="../Images/image00711.jpeg" alt="image with no caption" hisrc="figs/web/149fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00034"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1529" class="indexterm"></a><a id="iddle2268" class="indexterm"></a>Write the ChicagoPizzaIngredientFactory. You can reference the classes below in your implementation:</p><div class="informalfigure"><a id="med_id00214a"></a><div class="mediaobject"><a id="med_id00214"></a><img src="../Images/image00712.jpeg" alt="image with no caption" hisrc="figs/web/150fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="reworking_the_pizzashellip">Reworking the pizzas...</h2></div></div></div><p><a id="iddle2131" class="indexterm"></a>We’ve got our factories all fired up and ready to produce quality ingredients; now we just need to rework our Pizzas so they only use factory-produced ingredients. We’ll start with our abstract Pizza class:</p><div class="informalfigure"><a id="med_id00215a"></a><div class="mediaobject"><a id="med_id00215"></a><img src="../Images/image00713.jpeg" alt="image with no caption" hisrc="figs/web/151fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="reworking_the_pizzascomma_continuedhelli">Reworking the pizzas, continued...</h2></div></div></div><p>Now that you’ve got an abstract Pizza to work from, it’s time to create the New York and Chicago style Pizzas — only this time around they will get their ingredients straight from the factory. The franchisees’ days of skimping on ingredients are over!</p><p>When we wrote the Factory Method code, we had a NYCheesePizza and a ChicagoCheesePizza class. If you look at the two classes, the only thing that differs is the use of regional ingredients. The pizzas are made just the same (dough + sauce + cheese). The same goes for the other pizzas: Veggie, Clam, and so on. They all follow the same preparation steps; they just have different ingredients.</p><p>So, what you’ll see is that we really don’t need two classes for each pizza; the ingredient factory is going to handle the regional differences for us. Here’s the Cheese Pizza:</p><div class="informalfigure"><a id="med_id00216a"></a><div class="mediaobject"><a id="med_id00216"></a><img src="../Images/image00714.jpeg" alt="image with no caption" hisrc="figs/web/152fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_up_close-id00035"></a><h3 class="title">Code Up Close</h3><p><a id="iddle1623" class="indexterm"></a><a id="iddle1654" class="indexterm"></a>The Pizza code uses the factory it has been composed with to produce the ingredients used in the pizza. The ingredients produced depend on which factory we’re using. The Pizza class doesn’t care; it knows how to make pizzas. Now, it’s decoupled from the differences in regional ingredients and can be easily reused when there are factories for the Rockies, the Pacific Northwest, and beyond.</p><div class="informalfigure"><a id="med_id00217a"></a><div class="mediaobject"><a id="med_id00217"></a><img src="../Images/image00715.jpeg" alt="image with no caption" hisrc="figs/web/153fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Let’s check out the ClamPizza as well:</p><div class="informalfigure"><a id="med_id00218a"></a><div class="mediaobject"><a id="med_id00218"></a><img src="../Images/image00716.jpeg" alt="image with no caption" hisrc="figs/web/153fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="revisiting_our_pizza_stores">Revisiting our pizza stores</h2></div></div></div><p><a id="iddle2130" class="indexterm"></a><span class="strong"><strong>We’re almost there; we just need to make a quick trip to our franchise stores to make sure they are using the correct Pizzas. We also need to give them a reference to their local ingredient factories:</strong></span></p><div class="informalfigure"><a id="med_id00219a"></a><div class="mediaobject"><a id="med_id00219"></a><img src="../Images/image00717.jpeg" alt="image with no caption" hisrc="figs/web/154fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note17"></a>Brain Power</h3><p>Compare this version of the createPizza() method to the one in the Factory Method implementation earlier in the chapter.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_have_we_donequestion_mark">What have we done?</h2></div></div></div><p><a id="iddle1004" class="indexterm"></a><a id="iddle1637" class="indexterm"></a><a id="iddle1651" class="indexterm"></a><a id="iddle2114" class="indexterm"></a><span class="strong"><strong>That was quite a series of code changes; what exactly did we do?</strong></span></p><p><span class="strong"><strong>We provided a means of creating a family of ingredients for pizzas by introducing a new type of factory called an Abstract Factory.</strong></span></p><p><span class="strong"><strong>An Abstract Factory gives us an interface for creating a family of products. By writing code that uses this interface, we decouple our code from the actual factory that creates the products. That allows us to implement a variety of factories that produce products meant for different contexts — such as different regions, different operating systems, or different look and feels.</strong></span></p><p><span class="strong"><strong>Because our code is decoupled from the actual products, we can substitute different factories to get different behaviors (like getting marinara instead of plum tomatoes).</strong></span></p><p>An Abstract Factory provides an interface for a family of products. What’s a family? In our case, it’s all the things we need to make a pizza: dough, sauce, cheese, meats, and veggies.</p><p>From the abstract factory, we derive one or more concrete factories that produce the same products, but with different implementations.</p><p>We then write our code so that it uses the factory to create products. By passing in a variety of factories, we get a variety of implementations of those products. But our client code stays the same.</p><div class="informalfigure"><a id="med_id00220a"></a><div class="mediaobject"><a id="med_id00220"></a><img src="../Images/image00718.jpeg" alt="image with no caption" hisrc="figs/web/155fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="more_pizza_for_ethan_and_joelhellip">More pizza for Ethan and Joel...</h2></div></div></div><p><a id="iddle2116" class="indexterm"></a><span class="strong"><strong>Ethan and Joel can’t get enough Objectville Pizza! What they don’t know is that now their orders are making use of the new ingredient factories. So now when they order...</strong></span></p><div class="informalfigure"><a id="med_id00221a"></a><div class="mediaobject"><a id="med_id00221"></a><img src="../Images/image00686.jpeg" alt="image with no caption" hisrc="figs/web/common17.png.jpg"/></div></div><p><span class="strong"><strong>Behind the Scenes</strong></span></p><div class="informalfigure"><a id="med_id00222a"></a><div class="mediaobject"><a id="med_id00222"></a><img src="../Images/image00719.jpeg" alt="image with no caption" hisrc="figs/web/156fig01.png.jpg"/></div></div><p>The first part of the order process hasn’t changed at all. Let’s follow Ethan’s order again:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① First we need a NY PizzaStore:</strong></span><div class="informalfigure"><a id="med_id00223a"></a><div class="mediaobject"><a id="med_id00223"></a><img src="../Images/image00720.jpeg" alt="image with no caption" hisrc="figs/web/156fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Now that we have a store, we can take an order:</strong></span><div class="informalfigure"><a id="med_id00224a"></a><div class="mediaobject"><a id="med_id00224"></a><img src="../Images/image00721.jpeg" alt="image with no caption" hisrc="figs/web/156fig03.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ The orderPizza() method first calls the createPizza() method:</strong></span><a id="pro_id00012"></a><pre class="programlisting"><span class="strong"><strong>Pizza pizza = createPizza("cheese");</strong></span></pre></li></ul></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="from_here_things_changecomma_because_we">From here things change, because we are using an ingredient factory</h3></div></div></div><div class="informalfigure"><a id="med_id00225a"></a><div class="mediaobject"><a id="med_id00225"></a><img src="../Images/image00686.jpeg" alt="image with no caption" hisrc="figs/web/common17.png.jpg"/></div></div><p><span class="strong"><strong>Behind the Scenes</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ When the createPizza() method is called, that’s when our ingredient factory gets involved:</strong></span><div class="informalfigure"><a id="med_id00226a"></a><div class="mediaobject"><a id="med_id00226"></a><img src="../Images/image00722.jpeg" alt="image with no caption" hisrc="figs/web/157fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑤ Next we need to prepare the pizza. Once the prepare() method is called, the factory is asked to prepare ingredients:</strong></span><div class="informalfigure"><a id="med_id00227a"></a><div class="mediaobject"><a id="med_id00227"></a><img src="../Images/image00723.jpeg" alt="image with no caption" hisrc="figs/web/157fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑥ Finally, we have the prepared pizza in hand and the orderPizza() method bakes, cuts, and boxes the pizza.</strong></span></li></ul></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="abstract_factory_pattern_defined">Abstract Factory Pattern defined</h2></div></div></div><p><a id="iddle1009" class="indexterm"></a><a id="iddle1642" class="indexterm"></a><a id="iddle1652" class="indexterm"></a><a id="iddle2115" class="indexterm"></a>We’re adding yet another factory pattern to our pattern family, one that lets us create families of products. Let’s check out the official definition for this pattern:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note18"></a>Note</h3><p><span class="strong"><strong>The Abstract Factory Pattern</strong></span> provides an interface for creating families of related or dependent objects without specifying their concrete classes.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>We’ve certainly seen that Abstract Factory allows a client to use an abstract interface to create a set of related products without knowing (or caring) about the concrete products that are actually produced. In this way, the client is decoupled from any of the specifics of the concrete products. Let’s look at the class diagram to see how this all holds together:</p><div class="informalfigure"><a id="med_id00228a"></a><div class="mediaobject"><a id="med_id00228"></a><img src="../Images/image00724.jpeg" alt="image with no caption" hisrc="figs/web/158fig01.png.jpg"/></div></div><p><span class="strong"><strong>That’s a fairly complicated class diagram; let’s look at it all in terms of our PizzaStore:</strong></span></p><div class="informalfigure"><a id="med_id00229a"></a><div class="mediaobject"><a id="med_id00229"></a><img src="../Images/image00725.jpeg" alt="image with no caption" hisrc="figs/web/159fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00230a"></a><div class="mediaobject"><a id="med_id00230"></a><img src="../Images/image00726.jpeg" alt="image with no caption" hisrc="figs/web/160fig01.png.jpg"/></div></div><p><a id="iddle1012" class="indexterm"></a><a id="iddle1013" class="indexterm"></a><a id="iddle1622" class="indexterm"></a><a id="iddle1645" class="indexterm"></a><a id="iddle1646" class="indexterm"></a><a id="iddle1650" class="indexterm"></a><span class="strong"><strong>Is that a Factory Method lurking inside the Abstract Factory?</strong></span></p><p>Good catch! Yes, often the methods of an Abstract Factory are implemented as factory methods. It makes sense, right? The job of an Abstract Factory is to define an interface for creating a set of products. Each method in that interface is responsible for creating a concrete product, and we implement a subclass of the Abstract Factory to supply those implementations. So, factory methods are a natural way to implement your product methods in your abstract factories.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="patterns_exposed-id00036"></a><h3 class="title">Patterns Exposed</h3><p><span class="strong"><strong>This week’s interview: Factory Method and Abstract Factory, on each other</strong></span></p><p><span class="strong"><strong>HeadFirst:</strong></span> Wow, an interview with two patterns at once! This is a first for us.</p><p><span class="strong"><strong>Factory Method:</strong></span> Yeah, I’m not so sure I like being lumped in with Abstract Factory, you know. Just because we’re both factory patterns doesn’t mean we shouldn’t get our own interviews.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Don’t be miffed, we wanted to interview you together so we could help clear up any confusion about who’s who for the readers. You do have similarities, and I’ve heard that people sometimes get you confused.</p><p><span class="strong"><strong>Abstract Factory:</strong></span> It is true, there have been times I’ve been mistaken for Factory Method, and I know you’ve had similar issues, Factory Method. We’re both really good at decoupling applications from specific implementations; we just do it in different ways. So I can see why people might sometimes get us confused.</p><p><span class="strong"><strong>Factory Method:</strong></span> Well, it still ticks me off. After all, I use classes to create and you use objects; that’s totally different!</p><p><span class="strong"><strong>HeadFirst:</strong></span> Can you explain more about that, Factory Method?</p><p><span class="strong"><strong>Factory Method:</strong></span> Sure. Both Abstract Factory and I create objects — that’s our jobs. But I do it through inheritance...</p><p><span class="strong"><strong>Abstract Factory:</strong></span> ...and I do it through object composition.</p><p><span class="strong"><strong>Factory Method:</strong></span> Right. So that means, to create objects using Factory Method, you need to extend a class and provide an implementation for a factory method.</p><p><span class="strong"><strong>HeadFirst:</strong></span> And that factory method does what?</p><p><span class="strong"><strong>Factory Method:</strong></span> It creates objects, of course! I mean, the whole point of the Factory Method Pattern is that you’re using a subclass to do your creation for you. In that way, clients only need to know the abstract type they are using, the subclass worries about the concrete type. So, in other words, I keep clients decoupled from the concrete types.</p><p><span class="strong"><strong>Abstract Factory:</strong></span> And I do too, only I do it in a different way.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Go on, Abstract Factory... you said something about object composition?</p><p><span class="strong"><strong>Abstract Factory:</strong></span> I provide an abstract type for creating a family of products. Subclasses of this type define how those products are produced. To use the factory, you instantiate one and pass it into some code that is written against the abstract type. So, like Factory Method, my clients are decoupled from the actual concrete products they use.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Oh, I see, so another advantage is that you group together a set of related products.</p><p><span class="strong"><strong>Abstract Factory:</strong></span> That’s right.</p><p><span class="strong"><strong>HeadFirst:</strong></span> What happens if you need to extend that set of related products to, say, add another one? Doesn’t that require changing your interface?</p><p><span class="strong"><strong>Abstract Factory:</strong></span> That’s true; my interface has to change if new products are added, which I know people don’t like to do....</p><p><span class="strong"><strong>Factory Method:</strong></span> &lt;snicker&gt;</p><p><span class="strong"><strong>Abstract Factory:</strong></span> What are you snickering at, Factory Method?</p><p><span class="strong"><strong>Factory Method:</strong></span> Oh, come on, that’s a big deal! Changing your interface means you have to go in and change the interface of every subclass! That sounds like a lot of work.</p><p><span class="strong"><strong>Abstract Factory:</strong></span> Yeah, but I need a big interface because I am used to creating entire families of products. You’re only creating one product, so you don’t really need a big interface, you just need one method.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Abstract Factory, I heard that you often use factory methods to implement your concrete factories?</p><p><span class="strong"><strong>Abstract Factory:</strong></span> Yes, I’ll admit it, my concrete factories often implement a factory method to create their products. In my case, they are used purely to create products...</p><p><span class="strong"><strong>Factory Method:</strong></span> ...while in my case I usually implement code in the abstract creator that makes use of the concrete types the subclasses create.</p><p><span class="strong"><strong>HeadFirst:</strong></span> It sounds like you both are good at what you do. I’m sure people like having a choice; after all, factories are so useful, they’ll want to use them in all kinds of different situations. You both encapsulate object creation to keep applications loosely coupled and less dependent on implementations, which is really great, whether you’re using Factory Method or Abstract Factory. May I allow you each a parting word?</p><p><span class="strong"><strong>Abstract Factory:</strong></span> Thanks. Remember me, Abstract Factory, and use me whenever you have families of products you need to create and you want to make sure your clients create products that belong together.</p><p><span class="strong"><strong>Factory Method:</strong></span> And I’m Factory Method; use me to decouple your client code from the concrete classes you need to instantiate, or if you don’t know ahead of time all the concrete classes you are going to need. To use me, just subclass me and implement my factory method!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="factory_method_and_abstract_factory_comp">Factory Method and Abstract Factory compared</h2></div></div></div><div class="informalfigure"><a id="med_id00231a"></a><div class="mediaobject"><a id="med_id00231"></a><img src="../Images/image00727.jpeg" alt="image with no caption" hisrc="figs/web/162fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00232a"></a><div class="mediaobject"><a id="med_id00232"></a><img src="../Images/image00728.jpeg" alt="image with no caption" hisrc="figs/web/163fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note19"></a>Note</h3><p>The product subclasses create parallel sets of product families. Here we have a New York ingredient family and a Chicago family.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00037">Tools for your Design Toolbox</h2></div></div></div><p>In this chapter, we added two more tools to your toolbox: Factory Method and Abstract Factory. Both patterns encapsulate object creation and allow you to decouple your code from concrete types.</p><div class="informalfigure"><a id="med_id00233a"></a><div class="mediaobject"><a id="med_id00233"></a><img src="../Images/image00729.jpeg" alt="image with no caption" hisrc="figs/web/164fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00038"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">All factories encapsulate object creation.</li><li class="listitem">Simple Factory, while not a bona fide design pattern, is a simple way to decouple your clients from concrete classes.</li><li class="listitem">Factory Method relies on inheritance: object creation is delegated to subclasses, which implement the factory method to create objects.</li><li class="listitem">Abstract Factory relies on object composition: object creation is implemented in methods exposed in the factory interface.</li><li class="listitem">All factory patterns promote loose coupling by reducing the dependency of your application on concrete classes.</li><li class="listitem">The intent of Factory Method is to allow a class to defer instantiation to its subclasses.</li><li class="listitem">The intent of Abstract Factory is to create families of related objects without having to depend on their concrete classes.</li><li class="listitem">The Dependency Inversion Principle guides us to avoid dependencies on concrete types and to strive for abstractions.</li><li class="listitem">Factories are a powerful technique for coding to abstractions, not concrete classes.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword-id00039"></a><h3 class="title">Design Patterns Crossword</h3><p>It’s been a long chapter. Grab a slice of Pizza and relax while doing this crossword; all of the solution words are from this chapter.</p><div class="informalfigure"><a id="med_id00234a"></a><div class="mediaobject"><a id="med_id00234"></a><img src="../Images/image00730.gif" alt="image with no caption" hisrc="figs/web/165fig01.png"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Across</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Down</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>1. In Factory Method, each franchise is a ________.</p>
<p>4. In Factory Method, who decides which class to instantiate?</p>
<p>6. Role of PizzaStore in Factory Method Pattern.</p>
<p>7. All New York style pizzas use this kind of cheese.</p>
<p>8. In Abstract Factory, each ingredient factory is a _______.</p>
<p>9. When you use new, you are programming to an ___________.</p>
<p>11. createPizza() is a ____________ (two words).</p>
<p>12. Joel likes this kind of pizza.</p>
<p>13. In Factory Method, the PizzaStore and the concrete Pizzas all depend on this abstraction.</p>
<p>14. When a class instantiates an object from a concrete class, it’s ___________ on that object.</p>
<p>15. All factory patterns allow us to __________ object creation.</p></td><td style="vertical-align: top; "><p>2. We used ___________ in Simple Factory and Abstract Factory, and inheritance in Factory Method.</p>
<p>3. Abstract Factory creates a ___________ of products.</p>
<p>5. Not a REAL factory pattern, but handy nonetheless.</p>
<p>10. Ethan likes this kind of pizza.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00040"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle2294" class="indexterm"></a>We’ve knocked out the NYPizzaStore; just two more to go and we’ll be ready to franchise! Write the Chicago and California PizzaStore implementations here:</p><div class="informalfigure"><a id="med_id00235a"></a><div class="mediaobject"><a id="med_id00235"></a><img src="../Images/image00731.jpeg" alt="image with no caption" hisrc="figs/web/166fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle_solution-id00041"></a><h3 class="title">Design Puzzle Solution</h3><p><a id="iddle1431" class="indexterm"></a><a id="iddle1630" class="indexterm"></a><a id="iddle1660" class="indexterm"></a><a id="iddle2120" class="indexterm"></a>We need another kind of pizza for those crazy Californians (crazy in a GOOD way, of course). Draw another parallel set of classes that you’d need to add a new California region to our PizzaStore.</p><div class="informalfigure"><a id="med_id00236a"></a><div class="mediaobject"><a id="med_id00236"></a><img src="../Images/image00732.jpeg" alt="image with no caption" hisrc="figs/web/167fig01.png.jpg"/></div></div><p>Okay, now write the five silliest things you can think of to put on a pizza. Then, you’ll be ready to go into business making pizza in California!</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch04note20"></a>Note</h3><p>Here are our suggestions...</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>__<span class="underline">Mashed Potatoes with Roasted Garlic</span>_____________________</p><p>__<span class="underline">BBQ Sauce</span>_________________________________________</p><p>__<span class="underline">Artichoke Hearts</span>_____________________________________</p><p>__<span class="underline">M<span class="inlinemediaobject"><a id="inline_id0001"></a><img src="../Images/image00733.jpeg" alt="" hisrc="figs/web/599fig03.png.jpg"/></span>M’s</span>____________________________________________</p><p>__<span class="underline">Peanuts</span>____________________________________________</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="very_dependent_pizzastore-id00042">A very dependent PizzaStore</h2></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00043"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle2279" class="indexterm"></a>Let’s pretend you’ve never heard of an OO factory. Here’s a version of the PizzaStore that doesn’t use a factory; make a count of the number of concrete pizza objects this class is dependent on. If you added California style pizzas to this PizzaStore, how many objects would it be dependent on then?</p><div class="informalfigure"><a id="med_id00237a"></a><div class="mediaobject"><a id="med_id00237"></a><img src="../Images/image00734.jpeg" alt="image with no caption" hisrc="figs/web/168fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00044"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1006" class="indexterm"></a><a id="iddle1530" class="indexterm"></a><a id="iddle1639" class="indexterm"></a><a id="iddle2123" class="indexterm"></a><a id="iddle2269" class="indexterm"></a>Go ahead and write the ChicagoPizzaIngredientFactory; you can reference the classes below in your implementation:</p><a id="pro_id00013"></a><pre class="programlisting"><span class="strong"><strong>public class ChicagoPizzaIngredientFactory</strong></span>
    <span class="strong"><strong>implements PizzaIngredientFactory</strong></span>
<span class="strong"><strong>{</strong></span>

    <span class="strong"><strong>public Dough createDough() {</strong></span>
        <span class="strong"><strong>return new ThickCrustDough();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public Sauce createSauce() {</strong></span>
        <span class="strong"><strong>return new PlumTomatoSauce();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public Cheese createCheese() {</strong></span>
        <span class="strong"><strong>return new MozzarellaCheese();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public Veggies[] createVeggies() {</strong></span>
        <span class="strong"><strong>Veggies veggies[] = { new BlackOlives(),</strong></span>
                              <span class="strong"><strong>new Spinach(),</strong></span>
                              <span class="strong"><strong>new Eggplant() };</strong></span>
        <span class="strong"><strong>return veggies;</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public Pepperoni createPepperoni() {</strong></span>
        <span class="strong"><strong>return new SlicedPepperoni();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public Clams createClam() {</strong></span>
        <span class="strong"><strong>return new FrozenClams();</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre><div class="informalfigure"><a id="med_id00238a"></a><div class="mediaobject"><a id="med_id00238"></a><img src="../Images/image00735.jpeg" alt="image with no caption" hisrc="figs/web/169fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword_soluti-id00045"></a><h3 class="title">Design Patterns Crossword Solution</h3><p>It’s been a long chapter. Grab a slice of Pizza and relax while doing this crossword; all of the solution words are from this chapter. Here’s the solution.</p><div class="informalfigure"><a id="med_id00239a"></a><div class="mediaobject"><a id="med_id00239"></a><img src="../Images/image00736.gif" alt="image with no caption" hisrc="figs/web/170fig01.png"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>