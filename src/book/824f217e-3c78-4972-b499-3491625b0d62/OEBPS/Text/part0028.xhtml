<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Head First: Design Patterns</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><meta name="description" content="&lt;p&gt;This edition of Head First Design Patterns&amp;#8212;now updated for Java 8&amp;#8212;shows you the tried-and-true, road-tested patterns used by developers to create functional, elegant, reusable, and flexible software. By the time you finish this book, you&amp;#8217;ll be able to take advantage of the best design practices and experiences of those who have fought the beast of software design and triumphed.&lt;/p&gt;"/></head><body><h1 id="aid-QMFO1">Head First: Design Patterns</h1><div class="toc"><div class="toc-title">Table of Contents</div><nav epub:type="toc"><div><blockquote><a href="part0001.xhtml#dedication">Dedication</a></blockquote><blockquote><a href="part0002.xhtml#praise_for_head_first_design_patterns">Praise for <span class="emphasis"><em>Head First Design Patterns</em></span></a></blockquote><blockquote><a href="part0003.xhtml#more_praise_for_head_first_design_patter">More Praise for <span class="emphasis"><em>Head First Design Patterns</em></span></a></blockquote><blockquote><a href="part0004.xhtml#praise_for_other_books_by_eric_freeman_a">Praise for other books by Eric Freeman and Elisabeth Robson</a></blockquote><blockquote><a href="part0005.xhtml#authors_of_head_first_design_patterns">Authors of Head First Design Patterns</a></blockquote><blockquote><a href="part0006.xhtml#creators_of_the_head_first_series_left_p">Creators of the Head First series (and co-conspirators on this book)</a></blockquote><blockquote><a href="part0007.xhtml#aid-6LJU2">How to Use This Book: Intro</a><div><blockquote><a href="part0007.xhtml#who_is_this_book_forquestion_mark">Who is this book for?</a><div><blockquote><a href="part0007.xhtml#who_should_probably_back_away_from_this">Who should probably back away from this book?</a></blockquote></div></blockquote><blockquote><a href="part0007.xhtml#we_know_what_youapostrophere_thinkingdot">We know what you’re thinking.</a></blockquote><blockquote><a href="part0007.xhtml#and_we_know_what_your_brain_is_thinkingd">And we know what your brain is thinking.</a></blockquote><blockquote><a href="part0007.xhtml#metacognition_thinking_about_thinking">Metacognition: thinking about thinking</a></blockquote><blockquote><a href="part0007.xhtml#hereapostrophes_what_we_did">Here’s what WE did</a></blockquote><blockquote><a href="part0007.xhtml#hereapostrophes_what_you_can_do_to_bend">Here’s what YOU can do to bend your brain into submission</a></blockquote><blockquote><a href="part0007.xhtml#read_me">Read Me</a></blockquote><blockquote><a href="part0007.xhtml#tech_reviewers">Tech Reviewers</a></blockquote><blockquote><a href="part0007.xhtml#acknowledgments">Acknowledgments</a></blockquote><blockquote><a href="part0007.xhtml#even_more_peoplethe_large_number_of_ackn">Even more people</a></blockquote></div></blockquote><blockquote><a href="part0008.xhtml#aid-7K4G2">1. Intro to Design Patterns: Welcome to Design Patterns</a><div><blockquote><a href="part0008.xhtml#it_started_with_a_simple_simuduck_app">It started with a simple SimUDuck app</a></blockquote><blockquote><a href="part0008.xhtml#but_now_we_need_the_ducks_to_fly">But now we need the ducks to FLY</a></blockquote><blockquote><a href="part0008.xhtml#but_something_went_horribly_wronghellip">But something went horribly wrong...</a></blockquote><blockquote><a href="part0008.xhtml#joe_thinks_about_inheritancehellip">Joe thinks about inheritance...</a></blockquote><blockquote><a href="part0008.xhtml#how_about_an_interfacequestion_mark">How about an interface?</a></blockquote><blockquote><a href="part0008.xhtml#what_would_you_do_if_you_were_joequestio">What would you do if you were Joe?</a></blockquote><blockquote><a href="part0008.xhtml#one_constant_in_software_development">The one constant in software development</a></blockquote><blockquote><a href="part0008.xhtml#zeroing_in_on_the_problemhellip">Zeroing in on the problem...</a></blockquote><blockquote><a href="part0008.xhtml#separating_what_changes_from_what_stays">Separating what changes from what stays the same</a></blockquote><blockquote><a href="part0008.xhtml#designing_the_duck_behaviors">Designing the Duck Behaviors</a></blockquote><blockquote><a href="part0008.xhtml#implementing_the_duck_behaviors">Implementing the Duck Behaviors</a></blockquote><blockquote><a href="part0008.xhtml#integrating_the_duck_behavior">Integrating the Duck Behavior</a></blockquote><blockquote><a href="part0008.xhtml#more_integrationhellip">More integration...</a></blockquote><blockquote><a href="part0008.xhtml#testing_the_duck_code">Testing the Duck code</a></blockquote><blockquote><a href="part0008.xhtml#setting_behavior_dynamically">Setting behavior dynamically</a></blockquote><blockquote><a href="part0008.xhtml#big_picture_on_encapsulated_behaviors">The Big Picture on encapsulated behaviors</a></blockquote><blockquote><a href="part0008.xhtml#has-a_can_be_better_than_is-a">HAS-A can be better than IS-A</a></blockquote><blockquote><a href="part0008.xhtml#speaking_of_design_patternshellip">Speaking of Design Patterns...</a></blockquote><blockquote><a href="part0008.xhtml#overheard_at_the_local_dinerhellip">Overheard at the local diner...</a></blockquote><blockquote><a href="part0008.xhtml#overheard_in_the_next_cubiclehellip">Overheard in the next cubicle...</a></blockquote><blockquote><a href="part0008.xhtml#power_of_a_shared_pattern_vocabulary">The power of a shared pattern vocabulary</a></blockquote><blockquote><a href="part0008.xhtml#how_do_i_use_design_patternsquestion_mar">How do I use Design Patterns?</a></blockquote><blockquote><a href="part0008.xhtml#tools_for_your_design_toolbox">Tools for your Design Toolbox</a></blockquote></div></blockquote><blockquote><a href="part0009.xhtml#aid-8IL22">2. The Observer Pattern: Keeping your Objects in the know</a><div><blockquote><a href="part0009.xhtml#weather_monitoring_application_overview">The Weather Monitoring application overview</a></blockquote><blockquote><a href="part0009.xhtml#unpacking_the_weatherdata_class">Unpacking the WeatherData class</a></blockquote><blockquote><a href="part0009.xhtml#what_do_we_know_so_farquestion_mark">What do we know so far?</a></blockquote><blockquote><a href="part0009.xhtml#taking_a_firstcomma_misguided_swag_at_th">Taking a first, misguided SWAG at the Weather Station</a></blockquote><blockquote><a href="part0009.xhtml#whatapostrophes_wrong_with_our_implement">What’s wrong with our implementation?</a></blockquote><blockquote><a href="part0009.xhtml#meet_the_observer_pattern">Meet the Observer Pattern</a></blockquote><blockquote><a href="part0009.xhtml#publishers_plus_subscribers_equals_obser">Publishers + Subscribers = Observer Pattern</a></blockquote><blockquote><a href="part0009.xhtml#day_in_the_life_of_the_observer_pattern">A day in the life of the Observer Pattern</a></blockquote><blockquote><a href="part0009.xhtml#five-minute_drama_a_subject_for_observat">Five-minute drama: a subject for observation</a></blockquote><blockquote><a href="part0009.xhtml#two_weeks_laterhellip">Two weeks later...</a></blockquote><blockquote><a href="part0009.xhtml#observer_pattern_defined">The Observer Pattern defined</a></blockquote><blockquote><a href="part0009.xhtml#observer_pattern_defined_the_class_diagr">The Observer Pattern defined: the class diagram</a></blockquote><blockquote><a href="part0009.xhtml#power_of_loose_coupling">The power of Loose Coupling</a></blockquote><blockquote><a href="part0009.xhtml#cubicle_conversation">Cubicle conversation</a></blockquote><blockquote><a href="part0009.xhtml#designing_the_weather_station">Designing the Weather Station</a></blockquote><blockquote><a href="part0009.xhtml#implementing_the_weather_station">Implementing the Weather Station</a></blockquote><blockquote><a href="part0009.xhtml#implementing_the_subject_interface_in_we">Implementing the Subject interface in WeatherData</a></blockquote><blockquote><a href="part0009.xhtml#nowcomma_letapostrophes_build_those_disp">Now, let’s build those display elements</a></blockquote><blockquote><a href="part0009.xhtml#power_up_the_weather_station">Power up the Weather Station</a></blockquote><blockquote><a href="part0009.xhtml#using_javaapostrophes_built-in_observer">Using Java’s built-in Observer Pattern</a></blockquote><blockquote><a href="part0009.xhtml#how_javaapostrophes_built-in_observer_pa">How Java’s built-in Observer Pattern works</a></blockquote><blockquote><a href="part0009.xhtml#reworking_the_weather_station_with_the_b">Reworking the Weather Station with the built-in support</a></blockquote><blockquote><a href="part0009.xhtml#running_the_new_code">Running the new code</a></blockquote><blockquote><a href="part0009.xhtml#dark_side_of_javadotutildotobservable">The dark side of java.util.Observable</a></blockquote><blockquote><a href="part0009.xhtml#other_places_youapostrophell_find_the_ob">Other places you’ll find the Observer Pattern in the JDK</a></blockquote><blockquote><a href="part0009.xhtml#and_the_codehellip">And the code...</a><div><blockquote><a href="part0009.xhtml#updated_codecomma_using_lambda_expressio">The updated code, using lambda expressions</a></blockquote></div></blockquote><blockquote><a href="part0009.xhtml#tools_for_your_design_toolbox-id00010">Tools for your Design Toolbox</a></blockquote></div></blockquote><blockquote><a href="part0010.xhtml#aid-9H5K2">3. The Decorator Pattern: Decorating Objects</a><div><blockquote><a href="part0010.xhtml#welcome_to_starbuzz_coffee">Welcome to Starbuzz Coffee</a></blockquote><blockquote><a href="part0010.xhtml#open-closed_principle">The Open-Closed Principle</a></blockquote><blockquote><a href="part0010.xhtml#meet_the_decorator_pattern">Meet the Decorator Pattern</a></blockquote><blockquote><a href="part0010.xhtml#constructing_a_drink_order_with_decorato">Constructing a drink order with Decorators</a><div><blockquote><a href="part0010.xhtml#okaycomma_hereapostrophes_what_we_know_s">Okay, here’s what we know so far...</a></blockquote></div></blockquote><blockquote><a href="part0010.xhtml#decorator_pattern_defined">The Decorator Pattern defined</a></blockquote><blockquote><a href="part0010.xhtml#decorating_our_beverages">Decorating our Beverages</a></blockquote><blockquote><a href="part0010.xhtml#cubicle_conversation-id00019">Cubicle Conversation</a></blockquote><blockquote><a href="part0010.xhtml#new_barista_training">New barista training</a></blockquote><blockquote><a href="part0010.xhtml#writing_the_starbuzz_code">Writing the Starbuzz code</a></blockquote><blockquote><a href="part0010.xhtml#coding_beverages">Coding beverages</a></blockquote><blockquote><a href="part0010.xhtml#coding_condiments">Coding condiments</a></blockquote><blockquote><a href="part0010.xhtml#serving_some_coffees">Serving some coffees</a></blockquote><blockquote><a href="part0010.xhtml#real_world_decorators_java_isoliduso">Real World Decorators: Java I/O</a></blockquote><blockquote><a href="part0010.xhtml#decorating_the_javadotio_classes">Decorating the java.io classes</a></blockquote><blockquote><a href="part0010.xhtml#writing_your_own_java_isoliduso_decorato">Writing your own Java I/O Decorator</a></blockquote><blockquote><a href="part0010.xhtml#test_out_your_new_java_isoliduso_decorat">Test out your new Java I/O Decorator</a><div><blockquote><a href="part0010.xhtml#give_it_a_spin">Give it a spin</a></blockquote></div></blockquote><blockquote><a href="part0010.xhtml#tools_for_your_design_toolbox-id00023">Tools for your Design Toolbox</a></blockquote></div></blockquote><blockquote><a href="part0011.xhtml#aid-AFM62">4. The Factory Pattern: Baking with OO Goodness</a><div><blockquote><a href="part0011.xhtml#identifying_the_aspects_that_vary">Identifying the aspects that vary</a></blockquote><blockquote><a href="part0011.xhtml#but_the_pressure_is_on_to_add_more_pizza">But the pressure is on to add more pizza types</a></blockquote><blockquote><a href="part0011.xhtml#encapsulating_object_creation">Encapsulating object creation</a></blockquote><blockquote><a href="part0011.xhtml#building_a_simple_pizza_factory">Building a simple pizza factory</a></blockquote><blockquote><a href="part0011.xhtml#reworking_the_pizzastore_class">Reworking the PizzaStore class</a></blockquote><blockquote><a href="part0011.xhtml#simple_factory_defined">The Simple Factory defined</a></blockquote><blockquote><a href="part0011.xhtml#franchising_the_pizza_store">Franchising the pizza store</a><div><blockquote><a href="part0011.xhtml#weapostropheve_seen_one_approachhellip">We’ve seen one approach...</a></blockquote><blockquote><a href="part0011.xhtml#but_youapostrophed_like_a_little_more_qu">But you’d like a little more quality control...</a></blockquote></div></blockquote><blockquote><a href="part0011.xhtml#framework_for_the_pizza_store">A framework for the pizza store</a></blockquote><blockquote><a href="part0011.xhtml#allowing_the_subclasses_to_decide">Allowing the subclasses to decide</a></blockquote><blockquote><a href="part0011.xhtml#letapostrophes_make_a_pizzastore">Let’s make a PizzaStore</a></blockquote><blockquote><a href="part0011.xhtml#declaring_a_factory_method">Declaring a factory method</a><div><blockquote><a href="part0011.xhtml#letapostrophes_see_how_it_works_ordering">Let’s see how it works: ordering pizzas with the pizza factory method</a></blockquote><blockquote><a href="part0011.xhtml#so_how_do_they_orderquestion_mark">So how do they order?</a></blockquote><blockquote><a href="part0011.xhtml#letapostrophes_check_out_how_these_pizza">Let’s check out how these pizzas are really made to order...</a></blockquote></div></blockquote><blockquote><a href="part0011.xhtml#weapostrophere_just_missing_one_thing_pi">We’re just missing one thing: PIZZA!</a><div><blockquote><a href="part0011.xhtml#our_pizzastore_isnapostrophet_going_to_b">Our PizzaStore isn’t going to be very popular without some pizzas, so let’s implement them</a></blockquote><blockquote><a href="part0011.xhtml#now_we_just_need_some_concrete_subclasse">Now we just need some concrete subclasses... how about defining New York and Chicago style cheese pizzas?</a></blockquote></div></blockquote><blockquote><a href="part0011.xhtml#youapostropheve_waited_long_enoughdot_ti">You’ve waited long enough. Time for some pizzas!</a></blockquote><blockquote><a href="part0011.xhtml#itapostrophes_finally_time_to_meet_the_f">It’s finally time to meet the Factory Method Pattern</a><div><blockquote><a href="part0011.xhtml#creator_classes">The Creator classes</a></blockquote><blockquote><a href="part0011.xhtml#product_classes">The Product classes</a></blockquote></div></blockquote><blockquote><a href="part0011.xhtml#another_perspective_parallel_class_hiera">Another perspective: parallel class hierarchies</a></blockquote><blockquote><a href="part0011.xhtml#factory_method_pattern_defined">Factory Method Pattern defined</a></blockquote><blockquote><a href="part0011.xhtml#very_dependent_pizzastore">A very dependent PizzaStore</a></blockquote><blockquote><a href="part0011.xhtml#looking_at_object_dependencies">Looking at object dependencies</a></blockquote><blockquote><a href="part0011.xhtml#dependency_inversion_principle">The Dependency Inversion Principle</a></blockquote><blockquote><a href="part0011.xhtml#applying_the_principle">Applying the Principle</a></blockquote><blockquote><a href="part0011.xhtml#inverting_your_thinkinghellip">Inverting your thinking...</a></blockquote><blockquote><a href="part0011.xhtml#few_guidelines_to_help_you_follow_the_pr">A few guidelines to help you follow the Principle...</a></blockquote><blockquote><a href="part0011.xhtml#meanwhilecomma_back_at_the_pizzastorehel">Meanwhile, back at the PizzaStore...</a><div><blockquote><a href="part0011.xhtml#ensuring_consistency_in_your_ingredients">Ensuring consistency in your ingredients</a></blockquote></div></blockquote><blockquote><a href="part0011.xhtml#families_of_ingredientshellip">Families of ingredients...</a></blockquote><blockquote><a href="part0011.xhtml#building_the_ingredient_factories">Building the ingredient factories</a></blockquote><blockquote><a href="part0011.xhtml#building_the_new_york_ingredient_factory">Building the New York ingredient factory</a></blockquote><blockquote><a href="part0011.xhtml#reworking_the_pizzashellip">Reworking the pizzas...</a></blockquote><blockquote><a href="part0011.xhtml#reworking_the_pizzascomma_continuedhelli">Reworking the pizzas, continued...</a></blockquote><blockquote><a href="part0011.xhtml#revisiting_our_pizza_stores">Revisiting our pizza stores</a></blockquote><blockquote><a href="part0011.xhtml#what_have_we_donequestion_mark">What have we done?</a></blockquote><blockquote><a href="part0011.xhtml#more_pizza_for_ethan_and_joelhellip">More pizza for Ethan and Joel...</a><div><blockquote><a href="part0011.xhtml#from_here_things_changecomma_because_we">From here things change, because we are using an ingredient factory</a></blockquote></div></blockquote><blockquote><a href="part0011.xhtml#abstract_factory_pattern_defined">Abstract Factory Pattern defined</a></blockquote><blockquote><a href="part0011.xhtml#factory_method_and_abstract_factory_comp">Factory Method and Abstract Factory compared</a></blockquote><blockquote><a href="part0011.xhtml#tools_for_your_design_toolbox-id00037">Tools for your Design Toolbox</a></blockquote><blockquote><a href="part0011.xhtml#very_dependent_pizzastore-id00042">A very dependent PizzaStore</a></blockquote></div></blockquote><blockquote><a href="part0012.xhtml#aid-BE6O2">5. The Singleton Pattern: One of a Kind Objects</a><div><blockquote><a href="part0012.xhtml#little_singleton">The Little Singleton</a><div><blockquote><a href="part0012.xhtml#small_socratic_exercise_in_the_style_of">A small Socratic exercise in the style of The Little Lisper</a></blockquote></div></blockquote><blockquote><a href="part0012.xhtml#dissecting_the_classic_singleton_pattern">Dissecting the classic Singleton Pattern implementation</a></blockquote><blockquote><a href="part0012.xhtml#chocolate_factory">The Chocolate Factory</a></blockquote><blockquote><a href="part0012.xhtml#singleton_pattern_defined">Singleton Pattern defined</a></blockquote><blockquote><a href="part0012.xhtml#houstoncomma_hersheycomma_pa_we_have_a_p"><span class="strikethrough">Houston,</span> Hershey, PA we have a problem...</a></blockquote><blockquote><a href="part0012.xhtml#dealing_with_multithreading">Dealing with multithreading</a></blockquote><blockquote><a href="part0012.xhtml#can_we_improve_multithreadingquestion_ma">Can we improve multithreading?</a><div><blockquote><a href="part0012.xhtml#onedot_do_nothing_if_the_performance_of">1. Do nothing if the performance of getInstance() isn’t critical to your application.</a></blockquote><blockquote><a href="part0012.xhtml#twodot_move_to_an_eagerly_created_instan">2. Move to an eagerly created instance rather than a lazily created one.</a></blockquote><blockquote><a href="part0012.xhtml#threedot_use_quotation_markdouble-checke">3. Use “double-checked locking” to reduce the use of synchronization in getInstance().</a></blockquote></div></blockquote><blockquote><a href="part0012.xhtml#meanwhilecomma_back_at_the_chocolate_fac">Meanwhile, back at the Chocolate Factory...</a></blockquote><blockquote><a href="part0012.xhtml#congratulationsexclamation_mark">Congratulations!</a></blockquote><blockquote><a href="part0012.xhtml#tools_for_your_design_toolbox-id00052">Tools for your Design Toolbox</a></blockquote></div></blockquote><blockquote><a href="part0013.xhtml#aid-CCNA2">6. The Command Pattern: Encapsulating Invocation</a><div><blockquote><a href="part0013.xhtml#free_hardwareexclamation_mark_letapostro">Free hardware! Let’s check out the Remote Control...</a></blockquote><blockquote><a href="part0013.xhtml#taking_a_look_at_the_vendor_classes">Taking a look at the vendor classes</a></blockquote><blockquote><a href="part0013.xhtml#cubicle_conversation-id00058">Cubicle Conversation</a></blockquote><blockquote><a href="part0013.xhtml#meanwhilecomma_back_at_the_dinerhellipco">Meanwhile, back at the Diner..., or, A brief introduction to the Command Pattern</a></blockquote><blockquote><a href="part0013.xhtml#letapostrophes_study_the_interaction_in">Let’s study the interaction in a little more detail...</a></blockquote><blockquote><a href="part0013.xhtml#objectville_diner_roles_and_responsibili">The Objectville Diner roles and responsibilities</a></blockquote><blockquote><a href="part0013.xhtml#from_the_diner_to_the_command_pattern">From the Diner to the Command Pattern</a></blockquote><blockquote><a href="part0013.xhtml#our_first_command_object">Our first command object</a></blockquote><blockquote><a href="part0013.xhtml#using_the_command_object">Using the command object</a></blockquote><blockquote><a href="part0013.xhtml#creating_a_simple_test_to_use_the_remote">Creating a simple test to use the Remote Control</a></blockquote><blockquote><a href="part0013.xhtml#command_pattern_defined">The Command Pattern defined</a></blockquote><blockquote><a href="part0013.xhtml#command_pattern_defined_the_class_diagra">The Command Pattern defined: the class diagram</a></blockquote><blockquote><a href="part0013.xhtml#assigning_commands_to_slots">Assigning Commands to slots</a></blockquote><blockquote><a href="part0013.xhtml#implementing_the_remote_control">Implementing the Remote Control</a></blockquote><blockquote><a href="part0013.xhtml#implementing_the_commands">Implementing the Commands</a></blockquote><blockquote><a href="part0013.xhtml#putting_the_remote_control_through_its_p">Putting the Remote Control through its paces</a><div><blockquote><a href="part0013.xhtml#nowcomma_letapostrophes_check_out_the_ex">Now, let’s check out the execution of our remote control test...</a></blockquote></div></blockquote><blockquote><a href="part0013.xhtml#time_to_write_that_documentationhellip">Time to write that documentation...</a></blockquote><blockquote><a href="part0013.xhtml#what_are_we_doingquestion_mark">What are we doing?</a></blockquote><blockquote><a href="part0013.xhtml#time_to_qa_that_undo_buttonexclamation_m">Time to QA that Undo button!</a></blockquote><blockquote><a href="part0013.xhtml#using_state_to_implement_undo">Using state to implement Undo</a></blockquote><blockquote><a href="part0013.xhtml#adding_undo_to_the_ceilingfan_commands">Adding Undo to the CeilingFan commands</a></blockquote><blockquote><a href="part0013.xhtml#get_ready_to_test_the_ceiling_fan">Get ready to test the ceiling fan</a></blockquote><blockquote><a href="part0013.xhtml#testing_the_ceiling_fanhellip">Testing the ceiling fan...</a></blockquote><blockquote><a href="part0013.xhtml#every_remote_needs_a_party_modeexclamati">Every remote needs a Party Mode!</a></blockquote><blockquote><a href="part0013.xhtml#using_a_macro_command">Using a macro command</a></blockquote><blockquote><a href="part0013.xhtml#command_pattern_means_lots_of_command_cl">The Command Pattern means lots of command classes</a><div><blockquote><a href="part0013.xhtml#do_we_really_need_all_these_command_clas">Do we really need all these command classes?</a></blockquote></div></blockquote><blockquote><a href="part0013.xhtml#simplifying_the_remote_control_with_lamb">Simplifying the Remote Control with lambda expressions</a></blockquote><blockquote><a href="part0013.xhtml#simplifying_even_more_with_method_refere">Simplifying even more with method references</a><div><blockquote><a href="part0013.xhtml#what_if_we_need_to_do_more_than_one_thin">What if we need to do more than one thing in our lambda expression?</a></blockquote></div></blockquote><blockquote><a href="part0013.xhtml#test_the_remote_control_with_lambda_expr">Test the remote control with lambda expressions</a><div><blockquote><a href="part0013.xhtml#check_out_the_results_of_all_those_lambd">Check out the results of all those lambda expression commands...</a></blockquote></div></blockquote><blockquote><a href="part0013.xhtml#more_uses_of_the_command_pattern_queuing">More uses of the Command Pattern: queuing requests</a></blockquote><blockquote><a href="part0013.xhtml#more_uses_of_the_command_pattern_logging">More uses of the Command Pattern: logging requests</a></blockquote><blockquote><a href="part0013.xhtml#tools_for_your_design_toolbox-id00064">Tools for your Design Toolbox</a></blockquote></div></blockquote><blockquote><a href="part0014.xhtml#aid-DB7S2">7. The Adapter and Facade Patterns: Being Adaptive</a><div><blockquote><a href="part0014.xhtml#adapters_all_around_us">Adapters all around us</a></blockquote><blockquote><a href="part0014.xhtml#object-oriented_adapters">Object-oriented adapters</a></blockquote><blockquote><a href="part0014.xhtml#if_it_walks_like_a_duck_and_quacks_like">If it walks like a duck and quacks like a duck, then it <span class="strikethrough">must</span> might be a <span class="strikethrough">duck</span> turkey wrapped with a duck adapter...</a></blockquote><blockquote><a href="part0014.xhtml#test_drive_the_adapter">Test drive the adapter</a></blockquote><blockquote><a href="part0014.xhtml#adapter_pattern_explained">The Adapter Pattern explained</a><div><blockquote><a href="part0014.xhtml#hereapostrophes_how_the_client_uses_the">Here’s how the Client uses the Adapter</a></blockquote></div></blockquote><blockquote><a href="part0014.xhtml#adapter_pattern_defined">Adapter Pattern defined</a></blockquote><blockquote><a href="part0014.xhtml#object_and_class_adapters">Object and class adapters</a></blockquote><blockquote><a href="part0014.xhtml#real-world_adapters">Real-world adapters</a><div><blockquote><a href="part0014.xhtml#old-world_enumerators">Old-world Enumerators</a></blockquote><blockquote><a href="part0014.xhtml#new-world_iterators">New-world Iterators</a></blockquote><blockquote><a href="part0014.xhtml#and_todayhellip">And today...</a></blockquote></div></blockquote><blockquote><a href="part0014.xhtml#adapting_an_enumeration_to_an_iterator">Adapting an Enumeration to an Iterator</a><div><blockquote><a href="part0014.xhtml#designing_the_adapter">Designing the Adapter</a></blockquote><blockquote><a href="part0014.xhtml#dealing_with_the_removeleft_parenthesisr">Dealing with the remove() method</a></blockquote><blockquote><a href="part0014.xhtml#writing_the_enumerationiterator_adapter">Writing the EnumerationIterator adapter</a></blockquote></div></blockquote><blockquote><a href="part0014.xhtml#and_now_for_something_differenthellip">And now for something different...</a></blockquote><blockquote><a href="part0014.xhtml#home_sweet_home_theater">Home Sweet Home Theater</a></blockquote><blockquote><a href="part0014.xhtml#watching_a_movie_left_parenthesisthe_har">Watching a movie (the hard way)</a></blockquote><blockquote><a href="part0014.xhtml#lightscomma_cameracomma_facadeexclamatio">Lights, Camera, Facade!</a></blockquote><blockquote><a href="part0014.xhtml#constructing_your_home_theater_facade">Constructing your home theater facade</a></blockquote><blockquote><a href="part0014.xhtml#implementing_the_simplified_interface">Implementing the simplified interface</a></blockquote><blockquote><a href="part0014.xhtml#time_to_watch_a_movie_left_parenthesisth">Time to watch a movie (the easy way)</a></blockquote><blockquote><a href="part0014.xhtml#facade_pattern_defined">Facade Pattern defined</a></blockquote><blockquote><a href="part0014.xhtml#principle_of_least_knowledge">The Principle of Least Knowledge</a></blockquote><blockquote><a href="part0014.xhtml#how_not_to_win_friends_and_influence_obj">How NOT to Win Friends and Influence Objects</a><div><blockquote><a href="part0014.xhtml#keeping_your_method_calls_in_boundshelli">Keeping your method calls in bounds...</a></blockquote></div></blockquote><blockquote><a href="part0014.xhtml#facade_and_the_principle_of_least_knowle">The Facade and the Principle of Least Knowledge</a></blockquote><blockquote><a href="part0014.xhtml#tools_for_your_design_toolbox-id00079">Tools for your Design Toolbox</a></blockquote></div></blockquote><blockquote><a href="part0015.xhtml#aid-E9OE2">8. The Template Method Pattern: Encapsulating Algorithms</a><div><blockquote><a href="part0015.xhtml#itapostrophes_time_for_some_more_caffein">It’s time for some more caffeine</a></blockquote><blockquote><a href="part0015.xhtml#whipping_up_some_coffee_and_tea_classes">Whipping up some coffee and tea classes (in Java)</a></blockquote><blockquote><a href="part0015.xhtml#and_now_the_teahellip">And now the Tea...</a></blockquote><blockquote><a href="part0015.xhtml#sircomma_may_i_abstract_your_coffeecomma">Sir, may I abstract your Coffee, Tea?</a></blockquote><blockquote><a href="part0015.xhtml#taking_the_design_furtherhellip">Taking the design further...</a></blockquote><blockquote><a href="part0015.xhtml#abstracting_preparerecipeleft_parenthesi">Abstracting prepareRecipe()</a></blockquote><blockquote><a href="part0015.xhtml#what_have_we_donequestion_mark-id00089">What have we done?</a></blockquote><blockquote><a href="part0015.xhtml#meet_the_template_method">Meet the Template Method</a></blockquote><blockquote><a href="part0015.xhtml#letapostrophes_make_some_teahellip">Let’s make some tea...</a></blockquote><blockquote><a href="part0015.xhtml#what_did_the_template_method_get_usquest">What did the Template Method get us?</a></blockquote><blockquote><a href="part0015.xhtml#template_method_pattern_defined">Template Method Pattern defined</a></blockquote><blockquote><a href="part0015.xhtml#hooked_on_template_methodhellip">Hooked on Template Method...</a></blockquote><blockquote><a href="part0015.xhtml#using_the_hook">Using the hook</a></blockquote><blockquote><a href="part0015.xhtml#letapostrophes_run_the_test_drive">Let’s run the Test Drive</a></blockquote><blockquote><a href="part0015.xhtml#hollywood_principle">The Hollywood Principle</a></blockquote><blockquote><a href="part0015.xhtml#hollywood_principle_and_template_method">The Hollywood Principle and Template Method</a></blockquote><blockquote><a href="part0015.xhtml#template_methods_in_the_wild">Template Methods in the Wild</a></blockquote><blockquote><a href="part0015.xhtml#sorting_with_template_method">Sorting with Template Method</a></blockquote><blockquote><a href="part0015.xhtml#weapostropheve_got_some_ducks_to_sorthel">We’ve got some ducks to sort...</a></blockquote><blockquote><a href="part0015.xhtml#what_is_comparetoleft_parenthesisright_p">What is compareTo()?</a></blockquote><blockquote><a href="part0015.xhtml#comparing_ducks_and_ducks">Comparing Ducks and Ducks</a></blockquote><blockquote><a href="part0015.xhtml#letapostrophes_sort_some_ducks">Let’s sort some Ducks</a></blockquote><blockquote><a href="part0015.xhtml#making_of_the_sorting_duck_machine">The making of the sorting duck machine</a></blockquote><blockquote><a href="part0015.xhtml#swinginapostrophe_with_frames">Swingin’ with Frames</a></blockquote><blockquote><a href="part0015.xhtml#applets">Applets</a></blockquote><blockquote><a href="part0015.xhtml#tools_for_your_design_toolbox-id00097">Tools for your Design Toolbox</a></blockquote></div></blockquote><blockquote><a href="part0016.xhtml#aid-F8902">9. The Iterator and Composite Patterns: Well-Managed Collections</a><div><blockquote><a href="part0016.xhtml#breaking_news_objectville_diner_and_obje">Breaking News: Objectville Diner and Objectville Pancake House Merge</a></blockquote><blockquote><a href="part0016.xhtml#check_out_the_menu_items">Check out the Menu Items</a></blockquote><blockquote><a href="part0016.xhtml#lou_and_melapostrophes_menu_implementati">Lou and Mel’s Menu implementations</a></blockquote><blockquote><a href="part0016.xhtml#whatapostrophes_the_problem_with_having">What’s the problem with having two different menu representations?</a><div><blockquote><a href="part0016.xhtml#java-enabled_waitress_specification">The Java-Enabled Waitress Specification</a></blockquote></div></blockquote><blockquote><a href="part0016.xhtml#what_nowquestion_mark">What now?</a></blockquote><blockquote><a href="part0016.xhtml#can_we_encapsulate_the_iterationquestion">Can we encapsulate the iteration?</a></blockquote><blockquote><a href="part0016.xhtml#meet_the_iterator_pattern">Meet the Iterator Pattern</a></blockquote><blockquote><a href="part0016.xhtml#adding_an_iterator_to_dinermenu">Adding an Iterator to DinerMenu</a></blockquote><blockquote><a href="part0016.xhtml#reworking_the_diner_menu_with_iterator">Reworking the Diner Menu with Iterator</a></blockquote><blockquote><a href="part0016.xhtml#fixing_up_the_waitress_code">Fixing up the Waitress code</a></blockquote><blockquote><a href="part0016.xhtml#testing_our_code">Testing our code</a><div><blockquote><a href="part0016.xhtml#hereapostrophes_the_test_runhellip">Here’s the test run...</a></blockquote></div></blockquote><blockquote><a href="part0016.xhtml#what_have_we_done_so_farquestion_mark">What have we done so far?</a></blockquote><blockquote><a href="part0016.xhtml#what_we_have_so_farhellip">What we have so far...</a></blockquote><blockquote><a href="part0016.xhtml#making_some_improvementshellip">Making some improvements...</a></blockquote><blockquote><a href="part0016.xhtml#cleaning_things_up_with_javadotutildotit">Cleaning things up with java.util.Iterator</a></blockquote><blockquote><a href="part0016.xhtml#we_are_almost_therehellip">We are almost there...</a></blockquote><blockquote><a href="part0016.xhtml#what_does_this_get_usquestion_mark">What does this get us?</a></blockquote><blockquote><a href="part0016.xhtml#iterator_pattern_defined">Iterator Pattern defined</a></blockquote><blockquote><a href="part0016.xhtml#single_responsibility">Single Responsibility</a></blockquote><blockquote><a href="part0016.xhtml#taking_a_look_at_the_cafeacute_menu">Taking a look at the Café Menu</a></blockquote><blockquote><a href="part0016.xhtml#reworking_the_cafeacute_menu_code">Reworking the Café Menu code</a></blockquote><blockquote><a href="part0016.xhtml#adding_the_cafeacute_menu_to_the_waitres">Adding the Café Menu to the Waitress</a></blockquote><blockquote><a href="part0016.xhtml#breakfastcomma_lunch_and_dinner">Breakfast, lunch AND dinner</a><div><blockquote><a href="part0016.xhtml#hereapostrophes_the_test_runsemicolon_ch">Here’s the test run; check out the new dinner menu from the Café!</a></blockquote></div></blockquote><blockquote><a href="part0016.xhtml#what_did_we_doquestion_mark">What did we do?</a></blockquote><blockquote><a href="part0016.xhtml#we_decoupled_the_waitresshellipdot">We decoupled the Waitress....</a></blockquote><blockquote><a href="part0016.xhtml#hellip_and_we_made_the_waitress_more_ext">... and we made the Waitress more extensible</a></blockquote><blockquote><a href="part0016.xhtml#but_thereapostrophes_moreexclamation_mar">But there’s more!</a></blockquote><blockquote><a href="part0016.xhtml#iterators_and_collections">Iterators and Collections</a></blockquote><blockquote><a href="part0016.xhtml#is_the_waitress_ready_for_prime_timeques">Is the Waitress ready for prime time?</a></blockquote><blockquote><a href="part0016.xhtml#just_when_we_thought_it_was_safehellip">Just when we thought it was safe...</a></blockquote><blockquote><a href="part0016.xhtml#what_do_we_needquestion_mark">What do we need?</a></blockquote><blockquote><a href="part0016.xhtml#composite_pattern_defined">The Composite Pattern defined</a></blockquote><blockquote><a href="part0016.xhtml#designing_menus_with_composite">Designing Menus with Composite</a></blockquote><blockquote><a href="part0016.xhtml#implementing_the_menu_component">Implementing the Menu Component</a></blockquote><blockquote><a href="part0016.xhtml#implementing_the_menu_item">Implementing the Menu Item</a></blockquote><blockquote><a href="part0016.xhtml#implementing_the_composite_menu">Implementing the Composite Menu</a><div><blockquote><a href="part0016.xhtml#fixing_the_printleft_parenthesisright_pa">Fixing the print() method</a></blockquote></div></blockquote><blockquote><a href="part0016.xhtml#getting_ready_for_a_test_drivehellip">Getting ready for a test drive...</a></blockquote><blockquote><a href="part0016.xhtml#now_for_the_test_drivehellip">Now for the test drive...</a></blockquote><blockquote><a href="part0016.xhtml#getting_ready_for_a_test_drivehe-id00110">Getting ready for a test drive...</a></blockquote><blockquote><a href="part0016.xhtml#flashback_to_iterator">Flashback to Iterator</a></blockquote><blockquote><a href="part0016.xhtml#composite_iterator">The Composite Iterator</a></blockquote><blockquote><a href="part0016.xhtml#null_iterator">The Null Iterator</a></blockquote><blockquote><a href="part0016.xhtml#give_me_the_vegetarian_menu">Give me the vegetarian menu</a></blockquote><blockquote><a href="part0016.xhtml#magic_of_iterator_ampersand_composite_to">The magic of Iterator &amp; Composite together...</a></blockquote><blockquote><a href="part0016.xhtml#tools_for_your_design_toolbox-id00114">Tools for your Design Toolbox</a></blockquote></div></blockquote><blockquote><a href="part0017.xhtml#aid-G6PI2">10. The State Pattern: The State of Things</a><div><blockquote><a href="part0017.xhtml#jawva_breakers">Ja<span class="strikethrough">w</span>va Breakers</a></blockquote><blockquote><a href="part0017.xhtml#cubicle_conversation-id00121">Cubicle Conversation</a></blockquote><blockquote><a href="part0017.xhtml#state_machines_101">State machines 101</a></blockquote><blockquote><a href="part0017.xhtml#writing_the_code">Writing the code</a></blockquote><blockquote><a href="part0017.xhtml#in-house_testing">In-house testing</a></blockquote><blockquote><a href="part0017.xhtml#you_knew_it_was_cominghellip_a_change_re">You knew it was coming... a change request!</a></blockquote><blockquote><a href="part0017.xhtml#messy_state_of_thingshellip">The messy STATE of things...</a></blockquote><blockquote><a href="part0017.xhtml#new_design">The new design</a></blockquote><blockquote><a href="part0017.xhtml#defining_the_state_interfaces_and_classe">Defining the State interfaces and classes</a></blockquote><blockquote><a href="part0017.xhtml#implementing_our_state_classes">Implementing our State classes</a></blockquote><blockquote><a href="part0017.xhtml#reworking_the_gumball_machine">Reworking the Gumball Machine</a></blockquote><blockquote><a href="part0017.xhtml#nowcomma_letapostrophes_look_at_the_comp">Now, let’s look at the complete GumballMachine class...</a></blockquote><blockquote><a href="part0017.xhtml#implementing_more_states">Implementing more states</a></blockquote><blockquote><a href="part0017.xhtml#letapostrophes_take_a_look_at_what_weapo">Let’s take a look at what we’ve done so far...</a></blockquote><blockquote><a href="part0017.xhtml#state_pattern_defined">The State Pattern defined</a></blockquote><blockquote><a href="part0017.xhtml#we_still_need_to_finish_the_gumball_1_in">We still need to finish the Gumball 1 in 10 game</a></blockquote><blockquote><a href="part0017.xhtml#finishing_the_game">Finishing the game</a></blockquote><blockquote><a href="part0017.xhtml#demo_for_the_ceo_of_mighty_gumballcomma">Demo for the CEO of Mighty Gumball, Inc.</a></blockquote><blockquote><a href="part0017.xhtml#sanity_checkhellip">Sanity check...</a></blockquote><blockquote><a href="part0017.xhtml#we_almost_forgotexclamation_mark">We almost forgot!</a></blockquote><blockquote><a href="part0017.xhtml#tools_for_your_design_toolbox-id00132">Tools for your Design Toolbox</a></blockquote></div></blockquote><blockquote><a href="part0018.xhtml#aid-H5A42">11. The Proxy Pattern: Controlling Object Access</a><div><blockquote><a href="part0018.xhtml#coding_the_monitor">Coding the Monitor</a></blockquote><blockquote><a href="part0018.xhtml#testing_the_monitor">Testing the Monitor</a></blockquote><blockquote><a href="part0018.xhtml#role_of_the_apostropheremote_proxyapostr">The role of the ‘remote proxy’</a></blockquote><blockquote><a href="part0018.xhtml#adding_a_remote_proxy_to_the_gumball_mac">Adding a remote proxy to the Gumball Machine monitoring code</a></blockquote><blockquote><a href="part0018.xhtml#remote_methods_101">Remote methods 101</a></blockquote><blockquote><a href="part0018.xhtml#java_rmicomma_the_big_picture">Java RMI, the Big Picture</a></blockquote><blockquote><a href="part0018.xhtml#how_does_the_client_get_the_stub_objectq">How does the client get the stub <span class="underline">ob</span>j<span class="underline">ect</span>?</a></blockquote><blockquote><a href="part0018.xhtml#back_to_our_gumballmachine_remote_proxy">Back to our GumballMachine remote proxy</a></blockquote><blockquote><a href="part0018.xhtml#getting_the_gumballmachine_ready_to_be_a">Getting the GumballMachine ready to be a remote service</a></blockquote><blockquote><a href="part0018.xhtml#registering_with_the_rmi_registryhellip">Registering with the RMI registry...</a></blockquote><blockquote><a href="part0018.xhtml#now_for_the_gumballmonitor_clienthellip">Now for the GumballMonitor client...</a></blockquote><blockquote><a href="part0018.xhtml#writing_the_monitor_test_drive">Writing the Monitor test drive</a></blockquote><blockquote><a href="part0018.xhtml#another_demo_for_the_ceo_of_mighty_gumba">Another demo for the CEO of Mighty Gumball...</a><div><blockquote><a href="part0018.xhtml#and_now_letapostrophes_put_the_monitor_i">And now let’s put the monitor in the hands of the CEO. Hopefully, this time he’ll love it</a></blockquote></div></blockquote><blockquote><a href="part0018.xhtml#proxy_pattern_defined">The Proxy Pattern defined</a></blockquote><blockquote><a href="part0018.xhtml#get_ready_for_virtual_proxy">Get ready for Virtual Proxy</a><div><blockquote><a href="part0018.xhtml#remote_proxy">Remote Proxy</a></blockquote><blockquote><a href="part0018.xhtml#virtual_proxy">Virtual Proxy</a></blockquote></div></blockquote><blockquote><a href="part0018.xhtml#displaying_cd_covers">Displaying CD covers</a></blockquote><blockquote><a href="part0018.xhtml#designing_the_cd_cover_virtual_proxy">Designing the CD cover Virtual Proxy</a><div><blockquote><a href="part0018.xhtml#how_imageproxy_is_going_to_work">How ImageProxy is going to work</a></blockquote></div></blockquote><blockquote><a href="part0018.xhtml#writing_the_image_proxy">Writing the Image Proxy</a></blockquote><blockquote><a href="part0018.xhtml#testing_the_cd_cover_viewer">Testing the CD Cover Viewer</a><div><blockquote><a href="part0018.xhtml#things_to_tryhellip">Things to try...</a></blockquote></div></blockquote><blockquote><a href="part0018.xhtml#what_did_we_doquestion_mark-id00147">What did we do?</a></blockquote><blockquote><a href="part0018.xhtml#using_the_java_apiapostrophes_proxy_to_c">Using the Java API’s Proxy to create a protection proxy</a></blockquote><blockquote><a href="part0018.xhtml#matchmaking_in_objectville">Matchmaking in Objectville</a></blockquote><blockquote><a href="part0018.xhtml#personbean_implementation">The PersonBean implementation</a></blockquote><blockquote><a href="part0018.xhtml#five-minute_drama_protecting_subjects">Five-minute drama: protecting subjects</a></blockquote><blockquote><a href="part0018.xhtml#big_picture_creating_a_dynamic_proxy_for">Big Picture: creating a Dynamic Proxy for the PersonBean</a></blockquote><blockquote><a href="part0018.xhtml#step_one_creating_invocation_handlers">Step one: creating Invocation Handlers</a></blockquote><blockquote><a href="part0018.xhtml#creating_invocation_handlers_continuedhe">Creating Invocation Handlers continued...</a></blockquote><blockquote><a href="part0018.xhtml#step_two_creating_the_proxy_class_and_in">Step two: creating the Proxy class and instantiating the Proxy object</a></blockquote><blockquote><a href="part0018.xhtml#testing_the_matchmaking_service">Testing the matchmaking service</a></blockquote><blockquote><a href="part0018.xhtml#running_the_codehellip">Running the code...</a></blockquote><blockquote><a href="part0018.xhtml#proxy_zoo">The Proxy Zoo</a></blockquote><blockquote><a href="part0018.xhtml#tools_for_your_design_toolbox-id00156">Tools for your Design Toolbox</a></blockquote><blockquote><a href="part0018.xhtml#code_for_the_cd_cover_viewer">The code for the CD Cover Viewer</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#aid-I3QM2">12. Compound Patterns: Patterns of Patterns</a><div><blockquote><a href="part0019.xhtml#working_together">Working together</a></blockquote><blockquote><a href="part0019.xhtml#duck_reunion">Duck reunion</a></blockquote><blockquote><a href="part0019.xhtml#what_did_we_doquestion_mark-id00169">What did we do?</a></blockquote><blockquote><a href="part0019.xhtml#duckapostrophes_eye_view_the_class_diagr">A duck’s eye view: the class diagram</a></blockquote><blockquote><a href="part0019.xhtml#king_of_compound_patterns">The King of Compound Patterns</a><div><blockquote><a href="part0019.xhtml#if_elvis_were_a_compound_patterncomma_hi">If Elvis were a compound pattern, his name would be Model-View-Controller, and he’d be singing a little song like this...</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#meet_the_model-view-controller">Meet the Model-View-Controller</a></blockquote><blockquote><a href="part0019.xhtml#closer_lookhellip">A closer look...</a></blockquote><blockquote><a href="part0019.xhtml#looking_at_mvc_through_patterns-colored">Looking at MVC through patterns-colored glasses</a><div><blockquote><a href="part0019.xhtml#observer">Observer</a></blockquote><blockquote><a href="part0019.xhtml#strategy">Strategy</a></blockquote><blockquote><a href="part0019.xhtml#composite">Composite</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#using_mvc_to_control_the_beathellip">Using MVC to control the beat...</a><div><blockquote><a href="part0019.xhtml#meet_the_java_dj_view">Meet the Java DJ View</a></blockquote><blockquote><a href="part0019.xhtml#controller_is_in_the_middlehellip">The controller is in the middle...</a></blockquote><blockquote><a href="part0019.xhtml#letapostrophes_not_forget_about_the_mode">Let’s not forget about the model underneath it all...</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#putting_the_pieces_together">Putting the pieces together</a></blockquote><blockquote><a href="part0019.xhtml#building_the_pieces">Building the pieces</a><div><blockquote><a href="part0019.xhtml#letapostrophes_check_out_the_beatmodelin">Let’s check out the BeatModelInterface before looking at the implementation</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#now_letapostrophes_have_a_look_at_the_co">Now let’s have a look at the concrete BeatModel class</a></blockquote><blockquote><a href="part0019.xhtml#view">The View</a></blockquote><blockquote><a href="part0019.xhtml#implementing_the_view">Implementing the View</a></blockquote><blockquote><a href="part0019.xhtml#implementing_the_viewcomma_continuedhell">Implementing the View, continued...</a></blockquote><blockquote><a href="part0019.xhtml#now_for_the_controller">Now for the Controller</a><div><blockquote><a href="part0019.xhtml#and_hereapostrophes_the_implementation_o">And here’s the implementation of the controller</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#putting_it_all_togetherhellip">Putting it all together...</a><div><blockquote><a href="part0019.xhtml#and_now_for_a_test_runhellip">And now for a test run...</a></blockquote><blockquote><a href="part0019.xhtml#things_to_do">Things to do</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#exploring_strategy">Exploring Strategy</a></blockquote><blockquote><a href="part0019.xhtml#adapting_the_model">Adapting the Model</a></blockquote><blockquote><a href="part0019.xhtml#now_weapostrophere_ready_for_a_heartcont">Now we’re ready for a HeartController</a><div><blockquote><a href="part0019.xhtml#and_thatapostrophes_itexclamation_mark_n">And that’s it! Now it’s time for some test code...</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#and_now_for_a_test_runhellip-id00173">And now for a test run...</a><div><blockquote><a href="part0019.xhtml#things_to_do-id00174">Things to do</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#mvc_and_the_web">MVC and the Web</a></blockquote><blockquote><a href="part0019.xhtml#model_2_djapostropheing_from_a_cell_phon">Model 2: DJ’ing from a cell phone</a><div><blockquote><a href="part0019.xhtml#plan">The plan</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#step_one_the_model">Step one: the model</a></blockquote><blockquote><a href="part0019.xhtml#step_two_the_controller_servlet">Step two: the controller servlet</a></blockquote><blockquote><a href="part0019.xhtml#now_we_need_a_viewhellip">Now we need a view...</a></blockquote><blockquote><a href="part0019.xhtml#putting_model_2_to_the_testhellip">Putting Model 2 to the test...</a><div><blockquote><a href="part0019.xhtml#things_to_do-id00175">Things to do</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#design_patterns_and_model_2">Design Patterns and Model 2</a><div><blockquote><a href="part0019.xhtml#model_2_is_an_adaptation_of_mvc_to_the_w">Model 2 is an adaptation of MVC to the Web</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#observer-id00176">Observer</a><div><blockquote><a href="part0019.xhtml#strategy-id00177">Strategy</a></blockquote><blockquote><a href="part0019.xhtml#composite-id00178">Composite</a></blockquote></div></blockquote><blockquote><a href="part0019.xhtml#tools_for_your_design_toolbox-id00180">Tools for your Design Toolbox</a></blockquote><blockquote><a href="part0019.xhtml#exercise_solutions">Exercise Solutions</a></blockquote></div></blockquote><blockquote><a href="part0020.xhtml#aid-J2B82">13. Better Living with Patterns: Patterns in the Real World</a><div><blockquote><a href="part0020.xhtml#design_pattern_defined">Design Pattern defined</a></blockquote><blockquote><a href="part0020.xhtml#looking_more_closely_at_the_design_patte">Looking more closely at the Design Pattern definition</a></blockquote><blockquote><a href="part0020.xhtml#so_you_wanna_be_a_design_patterns_writer">So you wanna be a Design Patterns writer</a></blockquote><blockquote><a href="part0020.xhtml#organizing_design_patterns">Organizing Design Patterns</a></blockquote><blockquote><a href="part0020.xhtml#pattern_categories">Pattern Categories</a></blockquote><blockquote><a href="part0020.xhtml#thinking_in_patterns">Thinking in Patterns</a><div><blockquote><a href="part0020.xhtml#keep_it_simple_left_parenthesiskissright">Keep it simple (KISS)</a></blockquote><blockquote><a href="part0020.xhtml#design_patterns_arenapostrophet_a_magic">Design Patterns aren’t a magic bullet; in fact, they’re not even a bullet!</a></blockquote><blockquote><a href="part0020.xhtml#you_know_you_need_a_pattern_whenhellip">You know you need a pattern when...</a></blockquote><blockquote><a href="part0020.xhtml#refactoring_time_is_patterns_timeexclama">Refactoring time is Patterns time!</a></blockquote><blockquote><a href="part0020.xhtml#take_out_what_you_donapostrophet_really">Take out what you don’t really need. Don’t be afraid to remove a Design Pattern from your design.</a></blockquote><blockquote><a href="part0020.xhtml#if_you_donapostrophet_need_it_nowcomma_d">If you don’t need it now, don’t do it now.</a></blockquote></div></blockquote><blockquote><a href="part0020.xhtml#your_mind_on_patterns">Your Mind on Patterns</a></blockquote><blockquote><a href="part0020.xhtml#donapostrophet_forget_the_power_of_the_s">Don’t forget the power of the shared vocabulary</a></blockquote><blockquote><a href="part0020.xhtml#cruisinapostrophe_objectville_with_the_g">Cruisin’ Objectville with the Gang of Four</a></blockquote><blockquote><a href="part0020.xhtml#your_journey_has_just_begunhellip">Your journey has just begun...</a></blockquote><blockquote><a href="part0020.xhtml#patterns_zoo">The Patterns Zoo</a></blockquote><blockquote><a href="part0020.xhtml#annihilating_evil_with_anti-patterns">Annihilating evil with Anti-Patterns</a></blockquote><blockquote><a href="part0020.xhtml#tools_for_your_design_toolbox-id00194">Tools for your Design Toolbox</a></blockquote><blockquote><a href="part0020.xhtml#leaving_objectvillehellip">Leaving Objectville...</a></blockquote><blockquote><a href="part0020.xhtml#boycomma_itapostrophes_been_great_having">Boy, it’s been great having you in Objectville.</a></blockquote></div></blockquote><blockquote><a href="part0021.xhtml#aid-K0RQ2">A. Leftover Patterns</a><div><blockquote><a href="part0021.xhtml#bridge">Bridge</a></blockquote><blockquote><a href="part0021.xhtml#why_use_the_bridge_patternquestion_mark">Why use the Bridge Pattern?</a></blockquote><blockquote><a href="part0021.xhtml#builder">Builder</a></blockquote><blockquote><a href="part0021.xhtml#why_use_the_builder_patternquestion_mark">Why use the Builder Pattern?</a></blockquote><blockquote><a href="part0021.xhtml#chain_of_responsibility">Chain of Responsibility</a></blockquote><blockquote><a href="part0021.xhtml#how_to_use_the_chain_of_responsibility_p">How to use the Chain of Responsibility Pattern</a></blockquote><blockquote><a href="part0021.xhtml#flyweight">Flyweight</a></blockquote><blockquote><a href="part0021.xhtml#why_use_the_flyweight_patternquestion_ma">Why use the Flyweight Pattern?</a></blockquote><blockquote><a href="part0021.xhtml#interpreter">Interpreter</a></blockquote><blockquote><a href="part0021.xhtml#how_to_implement_an_interpreter">How to implement an interpreter</a></blockquote><blockquote><a href="part0021.xhtml#mediator">Mediator</a></blockquote><blockquote><a href="part0021.xhtml#mediator_in_actionhellip">Mediator in action...</a></blockquote><blockquote><a href="part0021.xhtml#memento">Memento</a></blockquote><blockquote><a href="part0021.xhtml#memento_at_work">The Memento at work</a></blockquote><blockquote><a href="part0021.xhtml#prototype">Prototype</a></blockquote><blockquote><a href="part0021.xhtml#prototype_to_the_rescue">Prototype to the rescue</a></blockquote><blockquote><a href="part0021.xhtml#visitor">Visitor</a></blockquote><blockquote><a href="part0021.xhtml#visitor_drops_by">The Visitor drops by</a></blockquote></div></blockquote><blockquote><a href="part0022.xhtml#app02">B.  </a></blockquote><blockquote><a href="part0023.xhtml#mighty_gumball">C. Mighty Gumball</a></blockquote><blockquote><a href="part0024.xhtml#aid-MSDG2">Index</a></blockquote><blockquote><a href="part0025.xhtml#id483756">About the Authors</a></blockquote><blockquote><a href="part0026.xhtml#colophon">Colophon</a></blockquote><blockquote><a href="part0027.xhtml#copyright_page_orm">Copyright</a></blockquote></div></nav></div></body></html>