<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 10. The State Pattern: The State of Things</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch09.html"/><link rel="next" href="ch11.html"/></head><body><section class="chapter" epub:type="chapter" id="state_pattern_the_state_of_things"><div class="titlepage" id="aid-G6PI2"><div><div><h2 class="title">Chapter 10. The State Pattern: The State of Things</h2></div></div></div><div class="informalfigure"><a id="med_id00547a"></a><div class="mediaobject"><a id="med_id00547"></a><img src="../Images/image01047.jpeg" alt="image with no caption" hisrc="figs/web/393fig01.png.jpg"/></div></div><p><span class="strong"><strong>A little-known fact: the Strategy and State Patterns were twins separated at birth.</strong></span> As you know, the Strategy Pattern went on to create a wildly successful business around interchangeable algorithms. State, however, took the perhaps more noble path of helping objects to control their behavior by changing their internal state. He’s often overheard telling his object clients, “Just repeat after me: I’m good enough, I’m smart enough, and doggonit...”</p><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="jawva_breakers">Ja<span class="strikethrough">w</span>va Breakers</h2></div></div></div><p><a id="iddle1689" class="indexterm"></a><a id="iddle2377" class="indexterm"></a>Java toasters are so ’90s. Today people are building Java into <span class="emphasis"><em>real</em></span> devices, like gumball machines. That’s right, gumball machines have gone high tech; the major manufacturers have found that by putting CPUs into their machines, they can increase sales, monitor inventory over the network and measure customer satisfaction more accurately.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch10note01"></a>Note</h3><p>At least that’s their story – we think they just got bored with the circa 1800’s technology and needed to find a way to make their jobs more exciting.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>But these manufacturers are gumball machine experts, not software developers, and they’ve asked for your help:</p><div class="informalfigure"><a id="med_id00548a"></a><div class="mediaobject"><a id="med_id00548"></a><img src="../Images/image01048.jpeg" alt="image with no caption" hisrc="figs/web/394fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00549a"></a><div class="mediaobject"><a id="med_id00549"></a><img src="../Images/image01049.jpeg" alt="image with no caption" hisrc="figs/web/394fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="cubicle_conversation-id00121">Cubicle Conversation</h2></div></div></div><div class="informalfigure"><a id="med_id00550a"></a><div class="mediaobject"><a id="med_id00550"></a><img src="../Images/image01050.jpeg" alt="image with no caption" hisrc="figs/web/395fig01.png.jpg"/></div></div><p><span class="strong"><strong>Judy</strong></span>: This diagram looks like a state diagram.</p><p><span class="strong"><strong>Joe</strong></span>: Right, each of those circles is a state...</p><p><span class="strong"><strong>Judy</strong></span>: ... and each of the arrows is a state transition.</p><p><span class="strong"><strong>Frank</strong></span>: Slow down, you two, it’s been too long since I studied state diagrams. Can you remind me what they’re all about?</p><p><span class="strong"><strong>Judy</strong></span>: Sure, Frank. Look at the circles; those are states. “No Quarter” is probably the starting state for the gumball machine because it’s just sitting there waiting for you to put your quarter in. All states are just different configurations of the machine that behave in a certain way and need some action to take them to another state.</p><p><span class="strong"><strong>Joe</strong></span>: Right. See, to go to another state, you need to do something like put a quarter in the machine. See the arrow from “No Quarter” to “Has Quarter”?</p><p><span class="strong"><strong>Frank</strong></span>: Yes...</p><p><span class="strong"><strong>Joe</strong></span>: That just means that if the gumball machine is in the “No Quarter” state and you put a quarter in, it will change to the “Has Quarter” state. That’s the state transition.</p><p><span class="strong"><strong>Frank</strong></span>: Oh, I see! And if I’m in the “Has Quarter” state, I can turn the crank and change to the “Gumball Sold” state, or eject the quarter and change back to the “No Quarter” state.</p><p><span class="strong"><strong>Judy</strong></span>: You got it!</p><p><span class="strong"><strong>Frank</strong></span>: This doesn’t look too bad then. We’ve obviously got four states, and I think we also have four actions: “inserts quarter,” “ejects quarter,” “turns crank” and “dispense.” But... when we dispense, we test for zero or more gumballs in the “Gumball Sold” state, and then either go to the “Out of Gumballs” state or the “No Quarter” state. So we actually have five transitions from one state to another.</p><p><span class="strong"><strong>Judy</strong></span>: That test for zero or more gumballs also implies we’ve got to keep track of the number of gumballs too. Any time the machine gives you a gumball, it might be the last one, and if it is, we need to transition to the “Out of Gumballs” state.</p><p><span class="strong"><strong>Joe</strong></span>: Also, don’t forget that you could do nonsensical things, like try to eject the quarter when the gumball machine is in the “No Quarter” state, or insert two quarters.</p><p><span class="strong"><strong>Frank</strong></span>: Oh, I didn’t think of that; we’ll have to take care of those too.</p><p><span class="strong"><strong>Joe</strong></span>: For every possible action we’ll just have to check to see which state we’re in and act appropriately. We can do this! Let’s start mapping the state diagram to code...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="state_machines_101">State machines 101</h2></div></div></div><p><a id="iddle1692" class="indexterm"></a><a id="iddle1921" class="indexterm"></a><a id="iddle2371" class="indexterm"></a><a id="iddle2380" class="indexterm"></a><a id="iddle2387" class="indexterm"></a>How are we going to get from that state diagram to actual code? Here’s a quick introduction to implementing state machines:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① First, gather up your states:<div class="informalfigure"><a id="med_id00551a"></a><div class="mediaobject"><a id="med_id00551"></a><img src="../Images/image01051.jpeg" alt="image with no caption" hisrc="figs/web/396fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">② Next, create an instance variable to hold the current state, and define values for each of the states:<div class="informalfigure"><a id="med_id00552a"></a><div class="mediaobject"><a id="med_id00552"></a><img src="../Images/image01052.jpeg" alt="image with no caption" hisrc="figs/web/396fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">③ Now we gather up all the actions that can happen in the system:<div class="informalfigure"><a id="med_id00553a"></a><div class="mediaobject"><a id="med_id00553"></a><img src="../Images/image01053.jpeg" alt="image with no caption" hisrc="figs/web/396fig03.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">④ Now we create a class that acts as the state machine. For each action, we create a method that uses conditional statements to determine what behavior is appropriate in each state. For instance, for the insert quarter action, we might write a method like this:<div class="informalfigure"><a id="med_id00554a"></a><div class="mediaobject"><a id="med_id00554"></a><img src="../Images/image01054.jpeg" alt="image with no caption" hisrc="figs/web/397fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00555a"></a><div class="mediaobject"><a id="med_id00555"></a><img src="../Images/image01055.jpeg" alt="image with no caption" hisrc="figs/web/397fig02.png.jpg"/></div></div></li></ul></div><p>With that quick review, let’s go implement the Gumball Machine!</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="writing_the_code">Writing the code</h2></div></div></div><p><a id="iddle1708" class="indexterm"></a><a id="iddle2385" class="indexterm"></a>It’s time to implement the Gumball Machine. We know we’re going to have an instance variable that holds the current state. From there, we just need to handle all the actions, behaviors and state transitions that can happen. For actions, we need to implement inserting a quarter, removing a quarter, turning the crank, and dispensing a gumball; we also have the empty Gumball Machine condition to implement.</p><div class="informalfigure"><a id="med_id00556a"></a><div class="mediaobject"><a id="med_id00556"></a><img src="../Images/image01056.jpeg" alt="image with no caption" hisrc="figs/web/398fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00557a"></a><div class="mediaobject"><a id="med_id00557"></a><img src="../Images/image01057.jpeg" alt="image with no caption" hisrc="figs/web/399fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="in-house_testing">In-house testing</h2></div></div></div><p><a id="iddle1707" class="indexterm"></a><a id="iddle2384" class="indexterm"></a>That feels like a nice solid design using a well-thought-out methodology, doesn’t it? Let’s do a little in-house testing before we hand it off to Mighty Gumball to be loaded into their actual gumball machines. Here’s our test harness:</p><div class="informalfigure"><a id="med_id00558a"></a><div class="mediaobject"><a id="med_id00558"></a><img src="../Images/image01058.jpeg" alt="image with no caption" hisrc="figs/web/400fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="you_knew_it_was_cominghellip_a_change_re">You knew it was coming... a change request!</h2></div></div></div><p><a id="iddle1694" class="indexterm"></a><a id="iddle2065" class="indexterm"></a><a id="iddle2388" class="indexterm"></a><span class="strong"><strong>Mighty Gumball, Inc., has loaded your code into their newest machine and their quality assurance experts are putting it through its paces. So far, everything’s looking great from their perspective.</strong></span></p><p><span class="strong"><strong>In fact, things have gone so smoothly they’d like to take things to the next level...</strong></span></p><div class="informalfigure"><a id="med_id00559a"></a><div class="mediaobject"><a id="med_id00559"></a><img src="../Images/image01059.jpeg" alt="image with no caption" hisrc="figs/web/402fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle-id00122"></a><h3 class="title">Design Puzzle</h3><p><a id="iddle1432" class="indexterm"></a><a id="iddle1512" class="indexterm"></a><a id="iddle1698" class="indexterm"></a><a id="iddle2069" class="indexterm"></a><a id="iddle2392" class="indexterm"></a>Draw a state diagram for a Gumball Machine that handles the 1 in 10 contest. In this contest, 10% of the time the Sold state leads to two balls being released, not one. Check your answer with ours (at the end of the chapter) to make sure we agree before you go further...</p><div class="informalfigure"><a id="med_id00560a"></a><div class="mediaobject"><a id="med_id00560"></a><img src="../Images/image01060.jpeg" alt="image with no caption" hisrc="figs/web/403fig01.png"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="messy_state_of_thingshellip">The messy STATE of things...</h2></div></div></div><p><a id="iddle1417" class="indexterm"></a><a id="iddle1535" class="indexterm"></a><a id="iddle1697" class="indexterm"></a><a id="iddle2068" class="indexterm"></a><a id="iddle2089" class="indexterm"></a><a id="iddle2274" class="indexterm"></a><a id="iddle2391" class="indexterm"></a>Just because you’ve written your gumball machine using a well-thought-out methodology doesn’t mean it’s going to be easy to extend. In fact, when you go back and look at your code and think about what you’ll have to do to modify it, well...</p><div class="informalfigure"><a id="med_id00561a"></a><div class="mediaobject"><a id="med_id00561"></a><img src="../Images/image01061.jpeg" alt="image with no caption" hisrc="figs/web/404fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00123"></a><h3 class="title">Sharpen your pencil</h3><p>Which of the following describe the state of our implementation? (Choose all that apply.)</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col><col class="c3"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00050"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>A.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>This code certainly isn’t adhering to the Open Closed Principle.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00051"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>B.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>This code would make a FORTRAN programmer proud.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00052"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>C.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>This design isn’t even very object-oriented.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00053"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>D.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>State transitions aren’t explicit; they are buried in the middle of a bunch of conditional statements.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00054"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>E.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We haven’t encapsulated anything that varies here.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00055"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>F.</p></td><td style="vertical-align: top; "><p>Further additions are likely to cause bugs in working code.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00562a"></a><div class="mediaobject"><a id="med_id00562"></a><img src="../Images/image01062.jpeg" alt="image with no caption" hisrc="figs/web/405fig01.png.jpg"/></div></div><p><a id="iddle1409" class="indexterm"></a><a id="iddle1473" class="indexterm"></a><a id="iddle1676" class="indexterm"></a><span class="strong"><strong>Frank</strong></span>: You’re right about that! We need to refactor this code so that it’s easy to maintain and modify.</p><p><span class="strong"><strong>Judy</strong></span>: We really should try to localize the behavior for each state so that if we make changes to one state, we don’t run the risk of messing up the other code.</p><p><span class="strong"><strong>Frank</strong></span>: Right; in other words, follow that ol’ “encapsulate what varies” principle.</p><p><span class="strong"><strong>Judy</strong></span>: Exactly.</p><p><span class="strong"><strong>Frank</strong></span>: If we put each state’s behavior in its own class, then every state just implements its own actions.</p><p><span class="strong"><strong>Judy</strong></span>: Right. And maybe the Gumball Machine can just delegate to the state object that represents the current state.</p><p><span class="strong"><strong>Frank</strong></span>: Ah, you’re good: favor composition... more principles at work.</p><p><span class="strong"><strong>Judy</strong></span>: Cute. Well, I’m not 100% sure how this is going to work, but I think we’re on to something.</p><p><span class="strong"><strong>Frank</strong></span>: I wonder if this will make it easier to add new states?</p><p><span class="strong"><strong>Judy</strong></span>: I think so... We’ll still have to change code, but the changes will be much more limited in scope because adding a new state will mean we just have to add a new class and maybe change a few transitions here and there.</p><p><span class="strong"><strong>Frank</strong></span>: I like the sound of that. Let’s start hashing out this new design!</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="new_design">The new design</h2></div></div></div><p><a id="iddle1703" class="indexterm"></a><a id="iddle2074" class="indexterm"></a><a id="iddle2397" class="indexterm"></a>It looks like we’ve got a new plan: instead of maintaining our existing code, we’re going to rework it to encapsulate state objects in their own classes and then delegate to the current state when an action occurs.</p><p>We’re following our design principles here, so we should end up with a design that is easier to maintain down the road. Here’s how we’re going to do it:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① First, we’re going to define a State interface that contains a method for every action in the Gumball Machine.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Then we’re going to implement a State class for every state of the machine. These classes will be responsible for the behavior of the machine when it is in the corresponding state.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Finally, we’re going to get rid of all of our conditional code and instead delegate to the State class to do the work for us.</strong></span></li></ul></div><p>Not only are we following design principles, as you’ll see, we’re actually implementing the State Pattern. But we’ll get to all the official State Pattern stuff after we rework our code...</p><div class="informalfigure"><a id="med_id00563a"></a><div class="mediaobject"><a id="med_id00563"></a><img src="../Images/image01063.jpeg" alt="image with no caption" hisrc="figs/web/406fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="defining_the_state_interfaces_and_classe">Defining the State interfaces and classes</h2></div></div></div><p><a id="iddle1122" class="indexterm"></a>First let’s create an interface for State, which all our states implement:</p><div class="informalfigure"><a id="med_id00564a"></a><div class="mediaobject"><a id="med_id00564"></a><img src="../Images/image01064.jpeg" alt="image with no caption" hisrc="figs/web/407fig01.png.jpg"/></div></div><p>Then take each state in our design and encapsulate it in a class that implements the State interface.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00124"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1527" class="indexterm"></a><a id="iddle1695" class="indexterm"></a><a id="iddle2066" class="indexterm"></a><a id="iddle2266" class="indexterm"></a><a id="iddle2389" class="indexterm"></a>To implement our states, we first need to specify the behavior of the classes when each action is called. Annotate the diagram below with the behavior of each action in each class; we’ve already filled in a few for you.</p><div class="informalfigure"><a id="med_id00565a"></a><div class="mediaobject"><a id="med_id00565"></a><img src="../Images/image01065.jpeg" alt="image with no caption" hisrc="figs/web/408fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_our_state_classes">Implementing our State classes</h2></div></div></div><p><a id="iddle1123" class="indexterm"></a><a id="iddle1700" class="indexterm"></a><a id="iddle2071" class="indexterm"></a><a id="iddle2394" class="indexterm"></a>Time to implement a state: we know what behaviors we want; we just need to get it down in code. We’re going to closely follow the state machine code we wrote, but this time everything is broken out into different classes.</p><p>Let’s start with the NoQuarterState:</p><div class="informalfigure"><a id="med_id00566a"></a><div class="mediaobject"><a id="med_id00566"></a><img src="../Images/image01066.jpeg" alt="image with no caption" hisrc="figs/web/409fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00567a"></a><div class="mediaobject"><a id="med_id00567"></a><img src="../Images/image01067.jpeg" alt="image with no caption" hisrc="figs/web/409fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="reworking_the_gumball_machine">Reworking the Gumball Machine</h2></div></div></div><p><a id="iddle1127" class="indexterm"></a><a id="iddle1704" class="indexterm"></a><a id="iddle2075" class="indexterm"></a><a id="iddle2398" class="indexterm"></a>Before we finish the State classes, we’re going to rework the Gumball Machine — that way you can see how it all fits together. We’ll start with the state-related instance variables and switch the code from using integers to using state objects:</p><div class="informalfigure"><a id="med_id00568a"></a><div class="mediaobject"><a id="med_id00568"></a><img src="../Images/image01068.jpeg" alt="image with no caption" hisrc="figs/web/410fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="nowcomma_letapostrophes_look_at_the_comp">Now, let’s look at the complete GumballMachine class...</h2></div></div></div><div class="informalfigure"><a id="med_id00569a"></a><div class="mediaobject"><a id="med_id00569"></a><img src="../Images/image01069.jpeg" alt="image with no caption" hisrc="figs/web/411fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_more_states">Implementing more states</h2></div></div></div><p><a id="iddle1124" class="indexterm"></a><a id="iddle1701" class="indexterm"></a><a id="iddle2072" class="indexterm"></a><a id="iddle2395" class="indexterm"></a>Now that you’re starting to get a feel for how the Gumball Machine and the states fit together, let’s implement the HasQuarterState and the SoldState classes...</p><div class="informalfigure"><a id="med_id00570a"></a><div class="mediaobject"><a id="med_id00570"></a><img src="../Images/image01070.jpeg" alt="image with no caption" hisrc="figs/web/412fig01.png.jpg"/></div></div><p>Now, let’s check out the SoldState class...</p><div class="informalfigure"><a id="med_id00571a"></a><div class="mediaobject"><a id="med_id00571"></a><img src="../Images/image01071.jpeg" alt="image with no caption" hisrc="figs/web/413fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch10note02"></a>Brain Power</h3><p>Look back at the GumballMachine implementation. If the crank is turned and not successful (say the customer didn’t insert a quarter first), we call dispense anyway, even though it’s unnecessary. How might you fix this?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00125"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1549" class="indexterm"></a><a id="iddle2291" class="indexterm"></a>We have one remaining class we haven’t implemented: SoldOutState. Why don’t you implement it? To do this, carefully think through how the Gumball Machine should behave in each situation. Check your answer before moving on...</p><a id="pro_id00037"></a><pre class="programlisting"><span class="strong"><strong>public class SoldOutState implements _______________ {</strong></span>
    <span class="strong"><strong>GumballMachine gumballMachine;</strong></span>

     <span class="strong"><strong>public SoldOutState(GumballMachine gumballMachine) {</strong></span>


     <span class="strong"><strong>}</strong></span>

     <span class="strong"><strong>public void insertQuarter() {</strong></span>



     <span class="strong"><strong>}</strong></span>

     <span class="strong"><strong>public void ejectQuarter() {</strong></span>


     <span class="strong"><strong>}</strong></span>

     <span class="strong"><strong>public void turnCrank() {</strong></span>




     <span class="strong"><strong>}</strong></span>


     <span class="strong"><strong>public void dispense() {</strong></span>




     <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="letapostrophes_take_a_look_at_what_weapo">Let’s take a look at what we’ve done so far...</h2></div></div></div><p>For starters, you now have a Gumball Machine implementation that is <span class="emphasis"><em>structurally</em></span> quite different from your first version, and yet <span class="emphasis"><em>functionally it is exactly the same</em></span>. By structurally changing the implemention, you’ve:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Localized the behavior of each state into its own class.</li><li class="listitem">Removed all the troublesome <code class="literal">if</code> statements that would have been difficult to maintain.</li><li class="listitem">Closed each state for modification, and yet left the Gumball Machine open to extension by adding new state classes (and we’ll do this in a second).</li><li class="listitem">Created a code base and class structure that maps much more closely to the Mighty Gumball diagram and is easier to read and understand.</li></ul></div><p>Now let’s look a little more at the functional aspect of what we did:</p><div class="informalfigure"><a id="med_id00572a"></a><div class="mediaobject"><a id="med_id00572"></a><img src="../Images/image01072.jpeg" alt="image with no caption" hisrc="figs/web/415fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00573a"></a><div class="mediaobject"><a id="med_id00573"></a><img src="../Images/image01073.jpeg" alt="image with no caption" hisrc="figs/web/416fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00126"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1525" class="indexterm"></a><a id="iddle2264" class="indexterm"></a><span class="strong"><strong>Behind the Scenes: Self-Guided Tour</strong></span></p><div class="informalfigure"><a id="med_id00574a"></a><div class="mediaobject"><a id="med_id00574"></a><img src="../Images/image00686.jpeg" alt="image with no caption" hisrc="figs/web/common17.png.jpg"/></div></div><p>Trace the steps of the Gumball Machine starting with the NoQuarter state. Also annotate the diagram with actions and output of the machine. For this exercise you can assume there are plenty of gumballs in the machine.</p><div class="informalfigure"><a id="med_id00575a"></a><div class="mediaobject"><a id="med_id00575"></a><img src="../Images/image01074.jpeg" alt="image with no caption" hisrc="figs/web/417fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="state_pattern_defined">The State Pattern defined</h2></div></div></div><p><a id="iddle2372" class="indexterm"></a><a id="iddle2433" class="indexterm"></a>Yes, it’s true, we just implemented the State Pattern! So now, let’s take a look at what it’s all about:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch10note03"></a>Note</h3><p><span class="strong"><strong>The State Pattern</strong></span> allows an object to alter its behavior when its internal state changes. The object will appear to change its class.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>The first part of this description makes a lot of sense, right? Because the pattern encapsulates state into separate classes and delegates to the object representing the current state, we know that behavior changes along with the internal state. The Gumball Machine provides a good example: when the gumball machine is in the NoQuarterState and you insert a quarter, you get different behavior (the machine accepts the quarter) than if you insert a quarter when it’s in the HasQuarterState (the machine rejects the quarter).</p><p>What about the second part of the definition? What does it mean for an object to “appear to change its class”? Think about it from the perspective of a client: if an object you’re using can completely change its behavior, then it appears to you that the object is actually instantiated from another class. In reality, however, you know that we are using composition to give the appearance of a class change by simply referencing different state objects.</p><p>Okay, now it’s time to check out the State Pattern class diagram:</p><div class="informalfigure"><a id="med_id00576a"></a><div class="mediaobject"><a id="med_id00576"></a><img src="../Images/image01075.jpeg" alt="image with no caption" hisrc="figs/web/418fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00577a"></a><div class="mediaobject"><a id="med_id00577"></a><img src="../Images/image01076.jpeg" alt="image with no caption" hisrc="figs/web/419fig01.png.jpg"/></div></div><p><a id="iddle2401" class="indexterm"></a><a id="iddle2420" class="indexterm"></a>You’ve got a good eye! Yes, the class diagrams are essentially the same, but the two patterns differ in their <span class="emphasis"><em>intent</em></span>.</p><p>With the State Pattern, we have a set of behaviors encapsulated in state objects; at any time the context is delegating to one of those states. Over time, the current state changes across the set of state objects to reflect the internal state of the context, so the context’s behavior changes over time as well. The client usually knows very little, if anything, about the state objects.</p><p>With Strategy, the client usually specifies the strategy object that the context is composed with. Now, while the pattern provides the flexibility to change the strategy object at runtime, often there is a strategy object that is most appropriate for a context object. For instance, in <a class="xref" href="part0008.xhtml#aid-7K4G2">Chapter 1</a>, some of our ducks were configured to fly with typical flying behavior (like mallard ducks), while others were configured with a fly behavior that kept them grounded (like rubber ducks and decoy ducks).</p><p>In general, think of the Strategy Pattern as a flexible alternative to subclassing; if you use inheritance to define the behavior of a class, then you’re stuck with that behavior even if you need to change it. With Strategy you can change the behavior by composing with a different object.</p><p>Think of the State Pattern as an alternative to putting lots of conditionals in your context; by encapsulating the behaviors within state objects, you can simply change the state object in context to change its behavior.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00127"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch10qa1qe1"></a><a id="ch10qa1q1"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><a id="iddle1126" class="indexterm"></a><a id="iddle1128" class="indexterm"></a><a id="iddle2021" class="indexterm"></a><a id="iddle2386" class="indexterm"></a><a id="iddle2399" class="indexterm"></a><a id="iddle2400" class="indexterm"></a><a id="iddle2403" class="indexterm"></a><span class="strong"><strong>Q: In the GumballMachine, the states decide what the next state should be. Do the ConcreteStates always decide what state to go to next?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch10qa1q1a1"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> No, not always. The alternative is to let the Context decide on the flow of state transitions.</p><p>As a general guideline, when the state transitions are fixed they are appropriate for putting in the Context; however, when the transitions are more dynamic, they are typically placed in the state classes themselves (for instance, in the GumballMachine the choice of the transition to NoQuarter or SoldOut depended on the runtime count of gumballs).</p><p>The disadvantage of having state transitions in the state classes is that we create dependencies between the state classes. In our implementation of the GumballMachine we tried to minimize this by using getter methods on the Context, rather than hardcoding explicit concrete state classes.</p><p>Notice that by making this decision, you are making a decision as to which classes are closed for modification —  the Context or the state classes — as the system evolves.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch10qa1qe2"></a><a id="ch10qa1q2"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: Do clients ever interact directly with the states?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch10qa1q2a2"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> No. The states are used by the Context to represent its internal state and behavior, so all requests to the states come from the Context. Clients don’t directly change the state of the Context. It is the Context’s job to oversee its state, and you don’t usually want a client changing the state of a Context without that Context’s knowledge.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch10qa1qe3"></a><a id="ch10qa1q3"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: If I have lots of instances of the Context in my application, is it possible to share the state objects across them?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch10qa1q3a3"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> Yes, absolutely, and in fact this is a very common scenario. The only requirement is that your state objects do not keep their own internal context; otherwise, you’d need a unique instance per context.</p><p>To share your states, you’ll typically assign each state to a static instance variable. If your state needs to make use of methods or instance variables in your Context, you’ll also have to give it a reference to the Context in each handler() method.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch10qa1qe4"></a><a id="ch10qa1q4"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: It seems like using the State Pattern always increases the number of classes in our designs. Look how many more classes our GumballMachine had than the original design!</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch10qa1q4a4"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> You’re right, by encapsulating state behavior into separate state classes, you’ll always end up with more classes in your design. That’s often the price you pay for flexibility. Unless your code is some “one off” implementation you’re going to throw away (yeah, right), consider building it with the additional classes and you’ll probably thank yourself down the road. Note that often what is important is the number of classes that you expose to your clients, and there are ways to hide these extra classes from your clients (say, by declaring them package visible).</p><p>Also, consider the alternative: if you have an application that has a lot of state and you decide not to use separate objects, you’ll instead end up with very large, monolithic conditional statements. This makes your code hard to maintain and understand. By using objects, you make states explicit and reduce the effort needed to understand and maintain your code.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch10qa1qe5"></a><a id="ch10qa1q5"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: The State Pattern class diagram shows that State is an abstract class. But didn’t you use an interface in the implementation of the gumball machine’s state?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch10qa1q5a5"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> Yes. Given we had no common functionality to put into an abstract class, we went with an interface. In your own implementation, you might want to consider an abstract class. Doing so has the benefit of allowing you to add methods to the abstract class later, without breaking the concrete state implementations.</p></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="we_still_need_to_finish_the_gumball_1_in">We still need to finish the Gumball 1 in 10 game</h2></div></div></div><p><a id="iddle1125" class="indexterm"></a><a id="iddle1702" class="indexterm"></a><a id="iddle2073" class="indexterm"></a><a id="iddle2396" class="indexterm"></a>Remember, we’re not done yet. We’ve got a game to implement, but now that we’ve got the State Pattern implemented, it should be a breeze. First, we need to add a state to the GumballMachine class:</p><div class="informalfigure"><a id="med_id00578a"></a><div class="mediaobject"><a id="med_id00578"></a><img src="../Images/image01077.jpeg" alt="image with no caption" hisrc="figs/web/421fig01.png.jpg"/></div></div><p>Now let’s implement the WinnerState class; it’s remarkably similar to the SoldState class:</p><div class="informalfigure"><a id="med_id00579a"></a><div class="mediaobject"><a id="med_id00579"></a><img src="../Images/image01078.jpeg" alt="image with no caption" hisrc="figs/web/421fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="finishing_the_game">Finishing the game</h2></div></div></div><p><a id="iddle1693" class="indexterm"></a><a id="iddle2381" class="indexterm"></a>We’ve just got one more change to make: we need to implement the random chance game and add a transition to the WinnerState. We’re going to add both to the HasQuarterState since that is where the customer turns the crank:</p><div class="informalfigure"><a id="med_id00580a"></a><div class="mediaobject"><a id="med_id00580"></a><img src="../Images/image01079.jpeg" alt="image with no caption" hisrc="figs/web/422fig01.png.jpg"/></div></div><p>Wow, that was pretty simple to implement! We just added a new state to the GumballMachine and then implemented it. All we had to do from there was to implement our chance game and transition to the correct state. It looks like our new code strategy is paying off...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="demo_for_the_ceo_of_mighty_gumballcomma">Demo for the CEO of Mighty Gumball, Inc.</h2></div></div></div><p><a id="iddle1691" class="indexterm"></a><a id="iddle2379" class="indexterm"></a>The CEO of Mighty Gumball has dropped by for a demo of your new gumball game code. Let’s hope those states are all in order! We’ll keep the demo short and sweet (the short attention span of CEOs is well documented), but hopefully long enough so that we’ll win at least once.</p><div class="informalfigure"><a id="med_id00581a"></a><div class="mediaobject"><a id="med_id00581"></a><img src="../Images/image01080.jpeg" alt="image with no caption" hisrc="figs/web/423fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00582a"></a><div class="mediaobject"><a id="med_id00582"></a><img src="../Images/image01081.jpeg" alt="image with no caption" hisrc="figs/web/423fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00583a"></a><div class="mediaobject"><a id="med_id00583"></a><img src="../Images/image01082.jpeg" alt="image with no caption" hisrc="figs/web/424fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00128"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch10qa2qe1"></a><a id="ch10qa2q1"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><a id="iddle1706" class="indexterm"></a><a id="iddle2383" class="indexterm"></a><span class="strong"><strong>Q: Why do we need the WinnerState? Couldn’t we just have the SoldState dispense two gumballs?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch10qa2q1a1"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> That’s a great question. SoldState and WinnerState are almost identical, except that WinnerState dispenses two gumballs instead of one. You certainly could put the code to dispense two gumballs into the SoldState. The downside is, of course, that now you’ve got TWO states represented in one State class: the state in which you’re a winner, and the state in which you’re not. So you are sacrificing clarity in your State class to reduce code duplication. Another thing to consider is the principle you learned in the previous chapter: One class, One responsibility. By putting the WinnerState responsibility into the SoldState, you’ve just given the SoldState TWO responsibilities. What happens when the promotion ends? Or the stakes of the contest change? So, it’s a tradeoff and comes down to a design decision.</p></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00584a"></a><div class="mediaobject"><a id="med_id00584"></a><img src="../Images/image01083.jpeg" alt="image with no caption" hisrc="figs/web/425fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="sanity_checkhellip">Sanity check...</h2></div></div></div><p><a id="iddle1690" class="indexterm"></a><a id="iddle2378" class="indexterm"></a>Yes, the CEO of Mighty Gumball probably needs a sanity check, but that’s not what we’re talking about here. Let’s think through some aspects of the GumballMachine that we might want to shore up before we ship the gold version:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">We’ve got a lot of duplicate code in the Sold and Winning states and we might want to clean those up. How would we do it? We could make State into an abstract class and build in some default behavior for the methods; after all, error messages like, “You already inserted a quarter,” aren’t going to be seen by the customer. So all “error response” behavior could be generic and inherited from the abstract State class.<div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch10note04"></a>Note</h3><p>Dammit Jim, I’m a gumball machine, not a computer!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem">The dispense() method always gets called, even if the crank is turned when there is no quarter. While the machine operates correctly and doesn’t dispense unless it’s in the right state, we could easily fix this by having turnCrank() return a boolean, or by introducing exceptions. Which do you think is a better solution?</li><li class="listitem">All of the intelligence for the state transitions is in the State classes. What problems might this cause? Would we want to move that logic into the Gumball Machine? What would be the advantages and disadvantages of that?</li><li class="listitem">Will you be instantiating a lot of GumballMachine objects? If so, you may want to move the state instances into static instance variables and share them. What changes would this require to the GumballMachine and the States?</li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="fireside_chats-id00129"></a><h3 class="title"><code class="literal">Fireside Chats</code></h3><p><a id="iddle2402" class="indexterm"></a><a id="iddle2421" class="indexterm"></a>Tonight’s talk: <span class="strong"><strong>A Strategy and State Pattern Reunion.</strong></span></p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Strategy:</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>State:</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Hey bro. Did you hear I was in <a class="xref" href="part0008.xhtml#aid-7K4G2">Chapter 1</a>?</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Yeah, word is definitely getting around.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>I was just over giving the Template Method guys a hand — they needed me to help them finish off their chapter. So, anyway, what is my noble brother up to?</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Same as always — helping classes to exhibit different behaviors in different states.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>I don’t know, you always sound like you’ve just copied what I do and you’re using different words to describe it. Think about it: I allow objects to incorporate different behaviors or algorithms through composition and delegation. You’re just copying me.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>I admit that what we do is definitely related, but my intent is totally different than yours. And, the way I teach my clients to use composition and delegation is totally different.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Oh yeah? How so? I don’t get it.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Well, if you spent a little more time thinking about something other than <span class="emphasis"><em>yourself</em></span>, you might. Anyway, think about how you work: you have a class you’re instantiating and you usually give it a strategy object that implements some behavior. Like, in <a class="xref" href="part0008.xhtml#aid-7K4G2">Chapter 1</a> you were handing out quack behaviors, right? Real ducks got a real quack; rubber ducks got a quack that squeaked.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Yeah, that was some <span class="emphasis"><em>fine</em></span> work... and I’m sure you can see how that’s more powerful than inheriting your behavior, right?</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Yes, of course. Now, think about how I work; it’s totally different.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Sorry, you’re going to have to explain that.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Okay, when my Context objects get created, I may tell them the state to start in, but then they change their own state over time.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Hey, come on, I can change behavior at runtime too; that’s what composition is all about!</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Sure you can, but the way I work is built around discrete states; my Context objects change state over time according to some well-defined state transitions. In other words, changing behavior is built in to my scheme — it’s how I work!</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Well, I admit, I don’t encourage my objects to have a well-defined set of transitions between states. In fact, I typically like to control what strategy my objects are using.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Look, we’ve already said we’re alike in structure, but what we do is quite different in intent. Face it, the world has uses for both of us.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Yeah, yeah, keep living your pipe dreams, brother. You act like you’re a big pattern like me, but check it out: I’m in <a class="xref" href="part0008.xhtml#aid-7K4G2">Chapter 1</a>; they stuck you way out in <a class="xref" href="part0017.xhtml#aid-G6PI2">Chapter 10</a>. I mean, how many people are actually going to read this far?</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Are you kidding? This is a Head First book and Head First readers rock. Of course they’re going to get to <a class="xref" href="part0017.xhtml#aid-G6PI2">Chapter 10</a>!</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>That’s my brother, always the dreamer.</p></td><td> </td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="we_almost_forgotexclamation_mark">We almost forgot!</h2></div></div></div><div class="informalfigure"><a id="med_id00585a"></a><div class="mediaobject"><a id="med_id00585"></a><img src="../Images/image01084.jpeg" alt="image with no caption" hisrc="figs/web/428fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00130"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1705" class="indexterm"></a><a id="iddle2382" class="indexterm"></a><a id="iddle1552" class="indexterm"></a><a id="iddle2297" class="indexterm"></a>We need you to write the refill() method for the Gumball machine. It has one argument — the number of gumballs you’re adding to the machine — and should update the gumball machine count and reset the machine’s state.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00586a"></a><div class="mediaobject"><a id="med_id00586"></a><img src="../Images/image01085.jpeg" alt="image with no caption" hisrc="figs/web/429fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark-id00131"></a><h3 class="title">Who Does What?</h3><p><a id="iddle1584" class="indexterm"></a><a id="iddle2373" class="indexterm"></a><a id="iddle2412" class="indexterm"></a><a id="iddle2462" class="indexterm"></a><a id="iddle2521" class="indexterm"></a>Match each pattern with its description:</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Pattern</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Description</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>State</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Encapsulate interchangeable behaviors and use delegation to decide which behavior to use.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Strategy</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Subclasses decide how to implement steps in an algorithm.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>Template Method</p></td><td style="vertical-align: top; "><p>Encapsulate state-based behavior and delegate behavior to the current state.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00132">Tools for your Design Toolbox</h2></div></div></div><p>It’s the end of another chapter; you’ve got enough patterns here to breeze through any job interview!</p><div class="informalfigure"><a id="med_id00587a"></a><div class="mediaobject"><a id="med_id00587"></a><img src="../Images/image01086.jpeg" alt="image with no caption" hisrc="figs/web/431fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00133"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The State Pattern allows an object to have many different behaviors that are based on its internal state.</li><li class="listitem">Unlike a procedural state machine, the State Pattern represents state as a full-blown class.</li><li class="listitem">The Context gets its behavior by delegating to the current state object it is composed with.</li><li class="listitem">By encapsulating each state into a class, we localize any changes that will need to be made.</li><li class="listitem">The State and Strategy Patterns have the same class diagram, but they differ in intent.</li><li class="listitem">Strategy Pattern typically configures Context classes with a behavior or algorithm.</li><li class="listitem">State Pattern allows a Context to change its behavior as the state of the Context changes.</li><li class="listitem">State transitions can be controlled by the State classes or by the Context classes.</li><li class="listitem">Using the State Pattern will typically result in a greater number of classes in your design.</li><li class="listitem">State classes may be shared among Context instances.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle_solution-id00134"></a><h3 class="title">Design Puzzle Solution</h3><p><a id="iddle1433" class="indexterm"></a><a id="iddle1513" class="indexterm"></a><a id="iddle1699" class="indexterm"></a><a id="iddle2070" class="indexterm"></a><a id="iddle2393" class="indexterm"></a>Draw a state diagram for a Gumball Machine that handles the 1-in-10 contest. In this contest, 10% of the time the Sold state leads to two balls being released, not one. Here’s our solution.</p><div class="informalfigure"><a id="med_id00588a"></a><div class="mediaobject"><a id="med_id00588"></a><img src="../Images/image01087.jpeg" alt="image with no caption" hisrc="figs/web/432fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00135"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1536" class="indexterm"></a><a id="iddle1550" class="indexterm"></a><a id="iddle2275" class="indexterm"></a><a id="iddle2292" class="indexterm"></a>Which of the following describe the state of our implementation? (Choose all that apply.) Here’s our solution.</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col><col class="c3"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00056"></a><img src="../Images/image01088.jpeg" alt="" hisrc="figs/web/433fig01.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>A.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>This code certainly isn’t adhering to the Open Closed Principle.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00057"></a><img src="../Images/image01089.jpeg" alt="" hisrc="figs/web/433fig02.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>B.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>This code would make a FORTRAN programmer proud.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00058"></a><img src="../Images/image01090.jpeg" alt="" hisrc="figs/web/433fig03.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>C.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>This design isn’t even very object-oriented.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00059"></a><img src="../Images/image01091.jpeg" alt="" hisrc="figs/web/433fig04.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>D.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>State transitions aren’t explicit; they are buried in the middle of a bunch of conditional statements.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00060"></a><img src="../Images/image01092.jpeg" alt="" hisrc="figs/web/433fig05.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>E.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We haven’t encapsulated anything that varies here.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00061"></a><img src="../Images/image01093.jpeg" alt="" hisrc="figs/web/433fig06.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>F.</p></td><td style="vertical-align: top; "><p>Further additions are likely to cause bugs in working code.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00136"></a><h3 class="title">Sharpen your pencil Solution</h3><p>We have one remaining class we haven’t implemented: SoldOutState. Why don’t you implement it? To do this, carefully think through how the Gumball Machine should behave in each situation. Here’s our solution.</p><a id="pro_id00038"></a><pre class="programlisting"><span class="strong"><strong>public class SoldOutState implements State {</strong></span>
    <span class="strong"><strong>GumballMachine gumballMachine;</strong></span>

     <span class="strong"><strong>public SoldOutState(GumballMachine gumballMachine) {</strong></span>
         <span class="strong"><strong>this.gumballMachine = gumballMachine;</strong></span>
     <span class="strong"><strong>}</strong></span>

     <span class="strong"><strong>public void insertQuarter() {</strong></span>
         <span class="strong"><strong>System.out.println("You can't insert a quarter, the machine is sold out");</strong></span>
     <span class="strong"><strong>}</strong></span>

     <span class="strong"><strong>public void ejectQuarter() {</strong></span>
         <span class="strong"><strong>System.out.println("You can't eject, you haven't inserted a quarter yet");</strong></span>
     <span class="strong"><strong>}</strong></span>

     <span class="strong"><strong>public void turnCrank() {</strong></span>
         <span class="strong"><strong>System.out.println("You turned, but there are no gumballs");</strong></span>
     <span class="strong"><strong>}</strong></span>

     <span class="strong"><strong>public void dispense() {</strong></span>
         <span class="strong"><strong>System.out.println("No gumball dispensed");</strong></span>
     <span class="strong"><strong>}</strong></span>

     <span class="strong"><strong>public String toString() {</strong></span>
         <span class="strong"><strong>return "sold out";</strong></span>
     <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch10note04a"></a>Note</h3><p>In the Sold Out state, we really can’t do anything until someone refills the Gumball Machine.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00137"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1528" class="indexterm"></a><a id="iddle1696" class="indexterm"></a><a id="iddle2067" class="indexterm"></a><a id="iddle2267" class="indexterm"></a><a id="iddle2390" class="indexterm"></a>To implement the states, we first need to define what the behavior will be when the corresponding action is called. Annotate the diagram below with the behavior of each action in each class; here’s our solution.</p><div class="informalfigure"><a id="med_id00589a"></a><div class="mediaobject"><a id="med_id00589"></a><img src="../Images/image01094.jpeg" alt="image with no caption" hisrc="figs/web/434fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="behind_the_scenes_self-guided_tour_solut"></a><h3 class="title">Behind the Scenes: Self-Guided Tour Solution</h3><div class="informalfigure"><a id="med_id00590a"></a><div class="mediaobject"><a id="med_id00590"></a><img src="../Images/image01095.jpeg" alt="image with no caption" hisrc="figs/web/435fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark_solut-id00138"></a><h3 class="title">Who Does What? Solution</h3><p><a id="iddle1526" class="indexterm"></a><a id="iddle2265" class="indexterm"></a><a id="iddle1553" class="indexterm"></a><a id="iddle1585" class="indexterm"></a><a id="iddle2298" class="indexterm"></a><a id="iddle2374" class="indexterm"></a><a id="iddle2413" class="indexterm"></a><a id="iddle2463" class="indexterm"></a><a id="iddle2522" class="indexterm"></a>Match each pattern with its description:</p><div class="informalfigure"><a id="med_id00591a"></a><div class="mediaobject"><a id="med_id00591"></a><img src="../Images/image01096.jpeg" alt="image with no caption" hisrc="figs/web/436fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00139"></a><h3 class="title">Sharpen your pencil Solution</h3><p>To refill the Gumball Machine, we add a refill() method to the State interface, which each State must implement. In every state except the SoldOutState, the method does nothing. In SoldOutState, refill() transitions to NoQuarterState. We also add a refill() method to GumballMachine that adds to the count of gumballs, and then calls the current state’s refill() method.</p><div class="informalfigure"><a id="med_id00592a"></a><div class="mediaobject"><a id="med_id00592"></a><img src="../Images/image01097.jpeg" alt="image with no caption" hisrc="figs/web/436fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>