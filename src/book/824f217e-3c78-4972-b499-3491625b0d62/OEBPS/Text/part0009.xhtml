<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 2. The Observer Pattern: Keeping your Objects in the know</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch01.html"/><link rel="next" href="ch03.html"/></head><body><section class="chapter" epub:type="chapter" id="observer_pattern_keeping_your_objects_in"><div class="titlepage" id="aid-8IL22"><div><div><h2 class="title">Chapter 2. The Observer Pattern: Keeping your Objects in the know</h2></div></div></div><div class="informalfigure"><a id="med_id00068a"></a><div class="mediaobject"><a id="med_id00068"></a><img src="../Images/image00563.jpeg" alt="image with no caption" hisrc="figs/web/037fig01.png.jpg"/></div></div><p><a id="iddle2029" class="indexterm"></a><span class="strong"><strong>Don’t miss out when something interesting happens!</strong></span> We’ve got a pattern that keeps your objects in the know when something they might care about happens. Objects can even decide at runtime whether they want to be kept informed. The Observer Pattern is one of the most heavily used patterns in the JDK, and it’s incredibly useful. Before we’re done, we’ll also look at one-to-many relationships and loose coupling (yeah, that’s right, we said coupling). With Observer, you’ll be the life of the Patterns Party.</p><p><span class="strong"><strong>Congratulations!</strong></span></p><p><span class="strong"><strong>Your team has just won the contract to build Weather-O-Rama, Inc.’s next-generation, Internet-based Weather Monitoring Station.</strong></span></p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col></colgroup><tbody><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00069a"></a><img src="../Images/image00564.jpeg" alt="" hisrc="figs/web/038fig01.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>Statement of Work</strong></span></p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Congratulations on being selected to build our next-generation, Internet-based Weather Monitoring Station!</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The weather station will be based on our patent pending WeatherData object, which tracks current weather conditions (temperature, humidity, and barometric pressure). We’d like you to create an application that initially provides three display elements: current conditions, weather statistics, and a simple forecast, all updated in real time as the WeatherData object acquires the most recent measurements.</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Further, this is an expandable weather station. Weather-ORama wants to release an API so that other developers can write their own weather displays and plug them right in. We’d like for you to supply that API!</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Weather-O-Rama thinks we have a great business model: once the customers are hooked, we intend to charge them for each display they use. Now for the best part: we are going to pay you in stock options.</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We look forward to seeing your design and alpha application.</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Sincerely,</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00070a"></a><img src="../Images/image00565.jpeg" alt="" hisrc="figs/web/038fig02.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Johnny Hurricane, CEO</p></td></tr><tr><td style="vertical-align: top; "><p>P.S. We are overnighting the WeatherData source files to you.</p></td></tr></tbody></table></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="weather_monitoring_application_overview">The Weather Monitoring application overview</h2></div></div></div><p>The three players in the system are the weather station (the physical device that acquires the actual weather data), the WeatherData object (that tracks the data coming from the Weather Station and updates the displays), and the display that shows users the current weather conditions.</p><div class="informalfigure"><a id="med_id00071a"></a><div class="mediaobject"><a id="med_id00071"></a><img src="../Images/image00566.jpeg" alt="image with no caption" hisrc="figs/web/039fig01.png.jpg"/></div></div><p>The WeatherData object knows how to talk to the physical Weather Station, to get updated data. The WeatherData object then updates its displays for the three different display elements: Current Conditions (shows temperature, humidity, and pressure), Weather Statistics, and a simple forecast.</p><p><span class="strong"><strong>Our job, if we choose to accept it, is to create an app that uses the WeatherData object to update three displays for current conditions, weather stats, and a forecast.</strong></span></p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="unpacking_the_weatherdata_class">Unpacking the WeatherData class</h2></div></div></div><p><a id="iddle2057" class="indexterm"></a><a id="iddle2511" class="indexterm"></a><span class="strong"><strong>As promised, the next morning the WeatherData source files arrive. When we peek inside the code, things look pretty straightforward:</strong></span></p><div class="informalfigure"><a id="med_id00072a"></a><div class="mediaobject"><a id="med_id00072"></a><img src="../Images/image00567.jpeg" alt="image with no caption" hisrc="figs/web/040fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00073a"></a><div class="mediaobject"><a id="med_id00073"></a><img src="../Images/image00568.jpeg" alt="image with no caption" hisrc="figs/web/040fig02.png.jpg"/></div></div><p><span class="strong"><strong>Our job is to implement measurementsChanged() so that it updates the three displays for current conditions, weather stats, and forecast.</strong></span></p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_do_we_know_so_farquestion_mark">What do we know so far?</h2></div></div></div><div class="informalfigure"><a id="med_id00074a"></a><div class="mediaobject"><a id="med_id00074"></a><img src="../Images/image00569.jpeg" alt="image with no caption" hisrc="figs/web/common6.png.jpg"/></div></div><p>The spec from Weather-O-Rama wasn’t all that clear, but we have to figure out what we need to do. So, what do we know so far?</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00016"></a><img src="../Images/image00570.jpeg" alt="" hisrc="figs/web/common7.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The WeatherData class has getter methods for three measurement values: temperature, humidity, and barometric pressure.</p>
<a id="pro_id00005"></a><pre class="programlisting"><span class="strong"><strong>getTemperature()</strong></span>
<span class="strong"><strong>getHumidity()</strong></span>
<span class="strong"><strong>getPressure()</strong></span></pre></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00017"></a><img src="../Images/image00570.jpeg" alt="" hisrc="figs/web/common7.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The measurementsChanged() method is called any time new weather measurement data is available. (We don’t know or care how this method is called; we just know that it <span class="emphasis"><em>is.</em></span>)</p>
<a id="pro_id00006"></a><pre class="programlisting"><span class="strong"><strong>measurementsChanged()</strong></span></pre></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00018"></a><img src="../Images/image00570.jpeg" alt="" hisrc="figs/web/common7.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We need to implement three display elements that use the weather data: a <span class="emphasis"><em>current conditions</em></span> display, a <span class="emphasis"><em>statistics display,</em></span> and a <span class="emphasis"><em>forecast</em></span> display. These displays must be updated each time WeatherData has new measurements. <span class="inlinemediaobject"><a id="inline_id00075a"></a><img src="../Images/image00571.jpeg" alt="" hisrc="figs/web/041fig01.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00019"></a><img src="../Images/image00570.jpeg" alt="" hisrc="figs/web/common7.png.jpg"/></span></p></td><td style="vertical-align: top; "><p>The system must be expandable — other developers can create new custom display elements and users can add or remove as many display elements as they want to the application. Currently, we know about only the initial <span class="emphasis"><em>three</em></span> display types (current conditions, statistics, and forecast). <span class="inlinemediaobject"><a id="inline_id00076a"></a><img src="../Images/image00572.jpeg" alt="" hisrc="figs/web/041fig02.png.jpg"/></span></p></td></tr></tbody></table></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="taking_a_firstcomma_misguided_swag_at_th">Taking a first, misguided SWAG at the Weather Station</h2></div></div></div><p><a id="iddle1564" class="indexterm"></a><a id="iddle2056" class="indexterm"></a><a id="iddle2309" class="indexterm"></a><a id="iddle2446" class="indexterm"></a><a id="iddle2510" class="indexterm"></a>Here’s a first implementation possibility — we’ll take the hint from the Weather-O-Rama developers and add our code to the measurementsChanged() method:</p><div class="informalfigure"><a id="med_id00077a"></a><div class="mediaobject"><a id="med_id00077"></a><img src="../Images/image00573.jpeg" alt="image with no caption" hisrc="figs/web/042fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00005"></a><h3 class="title">Sharpen your pencil</h3><p>Based on our first implementation, which of the following apply? (Choose all that apply.)</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col><col class="c3"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00020"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>A.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We are coding to concrete implementations, not interfaces.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00021"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>B.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>For every new display element we need to alter code.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00022"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>C.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We have no way to add (or remove) display elements at run time.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00023"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>D.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The display elements don’t implement a common interface.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00024"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>E.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We haven’t encapsulated the part that changes.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00025"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>F.</p></td><td style="vertical-align: top; "><p>We are violating encapsulation of the WeatherData class.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Definition of SWAG: Scientific Wild A** Guess</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="whatapostrophes_wrong_with_our_implement">What’s wrong with our implementation?</h2></div></div></div><p><a id="iddle1773" class="indexterm"></a>Think back to all those <a class="xref" href="part0008.xhtml#aid-7K4G2">Chapter 1</a> concepts and principles...</p><div class="informalfigure"><a id="med_id00078a"></a><div class="mediaobject"><a id="med_id00078"></a><img src="../Images/image00574.jpeg" alt="image with no caption" hisrc="figs/web/043fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00079a"></a><div class="mediaobject"><a id="med_id00079"></a><img src="../Images/image00575.jpeg" alt="image with no caption" hisrc="figs/web/043fig02.png.jpg"/></div></div><p>We’ll take a look at Observer, then come back and figure out how to apply it to the Weather Monitoring app.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="meet_the_observer_pattern">Meet the Observer Pattern</h2></div></div></div><p><a id="iddle2030" class="indexterm"></a><span class="strong"><strong>You know how newspaper or magazine subscriptions work:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① A newspaper publisher goes into business and begins publishing newspapers.</li><li class="listitem" style="list-style-type: none">② You subscribe to a particular publisher, and every time there’s a new edition it gets delivered to you. As long as you remain a subscriber, you get new newspapers.</li><li class="listitem" style="list-style-type: none">③ You unsubscribe when you don’t want papers anymore, and they stop being delivered.</li><li class="listitem" style="list-style-type: none">④ While the publisher remains in business, people, hotels, airlines, and other businesses constantly subscribe and unsubscribe to the newspaper.</li></ul></div><div class="informalfigure"><a id="med_id00080a"></a><div class="mediaobject"><a id="med_id00080"></a><img src="../Images/image00576.jpeg" alt="image with no caption" hisrc="figs/web/044fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="publishers_plus_subscribers_equals_obser">Publishers + Subscribers = Observer Pattern</h2></div></div></div><p><a id="iddle2045" class="indexterm"></a><a id="iddle2048" class="indexterm"></a><a id="iddle2049" class="indexterm"></a><a id="iddle2061" class="indexterm"></a><a id="iddle2202" class="indexterm"></a><a id="iddle2441" class="indexterm"></a><span class="strong"><strong>If you understand newspaper subscriptions, you pretty much understand the Observer Pattern, only we call the publisher the SUBJECT and the subscribers the OBSERVERS.</strong></span></p><p><span class="strong"><strong>Let’s take a closer look:</strong></span></p><div class="informalfigure"><a id="med_id00081a"></a><div class="mediaobject"><a id="med_id00081"></a><img src="../Images/image00577.jpeg" alt="image with no caption" hisrc="figs/web/045fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="day_in_the_life_of_the_observer_pattern">A day in the life of the Observer Pattern</h2></div></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><a id="iddle2047" class="indexterm"></a><span class="strong"><strong>A Duck object comes along and tells the Subject that it wants to become an observer.</strong></span></p>
<p>Duck really wants in on the action; those ints Subject is sending out whenever its state changes look pretty interesting...</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00082a"></a><img src="../Images/image00578.jpeg" alt="" hisrc="figs/web/046fig01.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>The Duck object is now an official observer.</strong></span></p>
<p>Duck is psyched... he’s on the list and is waiting with great anticipation for the next notification so he can get an int.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00083a"></a><img src="../Images/image00579.jpeg" alt="" hisrc="figs/web/046fig02.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>The Subject gets a new data value!</strong></span></p>
<p>Now Duck and all the rest of the observers get a notification that the Subject has changed.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00084a"></a><img src="../Images/image00580.jpeg" alt="" hisrc="figs/web/046fig03.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>The Mouse object asks to be removed as an observer.</strong></span></p>
<p>The Mouse object has been getting ints for ages and is tired of it, so it decides it’s time to stop being an observer.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00085a"></a><img src="../Images/image00581.jpeg" alt="" hisrc="figs/web/047fig01.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>Mouse is outta here!</strong></span></p>
<p>The Subject acknowledges the Mouse’s request and removes it from the set of observers.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00086a"></a><img src="../Images/image00582.jpeg" alt="" hisrc="figs/web/047fig02.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="strong"><strong>The Subject has another new int.</strong></span></p>
<p>All the observers get another notification, except for the Mouse who is no longer included. Don’t tell anyone, but the Mouse secretly misses those ints... maybe it’ll ask to be an observer again some day.</p></td><td style="vertical-align: top; "><p><span class="inlinemediaobject"><a id="inline_id00087a"></a><img src="../Images/image00583.jpeg" alt="" hisrc="figs/web/047fig03.png.jpg"/></span></p></td></tr></tbody></table></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="five-minute_drama_a_subject_for_observat">Five-minute drama: a subject for observation</h2></div></div></div><div class="informalfigure"><a id="med_id00088a"></a><div class="mediaobject"><a id="med_id00088"></a><img src="../Images/image00584.jpeg" alt="image with no caption" hisrc="figs/web/common8.png.jpg"/></div></div><p><a id="iddle2039" class="indexterm"></a><a id="iddle2060" class="indexterm"></a><a id="iddle2440" class="indexterm"></a>In today’s skit, two post-bubble software developers encounter a real live head hunter...</p><div class="informalfigure"><a id="med_id00089a"></a><div class="mediaobject"><a id="med_id00089"></a><img src="../Images/image00585.jpeg" alt="image with no caption" hisrc="figs/web/048fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00090a"></a><div class="mediaobject"><a id="med_id00090"></a><img src="../Images/image00586.jpeg" alt="image with no caption" hisrc="figs/web/049fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="two_weeks_laterhellip">Two weeks later...</h2></div></div></div><div class="informalfigure"><a id="med_id00091a"></a><div class="mediaobject"><a id="med_id00091"></a><img src="../Images/image00587.jpeg" alt="image with no caption" hisrc="figs/web/050fig01.png.jpg"/></div></div><p>Jill’s loving life, and no longer an observer. She’s also enjoying the nice fat signing bonus that she got because the company didn’t have to pay a headhunter.</p><div class="informalfigure"><a id="med_id00092a"></a><div class="mediaobject"><a id="med_id00092"></a><img src="../Images/image00588.jpeg" alt="image with no caption" hisrc="figs/web/050fig02.png.jpg"/></div></div><p>But what has become of our dear Lori? We hear she’s beating the headhunter at his own game. She’s not only still an observer, she’s got her own call list now, and she is notifying her own observers. Lori’s a subject and an observer all in one.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="observer_pattern_defined">The Observer Pattern defined</h2></div></div></div><p><a id="iddle1105" class="indexterm"></a><a id="iddle2031" class="indexterm"></a><a id="iddle2034" class="indexterm"></a><a id="iddle2046" class="indexterm"></a><a id="iddle2076" class="indexterm"></a>When you’re trying to picture the Observer Pattern, a newspaper subscription service with its publisher and subscribers is a good way to visualize the pattern.</p><p>In the real world, however, you’ll typically see the Observer Pattern defined like this:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note01"></a>Note</h3><p><span class="strong"><strong>The Observer Pattern</strong></span> defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Let’s relate this definition to how we’ve been talking about the pattern:</p><div class="informalfigure"><a id="med_id00093a"></a><div class="mediaobject"><a id="med_id00093"></a><img src="../Images/image00589.jpeg" alt="image with no caption" hisrc="figs/web/051fig01.png.jpg"/></div></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>The Observer Pattern defines a one-to-many relationship between a set of objects.</strong></span></div><div><span class="strong"><strong>When the state of one object changes, all of its dependents are notified.</strong></span></div></blockquote></div><p>The subject and observers define the one-to-many relationship. The observers are dependent on the subject such that when the subject’s state changes, the observers get notified. Depending on the style of notification, the observer may also be updated with new values.</p><p>As you’ll discover, there are a few different ways to implement the Observer Pattern, but most revolve around a class design that includes Subject and Observer interfaces.</p><p>Let’s take a look...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="observer_pattern_defined_the_class_diagr">The Observer Pattern defined: the class diagram</h2></div></div></div><div class="informalfigure"><a id="med_id00094a"></a><div class="mediaobject"><a id="med_id00094"></a><img src="../Images/image00590.jpeg" alt="image with no caption" hisrc="figs/web/052fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00006"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch02qa1qe1"></a><a id="ch02qa1q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle1369" class="indexterm"></a><a id="iddle2035" class="indexterm"></a><a id="iddle2059" class="indexterm"></a><a id="iddle2439" class="indexterm"></a><span class="strong"><strong>Q: What does this have to do with one-to-many relationships?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch02qa1q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> With the Observer Pattern, the Subject is the object that contains the state and controls it. So, there is ONE subject with state. The observers, on the other hand, use the state, even if they don’t own it. There are many observers and they rely on the Subject to tell them when its state changes. So there is a relationship between the ONE Subject to the MANY Observers.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch02qa1qe2"></a><a id="ch02qa1q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: How does dependence come into this?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch02qa1q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Because the subject is the sole owner of that data, the observers are dependent on the subject to update them when the data changes. This leads to a cleaner OO design than allowing many objects to control the same data.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="power_of_loose_coupling">The power of Loose Coupling</h2></div></div></div><p><a id="iddle1100" class="indexterm"></a><a id="iddle1425" class="indexterm"></a><a id="iddle1890" class="indexterm"></a><a id="iddle2015" class="indexterm"></a><a id="iddle2020" class="indexterm"></a><a id="iddle2044" class="indexterm"></a><a id="iddle2086" class="indexterm"></a><a id="iddle2476" class="indexterm"></a><span class="strong"><strong>When two objects are loosely coupled, they can interact, but have very little knowledge of each other.</strong></span></p><p><span class="strong"><strong>The Observer Pattern provides an object design where subjects and observers are loosely coupled.</strong></span></p><p><span class="strong"><strong>Why?</strong></span></p><p><span class="strong"><strong>The only thing the subject knows about an observer is that it implements a certain interface (the Observer interface).</strong></span> It doesn’t need to know the concrete class of the observer, what it does, or anything else about it.</p><p><span class="strong"><strong>We can add new observers at any time.</strong></span> Because the only thing the subject depends on is a list of objects that implement the Observer interface, we can add new observers whenever we want. In fact, we can replace any observer at runtime with another observer and the subject will keep purring along. Likewise, we can remove observers at any time.</p><p><span class="strong"><strong>We never need to modify the subject to add new types of observers.</strong></span> Let’s say we have a new concrete class come along that needs to be an observer. We don’t need to make any changes to the subject to accommodate the new class type; all we have to do is implement the Observer interface in the new class and register as an observer. The subject doesn’t care; it will deliver notifications to any object that implements the Observer interface.</p><p><span class="strong"><strong>We can reuse subjects or observers independently of each other.</strong></span> If we have another use for a subject or an observer, we can easily reuse them because the two aren’t tightly coupled.</p><p><span class="strong"><strong>Changes to either the subject or an observer will not affect the other.</strong></span> Because the two are loosely coupled, we are free to make changes to either, as long as the objects still meet their obligations to implement the subject or observer interfaces.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note02"></a>Note</h3><p>How many different kinds of change can you identify here?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note03"></a>Design Principle</h3><p><span class="emphasis"><em>Strive for loosely coupled designs between objects that interact.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><span class="strong"><strong>Loosely coupled designs allow us to build flexible OO systems that can handle change because they minimize the interdependency between objects.</strong></span></p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00007"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1559" class="indexterm"></a><a id="iddle2304" class="indexterm"></a>Before moving on, try sketching out the classes you’ll need to implement the Weather Station, including the WeatherData class and its display elements. Make sure your diagram shows how all the pieces fit together and also how another developer might implement her own display element.</p><p>If you need a little help, read the next page; your teammates are already talking about how to design the Weather Station.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="cubicle_conversation">Cubicle conversation</h2></div></div></div><p>Back to the Weather Station project. Your teammates have already started thinking through the problem...</p><div class="informalfigure"><a id="med_id00095a"></a><div class="mediaobject"><a id="med_id00095"></a><img src="../Images/image00591.jpeg" alt="image with no caption" hisrc="figs/web/055fig01.png.jpg"/></div></div><p><span class="strong"><strong>Mary:</strong></span> Well, it helps to know we’re using the Observer Pattern.</p><p><span class="strong"><strong>Sue:</strong></span> Right... but how do we apply it?</p><p><span class="strong"><strong>Mary:</strong></span> Hmm. Let’s look at the definition again:</p><p><span class="emphasis"><em>The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</em></span></p><p><span class="strong"><strong>Mary:</strong></span> That actually makes some sense when you think about it. Our WeatherData class is the “one” and our “many” is the various display elements that use the weather measurements.</p><p><span class="strong"><strong>Sue:</strong></span> That’s right. The WeatherData class certainly has state... that’s the temperature, humidity, and barometric pressure, and those definitely change.</p><p><span class="strong"><strong>Mary:</strong></span> Yup, and when those measurements change, we have to notify all the display elements so they can do whatever it is they are going to do with the measurements.</p><p><span class="strong"><strong>Sue:</strong></span> Cool, I now think I see how the Observer Pattern can be applied to our Weather Station problem.</p><p><span class="strong"><strong>Mary:</strong></span> There are still a few things to consider that I’m not sure I understand yet.</p><p><span class="strong"><strong>Sue:</strong></span> Like what?</p><p><span class="strong"><strong>Mary:</strong></span> For one thing, how do we get the weather measurements to the display elements?</p><p><span class="strong"><strong>Sue:</strong></span> Well, looking back at the picture of the Observer Pattern, if we make the WeatherData object the subject, and the display elements the observers, then the displays will register themselves with the WeatherData object in order to get the information they want, right?</p><p><span class="strong"><strong>Mary:</strong></span> Yes... and once the Weather Station knows about a display element, then it can just call a method to tell it about the measurements.</p><p><span class="strong"><strong>Sue:</strong></span> We gotta remember that every display element can be different... so I think that’s where having a common interface comes in. Even though every component has a different type, they should all implement the same interface so that the WeatherData object will know how to send them the measurements.</p><p><span class="strong"><strong>Mary:</strong></span> I see what you mean. So every display will have, say, an update() method that WeatherData will call.</p><p><span class="strong"><strong>Sue:</strong></span> And update() is defined in a common interface that all the elements implement...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="designing_the_weather_station">Designing the Weather Station</h2></div></div></div><p><a id="iddle2053" class="indexterm"></a><a id="iddle2507" class="indexterm"></a>How does this diagram compare with yours?</p><div class="informalfigure"><a id="med_id00096a"></a><div class="mediaobject"><a id="med_id00096"></a><img src="../Images/image00592.jpeg" alt="image with no caption" hisrc="figs/web/056fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_weather_station">Implementing the Weather Station</h2></div></div></div><p><a id="iddle2054" class="indexterm"></a><a id="iddle2508" class="indexterm"></a>We’re going to start our implementation using the class diagram and following Mary and Sue’s lead (from a few pages back). You’ll see later in this chapter that Java provides some built-in support for the Observer Pattern, however, we’re going to get our hands dirty and roll our own for now. While in some cases you can make use of Java’s built-in support, in a lot of cases it’s more flexible to build your own (and it’s not all that hard). So, let’s get started with the interfaces:</p><div class="informalfigure"><a id="med_id00097a"></a><div class="mediaobject"><a id="med_id00097"></a><img src="../Images/image00593.jpeg" alt="image with no caption" hisrc="figs/web/057fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note04"></a>Brain Power</h3><p>Mary and Sue thought that passing the measurements directly to the observers was the most straightforward method of updating state. Do you think this is wise? Hint: is this an area of the application that might change in the future? If it did change, would the change be well encapsulated, or would it require changes in many parts of the code?</p><p>Can you think of other ways to approach the problem of passing the updated state to the observers?</p><p>Don’t worry; we’ll come back to this design decision after we finish the initial implementation.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_subject_interface_in_we">Implementing the Subject interface in WeatherData</h2></div></div></div><div class="blockquote"><blockquote class="blockquote"><div>REMEMBER: we don’t provide import and package statements in the code listings. Get the complete source code from <a class="ulink" href="http://wickedlysmart.com/head-first-design-patterns/" target="_top">http://wickedlysmart.com/head-first-design-patterns/</a>.</div></blockquote></div><p>Remember our first attempt at implementing the WeatherData class at the beginning of the chapter? You might want to refresh your memory. Now it’s time to go back and do things with the Observer Pattern in mind...</p><div class="informalfigure"><a id="med_id00098a"></a><div class="mediaobject"><a id="med_id00098"></a><img src="../Images/image00594.jpeg" alt="image with no caption" hisrc="figs/web/058fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="nowcomma_letapostrophes_build_those_disp">Now, let’s build those display elements</h2></div></div></div><p><a id="iddle2052" class="indexterm"></a><a id="iddle2506" class="indexterm"></a>Now that we’ve got our WeatherData class straightened out, it’s time to build the Display Elements. Weather-O-Rama ordered three: the current conditions display, the statistics display, and the forecast display. Let’s take a look at the current conditions display; once you have a good feel for this display element, check out the statistics and forecast displays in the code directory. You’ll see they are very similar.</p><div class="informalfigure"><a id="med_id00099a"></a><div class="mediaobject"><a id="med_id00099"></a><img src="../Images/image00595.jpeg" alt="image with no caption" hisrc="figs/web/059fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00008"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch02qa2qe1"></a><a id="ch02qa2q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Is update() the best place to call display?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch02qa2q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> In this simple example it made sense to call display() when the values changed. However, you are right; there are much better ways to design the way the data gets displayed. We are going to see this when we get to the Model-View-Controller pattern.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch02qa2qe2"></a><a id="ch02qa2q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Why did you store a reference to the Subject? It doesn’t look like you use it again after the constructor.</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch02qa2q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> True, but in the future we may want to un-register ourselves as an observer and it would be handy to already have a reference to the subject.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="power_up_the_weather_station">Power up the Weather Station</h2></div></div></div><div class="informalfigure"><a id="med_id00100a"></a><div class="mediaobject"><a id="med_id00100"></a><img src="../Images/image00569.jpeg" alt="image with no caption" hisrc="figs/web/common6.png.jpg"/></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① <a id="iddle2055" class="indexterm"></a><a id="iddle2509" class="indexterm"></a><span class="strong"><strong>First, let’s create a test harness.</strong></span><br/>The Weather Station is ready to go. All we need is some code to glue everything together. Here’s our first attempt. We’ll come back later in the book and make sure all the components are easily pluggable via a configuration file. For now here’s how it all works:<div class="informalfigure"><a id="med_id00101a"></a><div class="mediaobject"><a id="med_id00101"></a><img src="../Images/image00596.jpeg" alt="image with no caption" hisrc="figs/web/060fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Run the code and let the Observer Pattern do its magic.</strong></span><div class="informalfigure"><a id="med_id00102a"></a><div class="mediaobject"><a id="med_id00102"></a><img src="../Images/image00597.jpeg" alt="image with no caption" hisrc="figs/web/060fig02.png.jpg"/></div></div></li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00009"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle2282" class="indexterm"></a>Johnny Hurricane, Weather-O-Rama’s CEO, just called and they can’t possibly ship without a Heat Index display element. Here are the details.</p><p>The heat index is an index that combines temperature and humidity to determine the apparent temperature (how hot it actually feels). To compute the heat index, you take the temperature, T, and the relative humidity, RH, and use this formula:</p><a id="pro_id00007"></a><pre class="programlisting"><span class="strong"><strong>heatindex =</strong></span>

    <span class="strong"><strong>16.923 + 1.85212 * 10<sup>-1</sup> * T + 5.37941 * RH - 1.00254 * 10<sup>-1</sup> *</strong></span>
    <span class="strong"><strong>T * RH + 9.41695 * 10<sup>-3</sup> * T<sup>2</sup> + 7.28898 * 10<sup>-3</sup> * RH<sup>2</sup> + 3.45372 *</strong></span>
    <span class="strong"><strong>10<sup>-4</sup> * T<sup>2</sup> * RH - 8.14971 * 10<sup>-4</sup> * T * RH<sup>2</sup> + 1.02102 * 10<sup>-5</sup> * T<sup>2</sup> *</strong></span>
    <span class="strong"><strong>RH<sup>2</sup> - 3.8646 * 10<sup>-5</sup> * T<sup>3</sup> + 2.91583 * 10<sup>-5</sup> * RH<sup>3</sup> + 1.42721 * 10<sup>-6</sup></strong></span>
    <span class="strong"><strong>* T<sup>3</sup> * RH + 1.97483 * 10<sup>-7</sup> * T * RH<sup>3</sup> - 2.18429 * 10<sup>-8</sup> * T<sup>3</sup> * RH<sup>2</sup></strong></span>
    <span class="strong"><strong>+ 8.43296 * 10<sup>-10</sup> * T<sup>2</sup> * RH<sup>3</sup> - 4.81975 * 10<sup>-11</sup> * T<sup>3</sup> * RH<sup>3</sup></strong></span></pre><p>So get typing!</p><p>Just kidding. Don’t worry, you won’t have to type that formula in; just create your own HeatIndexDisplay.java file and copy the formula from heatindex.txt into it.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note05"></a>Note</h3><p>You can get heatindex.txt from wickedlysmart.com.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>How does it work? You’d have to refer to <span class="emphasis"><em>Head First Meteorology</em></span>, or try asking someone at the National Weather Service (or try a web search).</p><p>When you finish, your output should look like this:</p><div class="informalfigure"><a id="med_id00103a"></a><div class="mediaobject"><a id="med_id00103"></a><img src="../Images/image00598.jpeg" alt="image with no caption" hisrc="figs/web/061fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="fireside_chats"></a><h3 class="title"><code class="literal">Fireside Chats</code></h3><p>Tonight’s talk: <span class="strong"><strong>A Subject and Observer spar over the right way to get state information to the Observer.</strong></span></p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Subject:</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Observer:</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>I’m glad we’re finally getting a chance to chat in person.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Really? I thought you didn’t care much about us Observers.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Well, I do my job, don’t I? I always tell you what’s going on... Just because I don’t really know who you are doesn’t mean I don’t care. And besides, I do know the most important thing about you — you implement the Observer interface.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Yeah, but that’s just a small part of who I am. Anyway, I know a lot more about you...</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Oh yeah, like what?</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Well, you’re always passing your state around to us Observers so we can see what’s going on inside you. Which gets a little annoying at times...</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Well, excuuuse me. I have to send my state with my notifications so all you lazy Observers will know what happened!</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Okay, wait just a minute here; first, we’re not lazy, we just have other stuff to do in between your oh-so-important notifications, Mr. Subject, and second, why don’t you let us come to you for the state we want rather than pushing it out to just everyone?</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Well... I guess that might work. I’d have to open myself up even more, though, to let all you Observers come in and get the state that you need. That might be kind of dangerous. I can’t let you come in and just snoop around looking at everything I’ve got.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Why don’t you just write some public getter methods that will let us pull out the state we need?</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Yes, I could let you <span class="strong"><strong>pull</strong></span> my state. But won’t that be less convenient for you? If you have to come to me every time you want something, you might have to make multiple method calls to get all the state you want. That’s why I like <span class="strong"><strong>push</strong></span> better... then you have everything you need in one notification.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Don’t be so pushy! There are so many different kinds of us Observers, there’s no way you can anticipate everything we need. Just let us come to you to get the state we need. That way, if some of us only need a little bit of state, we aren’t forced to get it all. It also makes things easier to modify later. Say, for example, you expand yourself and add some more state. If you use pull, you don’t have to go around and change the update calls on every observer; you just need to change yourself to allow more getter methods to access our additional state.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Well, I can see the advantages to doing it both ways. I have noticed that there is a built-in Java Observer Pattern that allows you to use either push or pull.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Oh really? I think we’re going to look at that next....</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Great... maybe I’ll get to see a good example of pull and change my mind.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; "> </td><td style="vertical-align: top; "><p>What, us agree on something? I guess there’s always hope.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="using_javaapostrophes_built-in_observer">Using Java’s built-in Observer Pattern</h2></div></div></div><p><a id="iddle1861" class="indexterm"></a><a id="iddle2051" class="indexterm"></a>So far we’ve rolled our own code for the Observer Pattern, but Java has built-in support in several of its APIs. The most general is the Observer interface and the Observable class in the java.util package. These are quite similar to our Subject and Observer interfaces, but give you a lot of functionality out of the box. You can also implement either a push or pull style of update to your observers, as you will see.</p><p>To get a high-level feel for java.util.Observer and java.util.Observable, check out this reworked OO design for the WeatherStation:</p><div class="informalfigure"><a id="med_id00104a"></a><div class="mediaobject"><a id="med_id00104"></a><img src="../Images/image00599.jpeg" alt="image with no caption" hisrc="figs/web/064fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00105a"></a><div class="mediaobject"><a id="med_id00105"></a><img src="../Images/image00600.jpeg" alt="image with no caption" hisrc="figs/web/064fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="how_javaapostrophes_built-in_observer_pa">How Java’s built-in Observer Pattern works</h2></div></div></div><p>The built-in Observer Pattern works a bit differently than the implementation that we used on the Weather Station. The most obvious difference is that WeatherData (our subject) now extends the Observable class and inherits the add, delete, and notify Observer methods (among a few others). Here’s how we use Java’s version:</p><p><span class="strong"><strong>For an Object to become an observer...</strong></span></p><p>As usual, implement the Observer interface (this time the java.util.Observer interface) and call addObserver() on any Observable object. Likewise, to remove yourself as an observer, just call deleteObserver().</p><p><span class="strong"><strong>For the Observable to send notifications...</strong></span></p><p>First of all you need to be Observable by extending the java.util.Observable superclass. From there it is a two-step process:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① You first must call the setChanged() method to signify that the state has changed in your object.</li><li class="listitem" style="list-style-type: none">② Then, call one of two notifyObservers() methods:<div class="informalfigure"><a id="med_id00106a"></a><div class="mediaobject"><a id="med_id00106"></a><img src="../Images/image00601.jpeg" alt="image with no caption" hisrc="figs/web/065fig01.png.jpg"/></div></div></li></ul></div><p><span class="strong"><strong>For an Observer to receive notifications...</strong></span></p><p>It implements the update method, as before, but the signature of the method is a bit different:</p><p>If you want to “push” data to the observers, you can pass the data as a data object to the notifyObservers(arg) method. If not, then the Observer has to “pull” the data it wants from the Observable object passed to it. How? Let’s rework the Weather Station and you’ll see.</p><div class="informalfigure"><a id="med_id00107a"></a><div class="mediaobject"><a id="med_id00107"></a><img src="../Images/image00602.jpeg" alt="image with no caption" hisrc="figs/web/066fig01.png.jpg"/></div></div><p>The setChanged() method is used to signify that the state has changed and that notifyObservers(), when it is called, should update its observers. If notifyObservers() is called without first calling setChanged(), the observers will NOT be notified. Let’s take a look behind the scenes of Observable to see how this works:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="behind_the_scenes"></a><h3 class="title">Behind the Scenes</h3><div class="informalfigure"><a id="med_id00108a"></a><div class="mediaobject"><a id="med_id00108"></a><img src="../Images/image00603.jpeg" alt="image with no caption" hisrc="figs/web/066fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Why is this necessary? The setChanged() method is meant to give you more flexibility in how you update observers by allowing you to optimize the notifications. For example, in our Weather Station, imagine if our measurements were so sensitive that the temperature readings were constantly fluctuating by a few tenths of a degree. That might cause the WeatherData object to send out notifications constantly. Instead, we might want to send out notifications only if the temperature changes more than half a degree and we could call setChanged() only after that happened.</p><p>You might not use this functionality very often, but it’s there if you need it. In either case, you need to call setChanged() for notifications to work. If this functionality is something that is useful to you, you may also want to use the clearChanged() method, which sets the changed state back to false, and the hasChanged() method, which tells you the current state of the changed flag.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="reworking_the_weather_station_with_the_b">Reworking the Weather Station with the built-in support</h2></div></div></div><p><a id="iddle2058" class="indexterm"></a><a id="iddle2512" class="indexterm"></a><span class="strong"><strong>First, let’s rework WeatherData to use java.util.Observable</strong></span></p><div class="informalfigure"><a id="med_id00109a"></a><div class="mediaobject"><a id="med_id00109"></a><img src="../Images/image00604.jpeg" alt="image with no caption" hisrc="figs/web/067fig01.png.jpg"/></div></div><p><span class="strong"><strong>Now, let’s rework the CurrentConditionsDisplay</strong></span></p><div class="informalfigure"><a id="med_id00110a"></a><div class="mediaobject"><a id="med_id00110"></a><img src="../Images/image00605.jpeg" alt="image with no caption" hisrc="figs/web/068fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_magnets"></a><h3 class="title">Code Magnets</h3><p><a id="iddle1144" class="indexterm"></a><a id="iddle1507" class="indexterm"></a>The ForecastDisplay class is all scrambled up on the fridge. Can you reconstruct the code snippets to make it work? Some of the curly braces fell on the floor and they were too small to pick up, so feel free to add as many of those as you need!</p><div class="informalfigure"><a id="med_id00111a"></a><div class="mediaobject"><a id="med_id00111"></a><img src="../Images/image00606.jpeg" alt="image with no caption" hisrc="figs/web/069fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="running_the_new_code">Running the new code</h2></div></div></div><p><span class="strong"><strong>Just to be sure, let’s run the new code...</strong></span></p><div class="informalfigure"><a id="med_id00112a"></a><div class="mediaobject"><a id="med_id00112"></a><img src="../Images/image00607.jpeg" alt="image with no caption" hisrc="figs/web/070fig01.png.jpg"/></div></div><p><span class="strong"><strong>Hmm, do you notice anything different? Look again...</strong></span></p><p>You’ll see all the same calculations, but mysteriously, the order of the text output is different. Why might this happen? Think for a minute before reading on...</p><p><span class="strong"><strong>Never depend on order of evaluation of the Observer notifications</strong></span></p><p>The java.util.Observable has implemented its notifyObservers() method such that the Observers are notified in a <span class="emphasis"><em>different</em></span> order than our own implementation. Who’s right? Neither; we just chose to implement things in different ways.</p><p>What would be incorrect, however, is if we wrote our code to <span class="emphasis"><em>depend</em></span> on a specific notification order. Why? Because if you need to change Observable/Observer implementations, the order of notification could change and your application would produce incorrect results. Now that’s definitely not what we’d consider loosely coupled.</p><div class="informalfigure"><a id="med_id00113a"></a><div class="mediaobject"><a id="med_id00113"></a><img src="../Images/image00608.jpeg" alt="image with no caption" hisrc="figs/web/071fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="dark_side_of_javadotutildotobservable">The dark side of java.util.Observable</h2></div></div></div><p><a id="iddle1420" class="indexterm"></a><a id="iddle1799" class="indexterm"></a><a id="iddle2141" class="indexterm"></a>Yes, good catch. As you’ve noticed, Observable is a class, not an <span class="emphasis"><em>interface</em></span>, and worse, it doesn’t even <span class="emphasis"><em>implement</em></span> an interface. Unfortunately, the java.util.Observable implementation has a number of problems that limit its usefulness and reuse. That’s not to say it doesn’t provide some utility, but there are some large potholes to watch out for.</p><p><span class="strong"><strong>Observable is a class</strong></span></p><p>You already know from our principles this is a bad idea, but what harm does it really cause?</p><p>First, because Observable is a <span class="emphasis"><em>class</em></span>, you have to <span class="emphasis"><em>subclass</em></span> it. That means you can’t add on the Observable behavior to an existing class that already extends another superclass. This limits its reuse potential (and isn’t that why we are using patterns in the first place?).</p><p>Second, because there isn’t an Observable interface, you can’t even create your own implementation that plays well with Java’s built-in Observer API. Nor do you have the option of swapping out the java.util implementation for another (say, a new, multithreaded implementation).</p><p><span class="strong"><strong>Observable protects crucial methods</strong></span></p><p>If you look at the Observable API, the setChanged() method is protected. So what? Well, this means you can’t call setChanged() unless you’ve subclassed Observable. This means you can’t even create an instance of the Observable class and compose it with your own objects, you <span class="emphasis"><em>have</em></span> to subclass. The design violates a second design principle here...<span class="emphasis"><em>favor composition over inheritance</em></span>.</p><p><span class="strong"><strong>What to do?</strong></span></p><p>Observable <span class="emphasis"><em>may</em></span> serve your needs if you can extend java.util.Observable. On the other hand, you may need to roll your own implementation as we did at the beginning of the chapter. In either case, you know the Observer Pattern well and you’re in a good position to work with any API that makes use of the pattern.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="other_places_youapostrophell_find_the_ob">Other places you’ll find the Observer Pattern in the JDK</h2></div></div></div><p><a id="iddle1871" class="indexterm"></a><a id="iddle2050" class="indexterm"></a><a id="iddle2448" class="indexterm"></a>The java.util implementation of Observer/Observable is not the only place you’ll find the Observer Pattern in the JDK; both JavaBeans and Swing also provide their own implementations of the pattern. At this point you understand enough about Observer to explore these APIs on your own; however, let’s do a quick, simple Swing example just for the fun of it.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note06"></a>Note</h3><p>If you’re curious about the Observer Pattern in JavaBeans, check out the PropertyChangeListener interface.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><span class="strong"><strong>A little background...</strong></span></p><p>Let’s take a look at a simple part of the Swing API, the JButton. If you look under the hood at JButton’s superclass, AbstractButton, you’ll see that it has a lot of add/ remove listener methods. These methods allow you to add and remove observers, or, as they are called in Swing, listeners, to listen for various types of events that occur on the Swing component. For instance, an ActionListener lets you “listen in” on any types of actions that might occur on a button, like a button press. You’ll find various types of listeners all over the Swing API.</p><p><span class="strong"><strong>A little life-changing application</strong></span></p><p>Okay, our application is pretty simple. You’ve got a button that says “Should I do it?” and when you click on that button the listeners (observers) get to answer the question in any way they want. We’re implementing two such listeners, called the AngelListener and the DevilListener. Here’s how the application behaves:</p><div class="informalfigure"><a id="med_id00114a"></a><div class="mediaobject"><a id="med_id00114"></a><img src="../Images/image00609.jpeg" alt="image with no caption" hisrc="figs/web/072fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="and_the_codehellip">And the code...</h2></div></div></div><p>This life-changing application requires very little code. All we need to do is create a JButton object, add it to a JFrame and set up our listeners. We’re going to use inner classes for the listeners, which is a common technique in Swing programming. If you aren’t up on inner classes or Swing, you might want to review the “Getting GUI” chapter of <span class="emphasis"><em>Head First Java</em></span>.</p><div class="informalfigure"><a id="med_id00115a"></a><div class="mediaobject"><a id="med_id00115"></a><img src="../Images/image00610.jpeg" alt="image with no caption" hisrc="figs/web/073fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00116a"></a><div class="mediaobject"><a id="med_id00116"></a><img src="../Images/image00611.jpeg" alt="image with no caption" hisrc="figs/web/074fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note07"></a>Note</h3><p><a id="iddle1877" class="indexterm"></a><a id="iddle2043" class="indexterm"></a>Lambda expressions were added in Java 8. If you aren’t familiar with them, don’t worry about it; you can continue using inner classes for your Swing observers.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Yes, you’re still using the Observer Pattern. By using a lambda expression rather than an inner class, you’re just skipping the step of creating an ActionListener object. With a lambda expression, you create a function object instead, and this function object is the observer. When you pass that function object to addActionListener(), Java ensures its signature matches actionPerformed(), the one method in the ActionListener interface.</p><p>Later, when the button is clicked, the button object notifies its observers — including the function objects created by the lambda expressions — that it’s been clicked, and calls each listener’s actionPerformed() method.</p><p>Let’s take a look at how you’d use lambda expressions as observers to simplify our previous code:</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="updated_codecomma_using_lambda_expressio">The updated code, using lambda expressions</h3></div></div></div><div class="informalfigure"><a id="med_id00117a"></a><div class="mediaobject"><a id="med_id00117"></a><img src="../Images/image00612.jpeg" alt="image with no caption" hisrc="figs/web/074fig02.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00010">Tools for your Design Toolbox</h2></div></div></div><p>Welcome to the end of <a class="xref" href="part0009.xhtml#aid-8IL22">Chapter 2</a>. You’ve added a few new things to your OO toolbox...</p><div class="informalfigure"><a id="med_id00118a"></a><div class="mediaobject"><a id="med_id00118"></a><img src="../Images/image00613.jpeg" alt="image with no caption" hisrc="figs/web/075fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00011"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The Observer Pattern defines a one-to-many relationship between objects.</li><li class="listitem">Subjects, or as we also know them, Observables, update Observers using a common interface.</li><li class="listitem">Observers are loosely coupled in that the Observable knows nothing about them, other than that they implement the Observer interface.</li><li class="listitem">You can push or pull data from the Observable when using the pattern (pull is considered more “correct”).</li><li class="listitem">Don’t depend on a specific order of notification for your Observers.</li><li class="listitem">Java has several implementations of the Observer Pattern, including the general purpose java.util.Observable.</li><li class="listitem">Watch out for issues with the java.util.Observable implementation.</li><li class="listitem">Don’t be afraid to create your own Observable implementation if needed.</li><li class="listitem">Swing makes heavy use of the Observer Pattern, as do many GUI frameworks.</li><li class="listitem">You’ll also find the pattern in many other places, including JavaBeans and RMI.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_principle_challenge"></a><h3 class="title">Design Principle Challenge</h3><p><a id="iddle1403" class="indexterm"></a><a id="iddle1407" class="indexterm"></a><a id="iddle1421" class="indexterm"></a><a id="iddle1426" class="indexterm"></a><a id="iddle1470" class="indexterm"></a><a id="iddle1674" class="indexterm"></a><a id="iddle2142" class="indexterm"></a>For each design principle, describe how the Observer Pattern makes use of the principle.</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note08"></a>Design Principle</h3><p><span class="emphasis"><em>Identify the aspects of your application that vary and separate them from what stays the same.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>______________________________________________________</p>
<p>______________________________________________________</p>
<p>______________________________________________________</p>
<p>______________________________________________________</p>
<p>______________________________________________________</p>
<p>______________________________________________________</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note09"></a>Design Principle</h3><p><span class="emphasis"><em>Program to an interface, not an implementation.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>______________________________________________________</p>
<p>______________________________________________________</p>
<p>______________________________________________________</p>
<p>______________________________________________________</p>
<p>______________________________________________________</p>
<p>______________________________________________________</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note10"></a>Design Principle</h3><p><span class="emphasis"><em>Favor composition over inheritance.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></td><td style="vertical-align: top; "><p><span class="underline">This is a hard one, hint: think about how observers and subjects work together.</span></p>
<p>______________________________________________________</p>
<p>______________________________________________________</p>
<p>______________________________________________________</p>
<p>______________________________________________________</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword-id00012"></a><h3 class="title">Design Patterns Crossword</h3><p>Time to give your right brain something to do again! This time all of the solution words are from <a class="xref" href="part0009.xhtml#aid-8IL22">Chapter 2</a>.</p><div class="informalfigure"><a id="med_id00119a"></a><div class="mediaobject"><a id="med_id00119"></a><img src="../Images/image00614.gif" alt="image with no caption" hisrc="figs/web/077fig01.png"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Across</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Down</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>1. Observable is a ___________, not an interface.</p>
<p>3. Devil and Angel are _________ to the button.</p>
<p>4. Implement this method to get notified.</p>
<p>5. Jill got one of her own.</p>
<p>6. CurrentConditionsDisplay implements this interface.</p>
<p>8. How to get yourself off the Observer list.</p>
<p>12. You forgot this if you’re not getting notified when you think you should be.</p>
<p>15. One Subject likes to talk to _______ observers.</p>
<p>18. Don’t count on this for notification.</p>
<p>19. Temperature, humidity and __________.</p>
<p>20. Observers are __________ on the Subject.</p>
<p>21. Program to an _________ not an implementation.</p>
<p>22. A Subject is similar to a __________.</p></td><td style="vertical-align: top; "><p>2. Ron was both an Observer and a _________.</p>
<p>3. You want to keep your coupling _________.</p>
<p>7. He says you should go for it.</p>
<p>9. _________ can manage your observers for you.</p>
<p>10. Java framework with lots of Observers.</p>
<p>11. Weather-O-Rama’s CEO named after this kind of storm.</p>
<p>13. Observers like to be ___________ when something new happens.</p>
<p>14. The WeatherData class __________ the Subject interface.</p>
<p>16. He didn’t want any more ints, so he removed himself.</p>
<p>17. CEO almost forgot the ________ index display</p>
<p>19. Subject initially wanted to _________ all the data to Observer.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00013"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1404" class="indexterm"></a><a id="iddle1408" class="indexterm"></a><a id="iddle1422" class="indexterm"></a><a id="iddle1427" class="indexterm"></a><a id="iddle1471" class="indexterm"></a><a id="iddle1565" class="indexterm"></a><a id="iddle1675" class="indexterm"></a><a id="iddle2143" class="indexterm"></a><a id="iddle2310" class="indexterm"></a>Based on our first implementation, which of the following apply? (Choose all that apply.)</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col><col class="c3"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00026"></a><img src="../Images/image00615.jpeg" alt="" hisrc="figs/web/078fig01.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>A.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We are coding to concrete implementations, not interfaces.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00027"></a><img src="../Images/image00616.jpeg" alt="" hisrc="figs/web/078fig02.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>B.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>For every new display element we need to alter code.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00028"></a><img src="../Images/image00617.jpeg" alt="" hisrc="figs/web/078fig03.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>C.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We have no way to add display elements at run time.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00029"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>D.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The display elements don’t implement a common interface.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00030"></a><img src="../Images/image00618.jpeg" alt="" hisrc="figs/web/078fig04.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>E.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We haven’t encapsulated what changes.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00031"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>F.</p></td><td style="vertical-align: top; "><p>We are violating encapsulation of the WeatherData class.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_principle_challenge_solution"></a><h3 class="title">Design Principle Challenge Solution</h3><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note11"></a>Design Principle</h3><p><span class="emphasis"><em>Identify the aspects of your application that vary and separate them from what stays the same.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>__<span class="underline">The thing that varies in the Observer Pattern</span>_______</p>
<p>__<span class="underline">is the state of the Subject and the number and</span>_____</p>
<p>__<span class="underline">types of Observers. With this pattern, you can</span>______</p>
<p>__<span class="underline">vary the objects that are dependent on the state</span>____</p>
<p>__<span class="underline">of the Subject, without having to change that</span>_______</p>
<p>__<span class="underline">Subject. That’s called planning ahead!</span>____________</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note12"></a>Design Principle</h3><p><span class="emphasis"><em>Program to an interface, not an implementation.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>__<span class="underline">Both the Subject and Observer use interfaces.</span>______</p>
<p>__<span class="underline">The Subject keeps track of objects implementing</span>____</p>
<p>__<span class="underline">the Observer interface, while the observers</span>_________</p>
<p>__<span class="underline">register with, and get notified by, the Subject</span>_______</p>
<p>__<span class="underline">interface. As we’ve seen, this keeps things nice and</span>______</p>
<p>__<span class="underline">loosely coupled.</span>___________________________</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch02note13"></a>Design Principle</h3><p><span class="emphasis"><em>Favor composition over inheritance.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></td><td style="vertical-align: top; "><p>__<span class="underline">The Observer Pattern uses composition to compose</span>__</p>
<p>__<span class="underline">any number of Observers with their Subjects.</span>________</p>
<p>__<span class="underline">These relationships aren’t set up by some kind of</span>_____</p>
<p>__<span class="underline">inheritance hierarchy. No, they are set up at</span>_____</p>
<p>__<span class="underline">runtime by composition!</span>___________________________</p>
<p>_____________________________________________</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_magnets_solution"></a><h3 class="title">Code Magnets Solution</h3><p><a id="iddle1145" class="indexterm"></a><a id="iddle1508" class="indexterm"></a>The ForecastDisplay class is all scrambled up on the fridge. Can you reconstruct the code snippets to make it work? Some of the curly braces fell on the floor and they were too small to pick up, so feel free to add as many of those as you need! Here’s our solution.</p><div class="informalfigure"><a id="med_id00120a"></a><div class="mediaobject"><a id="med_id00120"></a><img src="../Images/image00619.jpeg" alt="image with no caption" hisrc="figs/web/079fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword_soluti-id00014"></a><h3 class="title">Design Patterns Crossword Solution</h3><div class="informalfigure"><a id="med_id00121a"></a><div class="mediaobject"><a id="med_id00121"></a><img src="../Images/image00620.jpeg" alt="image with no caption" hisrc="figs/web/080fig01.png"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>