<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 6. The Command Pattern: Encapsulating Invocation</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch05.html"/><link rel="next" href="ch07.html"/></head><body><section class="chapter" epub:type="chapter" id="command_pattern_encapsulating_invocation"><div class="titlepage" id="aid-CCNA2"><div><div><h2 class="title">Chapter 6. The Command Pattern: Encapsulating Invocation</h2></div></div></div><div class="informalfigure"><a id="med_id00265a"></a><div class="mediaobject"><a id="med_id00265"></a><img src="../Images/image00762.jpeg" alt="image with no caption" hisrc="figs/web/193fig01.png.jpg"/></div></div><p><a id="iddle1491" class="indexterm"></a><span class="strong"><strong>In this chapter, we take encapsulation to a whole new level: we’re going to encapsulate method invocation.</strong></span> That’s right; by encapsulating method invocation, we can crystallize pieces of computation so that the object invoking the computation doesn’t need to worry about how to do things, it just uses our crystallized method to get it done. We can also do some wickedly smart things with these encapsulated method invocations, like save them away for logging or reuse them to implement undo in our code.</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col></colgroup><tbody><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00266a"></a><img src="../Images/image00763.jpeg" alt="" hisrc="figs/web/194fig01.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>Home Automation or Bust, Inc.</strong></span></p>
<p><span class="strong"><strong>1221 Industrial Avenue, Suite 2000</strong></span></p>
<p><span class="strong"><strong>Future City, IL 62914</strong></span></p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Greetings!</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>I recently received a demo and briefing from Johnny Hurricane, CEO of Weather-O-Rama, on their new expandable weather station. I have to say, I was so impressed with the software architecture that I’d like to ask you to design the API for our new Home Automation Remote Control. In return for your services we’d be happy to handsomely reward you with stock options in Home Automation or Bust, Inc.</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>I’m enclosing a prototype of our ground-breaking remote control for your perusal. The remote control features seven programmable slots (each can be assigned to a different household device) along with corresponding on/off buttons for each. The remote also has a global undo button.</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>I’m also enclosing a set of Java classes on CD-R that were created by various vendors to control home automation devices such as lights, fans, hot tubs, audio equipment, and other similar controllable appliances.</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We’d like you to create an API for programming the remote so that each slot can be assigned to control a device or set of devices. Note that it is important that we be able to control the current devices on the disc, and also any future devices that the vendors may supply.</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Given the work you did on the Weather-O-Rama weather station, we know you’ll do a great job on our remote control! We look forward to seeing your design.</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Sincerely,</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00267a"></a><img src="../Images/image00764.jpeg" alt="" hisrc="figs/web/194fig02.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; "><p>Bill “X-10” Thompson, CEO</p></td></tr></tbody></table></div><div class="informalfigure"><a id="med_id00268a"></a><div class="mediaobject"><a id="med_id00268"></a><img src="../Images/image00765.jpeg" alt="image with no caption" hisrc="figs/web/194fig03.png.jpg"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="free_hardwareexclamation_mark_letapostro">Free hardware! Let’s check out the Remote Control...</h2></div></div></div><div class="informalfigure"><a id="med_id00269a"></a><div class="mediaobject"><a id="med_id00269"></a><img src="../Images/image00766.jpeg" alt="image with no caption" hisrc="figs/web/195fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="taking_a_look_at_the_vendor_classes">Taking a look at the vendor classes</h2></div></div></div><p><a id="iddle1189" class="indexterm"></a><a id="iddle1732" class="indexterm"></a><a id="iddle1215" class="indexterm"></a><a id="iddle1763" class="indexterm"></a>Check out the vendor classes on the CD-R. These should give you some idea of the interfaces of the objects we need to control from the remote.</p><div class="informalfigure"><a id="med_id00270a"></a><div class="mediaobject"><a id="med_id00270"></a><img src="../Images/image00767.jpeg" alt="image with no caption" hisrc="figs/web/196fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00271a"></a><div class="mediaobject"><a id="med_id00271"></a><img src="../Images/image00768.jpeg" alt="image with no caption" hisrc="figs/web/196fig02.png.jpg"/></div></div><p>It looks like we have quite a set of classes here, and not a lot of industry effort to come up with a set of common interfaces. Not only that, it sounds like we can expect more of these classes in the future. Designing a remote control API is going to be interesting. Let’s get on to the design.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="cubicle_conversation-id00058">Cubicle Conversation</h2></div></div></div><p><a id="iddle1197" class="indexterm"></a><a id="iddle1741" class="indexterm"></a>Your teammates are already discussing how to design the remote control API...</p><div class="informalfigure"><a id="med_id00272a"></a><div class="mediaobject"><a id="med_id00272"></a><img src="../Images/image00769.jpeg" alt="image with no caption" hisrc="figs/web/197fig01.png.jpg"/></div></div><p><span class="strong"><strong>Mary</strong></span>: Yes, I thought we’d see a bunch of classes with on() and off() methods, but here we’ve got methods like dim(), setTemperature(), setVolume(), and setInputChannel().</p><p><span class="strong"><strong>Sue</strong></span>: Not only that, it sounds like we can expect more vendor classes in the future with just as diverse methods.</p><p><span class="strong"><strong>Mary</strong></span>: I think it’s important we view this as a separation of concerns: the remote should know how to interpret button presses and make requests, but it shouldn’t know a lot about home automation or how to turn on a hot tub.</p><p><span class="strong"><strong>Sue</strong></span>: Sounds like good design. But if the remote is dumb and just knows how to make generic requests, how do we design the remote so that it can invoke an action that, say, turns on a light or opens a garage door?</p><p><span class="strong"><strong>Mary</strong></span>: I’m not sure, but we don’t want the remote to have to know the specifics of the vendor classes.</p><p><span class="strong"><strong>Sue</strong></span>: What do you mean?</p><p><span class="strong"><strong>Mary</strong></span>: We don’t want the remote to consist of a set of if statements, like “if slot1 == Light, then light.on(), else if slot1 == Hottub then hottub.jetsOn()”. We know that is a bad design.</p><p><span class="strong"><strong>Sue</strong></span>: I agree. Whenever a new vendor class comes out, we’d have to go in and modify the code, potentially creating bugs and more work for ourselves!</p><div class="informalfigure"><a id="med_id00273a"></a><div class="mediaobject"><a id="med_id00273"></a><img src="../Images/image00770.jpeg" alt="image with no caption" hisrc="figs/web/198fig01.png.jpg"/></div></div><p><a id="iddle1175" class="indexterm"></a><a id="iddle1182" class="indexterm"></a><span class="strong"><strong>Mary</strong></span>: Yeah? Tell us more.</p><p><span class="strong"><strong>Joe</strong></span>: The Command Pattern allows you to decouple the requester of an action from the object that actually performs the action. So, here the requester would be the remote control and the object that performs the action would be an instance of one of your vendor classes.</p><p><span class="strong"><strong>Sue</strong></span>: How is that possible? How can we decouple them? After all, when I press a button, the remote has to turn on a light.</p><p><span class="strong"><strong>Joe</strong></span>: You can do that by introducing “command objects” into your design. A command object encapsulates a request to do something (like turn on a light) on a specific object (say, the living room light object). So, if we store a command object for each button, when the button is pressed we ask the command object to do some work. The remote doesn’t have any idea what the work is, it just has a command object that knows how to talk to the right object to get the work done. So, you see, the remote is decoupled from the light object!</p><p><span class="strong"><strong>Sue</strong></span>: This certainly sounds like it’s going in the right direction.</p><p><span class="strong"><strong>Mary</strong></span>: Still, I’m having a hard time wrapping my head around the pattern.</p><p><span class="strong"><strong>Joe</strong></span>: Given that the objects are so decoupled, it’s a little difficult to picture how the pattern actually works.</p><p><span class="strong"><strong>Mary</strong></span>: Let me see if I at least have the right idea: using this pattern, we could create an API in which these command objects can be loaded into button slots, allowing the remote code to stay very simple. And, the command objects encapsulate how to do a home automation task along with the object that needs to do it.</p><p><span class="strong"><strong>Joe</strong></span>: Yes, I think so. I also think this pattern can help you with that undo button, but I haven’t studied that part yet.</p><p><span class="strong"><strong>Mary</strong></span>: This sounds really encouraging, but I think I have a bit of work to do to really “get” the pattern.</p><p><span class="strong"><strong>Sue</strong></span>: Me too.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="meanwhilecomma_back_at_the_dinerhellipco">Meanwhile, back at the Diner..., or, A brief introduction to the Command Pattern</h2></div></div></div><p><a id="iddle1222" class="indexterm"></a>As Joe said, it is a little hard to understand the Command Pattern by just hearing its description. But don’t fear, we have some friends ready to help: remember our friendly diner from <a class="xref" href="part0008.xhtml#aid-7K4G2">Chapter 1</a>? It’s been a while since we visited Alice, Flo, and the short-order cook, but we’ve got good reason for returning (well, beyond the food and great conversation): the diner is going to help us understand the Command Pattern.</p><div class="informalfigure"><a id="med_id00274a"></a><div class="mediaobject"><a id="med_id00274"></a><img src="../Images/image00771.jpeg" alt="image with no caption" hisrc="figs/web/199fig01.png.jpg"/></div></div><p>So, let’s take a short detour back to the diner and study the interactions between the customers, the waitress, the orders and the short-order cook. Through these interactions, you’re going to understand the objects involved in the Command Pattern and also get a feel for how the decoupling works. After that, we’re going to knock out that remote control API.</p><p>Checking in at the Objectville Diner...</p><p><span class="strong"><strong>Okay, we all know how the Diner operates:</strong></span></p><div class="informalfigure"><a id="med_id00275a"></a><div class="mediaobject"><a id="med_id00275"></a><img src="../Images/image00772.jpeg" alt="image with no caption" hisrc="figs/web/199fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="letapostrophes_study_the_interaction_in">Let’s study the interaction in a little more detail...</h2></div></div></div><p><span class="strong"><strong>...and given this Diner is in Objectville, let’s think about the object and method calls involved, too!</strong></span></p><div class="informalfigure"><a id="med_id00276a"></a><div class="mediaobject"><a id="med_id00276"></a><img src="../Images/image00773.jpeg" alt="image with no caption" hisrc="figs/web/200fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="objectville_diner_roles_and_responsibili">The Objectville Diner roles and responsibilities</h2></div></div></div><p><span class="strong"><strong>An Order Slip encapsulates a request to prepare a meal.</strong></span></p><p><span class="strong"><strong>Think of the Order Slip as an object, an object that acts as a request to prepare a meal.</strong></span> Like any object, it can be passed around — from the Waitress to the order counter, or to the next Waitress taking over her shift. It has an interface that consists of only one method, orderUp(), that encapsulates the actions needed to prepare the meal. It also has a reference to the object that needs to prepare it (in our case, the Cook). It’s encapsulated in that the Waitress doesn’t have to know what’s in the order or even who prepares the meal; she only needs to pass the slip through the order window and call “Order up!”</p><div class="informalfigure"><a id="med_id00277a"></a><div class="mediaobject"><a id="med_id00277"></a><img src="../Images/image00774.jpeg" alt="image with no caption" hisrc="figs/web/201fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch06note01"></a>Note</h3><p>Okay, in real life a waitress would probably care what is on the Order Slip and who cooks it, but this is Objectville... work with us here!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><span class="strong"><strong>The Waitress’s job is to take Order Slips and invoke the orderUp() method on them.</strong></span></p><p><span class="strong"><strong>The Waitress has it easy: take an order from the customer, continue helping customers until she makes it back to the order counter, then invoke the orderUp() method to have the meal prepared.</strong></span> As we’ve already discussed, in Objectville, the Waitress really isn’t worried about what’s on the order or who is going to prepare it; she just knows Order Slips have an orderUp() method she can call to get the job done.</p><p>Now, throughout the day, the Waitress’s takeOrder() method gets parameterized with different Order Slips from different customers, but that doesn’t faze her; she knows all Order Slips support the orderUp() method and she can call orderUp() any time she needs a meal prepared.</p><div class="informalfigure"><a id="med_id00278a"></a><div class="mediaobject"><a id="med_id00278"></a><img src="../Images/image00775.jpeg" alt="image with no caption" hisrc="figs/web/201fig02.png.jpg"/></div></div><p><span class="strong"><strong>The Short Order Cook has the knowledge required to prepare the meal.</strong></span></p><p><span class="strong"><strong>The Short Order Cook is the object that really knows how to prepare meals.</strong></span> Once the Waitress has invoked the orderUp() method; the Short Order Cook takes over and implements all the methods that are needed to create meals. Notice the Waitress and the Cook are totally decoupled: the Waitress has Order Slips that encapsulate the details of the meal; she just calls a method on each order to get it prepared. Likewise, the Cook gets his instructions from the Order Slip; he never needs to directly communicate with the Waitress.</p><div class="informalfigure"><a id="med_id00279a"></a><div class="mediaobject"><a id="med_id00279"></a><img src="../Images/image00776.jpeg" alt="image with no caption" hisrc="figs/web/201fig03.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00280a"></a><div class="mediaobject"><a id="med_id00280"></a><img src="../Images/image00777.jpeg" alt="image with no caption" hisrc="figs/web/202fig01.png.jpg"/></div></div><p><span class="strong"><strong>Patience, we’re getting there...</strong></span></p><p>Think of the Diner as a model for an OO design pattern that allows us to separate an object making a request from the objects that receive and execute those requests. For instance, in our remote control API, we need to separate the code that gets invoked when we press a button from the objects of the vendor-specific classes that carry out those requests. What if each slot of the remote held an object like the Diner’s Order Slip object? Then, when a button is pressed, we could just call the equivalent of the “orderUp()” method on this object and have the lights turn on without the remote knowing the details of how to make those things happen or what objects are making them happen.</p><p>Now, let’s switch gears a bit and map all this Diner talk to the Command Pattern...</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch06note02"></a>Brain Power</h3><p>Before we move on, spend some time studying the diagram two pages back along with Diner roles and responsibilities until you think you’ve got a handle on the Objectville Diner objects and relationships. Once you’ve done that, get ready to nail the Command Pattern!</p><div class="informalfigure"><a id="med_id00281a"></a><div class="mediaobject"><a id="med_id00281"></a><img src="../Images/image00778.jpeg" alt="image with no caption" hisrc="figs/web/202fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="from_the_diner_to_the_command_pattern">From the Diner to the Command Pattern</h2></div></div></div><p><a id="iddle1176" class="indexterm"></a><a id="iddle1183" class="indexterm"></a><a id="iddle1203" class="indexterm"></a><a id="iddle1218" class="indexterm"></a><a id="iddle1749" class="indexterm"></a><a id="iddle1805" class="indexterm"></a>Okay, we’ve spent enough time in the Objectville Diner that we know all the personalities and their responsibilities quite well. Now we’re going to rework the Diner diagram to reflect the Command Pattern. You’ll see that all the players are the same; only the names have changed.</p><div class="informalfigure"><a id="med_id00282a"></a><div class="mediaobject"><a id="med_id00282"></a><img src="../Images/image00779.jpeg" alt="image with no caption" hisrc="figs/web/203fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="loading_the_invoker"></a><h3 class="title">Loading the Invoker</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① The client creates a command object.</li><li class="listitem" style="list-style-type: none">② The client does a setCommand() to store the command object in the invoker.</li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Later</strong></span>... the client asks the invoker to execute the command. Note: as you’ll see later in the chapter, once the command is loaded into the invoker, it may be used and discarded, or it may remain and be used many times.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark"></a><h3 class="title">Who Does What?</h3><p><a id="iddle1576" class="indexterm"></a><a id="iddle2514" class="indexterm"></a>Match the diner objects and methods with the corresponding names from the Command Pattern.</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Diner</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Command Pattern</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Waitress</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Command</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Short Order Cook</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>execute()</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>orderUp()</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Client</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Order</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Invoker</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Customer</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Receiver</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>takeOrder()</p></td><td style="vertical-align: top; "><p>setCommand()</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="our_first_command_object">Our first command object</h2></div></div></div><p><a id="iddle1181" class="indexterm"></a><a id="iddle1190" class="indexterm"></a><a id="iddle1733" class="indexterm"></a>Isn’t it about time we build our first command object? Let’s go ahead and write some code for the remote control. While we haven’t figured out how to design the remote control API yet, building a few things from the bottom up may help us...</p><div class="informalfigure"><a id="med_id00283a"></a><div class="mediaobject"><a id="med_id00283"></a><img src="../Images/image00780.jpeg" alt="image with no caption" hisrc="figs/web/205fig01.png.jpg"/></div></div><p><span class="strong"><strong>Implementing the Command interface</strong></span></p><p>First things first: all command objects implement the same interface, which consists of one method. In the Diner we called this method orderUp(); however, we typically just use the name execute().</p><p>Here’s the Command interface:</p><div class="informalfigure"><a id="med_id00284a"></a><div class="mediaobject"><a id="med_id00284"></a><img src="../Images/image00781.jpeg" alt="image with no caption" hisrc="figs/web/205fig02.png.jpg"/></div></div><p><span class="strong"><strong>Implementing a command to turn a light on</strong></span></p><p>Now, let’s say you want to implement a command for turning a light on. Referring to our set of vendor classes, the Light class has two methods: on() and off(). Here’s how you can implement this as a command:</p><div class="informalfigure"><a id="med_id00285a"></a><div class="mediaobject"><a id="med_id00285"></a><img src="../Images/image00782.jpeg" alt="image with no caption" hisrc="figs/web/205fig03.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00286a"></a><div class="mediaobject"><a id="med_id00286"></a><img src="../Images/image00783.jpeg" alt="image with no caption" hisrc="figs/web/205fig04.png.jpg"/></div></div><p>Now that you’ve got a LightOnCommand class, let’s see if we can put it to use...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="using_the_command_object">Using the command object</h2></div></div></div><p><a id="iddle1177" class="indexterm"></a><a id="iddle1184" class="indexterm"></a><a id="iddle1207" class="indexterm"></a><a id="iddle1753" class="indexterm"></a>Okay, let’s make things simple: say we’ve got a remote control with only one button and corresponding slot to hold a device to control:</p><div class="informalfigure"><a id="med_id00287a"></a><div class="mediaobject"><a id="med_id00287"></a><img src="../Images/image00784.jpeg" alt="image with no caption" hisrc="figs/web/206fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="creating_a_simple_test_to_use_the_remote">Creating a simple test to use the Remote Control</h2></div></div></div><p>Here’s just a bit of code to test out the simple remote control. Let’s take a look and we’ll point out how the pieces match the Command Pattern diagram:</p><div class="informalfigure"><a id="med_id00288a"></a><div class="mediaobject"><a id="med_id00288"></a><img src="../Images/image00785.jpeg" alt="image with no caption" hisrc="figs/web/206fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00059"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1547" class="indexterm"></a><a id="iddle2289" class="indexterm"></a>Okay, it’s time for you to implement the GarageDoorOpenCommand class. First, supply the code for the class below. You’ll need the GarageDoor class diagram.</p><div class="informalfigure"><a id="med_id00289a"></a><div class="mediaobject"><a id="med_id00289"></a><img src="../Images/image00786.jpeg" alt="image with no caption" hisrc="figs/web/207fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00290a"></a><div class="mediaobject"><a id="med_id00290"></a><img src="../Images/image00787.jpeg" alt="image with no caption" hisrc="figs/web/207fig02.png.jpg"/></div></div><p>Now that you’ve got your class, what is the output of the following code? (Hint: the GarageDoor up() method prints out “Garage Door is Open” when it is complete.)</p><a id="pro_id00017"></a><pre class="programlisting"><span class="strong"><strong>public class RemoteControlTest {</strong></span>
    <span class="strong"><strong>public static void main(String[] args) {</strong></span>
        <span class="strong"><strong>SimpleRemoteControl remote = new SimpleRemoteControl();</strong></span>
        <span class="strong"><strong>Light light = new Light();</strong></span>
        <span class="strong"><strong>GarageDoor garageDoor = new GarageDoor();</strong></span>
        <span class="strong"><strong>LightOnCommand lightOn = new LightOnCommand(light);</strong></span>
        <span class="strong"><strong>GarageDoorOpenCommand garageOpen =</strong></span>
            <span class="strong"><strong>new GarageDoorOpenCommand(garageDoor);</strong></span>


        <span class="strong"><strong>remote.setCommand(lightOn);</strong></span>
        <span class="strong"><strong>remote.buttonWasPressed();</strong></span>
        <span class="strong"><strong>remote.setCommand(garageOpen);</strong></span>
        <span class="strong"><strong>remote.buttonWasPressed();</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre><div class="informalfigure"><a id="med_id00291a"></a><div class="mediaobject"><a id="med_id00291"></a><img src="../Images/image00788.jpeg" alt="image with no caption" hisrc="figs/web/207fig03.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="command_pattern_defined">The Command Pattern defined</h2></div></div></div><p><a id="iddle1185" class="indexterm"></a><a id="iddle1196" class="indexterm"></a><a id="iddle1492" class="indexterm"></a><a id="iddle1494" class="indexterm"></a><a id="iddle1740" class="indexterm"></a><a id="iddle1806" class="indexterm"></a><a id="iddle2235" class="indexterm"></a>You’ve done your time in the Objectville Diner, you’ve partly implemented the remote control API, and in the process you’ve got a fairly good picture of how the classes and objects interact in the Command Pattern. Now we’re going to define the Command Pattern and nail down all the details.</p><p>Let’s start with its official definition:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch06note03"></a>Note</h3><p><span class="strong"><strong>The Command Pattern</strong></span> encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue or log requests, and support undoable operations.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00292a"></a><div class="mediaobject"><a id="med_id00292"></a><img src="../Images/image00789.jpeg" alt="image with no caption" hisrc="figs/web/208fig01.png.jpg"/></div></div><p>Let’s step through this. We know that a command object <span class="emphasis"><em>encapsulates a request</em></span> by binding together a set of actions on a specific receiver. To achieve this, it packages the actions and the receiver up into an object that exposes just one method, execute(). When called, execute() causes the actions to be invoked on the receiver. From the outside, no other objects really know what actions get performed on what receiver; they just know that if they call the execute() method, their request will be serviced.</p><p>We’ve also seen a couple examples of <span class="emphasis"><em>parameterizing an object</em></span> with a command. Back at the diner, the Waitress was parameterized with multiple orders throughout the day. In the simple remote control, we first loaded the button slot with a “light on” command and then later replaced it with a “garage door open” command. Like the Waitress, your remote slot didn’t care what command object it had, as long as it implemented the Command interface.</p><p>What we haven’t encountered yet is using commands to implement <span class="emphasis"><em>queues and logs and support undo operations</em></span>. Don’t worry, those are pretty straightforward extensions of the basic Command Pattern and we will get to them soon. We can also easily support what’s known as the Meta Command Pattern once we have the basics in place. The Meta Command Pattern allows you to create macros of commands so that you can execute multiple commands at once.</p><div class="informalfigure"><a id="med_id00293a"></a><div class="mediaobject"><a id="med_id00293"></a><img src="../Images/image00790.jpeg" alt="image with no caption" hisrc="figs/web/208fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="command_pattern_defined_the_class_diagra">The Command Pattern defined: the class diagram</h2></div></div></div><div class="informalfigure"><a id="med_id00294a"></a><div class="mediaobject"><a id="med_id00294"></a><img src="../Images/image00791.jpeg" alt="image with no caption" hisrc="figs/web/209fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch06note04"></a>Brain Power</h3><p><a id="iddle1192" class="indexterm"></a><a id="iddle1735" class="indexterm"></a><a id="iddle2432" class="indexterm"></a>How does the design of the Command Pattern support the decoupling of the invoker of a request and the receiver of the request?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00295a"></a><div class="mediaobject"><a id="med_id00295"></a><img src="../Images/image00792.jpeg" alt="image with no caption" hisrc="figs/web/210fig01.png.jpg"/></div></div><p><a id="iddle1195" class="indexterm"></a><a id="iddle1739" class="indexterm"></a><span class="strong"><strong>Mary</strong></span>: Me too. So where do we begin?</p><p><span class="strong"><strong>Sue</strong></span>: Like we did in the SimpleRemote, we need to provide a way to assign commands to slots. In our case we have seven slots, each with an “on” and “off” button. So we might assign commands to the remote something like this:</p><a id="pro_id00018"></a><pre class="programlisting"><span class="strong"><strong>onCommands[0] = onCommand;</strong></span>
<span class="strong"><strong>offCommands[0] = offCommand;</strong></span></pre><p>and so on for each of the seven command slots.</p><p><span class="strong"><strong>Mary</strong></span>: That makes sense, except for the Light objects. How does the remote know the living room from the kitchen light?</p><p><span class="strong"><strong>Sue</strong></span>: Ah, that’s just it, it doesn’t! The remote doesn’t know anything but how to call execute() on the corresponding command object when a button is pressed.</p><p><span class="strong"><strong>Mary</strong></span>: Yeah, I sorta got that, but in the implementation, how do we make sure the right objects are turning on and off the right devices?</p><p><span class="strong"><strong>Sue</strong></span>: When we create the commands to be loaded into the remote, we create one LightCommand that is bound to the living room light object and another that is bound to the kitchen light object. Remember, the receiver of the request gets bound to the command it’s encapsulated in. So, by the time the button is pressed, no one cares which light is which; the right thing just happens when the execute() method is called.</p><p><span class="strong"><strong>Mary</strong></span>: I think I’ve got it. Let’s implement the remote and I think this will get clearer!</p><p><span class="strong"><strong>Sue</strong></span>: Sounds good. Let’s give it a shot...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="assigning_commands_to_slots">Assigning Commands to slots</h2></div></div></div><p><a id="iddle1807" class="indexterm"></a>So we have a plan: we’re going to assign each slot to a command in the remote control. This makes the remote control our <span class="emphasis"><em>invoker</em></span>. When a button is pressed the execute() method is going to be called on the corresponding command, which results in actions being invoked on the receiver (like lights, ceiling fans, and stereos).</p><div class="informalfigure"><a id="med_id00296a"></a><div class="mediaobject"><a id="med_id00296"></a><img src="../Images/image00793.jpeg" alt="image with no caption" hisrc="figs/web/211fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_remote_control">Implementing the Remote Control</h2></div></div></div><div class="informalfigure"><a id="med_id00297a"></a><div class="mediaobject"><a id="med_id00297"></a><img src="../Images/image00794.jpeg" alt="image with no caption" hisrc="figs/web/212fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_commands">Implementing the Commands</h2></div></div></div><p><a id="iddle1199" class="indexterm"></a><a id="iddle1743" class="indexterm"></a>Well, we’ve already gotten our feet wet implementing the LightOnCommand for the SimpleRemoteControl. We can plug that same code in here and everything works beautifully. Off commands are no different; in fact, the LightOffCommand looks like this:</p><div class="informalfigure"><a id="med_id00298a"></a><div class="mediaobject"><a id="med_id00298"></a><img src="../Images/image00795.jpeg" alt="image with no caption" hisrc="figs/web/213fig01.png.jpg"/></div></div><p>Let’s try something a little more challenging; how about writing on and off commands for the Stereo? Okay, off is easy, we just bind the Stereo to the off() method in the StereoOffCommand. On is a little more complicated; let’s say we want to write a StereoOnWithCDCommand...</p><div class="informalfigure"><a id="med_id00299a"></a><div class="mediaobject"><a id="med_id00299"></a><img src="../Images/image00796.jpeg" alt="image with no caption" hisrc="figs/web/213fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00300a"></a><div class="mediaobject"><a id="med_id00300"></a><img src="../Images/image00797.jpeg" alt="image with no caption" hisrc="figs/web/213fig03.png.jpg"/></div></div><p>Not too bad. Take a look at the rest of the vendor classes; by now, you can definitely knock out the rest of the Command classes we need for those.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="putting_the_remote_control_through_its_p">Putting the Remote Control through its paces</h2></div></div></div><p><a id="iddle1208" class="indexterm"></a><a id="iddle1754" class="indexterm"></a>Our job with the remote is pretty much done; all we need to do is run some tests and get some documentation together to describe the API. Home Automation or Bust, Inc. sure is going to be impressed, don’t ya think? We’ve managed to come up with a design that is going to allow them to produce a remote that is easy to maintain and they’re going to have no trouble convincing the vendors to write some simple command classes in the future since they are so easy to write.</p><p>Let’s get to testing this code!</p><div class="informalfigure"><a id="med_id00301a"></a><div class="mediaobject"><a id="med_id00301"></a><img src="../Images/image00798.jpeg" alt="image with no caption" hisrc="figs/web/214fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00302a"></a><div class="mediaobject"><a id="med_id00302"></a><img src="../Images/image00799.jpeg" alt="image with no caption" hisrc="figs/web/215fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="nowcomma_letapostrophes_check_out_the_ex">Now, let’s check out the execution of our remote control test...</h3></div></div></div><div class="informalfigure"><a id="med_id00303a"></a><div class="mediaobject"><a id="med_id00303"></a><img src="../Images/image00800.jpeg" alt="image with no caption" hisrc="figs/web/215fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00304a"></a><div class="mediaobject"><a id="med_id00304"></a><img src="../Images/image00801.jpeg" alt="image with no caption" hisrc="figs/web/216fig01.png.jpg"/></div></div><p><a id="iddle1205" class="indexterm"></a><a id="iddle1220" class="indexterm"></a><a id="iddle1751" class="indexterm"></a><a id="iddle1967" class="indexterm"></a><a id="iddle1973" class="indexterm"></a>Good catch. We did sneak a little something in there. In the remote control, we didn’t want to check to see if a command was loaded every time we referenced a slot. For instance, in the onButtonWasPushed() method, we would need code like this:</p><a id="pro_id00019"></a><pre class="programlisting"><span class="strong"><strong>public void onButtonWasPushed(int slot) {</strong></span>
    <span class="strong"><strong><span class="gray-background">if (onCommands[slot] != null) {</span></strong></span>
        <span class="strong"><strong>onCommands[slot].execute();</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre><p>So, how do we get around that? Implement a command that does nothing!</p><a id="pro_id00020"></a><pre class="programlisting"><span class="strong"><strong>public class NoCommand implements Command {</strong></span>
    <span class="strong"><strong>public void execute() { }</strong></span>
<span class="strong"><strong>}</strong></span></pre><p>Then, in our RemoteControl constructor, we assign every slot a NoCommand object by default and we know we’ll always have some command to call in each slot.</p><a id="pro_id00021"></a><pre class="programlisting"><span class="strong"><strong>Command noCommand = new NoCommand();</strong></span>
<span class="strong"><strong>for (int i = 0; i &lt; 7; i++) {</strong></span>
    <span class="strong"><strong>onCommands[i] = noCommand;</strong></span>
    <span class="strong"><strong>offCommands[i] = noCommand;</strong></span>
<span class="strong"><strong>}</strong></span></pre><p>So in the output of our test run, you are seeing only slots that have been assigned to a command other than the default NoCommand object, which we assigned when we created the RemoteControl.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="pattern_honorable_mention"></a><h3 class="title">Pattern Honorable Mention</h3><p>The NoCommand object is an example of a <span class="emphasis"><em>null object</em></span>. A null object is useful when you don’t have a meaningful object to return, and yet you want to remove the responsibility for handling <span class="strong"><strong>null</strong></span> from the client. For instance, in our remote control we didn’t have a meaningful object to assign to each slot out of the box, so we provided a NoCommand object that acts as a surrogate and does nothing when its execute method is called.</p><p>You’ll find uses for Null Objects in conjunction with many Design Patterns and sometimes you’ll even see Null Object listed as a Design Pattern.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="time_to_write_that_documentationhellip">Time to write that documentation...</h2></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="remote_control_api_design_for_home_autom"></a><h3 class="title">Remote Control API Design for Home Automation or Bust, Inc.</h3><p><a id="iddle1216" class="indexterm"></a><a id="iddle1764" class="indexterm"></a>We are pleased to present you with the following design and application programming interface for your Home Automation Remote Control. Our primary design goal was to keep the remote control code as simple as possible so that it doesn’t require changes as new vendor classes are produced. To this end we have employed the Command Pattern to logically decouple the RemoteControl class from the Vendor Classes. We believe this will reduce the cost of producing the remote as well as drastically reduce your ongoing maintenance costs.</p><p>The following class diagram provides an overview of our design:</p><div class="informalfigure"><a id="med_id00305a"></a><div class="mediaobject"><a id="med_id00305"></a><img src="../Images/image00802.jpeg" alt="image with no caption" hisrc="figs/web/217fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00306a"></a><div class="mediaobject"><a id="med_id00306"></a><img src="../Images/image00803.jpeg" alt="image with no caption" hisrc="figs/web/218fig01.png.jpg"/></div></div><p><a id="iddle1211" class="indexterm"></a><a id="iddle1757" class="indexterm"></a><a id="iddle2484" class="indexterm"></a><a id="iddle2487" class="indexterm"></a><span class="strong"><strong>Whoops! We almost forgot... luckily, once we have our basic Command classes, undo is easy to add. Let’s step through adding undo to our commands and to the remote control...</strong></span></p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_are_we_doingquestion_mark">What are we doing?</h2></div></div></div><p>Okay, we need to add functionality to support the undo button on the remote. It works like this: say the Living Room Light is off and you press the on button on the remote. Obviously the light turns on. Now if you press the undo button then the last action will be reversed — in this case, the light will turn off. Before we get into more complex examples, let’s get the light working with the undo button:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① When commands support undo, they have an undo() method that mirrors the execute() method. Whatever execute() last did, undo() reverses. So, before we can add undo to our commands, we need to add an undo() method to the Command interface:<div class="informalfigure"><a id="med_id00307a"></a><div class="mediaobject"><a id="med_id00307"></a><img src="../Images/image00804.jpeg" alt="image with no caption" hisrc="figs/web/218fig02.png.jpg"/></div></div><br/>That was simple enough.<br/>Now, let’s dive into the Light command and implement the undo() method.</li><li class="listitem" style="list-style-type: none">② Let’s start with the LightOnCommand: if the LightOnCommand’s execute() method was called, then the on() method was last called. We know that undo() needs to do the opposite of this by calling the off() method.<div class="informalfigure"><a id="med_id00308a"></a><div class="mediaobject"><a id="med_id00308"></a><img src="../Images/image00805.jpeg" alt="image with no caption" hisrc="figs/web/219fig01.png.jpg"/></div></div><br/>Piece of cake! Now for the LightOffCommand. Here the undo() method just needs to call the Light’s on() method.<div class="informalfigure"><a id="med_id00309a"></a><div class="mediaobject"><a id="med_id00309"></a><img src="../Images/image00806.jpeg" alt="image with no caption" hisrc="figs/web/219fig02.png.jpg"/></div></div><br/>Could this be any easier? Okay, we aren’t done yet; we need to work a little support into the Remote Control to handle tracking the last button pressed and the undo button press.</li><li class="listitem" style="list-style-type: none">③ To add support for the undo button we only have to make a few small changes to the Remote Control class. Here’s how we’re going to do it: we’ll add a new instance variable to track the last command invoked; then, whenever the undo button is pressed, we retrieve that command and invoke its undo() method.<div class="informalfigure"><a id="med_id00310a"></a><div class="mediaobject"><a id="med_id00310"></a><img src="../Images/image00807.jpeg" alt="image with no caption" hisrc="figs/web/220fig01.png.jpg"/></div></div></li></ul></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="time_to_qa_that_undo_buttonexclamation_m">Time to QA that Undo button!</h2></div></div></div><p><a id="iddle1760" class="indexterm"></a><a id="iddle2488" class="indexterm"></a>Okay, let’s rework the test harness a bit to test the undo button:</p><div class="informalfigure"><a id="med_id00311a"></a><div class="mediaobject"><a id="med_id00311"></a><img src="../Images/image00808.jpeg" alt="image with no caption" hisrc="figs/web/221fig01.png.jpg"/></div></div><p>And here are the test results...</p><div class="informalfigure"><a id="med_id00312a"></a><div class="mediaobject"><a id="med_id00312"></a><img src="../Images/image00809.jpeg" alt="image with no caption" hisrc="figs/web/221fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="using_state_to_implement_undo">Using state to implement Undo</h2></div></div></div><p><a id="iddle1762" class="indexterm"></a><a id="iddle2404" class="indexterm"></a><a id="iddle2490" class="indexterm"></a>Okay, implementing undo on the Light was instructive but a little too easy. Typically, we need to manage a bit of state to implement undo. Let’s try something a little more interesting, like the CeilingFan from the vendor classes. The CeilingFan allows a number of speeds to be set along with an off method.</p><div class="informalfigure"><a id="med_id00313a"></a><div class="mediaobject"><a id="med_id00313"></a><img src="../Images/image00810.jpeg" alt="image with no caption" hisrc="figs/web/222fig01.png.jpg"/></div></div><p>Here’s the source code for the CeilingFan:</p><div class="informalfigure"><a id="med_id00314a"></a><div class="mediaobject"><a id="med_id00314"></a><img src="../Images/image00811.jpeg" alt="image with no caption" hisrc="figs/web/222fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00315a"></a><div class="mediaobject"><a id="med_id00315"></a><img src="../Images/image00812.jpeg" alt="image with no caption" hisrc="figs/web/222fig03.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="adding_undo_to_the_ceilingfan_commands">Adding Undo to the CeilingFan commands</h2></div></div></div><p>Now let’s tackle adding undo to the various CeilingFan commands. To do so, we need to track the last speed setting of the fan and, if the undo() method is called, restore the fan to its previous setting. Here’s the code for the CeilingFanHighCommand:</p><div class="informalfigure"><a id="med_id00316a"></a><div class="mediaobject"><a id="med_id00316"></a><img src="../Images/image00813.jpeg" alt="image with no caption" hisrc="figs/web/223fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00317a"></a><div class="mediaobject"><a id="med_id00317"></a><img src="../Images/image00814.jpeg" alt="image with no caption" hisrc="figs/web/223fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch06note05"></a>Brain Power</h3><p>We’ve got three more ceiling fan commands to write: low, medium, and off. Can you see how these are implemented?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="get_ready_to_test_the_ceiling_fan">Get ready to test the ceiling fan</h2></div></div></div><p><a id="iddle1212" class="indexterm"></a><a id="iddle1761" class="indexterm"></a><a id="iddle2489" class="indexterm"></a>Time to load up our remote control with the ceiling fan commands. We’re going to load slot 0’s on button with the medium setting for the fan and slot 1 with the high setting. Both corresponding off buttons will hold the ceiling fan off command.</p><div class="informalfigure"><a id="med_id00318a"></a><div class="mediaobject"><a id="med_id00318"></a><img src="../Images/image00815.jpeg" alt="image with no caption" hisrc="figs/web/224fig01.png.jpg"/></div></div><p>Here’s our test script:</p><div class="informalfigure"><a id="med_id00319a"></a><div class="mediaobject"><a id="med_id00319"></a><img src="../Images/image00816.jpeg" alt="image with no caption" hisrc="figs/web/224fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="testing_the_ceiling_fanhellip">Testing the ceiling fan...</h2></div></div></div><p>Okay, let’s fire up the remote, load it with commands, and push some buttons!</p><div class="informalfigure"><a id="med_id00320a"></a><div class="mediaobject"><a id="med_id00320"></a><img src="../Images/image00817.jpeg" alt="image with no caption" hisrc="figs/web/225fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="every_remote_needs_a_party_modeexclamati">Every remote needs a Party Mode!</h2></div></div></div><p><a id="iddle1200" class="indexterm"></a><a id="iddle1744" class="indexterm"></a><a id="iddle1891" class="indexterm"></a><span class="strong"><strong>What’s the point of having a remote if you can’t push one button and have the lights dimmed, the stereo and TV turned on and set to a DVD, and the hot tub fired up?</strong></span></p><div class="informalfigure"><a id="med_id00321a"></a><div class="mediaobject"><a id="med_id00321"></a><img src="../Images/image00818.jpeg" alt="image with no caption" hisrc="figs/web/226fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00322a"></a><div class="mediaobject"><a id="med_id00322"></a><img src="../Images/image00819.jpeg" alt="image with no caption" hisrc="figs/web/226fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00323a"></a><div class="mediaobject"><a id="med_id00323"></a><img src="../Images/image00820.jpeg" alt="image with no caption" hisrc="figs/web/226fig03.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00324a"></a><div class="mediaobject"><a id="med_id00324"></a><img src="../Images/image00821.jpeg" alt="image with no caption" hisrc="figs/web/226fig04.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="using_a_macro_command">Using a macro command</h2></div></div></div><p><a id="iddle1201" class="indexterm"></a><a id="iddle1539" class="indexterm"></a><a id="iddle1748" class="indexterm"></a><a id="iddle1895" class="indexterm"></a><a id="iddle2280" class="indexterm"></a>Let’s step through how we use a macro command:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① First we create the set of commands we want to go into the macro:<div class="informalfigure"><a id="med_id00325a"></a><div class="mediaobject"><a id="med_id00325"></a><img src="../Images/image00822.jpeg" alt="image with no caption" hisrc="figs/web/227fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00060"></a><h3 class="title">Sharpen your pencil</h3><p>We will also need commands for the off buttons. Write the code to create those here:</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem" style="list-style-type: none">② Next we create two arrays, one for the On commands and one for the Off commands, and load them with the corresponding commands:<div class="informalfigure"><a id="med_id00326a"></a><div class="mediaobject"><a id="med_id00326"></a><img src="../Images/image00823.jpeg" alt="image with no caption" hisrc="figs/web/227fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">③ Then we assign MacroCommand to a button like we always do:<div class="informalfigure"><a id="med_id00327a"></a><div class="mediaobject"><a id="med_id00327"></a><img src="../Images/image00824.jpeg" alt="image with no caption" hisrc="figs/web/227fig03.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">④ <a id="iddle1209" class="indexterm"></a><a id="iddle1755" class="indexterm"></a>Finally, we just need to push some buttons and see if this works.<div class="informalfigure"><a id="med_id00328a"></a><div class="mediaobject"><a id="med_id00328"></a><img src="../Images/image00825.jpeg" alt="image with no caption" hisrc="figs/web/228fig01.png.jpg"/></div></div></li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="exercise-id00061"></a><h3 class="title">Exercise</h3><p><a id="iddle1186" class="indexterm"></a><a id="iddle1213" class="indexterm"></a><a id="iddle1465" class="indexterm"></a><a id="iddle1521" class="indexterm"></a><a id="iddle1745" class="indexterm"></a><a id="iddle1746" class="indexterm"></a><a id="iddle1758" class="indexterm"></a><a id="iddle1892" class="indexterm"></a><a id="iddle1893" class="indexterm"></a><a id="iddle2351" class="indexterm"></a><a id="iddle2485" class="indexterm"></a><a id="iddle2486" class="indexterm"></a>The only thing our MacroCommand is missing is its undo functionality. When the undo button is pressed after a macro command, all the commands that were invoked in the macro must undo their previous actions. Here’s the code for MacroCommand; go ahead and implement the undo() method:</p><div class="informalfigure"><a id="med_id00329a"></a><div class="mediaobject"><a id="med_id00329"></a><img src="../Images/image00826.jpeg" alt="image with no caption" hisrc="figs/web/229fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00062"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch06qa1qe1"></a><a id="ch06qa1q1"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: Do I always need a receiver? Why can’t the command object implement the details of the execute() method?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch06qa1q1a1"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> In general, we strive for “dumb” command objects that just invoke an action on a receiver; however, there are many examples of “smart” command objects that implement most, if not all, of the logic needed to carry out a request. Certainly you can do this; just keep in mind you’ll no longer have the same level of decoupling between the invoker and receiver, nor will you be able to parameterize your commands with receivers.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch06qa1qe2"></a><a id="ch06qa1q2"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: How can I implement a history of undo operations? In other words, I want to be able to press the undo button multiple times?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch06qa1q2a2"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> Great question. It’s pretty easy actually; instead of keeping just a reference to the last Command executed, you keep a stack of previous commands. Then, whenever undo is pressed, your invoker pops the first item off the stack and calls its undo() method.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch06qa1qe3"></a><a id="ch06qa1q3"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: Could I have just implemented party mode as a Command by creating a PartyCommand and putting the calls to execute the other Commands in the PartyCommand’s execute() method?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch06qa1q3a3"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> You could; however, you’d essentially be “hardcoding” the party mode into the PartyCommand. Why go to the trouble? With the MacroCommand, you can decide dynamically which Commands you want to go into the PartyCommand, so you have more flexibility using MacroCommands. In general, the MacroCommand is a more elegant solution and requires less new code.</p></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="command_pattern_means_lots_of_command_cl">The Command Pattern means lots of command classes</h2></div></div></div><p><a id="iddle1113" class="indexterm"></a><a id="iddle1172" class="indexterm"></a><a id="iddle1178" class="indexterm"></a><a id="iddle1193" class="indexterm"></a><a id="iddle1736" class="indexterm"></a>When you use the Command Pattern, you end up with a lot of small classes — the concrete Command implementations — that each encapsulate the request to the corresponding receiver. In our remote control implementation, we have two command classes for each receiver class. For instance, for the Light receiver, we have LightOnCommand and LightOffCommand; for the GarageDoor receiver, we have GarageDoorUpCommand and GarageDoorDownCommand, and so on. That’s a lot of extra stuff that’s needed to create little bits of packaged-up computation that all have the same interface for the RemoteControl:</p><div class="informalfigure"><a id="med_id00330a"></a><div class="mediaobject"><a id="med_id00330"></a><img src="../Images/image00827.jpeg" alt="image with no caption" hisrc="figs/web/230fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="do_we_really_need_all_these_command_clas">Do we really need all these command classes?</h3></div></div></div><p>A command is simply a piece of packaged-up computation. It’s a way for us to have a common interface to the behavior of many different receivers (lights, hot tubs, stereos) each with its own set of actions.</p><p>What if you could keep the common interface for all your commands, but take out the bits of computation from inside the concrete Command implementations and use them directly instead? <span class="emphasis"><em>And</em></span> you could get rid of all those extra classes and simplify your code? Well, with lambda expressions you can. Let’s see how...</p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="simplifying_the_remote_control_with_lamb">Simplifying the Remote Control with lambda expressions</h2></div></div></div><p><a id="iddle1115" class="indexterm"></a><a id="iddle1174" class="indexterm"></a><a id="iddle1180" class="indexterm"></a><a id="iddle1738" class="indexterm"></a><a id="iddle1878" class="indexterm"></a>While you’ve seen how straightforward the Command Pattern is, Java gives us a nice tool to simplify things even more; namely, the lambda expression. A lambda expression is a short hand for a method — a bit of computation — exactly where you need it. Instead of creating a whole separate class containing that method, instantiating an object from that class, and then calling the method, you can just say, “here’s the method I want called” by using a lambda expression. In our case, the method we want called is the execute() method.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch06note06"></a>Note</h3><p>If you aren’t yet familiar with lambda expressions (they were added in Java 8) they can take some getting used to. You should be able to follow along over the next few pages, but consult a Java reference to get up to speed on the syntax and semantics if you need to.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Let’s replace the LightOnCommand and LightOffCommand objects with lambda expressions to see how this works. Here are the steps to use lambda expressions instead of command objects to add the light on and off commands to the remote control:</p><p><span class="strong"><strong>Step 1: Create the Receiver</strong></span></p><p>This step is exactly the same as before.</p><a id="pro_id00022"></a><pre class="programlisting"><span class="strong"><strong>Light livingRoomLight = new Light("Living Room");</strong></span></pre><div class="informalfigure"><a id="med_id00331a"></a><div class="mediaobject"><a id="med_id00331"></a><img src="../Images/image00828.jpeg" alt="image with no caption" hisrc="figs/web/231fig01.png.jpg"/></div></div><p><span class="strong"><strong>Step 2: Set the remote control’s commands using lambda expressions</strong></span></p><p>This is where the magic happens. Now, instead of creating LightOnCommand and LightOffCommand objects to pass to remoteControl.setCommand(), we simply pass a lambda expression in place of each object, with the code from their respective execute() methods:</p><div class="informalfigure"><a id="med_id00332a"></a><div class="mediaobject"><a id="med_id00332"></a><img src="../Images/image00829.jpeg" alt="image with no caption" hisrc="figs/web/231fig02.png.jpg"/></div></div><p><span class="strong"><strong>Step 3: Push the remote control buttons</strong></span></p><p>This step doesn’t change either. Except now, when we call the remote’s onButtonWasPushed(0) method, the command that’s in slot 0 is a function object (created by the lambda expression). When we call execute() on the command, that method is matched up with the method defined by the lambda expression, which is then executed.</p><div class="informalfigure"><a id="med_id00333a"></a><div class="mediaobject"><a id="med_id00333"></a><img src="../Images/image00830.jpeg" alt="image with no caption" hisrc="figs/web/231fig03.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00334a"></a><div class="mediaobject"><a id="med_id00334"></a><img src="../Images/image00831.jpeg" alt="image with no caption" hisrc="figs/web/232fig01.png.jpg"/></div></div><p><span class="strong"><strong>Well, we did say “magic” didn’t we?</strong></span></p><p>Just kidding... it’s actually not all that magical. We’re using lambda expressions to stand in for Command objects, and the Command interface has just one method: execute(). The lambda expression we use must have a compatible signature with this method — and it does: execute() takes no arguments (neither does our lambda expression), and returns no value (neither does our lambda expression), so the compiler is happy.</p><p>We pass the lambda expression into the Command parameter of the setCommand() method:</p><div class="informalfigure"><a id="med_id00335a"></a><div class="mediaobject"><a id="med_id00335"></a><img src="../Images/image00832.jpeg" alt="image with no caption" hisrc="figs/web/232fig02.png.jpg"/></div></div><p>The compiler checks to see if the Command interface has one method that matches the lambda expression, and it does: execute().</p><p>Then, when we call execute() on that command, the method in the lambda expression is called:</p><div class="informalfigure"><a id="med_id00336a"></a><div class="mediaobject"><a id="med_id00336"></a><img src="../Images/image00833.jpeg" alt="image with no caption" hisrc="figs/web/232fig03.png.jpg"/></div></div><p>Just remember: as long as the interface of the parameter we’re passing the lambda expression to has one (and only one!) method, and that method has a compatible signature with the lambda expression, this will work.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="simplifying_even_more_with_method_refere">Simplifying even more with method references</h2></div></div></div><p><a id="iddle1114" class="indexterm"></a><a id="iddle1173" class="indexterm"></a><a id="iddle1179" class="indexterm"></a><a id="iddle1194" class="indexterm"></a><a id="iddle1737" class="indexterm"></a><a id="iddle1913" class="indexterm"></a>We can simplify our code even more using <span class="emphasis"><em>method references</em></span>. When the lambda expression you’re passing calls just one method, you can pass a method reference in place of the lambda expression. Like this:</p><div class="informalfigure"><a id="med_id00337a"></a><div class="mediaobject"><a id="med_id00337"></a><img src="../Images/image00834.jpeg" alt="image with no caption" hisrc="figs/web/233fig01.png.jpg"/></div></div><p>So now, instead of passing a lambda expression that calls the livingRoomLight’s on() method, we’re passing a <span class="emphasis"><em>reference to the method itself</em></span>.</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="what_if_we_need_to_do_more_than_one_thin">What if we need to do more than one thing in our lambda expression?</h3></div></div></div><p>Sometimes, the lambda expressions you’ll use to stand in for Command objects have to do more than one thing. Let’s take a quick look at how to replace the stereoOnWithCDCommand and stereoOffCommand objects with lambda expressions, and then we’ll look at the complete code for the RemoteLoader so you can see all these ideas come together.</p><p>The stereoOffCommand just executes a simple one-line command:</p><a id="pro_id00023"></a><pre class="programlisting"><span class="strong"><strong>stereo.off();</strong></span></pre><p>So we can use a method reference, <code class="literal">stereo::off</code>, in place of a lambda expression for this command.</p><p>But the stereoOnWithCDCommand does <span class="emphasis"><em>three</em></span> things:</p><a id="pro_id00024"></a><pre class="programlisting"><span class="strong"><strong>stereo.on();</strong></span>
<span class="strong"><strong>stereo.setCD();</strong></span>
<span class="strong"><strong>stereo.setVolume(11);</strong></span></pre><p>In this case, then, we can’t use a method reference. Instead, we can either write the lambda expression in line, or we can create it separately, give it a name, and then pass it to the remoteControl’s setCommand() method using that name. Here’s how you can create the lambda expression separately, and give it a name:</p><div class="informalfigure"><a id="med_id00338a"></a><div class="mediaobject"><a id="med_id00338"></a><img src="../Images/image00835.jpeg" alt="image with no caption" hisrc="figs/web/233fig02.png.jpg"/></div></div><p>Notice that we use Command as the type of the lambda expression. The lambda expression will match the Command interface’s execute() method, and the Command parameter we’re passing it to in the setCommand() method.</p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="test_the_remote_control_with_lambda_expr">Test the remote control with lambda expressions</h2></div></div></div><p><a id="iddle1210" class="indexterm"></a><a id="iddle1756" class="indexterm"></a>To use lambda expressions to simplify the code for the original Remote Control implementation (without undo), we’re going to change the code in the RemoteLoader to replace the concrete Command objects with lambda expressions, and change the RemoteControl constructor to use lambda expressions instead of a NoCommand object. Once we’ve done that, we can delete all the concrete Command classes (LightOnCommand, LightOffCommand, HottubOnCommand, HottubOffCommand, and so on). And that’s it. Everything else stays the same. Make sure you <span class="emphasis"><em>don’t</em></span> delete the Command interface; you still need that to match the type of the function objects created by the lambda expressions that get stored in the remote control, and passed to the various methods.</p><p>Here’s the new code for the RemoteLoader class:</p><div class="informalfigure"><a id="med_id00339a"></a><div class="mediaobject"><a id="med_id00339"></a><img src="../Images/image00836.jpeg" alt="image with no caption" hisrc="figs/web/234fig01.png.jpg"/></div></div><p><a id="iddle1206" class="indexterm"></a><a id="iddle1752" class="indexterm"></a><a id="iddle1968" class="indexterm"></a>And don’t forget, we need to modify the RemoteControl constructor to remove the code to construct NoCommand objects, and replace those with lambda expressions too:</p><div class="informalfigure"><a id="med_id00340a"></a><div class="mediaobject"><a id="med_id00340"></a><img src="../Images/image00837.jpeg" alt="image with no caption" hisrc="figs/web/235fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00341a"></a><div class="mediaobject"><a id="med_id00341"></a><img src="../Images/image00838.jpeg" alt="image with no caption" hisrc="figs/web/235fig02.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="check_out_the_results_of_all_those_lambd">Check out the results of all those lambda expression commands...</h3></div></div></div><div class="informalfigure"><a id="med_id00342a"></a><div class="mediaobject"><a id="med_id00342"></a><img src="../Images/image00839.jpeg" alt="image with no caption" hisrc="figs/web/235fig03.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00063"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch06qa2qe1"></a><a id="ch06qa2q1"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><a id="iddle1198" class="indexterm"></a><a id="iddle1742" class="indexterm"></a><span class="strong"><strong>Q: Can a lambda expression have parameters or return a value? Or does it always have to be a void, no-argument method?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch06qa2q1a1"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> Yes, a lambda expression can have parameters and return a value (take a look back at <a class="xref" href="part0009.xhtml#aid-8IL22">Chapter 2</a> to see how we used a one-argument lambda expression in place of an ActionListener object in the Swing observer example). But the rules are the same: the signature of the lambda expression must match the signature of the one method in the type of the object you’re using the lambda expression to stand in for. To learn more about how to write lambda expressions with parameters and return values (and how to deal with the types), check out the Java docs.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch06qa2qe2"></a><a id="ch06qa2q2"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: You keep saying that a lambda expression must match a method in an interface with one, and only one, method. So if an interface has two methods, we can’t use a lambda expression?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch06qa2q2a2"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> That’s right. An interface, like our original Command interface (or ActionListener as another example), that has just one method is known as a <span class="emphasis"><em>functional interface</em></span>. Lambda expressions are designed specifically to replace the methods in these functional interfaces, partly as a way to reduce the code that is required when you have a lot of these small classes with functional interfaces. If your interface has two methods, it’s not a functional interface and you won’t be able to replace it with a lambda expression. Think about it: a lambda expression is really a replacement for a method, not an entire object. You can’t replace two methods with one lambda expression.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch06qa2qe3"></a><a id="ch06qa2q3"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: Does that mean we can’t use lambda expressions for our Remote Control implementation with undo? There, our Command interface has two methods: execute() and undo().</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch06qa2q3a3"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> That’s right. You could probably find a way to use lambdas with undo (by making two different types of commands), but in the end your code would probably be more complex than if you’d just used Command objects like we did when we implemented the RemoteControl with undo earlier in the chapter.</p><p>Lambda expressions are meant to be used with functional interfaces (one method only), to simplify your code. If you find yourself trying to work around this to support a case like Command with undo, then using lambda expressions probably isn’t the right solution.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch06qa2qe4"></a><a id="ch06qa2q4"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: Why do the names of on and off slots look so weird when we display the RemoteControl?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch06qa2q4a4"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> If you take another look at how we implemented the toString() method of RemoteControl, you’ll see we’re using getClass() to get the class of the Command object, and then getName() to get the name of the class, and printing that to the console as a string. This was a convenient way to get a name for each slot, but kind of a cheat.</p><p>As you can see from the output, lambda expressions don’t have nice class names. That’s because their names are assigned internally by the Java runtime and Java has no idea what these lambda expressions mean; to Java, they’re just function objects that happen to match a method in an interface.</p><p>To fix the RemoteControl display, we’d have to modify the setCommand() code in RemoteControl, perhaps to allow a name parameter for each slot, and modify the toString() method to use this name. Then in RemoteLoader, we’d pass a nice, human-readable name into setCommand() along with the commands. This would probably mirror real life more closely (if you’re programming your own remote, you’ll likely want to set your own custom names).</p></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="more_uses_of_the_command_pattern_queuing">More uses of the Command Pattern: queuing requests</h2></div></div></div><p><a id="iddle1221" class="indexterm"></a><a id="iddle2203" class="indexterm"></a>Commands give us a way to package a piece of computation (a receiver and a set of actions) and pass it around as a first-class object. Now, the computation itself may be invoked long after some client application creates the command object. In fact, it may even be invoked by a different thread. We can take this scenario and apply it to many useful applications such as schedulers, thread pools, and job queues, to name a few.</p><p>Imagine a job queue: you add commands to the queue on one end, and on the other end sits a group of threads. Threads run the following script: they remove a command from the queue, call its execute() method, wait for the call to finish, then discard the command object and retrieve a new one.</p><div class="informalfigure"><a id="med_id00343a"></a><div class="mediaobject"><a id="med_id00343"></a><img src="../Images/image00840.jpeg" alt="image with no caption" hisrc="figs/web/237fig01.png.jpg"/></div></div><p>Note that the job queue classes are totally decoupled from the objects that are doing the computation. One minute a thread may be computing a financial computation, and the next it may be retrieving something from the network. The job queue objects don’t care; they just retrieve commands and call execute(). Likewise, as long as you put objects into the queue that implement the Command Pattern, your execute() method will be invoked when a thread is available.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch06note07"></a>Brain Power</h3><p>How might a web server make use of such a queue? What other applications can you think of?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="more_uses_of_the_command_pattern_logging">More uses of the Command Pattern: logging requests</h2></div></div></div><p><a id="iddle1217" class="indexterm"></a><a id="iddle1887" class="indexterm"></a>The semantics of some applications require that we log all actions and be able to recover after a crash by reinvoking those actions. The Command Pattern can support these semantics with the addition of two methods: store() and load(). In Java we could use object serialization to implement these methods, but the normal caveats for using serialization for persistence apply.</p><p>How does this work? As we execute commands, we store a history of them on disk. When a crash occurs, we reload the command objects and invoke their execute() methods in batch and in order.</p><p>Now, this kind of logging wouldn’t make sense for a remote control; however, there are many applications that invoke actions on large data structures that can’t be quickly saved each time a change is made. By using logging, we can save all the operations since the last check point, and if there is a system failure, apply those operations to our checkpoint. Take, for example, a spreadsheet application: we might want to implement our failure recovery by logging the actions on the spreadsheet rather than writing a copy of the spreadsheet to disk every time a change occurs. In more advanced applications, these techniques can be extended to apply to sets of operations in a transactional manner so that all of the operations complete, or none of them do.</p><div class="informalfigure"><a id="med_id00344a"></a><div class="mediaobject"><a id="med_id00344"></a><img src="../Images/image00841.jpeg" alt="image with no caption" hisrc="figs/web/238fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00345a"></a><div class="mediaobject"><a id="med_id00345"></a><img src="../Images/image00842.jpeg" alt="image with no caption" hisrc="figs/web/238fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00064">Tools for your Design Toolbox</h2></div></div></div><p><a id="iddle1808" class="indexterm"></a>Your toolbox is starting to get heavy! In this chapter we’ve added a pattern that allows us to encapsulate methods into Command objects: store them, pass them around, and invoke them when you need them.</p><div class="informalfigure"><a id="med_id00346a"></a><div class="mediaobject"><a id="med_id00346"></a><img src="../Images/image00843.jpeg" alt="image with no caption" hisrc="figs/web/239fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00065"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The Command Pattern decouples an object making a request from the one that knows how to perform it.</li><li class="listitem">A Command object is at the center of this decoupling and encapsulates a receiver with an action (or set of actions) .</li><li class="listitem">An invoker makes a request of a Command object by calling its execute() method, which invokes those actions on the receiver.</li><li class="listitem">Invokers can be parameterized with Commands, even dynamically at runtime.</li><li class="listitem">Commands may support undo by implementing an undo method that restores the object to its previous state before the execute() method was last called.</li><li class="listitem">Macro Commands are a simple extension of Command that allow multiple commands to be invoked. Likewise, Macro Commands can easily support undo().</li><li class="listitem">In practice, it is not uncommon for “smart” Command objects to implement the request themselves rather than delegating to a receiver.</li><li class="listitem">Commands may also be used to implement logging and transactional systems.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword-id00066"></a><h3 class="title">Design Patterns Crossword</h3><p>Time to take a breather and let it all sink in.</p><p>It’s another crossword; all of the solution words are from this chapter.</p><div class="informalfigure"><a id="med_id00347a"></a><div class="mediaobject"><a id="med_id00347"></a><img src="../Images/image00844.gif" alt="image with no caption" hisrc="figs/web/240fig01.png"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Across</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Down</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>3. The Waitress was one.</p>
<p>4. A command __________ a set of actions and a receiver.</p>
<p>7. Dr. Seuss diner food.</p>
<p>8. Our favorite city.</p>
<p>9. Act as the receivers in the remote control.</p>
<p>13. Object that knows the actions and the receiver.</p>
<p>14. Another thing Command can do.</p>
<p>15. Object that knows how to get things done.</p>
<p>17. A command encapsulates this.</p></td><td style="vertical-align: top; "><p>1. Role of customer in the Command Pattern.</p>
<p>2. Our first command object controlled this.</p>
<p>5. Invoker and receiver are _________.</p>
<p>6. Company that got us word-of-mouth business.</p>
<p>10. All commands provide this.</p>
<p>11. The Cook and this person were definitely decoupled.</p>
<p>12. Carries out a request.</p>
<p>16. Waitress didn’t do this.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark_solution"></a><h3 class="title">Who Does What? Solution</h3><p><a id="iddle1191" class="indexterm"></a><a id="iddle1204" class="indexterm"></a><a id="iddle1219" class="indexterm"></a><a id="iddle1548" class="indexterm"></a><a id="iddle1577" class="indexterm"></a><a id="iddle1734" class="indexterm"></a><a id="iddle1750" class="indexterm"></a><a id="iddle2290" class="indexterm"></a><a id="iddle2515" class="indexterm"></a>Match the diner objects and methods with the corresponding names from the Command Pattern</p><div class="informalfigure"><a id="med_id00348a"></a><div class="mediaobject"><a id="med_id00348"></a><img src="../Images/image00845.jpeg" alt="image with no caption" hisrc="figs/web/241fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00067"></a><h3 class="title">Sharpen your pencil Solution</h3><p>Here’s the code for the GarageDoorOpenCommand class.</p><a id="pro_id00025"></a><pre class="programlisting"><span class="strong"><strong>public class GarageDoorOpenCommand implements Command {</strong></span>
    <span class="gray-background"><span class="strong"><strong>GarageDoor garageDoor;</strong></span></span>

    <span class="gray-background"><span class="strong"><strong>public GarageDoorOpenCommand(GarageDoor garageDoor) {</strong></span></span>
        <span class="gray-background"><span class="strong"><strong>this.garageDoor = garageDoor;</strong></span></span>
    <span class="gray-background"><span class="strong"><strong>}</strong></span></span>
    <span class="gray-background"><span class="strong"><strong>public void execute() {</strong></span></span>
        <span class="gray-background"><span class="strong"><strong>garageDoor.up();</strong></span></span>
    <span class="gray-background"><span class="strong"><strong>}</strong></span></span>
<span class="strong"><strong>}</strong></span></pre><p>Here’s the output:</p><div class="informalfigure"><a id="med_id00349a"></a><div class="mediaobject"><a id="med_id00349"></a><img src="../Images/image00846.jpeg" alt="image with no caption" hisrc="figs/web/241fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="exercise_solution"></a><h3 class="title">Exercise Solution</h3><p><a id="iddle1202" class="indexterm"></a><a id="iddle1214" class="indexterm"></a><a id="iddle1522" class="indexterm"></a><a id="iddle1540" class="indexterm"></a><a id="iddle1747" class="indexterm"></a><a id="iddle1759" class="indexterm"></a><a id="iddle1894" class="indexterm"></a><a id="iddle2281" class="indexterm"></a>Here is the undo() method for the MacroCommand.</p><a id="pro_id00026"></a><pre class="programlisting"><span class="strong"><strong>public class MacroCommand implements Command {</strong></span>
    <span class="strong"><strong>Command[] commands;</strong></span>
    <span class="strong"><strong>public MacroCommand(Command[] commands) {</strong></span>
        <span class="strong"><strong>this.commands = commands;</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void execute() {</strong></span>
        <span class="strong"><strong>for (int i = 0; i &lt; commands.length; i++) {</strong></span>
            <span class="strong"><strong>commands[i].execute();</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="gray-background"><span class="strong"><strong>public void undo() {</strong></span></span>
        <span class="gray-background"><span class="strong"><strong>for (int i = commands.length - 1; i &gt; = 0; i--) {</strong></span></span>
            <span class="gray-background"><span class="strong"><strong>commands[i].undo();</strong></span></span>
        <span class="gray-background"><span class="strong"><strong>}</strong></span></span>
    <span class="gray-background"><span class="strong"><strong>}</strong></span></span>
<span class="strong"><strong>}</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00068"></a><h3 class="title">Sharpen your pencil Solution</h3><p>Here is the code to create commands for the off button.</p><a id="pro_id00027"></a><pre class="programlisting"><span class="strong"><strong>LightOffCommand lightOff = new LightOffCommand(light);</strong></span>
<span class="strong"><strong>StereoOffCommand stereoOff = new StereoOffCommand(stereo);</strong></span>
<span class="strong"><strong>TVOffCommand tvOff = new TVOffCommand(tv);</strong></span>
<span class="strong"><strong>HottubOffCommand hottubOff = new HottubOffCommand(hottub);</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00350a"></a><div class="mediaobject"><a id="med_id00350"></a><img src="../Images/image00847.gif" alt="image with no caption" hisrc="figs/web/242fig01.png"/></div></div></div></section></body></html>