<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 11. The Proxy Pattern: Controlling Object Access</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch10.html"/><link rel="next" href="ch12.html"/></head><body><section class="chapter" epub:type="chapter" id="proxy_pattern_controlling_object_access"><div class="titlepage" id="aid-H5A42"><div><div><h2 class="title">Chapter 11. The Proxy Pattern: Controlling Object Access</h2></div></div></div><div class="informalfigure"><a id="med_id00593a"></a><div class="mediaobject"><a id="med_id00593"></a><img src="../Images/image01098.jpeg" alt="image with no caption" hisrc="figs/web/437fig01.png.jpg"/></div></div><p><a id="iddle2154" class="indexterm"></a><span class="strong"><strong>Ever play good cop, bad cop?</strong></span> You’re the good cop and you provide all your services in a nice and friendly manner, but you don’t want everyone asking you for services, so you have the bad cop control access to you. That’s what proxies do: control and manage access. As you’re going to see, there are lots of ways in which proxies stand in for the objects they proxy. Proxies have been known to haul entire method calls over the Internet for their proxied objects; they’ve also been known to patiently stand in the place for some pretty lazy objects.</p><div class="informalfigure"><a id="med_id00594a"></a><div class="mediaobject"><a id="med_id00594"></a><img src="../Images/image01099.jpeg" alt="image with no caption" hisrc="figs/web/438fig01.png.jpg"/></div></div><p><a id="iddle1302" class="indexterm"></a><a id="iddle1709" class="indexterm"></a><a id="iddle1974" class="indexterm"></a>Sounds easy enough. If you remember, we’ve already got methods in the gumball machine code for getting the count of gumballs (getCount()), and getting the current state of the machine (getState()).</p><p>All we need to do is create a report that can be printed out and sent back to the CEO. Hmmm, we should probably add a location field to each gumball machine as well; that way the CEO can keep the machines straight.</p><p>Let’s just jump in and code this. We’ll impress the CEO with a very fast turnaround.</p><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="coding_the_monitor">Coding the Monitor</h2></div></div></div><p>Let’s start by adding support to the GumballMachine class so that it can handle locations:</p><div class="informalfigure"><a id="med_id00595a"></a><div class="mediaobject"><a id="med_id00595"></a><img src="../Images/image01100.jpeg" alt="image with no caption" hisrc="figs/web/439fig01.png.jpg"/></div></div><p>Now let’s create another class, GumballMonitor, that retrieves the machine’s location, inventory of gumballs, and current machine state and prints them in a nice little report:</p><div class="informalfigure"><a id="med_id00596a"></a><div class="mediaobject"><a id="med_id00596"></a><img src="../Images/image01101.jpeg" alt="image with no caption" hisrc="figs/web/439fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="testing_the_monitor">Testing the Monitor</h2></div></div></div><p>We implemented that in no time. The CEO is going to be thrilled and amazed by our development skills.</p><p>Now we just need to instantiate a GumballMonitor and give it a machine to monitor:</p><div class="informalfigure"><a id="med_id00597a"></a><div class="mediaobject"><a id="med_id00597"></a><img src="../Images/image01102.jpeg" alt="image with no caption" hisrc="figs/web/440fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00598a"></a><div class="mediaobject"><a id="med_id00598"></a><img src="../Images/image01103.jpeg" alt="image with no caption" hisrc="figs/web/441fig01.png.jpg"/></div></div><p><a id="iddle1314" class="indexterm"></a><a id="iddle1710" class="indexterm"></a><a id="iddle1986" class="indexterm"></a><a id="iddle2166" class="indexterm"></a><a id="iddle2223" class="indexterm"></a><span class="strong"><strong>Frank</strong></span>: A remote what?</p><p><span class="strong"><strong>Joe</strong></span>: Remote proxy. Think about it: we’ve already got the monitor code written, right? We give the GumballMonitor a reference to a machine and it gives us a report. The problem is that the monitor runs in the same JVM as the gumball machine and the CEO wants to sit at his desk and remotely monitor the machines! So what if we left our GumballMonitor class as is, but handed it a proxy to a remote object?</p><p><span class="strong"><strong>Frank</strong></span>: I’m not sure I get it.</p><p><span class="strong"><strong>Jim</strong></span>: Me neither.</p><p><span class="strong"><strong>Joe</strong></span>: Let’s start at the beginning... a proxy is a stand in for a real object. In this case, the proxy acts just like it is a Gumball Machine object, but behind the scenes it is communicating over the network to talk to the real, remote GumballMachine.</p><p><span class="strong"><strong>Jim</strong></span>: So you’re saying we keep our code as it is, and we give the monitor a reference to a proxy version of the GumballMachine...</p><p><span class="strong"><strong>Frank</strong></span>: And this proxy pretends it’s the real object, but it’s really just communicating over the net to the real object.</p><p><span class="strong"><strong>Joe</strong></span>: Yeah, that’s pretty much the story.</p><p><span class="strong"><strong>Frank</strong></span>: It sounds like something that is easier said than done.</p><p><span class="strong"><strong>Joe</strong></span>: Perhaps, but I don’t think it’ll be that bad. We have to make sure that the gumball machine can act as a service and accept requests over the network; we also need to give our monitor a way to get a reference to a proxy object, but we’ve got some great tools already built into Java to help us. Let’s talk a little more about remote proxies first...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="role_of_the_apostropheremote_proxyapostr">The role of the ‘remote proxy’</h2></div></div></div><p><a id="iddle1320" class="indexterm"></a><a id="iddle1716" class="indexterm"></a><a id="iddle1992" class="indexterm"></a><a id="iddle2172" class="indexterm"></a><a id="iddle2229" class="indexterm"></a>A remote proxy acts as a <span class="emphasis"><em>local representative to a remote object</em></span>. What’s a “remote object”? It’s an object that lives in the heap of a different Java Virtual Machine (or more generally, a remote object that is running in a different address space). What’s a “local representative”? It’s an object that you can call local methods on and have them forwarded on to the remote object.</p><div class="informalfigure"><a id="med_id00599a"></a><div class="mediaobject"><a id="med_id00599"></a><img src="../Images/image01104.jpeg" alt="image with no caption" hisrc="figs/web/442fig01.png.jpg"/></div></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>Your client object acts like it’s making remote method calls. But what it’s really doing is calling methods on a heap-local ‘proxy’ object that handles all the low-level details of network communication.</strong></span></div></blockquote></div><div class="informalfigure"><a id="med_id00600a"></a><div class="mediaobject"><a id="med_id00600"></a><img src="../Images/image01105.jpeg" alt="image with no caption" hisrc="figs/web/443fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note01"></a>Brain Power</h3><p>Before going further, think about how you’d design a system to enable remote method invocation. How would you make it easy on the developer so that she has to write as little code as possible? How would you make the remote invocation look seamless?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note02"></a>Brain Power</h3><p>Should making remote calls be totally transparent? Is that a good idea? What might be a problem with that approach?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="adding_a_remote_proxy_to_the_gumball_mac">Adding a remote proxy to the Gumball Machine monitoring code</h2></div></div></div><p><a id="iddle1315" class="indexterm"></a><a id="iddle1711" class="indexterm"></a><a id="iddle1869" class="indexterm"></a><a id="iddle1987" class="indexterm"></a><a id="iddle2167" class="indexterm"></a><a id="iddle2212" class="indexterm"></a><a id="iddle2224" class="indexterm"></a><a id="iddle2239" class="indexterm"></a>On paper this looks good, but how do we create a proxy that knows how to invoke a method on an object that lives in another JVM?</p><p>Hmmm. Well, you can’t get a reference to something on another heap, right? In other words, you can’t say:</p><a id="pro_id00039"></a><pre class="programlisting"><span class="strong"><strong>Duck d = &lt;object in another heap&gt;</strong></span></pre><p>Whatever the variable <span class="strong"><strong><code class="literal">d</code></strong></span> is referencing must be in the same heap space as the code running the statement. So how do we approach this? Well, that’s where Java’s Remote Method Invocation comes in... RMI gives us a way to find objects in a remote JVM and allows us to invoke their methods.</p><p>You may have encountered RMI in Head First Java; if not, take a slight detour and get up to speed on RMI before adding the proxy support to the Gumball Machine code.</p><p>So, here’s what we’re going to do:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① First, we’re going to take the RMI Detour and check RMI out. Even if you are familiar with RMI, you might want to follow along and check out the scenery.</strong></span><div class="informalfigure"><a id="med_id00601a"></a><div class="mediaobject"><a id="med_id00601"></a><img src="../Images/image01106.jpeg" alt="image with no caption" hisrc="figs/web/444fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Then we’re going to take our GumballMachine and make it a remote service that provides a set of methods calls that can be invoked remotely.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Then, we going to create a proxy that can talk to a remote GumballMachine, again using RMI, and put the monitoring system back together so that the CEO can monitor any number of remote machines.</strong></span></li></ul></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="remote_methods_101">Remote methods 101</h2></div></div></div><div class="informalfigure"><a id="med_id00602a"></a><div class="mediaobject"><a id="med_id00602"></a><img src="../Images/image01107.jpeg" alt="image with no caption" hisrc="figs/web/common20.png.jpg"/></div></div><p><a id="iddle1137" class="indexterm"></a><a id="iddle2253" class="indexterm"></a>Let’s say we want to design a system that allows us to call a local object that forwards each request to a remote object. How would we design it? We’d need a couple of helper objects that actually do the communicating for us. The helpers make it possible for the client to act as though it’s calling a method on a local object (which in fact, it is). The client calls a method on the client helper, as if the client helper were the actual service. The client helper then takes care of forwarding that request for us.</p><p>In other words, the client object thinks it’s calling a method on the remote service, because the client helper is pretending to be the service object. Pretending to be the thing with the method the client wants to call.</p><p>But the client helper isn’t really the remote service. Although the client helper acts like it (because it has the same method that the service is advertising), the client helper doesn’t have any of the actual method logic the client is expecting. Instead, the client helper contacts the server, transfers information about the method call (e.g., name of the method, arguments, etc.), and waits for a return from the server.</p><p>On the server side, the service helper receives the request from the client helper (through a Socket connection), unpacks the information about the call, and then invokes the real method on the real service object. So, to the service object, the call is local. It’s coming from the service helper, not a remote client.</p><p>The service helper gets the return value from the service, packs it up, and ships it back (over a Socket’s output stream) to the client helper. The client helper unpacks the information and returns the value to the client object.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note01a"></a>Note</h3><p>This should look familiar...</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00603a"></a><div class="mediaobject"><a id="med_id00603"></a><img src="../Images/image01108.jpeg" alt="image with no caption" hisrc="figs/web/445fig01.png.jpg"/></div></div><p><a id="iddle2220" class="indexterm"></a><a id="iddle2247" class="indexterm"></a><span class="strong"><strong>How the method call happens</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① Client object calls doBigThing() on the client helper object.<div class="informalfigure"><a id="med_id00604a"></a><div class="mediaobject"><a id="med_id00604"></a><img src="../Images/image01109.jpeg" alt="image with no caption" hisrc="figs/web/446fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">② Client helper packages up information about the call (arguments, method name, etc.) and ships it over the network to the service helper.<div class="informalfigure"><a id="med_id00605a"></a><div class="mediaobject"><a id="med_id00605"></a><img src="../Images/image01110.jpeg" alt="image with no caption" hisrc="figs/web/446fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">③ Service helper unpacks the information from the client helper, finds out which method to call (and on which object) and invokes the <span class="underline">real</span> method on the <span class="underline">real</span> service object.<div class="informalfigure"><a id="med_id00606a"></a><div class="mediaobject"><a id="med_id00606"></a><img src="../Images/image01111.jpeg" alt="image with no caption" hisrc="figs/web/446fig03.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">④ The method is invoked on the service object, which returns some result to the service helper.<div class="informalfigure"><a id="med_id00607a"></a><div class="mediaobject"><a id="med_id00607"></a><img src="../Images/image01107.jpeg" alt="image with no caption" hisrc="figs/web/common20.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00608a"></a><div class="mediaobject"><a id="med_id00608"></a><img src="../Images/image01112.jpeg" alt="image with no caption" hisrc="figs/web/447fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">⑤ Service helper packages up information returned from the call and ships it back over the network to the client helper.<div class="informalfigure"><a id="med_id00609a"></a><div class="mediaobject"><a id="med_id00609"></a><img src="../Images/image01113.jpeg" alt="image with no caption" hisrc="figs/web/447fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">⑥ Client helper unpackages the returned values and returns them to the client object. To the client object, this was all transparent.<div class="informalfigure"><a id="med_id00610a"></a><div class="mediaobject"><a id="med_id00610"></a><img src="../Images/image01114.jpeg" alt="image with no caption" hisrc="figs/web/447fig03.png.jpg"/></div></div></li></ul></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="java_rmicomma_the_big_picture">Java RMI, the Big Picture</h2></div></div></div><p><a id="iddle1138" class="indexterm"></a><a id="iddle2213" class="indexterm"></a><a id="iddle2240" class="indexterm"></a><a id="iddle2254" class="indexterm"></a><a id="iddle2347" class="indexterm"></a><a id="iddle2427" class="indexterm"></a>Okay, you’ve got the gist of how remote methods work; now you just need to understand how to use RMI to enable remote method invocation.</p><p>What RMI does for you is build the client and service helper objects, right down to creating a client helper object with the same methods as the remote service. The nice thing about RMI is that you don’t have to write any of the networking or I/O code yourself. With your client, you call remote methods (i.e., the ones the Real Service has) just like normal method calls on objects running in the client’s own local JVM.</p><p>RMI also provides all the runtime infrastructure to make it all work, including a lookup service that the client can use to find and access the remote objects.</p><p>There is one difference between RMI calls and local (normal) method calls. Remember that even though to the client it looks like the method call is local, the client helper sends the method call across the network. So there is networking and I/O. And what do we know about networking and I/O methods?</p><p>They’re risky! They can fail! And so, they throw exceptions all over the place. As a result, the client does have to acknowledge the risk. We’ll see how in a few pages.</p><p><span class="strong"><strong>RMI Nomenclature: in RMI, the client helper is a ‘stub’ and the service helper is a ‘skeleton’.</strong></span></p><div class="informalfigure"><a id="med_id00611a"></a><div class="mediaobject"><a id="med_id00611"></a><img src="../Images/image01115.jpeg" alt="image with no caption" hisrc="figs/web/448fig01.png.jpg"/></div></div><p>Now let’s go through all the steps needed to make an object into a service that can accept remote calls and also the steps needed to allow a client to make remote calls.</p><p>You might want to make sure your seat belt is fastened; there are a lot of steps and a few bumps and curves — but nothing to be too worried about.</p><p><a id="iddle2219" class="indexterm"></a><a id="iddle2246" class="indexterm"></a><span class="strong"><strong>Making the Remote service</strong></span></p><div class="informalfigure"><a id="med_id00612a"></a><div class="mediaobject"><a id="med_id00612"></a><img src="../Images/image01107.jpeg" alt="image with no caption" hisrc="figs/web/common20.png.jpg"/></div></div><p>This is an <span class="strong"><strong>overview</strong></span> of the five steps for making the remote service. In other words, the steps needed to take an ordinary object and supercharge it so it can be called by a remote client. We’ll be doing this later to our GumballMachine. For now, let’s get the steps down and then we’ll explain each one in detail.</p><p><span class="strong"><strong>Step one:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">Make a <span class="strong"><strong>Remote Interface</strong></span></li><li class="listitem" style="list-style-type: none">The remote interface defines the methods that a client can call remotely. It’s what the client will use as the class type for your service. Both the Stub and actual service will implement this!</li></ul></div><div class="informalfigure"><a id="med_id00613a"></a><div class="mediaobject"><a id="med_id00613"></a><img src="../Images/image01116.jpeg" alt="image with no caption" hisrc="figs/web/449fig01.png.jpg"/></div></div><p><span class="strong"><strong>Step two:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">Make a <span class="strong"><strong>Remote Implementation</strong></span></li><li class="listitem" style="list-style-type: none">This is the class that does the Real Work. It has the real implementation of the remote methods defined in the remote interface. It’s the object that the client wants to call methods on (e.g., our GumballMachine!).</li></ul></div><div class="informalfigure"><a id="med_id00614a"></a><div class="mediaobject"><a id="med_id00614"></a><img src="../Images/image01117.jpeg" alt="image with no caption" hisrc="figs/web/449fig02.png.jpg"/></div></div><p><span class="strong"><strong>Step three:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">Start the <span class="strong"><strong>RMI registry</strong></span> (rmiregistry)</li><li class="listitem" style="list-style-type: none">The <span class="emphasis"><em>rmiregistry</em></span> is like the white pages of a phone book. It’s where the client goes to get the proxy (the client stub/helper object).</li></ul></div><div class="informalfigure"><a id="med_id00615a"></a><div class="mediaobject"><a id="med_id00615"></a><img src="../Images/image01118.jpeg" alt="image with no caption" hisrc="figs/web/449fig03.png.jpg"/></div></div><p><span class="strong"><strong>Step four:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">Start the <span class="strong"><strong>remote service</strong></span></li><li class="listitem" style="list-style-type: none">You have to get the service object up and running. Your service implementation class instantiates an instance of the service and registers it with the RMI registry. Registering it makes the service available for clients.<div class="informalfigure"><a id="med_id00616a"></a><div class="mediaobject"><a id="med_id00616"></a><img src="../Images/image01119.jpeg" alt="image with no caption" hisrc="figs/web/449fig04.png.jpg"/></div></div></li></ul></div><p><span class="strong"><strong>Step one: make a Remote interface</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Extend java.rmi.Remote</strong></span><br/>Remote is a ‘marker’ interface, which means it has no methods. It has special meaning for RMI, though, so you must follow this rule. Notice that we say ‘extends’ here. One interface is allowed to <span class="emphasis"><em>extend</em></span> another interface.<div class="informalfigure"><a id="med_id00617a"></a><div class="mediaobject"><a id="med_id00617"></a><img src="../Images/image01120.jpeg" alt="image with no caption" hisrc="figs/web/450fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">② Declare that all methods <span class="strong"><strong>throw a RemoteException</strong></span><br/>The remote interface is the one the client uses as the type for the service. In other words, the client invokes methods on something that implements the remote interface. That something is the stub, of course, and since the stub is doing networking and I/O, all kinds of Bad Things can happen. The client has to acknowledge the risks by handling or declaring the remote exceptions. If the methods in an interface declare exceptions, any code calling methods on a reference of that type (the interface type) must handle or declare the exceptions.<div class="informalfigure"><a id="med_id00618a"></a><div class="mediaobject"><a id="med_id00618"></a><img src="../Images/image01121.jpeg" alt="image with no caption" hisrc="figs/web/450fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Be sure arguments and return values are primitives or Serializable</strong></span><br/>Arguments and return values of a remote method must be either primitive or Serializable. Think about it. Any argument to a remote method has to be packaged up and shipped across the network, and that’s done through Serialization. Same thing with return values. If you use primitives, Strings, and the majority of types in the API (including arrays and collections), you’ll be fine. If you are passing around your own types, just be sure that you make your classes implement Serializable.<div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note03"></a>Note</h3><p>Check out Head First Java if you need to refresh your memory on Serializable.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00619a"></a><div class="mediaobject"><a id="med_id00619"></a><img src="../Images/image01122.jpeg" alt="image with no caption" hisrc="figs/web/450fig03.png.jpg"/></div></div></li></ul></div><p><span class="strong"><strong>Step two: make a Remote implementation</strong></span></p><div class="informalfigure"><a id="med_id00620a"></a><div class="mediaobject"><a id="med_id00620"></a><img src="../Images/image01107.jpeg" alt="image with no caption" hisrc="figs/web/common20.png.jpg"/></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Implement the Remote interface</strong></span><br/>Your service has to implement the remote interface — the one with the methods your client is going to call.<div class="informalfigure"><a id="med_id00621a"></a><div class="mediaobject"><a id="med_id00621"></a><img src="../Images/image01123.jpeg" alt="image with no caption" hisrc="figs/web/451fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Extend UnicastRemoteObject</strong></span><br/>In order to work as a remote service object, your object needs some functionality related to ‘being remote’. The simplest way is to extend UnicastRemoteObject (from the java.rmi.server package) and let that class (your superclass) do the work for you.<div class="informalfigure"><a id="med_id00622a"></a><div class="mediaobject"><a id="med_id00622"></a><img src="../Images/image01124.jpeg" alt="image with no caption" hisrc="figs/web/451fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Write a no-arg constructor that declares a RemoteException</strong></span><br/>Your new superclass, UnicastRemoteObject, has one little problem — its constructor throws a RemoteException. The only way to deal with this is to declare a constructor for your remote implementation, just so that you have a place to declare the RemoteException. Remember, when a class is instantiated, its superclass constructor is always called. If your superclass constructor throws an exception, you have no choice but to declare that your constructor also throws an exception.<div class="informalfigure"><a id="med_id00623a"></a><div class="mediaobject"><a id="med_id00623"></a><img src="../Images/image01125.jpeg" alt="image with no caption" hisrc="figs/web/451fig03.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ Register the service with the RMI registry</strong></span><br/>Now that you’ve got a remote service, you have to make it available to remote clients. You do this by instantiating it and putting it into the RMI registry (which must be running or this line of code fails). When you register the implementation object, the RMI system actually puts the <span class="emphasis"><em>stub</em></span> in the registry, since that’s what the client really needs. Register your service using the static rebind() method of the java.rmi.Naming class.<div class="informalfigure"><a id="med_id00624a"></a><div class="mediaobject"><a id="med_id00624"></a><img src="../Images/image01126.jpeg" alt="image with no caption" hisrc="figs/web/451fig04.png.jpg"/></div></div></li></ul></div><p><a id="iddle1139" class="indexterm"></a><a id="iddle1858" class="indexterm"></a><a id="iddle2175" class="indexterm"></a><a id="iddle2255" class="indexterm"></a><a id="iddle2348" class="indexterm"></a><a id="iddle2428" class="indexterm"></a><span class="strong"><strong>Step three: run rmiregistry</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Bring up a terminal and start the rmiregistry.</strong></span><br/>Be sure you start it from a directory that has access to your classes. The simplest way is to start it from your <code class="literal">classes</code> directory.<div class="informalfigure"><a id="med_id00625a"></a><div class="mediaobject"><a id="med_id00625"></a><img src="../Images/image01127.jpeg" alt="image with no caption" hisrc="figs/web/452fig01.png.jpg"/></div></div></li></ul></div><p><span class="strong"><strong>Step four: start the service</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Bring up another terminal and start your service</strong></span><br/>This might be from a main() method in your remote implementation class, or from a separate launcher class. In this simple example, we put the starter code in the implementation class, in a main method that instantiates the object and registers it with RMI registry.<div class="informalfigure"><a id="med_id00626a"></a><div class="mediaobject"><a id="med_id00626"></a><img src="../Images/image01128.jpeg" alt="image with no caption" hisrc="figs/web/452fig02.png.jpg"/></div></div></li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note04"></a>Watch it!</h3><p><span class="strong"><strong>Before Java 5, we had to generate static stubs and skeletons using rmic. Now, we don’t have to do this anymore and in fact, we</strong></span> <span class="bolditalic">shouldn’t</span> <span class="strong"><strong>do it anymore, because</strong></span> <span class="bolditalic">static</span> <span class="strong"><strong>stubs and skeletons are deprecated.</strong></span></p><p><span class="emphasis"><em>Instead, stubs and skeletons are generated dynamically. This happens automatically when we subclass the UnicastRemoteObject (like we’re doing for the MyRemoteImpl class).</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00140"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch11qa1qe1"></a><a id="ch11qa1q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Why are you showing stubs and skeletons in the diagrams for the RMI code? I thought we got rid of those way back.</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch11qa1q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> You’re right; for the skeleton, the RMI runtime can dispatch the client calls directly to the remote service using reflection, and stubs are generated dynamically using Dynamic Proxy (which you’ll learn more about a bit later in the chapter). The remote object’s stub is a java.lang.reflect.Proxy instance (with an invocation handler) that is automatically generated to handle all the details of getting the local method calls by the client to the remote object. But we like to show both the stub and skeleton, because conceptually it helps you to understand that there is something under the covers that’s making that communication between the client stub and the remote service happen.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><a id="iddle2215" class="indexterm"></a><a id="iddle2242" class="indexterm"></a><span class="strong"><strong>Complete code for the server side</strong></span></p><div class="informalfigure"><a id="med_id00627a"></a><div class="mediaobject"><a id="med_id00627"></a><img src="../Images/image01107.jpeg" alt="image with no caption" hisrc="figs/web/common20.png.jpg"/></div></div><p><span class="strong"><strong>The Remote interface:</strong></span></p><div class="informalfigure"><a id="med_id00628a"></a><div class="mediaobject"><a id="med_id00628"></a><img src="../Images/image01129.jpeg" alt="image with no caption" hisrc="figs/web/453fig01.png.jpg"/></div></div><p><span class="strong"><strong>The Remote service (the implementation):</strong></span></p><div class="informalfigure"><a id="med_id00629a"></a><div class="mediaobject"><a id="med_id00629"></a><img src="../Images/image01130.jpeg" alt="image with no caption" hisrc="figs/web/453fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="how_does_the_client_get_the_stub_objectq">How does the client get the stub <span class="underline">ob</span>j<span class="underline">ect</span>?</h2></div></div></div><p><a id="iddle1140" class="indexterm"></a><a id="iddle2214" class="indexterm"></a><a id="iddle2241" class="indexterm"></a><a id="iddle2256" class="indexterm"></a><a id="iddle2349" class="indexterm"></a><a id="iddle2429" class="indexterm"></a>The client has to get the stub object (our proxy), since that’s the thing the client will call methods on. And that’s where the RMI registry comes in. The client does a ‘lookup’, like going to the white pages of a phone book, and essentially says, “Here’s a name, and I’d like the stub that goes with that name.”</p><p>Let’s take a look at the code we need to look-up and retrieve a stub object.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_up_close-id00141"></a><h3 class="title">Code Up Close</h3><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note02a"></a>Note</h3><p>Here’s how it works.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00630a"></a><div class="mediaobject"><a id="med_id00630"></a><img src="../Images/image01131.jpeg" alt="image with no caption" hisrc="figs/web/454fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00631a"></a><div class="mediaobject"><a id="med_id00631"></a><img src="../Images/image01107.jpeg" alt="image with no caption" hisrc="figs/web/common20.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00632a"></a><div class="mediaobject"><a id="med_id00632"></a><img src="../Images/image01132.jpeg" alt="image with no caption" hisrc="figs/web/455fig01.png.jpg"/></div></div><p><span class="strong"><strong>How it works...</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Client does a lookup on the RMI registry</strong></span><a id="pro_id00040"></a><pre class="programlisting"><span class="strong"><strong>Naming.lookup("rmi://127.0.0.1/RemoteHello");</strong></span></pre></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② RMI registry returns the stub object</strong></span><br/>(as the return value of the lookup method) and RMI deserializes the stub automatically.</li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Client invokes a method on the stub, as if the stub IS the real service</strong></span></li></ul></div><p><a id="iddle2222" class="indexterm"></a><a id="iddle2249" class="indexterm"></a><span class="strong"><strong>Complete client code</strong></span></p><div class="informalfigure"><a id="med_id00633a"></a><div class="mediaobject"><a id="med_id00633"></a><img src="../Images/image01133.jpeg" alt="image with no caption" hisrc="figs/web/456fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note05"></a>Watch it!</h3><p><span class="strong"><strong>The things programmers do wrong with RMI are:</strong></span></p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><span class="emphasis"><em>Forget to start rmiregistry before starting remote service (when the service is registered using Naming.rebind(), the rmiregistry must be running!)</em></span></li><li class="listitem"><span class="emphasis"><em>Forget to make arguments and return types serializable (you won’t know until runtime; this is not something the compiler will detect.)</em></span></li></ol></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="back_to_our_gumballmachine_remote_proxy">Back to our GumballMachine remote proxy</h2></div></div></div><p>Okay, now that you have the RMI basics down, you’ve got the tools you need to implement the gumball machine remote proxy. Let’s take a look at how the GumballMachine fits into this framework:</p><div class="informalfigure"><a id="med_id00634a"></a><div class="mediaobject"><a id="med_id00634"></a><img src="../Images/image01134.jpeg" alt="image with no caption" hisrc="figs/web/457fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00635a"></a><div class="mediaobject"><a id="med_id00635"></a><img src="../Images/image01135.jpeg" alt="image with no caption" hisrc="figs/web/457fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="getting_the_gumballmachine_ready_to_be_a">Getting the GumballMachine ready to be a remote service</h2></div></div></div><p><a id="iddle1316" class="indexterm"></a><a id="iddle1712" class="indexterm"></a><a id="iddle1988" class="indexterm"></a><a id="iddle2168" class="indexterm"></a><a id="iddle2216" class="indexterm"></a><a id="iddle2225" class="indexterm"></a><a id="iddle2243" class="indexterm"></a>The first step in converting our code to use the remote proxy is to enable the GumballMachine to service remote requests from clients. In other words, we’re going to make it into a service. To do that, we need to:</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem">Create a remote interface for the GumballMachine. This will provide a set of methods that can be called remotely.</li><li class="listitem">Make sure all the return types in the interface are serializable.</li><li class="listitem">Implement the interface in a concrete class.</li></ol></div><p>We’ll start with the remote interface:</p><div class="informalfigure"><a id="med_id00636a"></a><div class="mediaobject"><a id="med_id00636"></a><img src="../Images/image01136.jpeg" alt="image with no caption" hisrc="figs/web/458fig01.png.jpg"/></div></div><p>We have one return type that isn’t Serializable: the State class. Let’s fix it up...</p><div class="informalfigure"><a id="med_id00637a"></a><div class="mediaobject"><a id="med_id00637"></a><img src="../Images/image01137.jpeg" alt="image with no caption" hisrc="figs/web/458fig02.png.jpg"/></div></div><p><a id="iddle2217" class="indexterm"></a><a id="iddle2244" class="indexterm"></a>Actually, we’re not done with Serializable yet; we have one problem with State. As you may remember, each State object maintains a reference to a gumball machine so that it can call the gumball machine’s methods and change its state. We don’t want the entire gumball machine serialized and transferred with the State object. There is an easy way to fix this:</p><div class="informalfigure"><a id="med_id00638a"></a><div class="mediaobject"><a id="med_id00638"></a><img src="../Images/image01138.jpeg" alt="image with no caption" hisrc="figs/web/459fig01.png.jpg"/></div></div><p>We’ve already implemented our GumballMachine, but we need to make sure it can act as a service and handle requests coming from over the network. To do that, we have to make sure the GumballMachine is doing everything it needs to implement the GumballMachineRemote interface.</p><p>As you’ve already seen in the RMI detour, this is quite simple; all we need to do is add a couple of things...</p><div class="informalfigure"><a id="med_id00639a"></a><div class="mediaobject"><a id="med_id00639"></a><img src="../Images/image01139.jpeg" alt="image with no caption" hisrc="figs/web/459fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="registering_with_the_rmi_registryhellip">Registering with the RMI registry...</h2></div></div></div><p><a id="iddle1317" class="indexterm"></a><a id="iddle1713" class="indexterm"></a><a id="iddle1989" class="indexterm"></a><a id="iddle2169" class="indexterm"></a><a id="iddle2221" class="indexterm"></a><a id="iddle2226" class="indexterm"></a><a id="iddle2248" class="indexterm"></a>That completes the gumball machine service. Now we just need to fire it up so it can receive requests. First, we need to make sure we register it with the RMI registry so that clients can locate it.</p><p>We’re going to add a little code to the test drive that will take care of this for us:</p><div class="informalfigure"><a id="med_id00640a"></a><div class="mediaobject"><a id="med_id00640"></a><img src="../Images/image01140.jpeg" alt="image with no caption" hisrc="figs/web/460fig01.png.jpg"/></div></div><p>Let’s go ahead and get this running...</p><div class="informalfigure"><a id="med_id00641a"></a><div class="mediaobject"><a id="med_id00641"></a><img src="../Images/image01141.jpeg" alt="image with no caption" hisrc="figs/web/460fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="now_for_the_gumballmonitor_clienthellip">Now for the GumballMonitor client...</h2></div></div></div><p><a id="iddle1318" class="indexterm"></a><a id="iddle1714" class="indexterm"></a><a id="iddle1990" class="indexterm"></a><a id="iddle2170" class="indexterm"></a><a id="iddle2218" class="indexterm"></a><a id="iddle2227" class="indexterm"></a><a id="iddle2245" class="indexterm"></a>Remember the GumballMonitor? We wanted to reuse it without having to rewrite it to work over a network. Well, we’re pretty much going to do that, but we do need to make a few changes.</p><div class="informalfigure"><a id="med_id00642a"></a><div class="mediaobject"><a id="med_id00642"></a><img src="../Images/image01142.jpeg" alt="image with no caption" hisrc="figs/web/461fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00643a"></a><div class="mediaobject"><a id="med_id00643"></a><img src="../Images/image01143.jpeg" alt="image with no caption" hisrc="figs/web/461fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="writing_the_monitor_test_drive">Writing the Monitor test drive</h2></div></div></div><p><a id="iddle1321" class="indexterm"></a><a id="iddle1717" class="indexterm"></a><a id="iddle1993" class="indexterm"></a><a id="iddle2173" class="indexterm"></a><a id="iddle2230" class="indexterm"></a>Now we’ve got all the pieces we need. We just need to write some code so the CEO can monitor a bunch of gumball machines:</p><div class="informalfigure"><a id="med_id00644a"></a><div class="mediaobject"><a id="med_id00644"></a><img src="../Images/image01144.jpeg" alt="image with no caption" hisrc="figs/web/462fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_up_close-id00142"></a><h3 class="title">Code Up Close</h3><div class="informalfigure"><a id="med_id00645a"></a><div class="mediaobject"><a id="med_id00645"></a><img src="../Images/image01145.jpeg" alt="image with no caption" hisrc="figs/web/463fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="another_demo_for_the_ceo_of_mighty_gumba">Another demo for the CEO of Mighty Gumball...</h2></div></div></div><p>Okay, it’s time to put all this work together and give another demo. First let’s make sure a few gumball machines are running the new code:</p><div class="informalfigure"><a id="med_id00646a"></a><div class="mediaobject"><a id="med_id00646"></a><img src="../Images/image01146.jpeg" alt="image with no caption" hisrc="figs/web/463fig02.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="and_now_letapostrophes_put_the_monitor_i">And now let’s put the monitor in the hands of the CEO. Hopefully, this time he’ll love it</h3></div></div></div><div class="informalfigure"><a id="med_id00647a"></a><div class="mediaobject"><a id="med_id00647"></a><img src="../Images/image01147.jpeg" alt="image with no caption" hisrc="figs/web/464fig01.png.jpg"/></div></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>By invoking methods on the proxy, we make a remote call across the wire, and get back a String, an integer, and a State object. Because we are using a proxy, the GumballMonitor doesn’t know, or care, that calls are remote (other than having to worry about remote exceptions).</strong></span></div></blockquote></div><div class="informalfigure"><a id="med_id00648a"></a><div class="mediaobject"><a id="med_id00648"></a><img src="../Images/image01148.jpeg" alt="image with no caption" hisrc="figs/web/465fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="behind_the_scenes-id00143"></a><h3 class="title">Behind the Scenes</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><a id="iddle1141" class="indexterm"></a><a id="iddle1319" class="indexterm"></a><a id="iddle1715" class="indexterm"></a><a id="iddle1991" class="indexterm"></a><a id="iddle2171" class="indexterm"></a><a id="iddle2228" class="indexterm"></a><a id="iddle2257" class="indexterm"></a><a id="iddle2350" class="indexterm"></a><a id="iddle2430" class="indexterm"></a>① The CEO runs the monitor, which first grabs the proxies to the remote gumball machines and then calls getState() on each one (along with getCount() and getLocation()).<div class="informalfigure"><a id="med_id00649a"></a><div class="mediaobject"><a id="med_id00649"></a><img src="../Images/image01149.jpeg" alt="image with no caption" hisrc="figs/web/465fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">② getState() is called on the proxy, which forwards the call to the remote service. The skeleton receives the request and then forwards it to the gumball machine.<div class="informalfigure"><a id="med_id00650a"></a><div class="mediaobject"><a id="med_id00650"></a><img src="../Images/image01150.jpeg" alt="image with no caption" hisrc="figs/web/466fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">③ GumballMachine returns the state to the skeleton, which serializes it and transfers it back over the wire to the proxy. The proxy deserializes it and returns it as an object to the monitor.<div class="informalfigure"><a id="med_id00651a"></a><div class="mediaobject"><a id="med_id00651"></a><img src="../Images/image01151.jpeg" alt="image with no caption" hisrc="figs/web/466fig02.png.jpg"/></div></div></li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note06"></a>Note</h3><p>We also have a small bit of code to register and locate stubs using the RMI registry. But no matter what, if we were writing something to work over the Internet, we’d need some kind of locator service.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="proxy_pattern_defined">The Proxy Pattern defined</h2></div></div></div><p><a id="iddle2160" class="indexterm"></a>We’ve already put a lot of pages behind us in this chapter; as you can see, explaining the Remote Proxy is quite involved. Despite that, you’ll see that the definition and class diagram for the Proxy Pattern is actually fairly straightforward. Note that Remote Proxy is one implementation of the general Proxy Pattern; there are actually quite a few variations of the pattern, and we’ll talk about them later. For now, let’s get the details of the general pattern down.</p><p>Here’s the Proxy Pattern definition:</p><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>Use the Proxy Pattern to create a representative object that controls access to another object, which may be remote, expensive to create, or in need of securing.</strong></span></div></blockquote></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note07"></a>Note</h3><p><span class="strong"><strong>The Proxy Pattern</strong></span> provides a surrogate or placeholder for another object to control access to it.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Well, we’ve seen how the Proxy Pattern provides a surrogate or placeholder for another object. We’ve also described the proxy as a “representative” for another object.</p><p>But what about a proxy controlling access? That sounds a little strange. No worries. In the case of the gumball machine, just think of the proxy controlling access to the remote object. The proxy needed to control access because our client, the monitor, didn’t know how to talk to a remote object. So in some sense the remote proxy controlled access so that it could handle the network details for us. As we just discussed, there are many variations of the Proxy Pattern, and the variations typically revolve around the way the proxy “controls access.” We’re going to talk more about this later, but for now here are a few ways proxies control access:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">As we know, a remote proxy controls access to a remote object.</li><li class="listitem">A virtual proxy controls access to a resource that is expensive to create.</li><li class="listitem">A protection proxy controls access to a resource based on access rights.</li></ul></div><p>Now that you’ve got the gist of the general pattern, check out the class diagram...</p><div class="informalfigure"><a id="med_id00652a"></a><div class="mediaobject"><a id="med_id00652"></a><img src="../Images/image01152.jpeg" alt="image with no caption" hisrc="figs/web/468fig01.png.jpg"/></div></div><p>Let’s step through the diagram...</p><p>First we have a Subject, which provides an interface for the RealSubject and the Proxy. By implementing the same interface, the Proxy can be substituted for the RealSubject anywhere it occurs.</p><p>The RealSubject is the object that does the real work. It’s the object that the Proxy represents and controls access to.</p><p>The Proxy holds a reference to the RealSubject. In some cases, the Proxy may be responsible for creating and destroying the RealSubject. Clients interact with the RealSubject through the Proxy. Because the Proxy and RealSubject implement the same interface (Subject), the Proxy can be substituted anywhere the subject can be used. The Proxy also controls access to the RealSubject; this control may be needed if the Subject is running on a remote machine, if the Subject is expensive to create in some way or if access to the subject needs to be protected in some way.</p><p>Now that you understand the general pattern, let’s look at some other ways of using proxy beyond the Remote Proxy...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="get_ready_for_virtual_proxy">Get ready for Virtual Proxy</h2></div></div></div><p><a id="iddle1325" class="indexterm"></a><a id="iddle1997" class="indexterm"></a><a id="iddle2195" class="indexterm"></a><a id="iddle2496" class="indexterm"></a>Okay, so far you’ve seen the definition of the Proxy Pattern and you’ve taken a look at one specific example: the <span class="emphasis"><em>Remote Proxy</em></span>. Now we’re going to take a look at a different type of proxy, the <span class="emphasis"><em>Virtual Proxy</em></span>. As you’ll discover, the Proxy Pattern can manifest itself in many forms, yet all the forms follow roughly the general proxy design. Why so many forms? Because the Proxy Pattern can be applied to a lot of different use cases. Let’s check out the Virtual Proxy and compare it to Remote Proxy:</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="remote_proxy">Remote Proxy</h3></div></div></div><p>With Remote Proxy, the proxy acts as a local representative for an object that lives in a different JVM. A method call on the proxy results in the call being transferred over the wire, invoked remotely, and the result being returned back to the proxy and then to the Client.</p><div class="informalfigure"><a id="med_id00653a"></a><div class="mediaobject"><a id="med_id00653"></a><img src="../Images/image01153.jpeg" alt="image with no caption" hisrc="figs/web/469fig01.png.jpg"/></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="virtual_proxy">Virtual Proxy</h3></div></div></div><p>Virtual Proxy acts as a representative for an object that may be expensive to create. The Virtual Proxy often defers the creation of the object until it is needed; the Virtual Proxy also acts as a surrogate for the object before and while it is being created. After that, the proxy delegates requests directly to the RealSubject.</p><div class="informalfigure"><a id="med_id00654a"></a><div class="mediaobject"><a id="med_id00654"></a><img src="../Images/image01154.jpeg" alt="image with no caption" hisrc="figs/web/469fig02.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="displaying_cd_covers">Displaying CD covers</h2></div></div></div><p><a id="iddle1092" class="indexterm"></a>Let’s say you want to write an application that displays your favorite compact disc covers. You might create a menu of the CD titles and then retrieve the images from an online service like Amazon.com. If you’re using Swing, you might create an Icon and ask it to load the image from the network. The only problem is, depending on the network load and the bandwidth of your connection, retrieving a CD cover might take a little time, so your application should display something while you are waiting for the image to load. We also don’t want to hang up the entire application while it’s waiting on the image. Once the image is loaded, the message should go away and you should see the image.</p><p>An easy way to achieve this is through a virtual proxy. The virtual proxy can stand in place of the icon, manage the background loading, and before the image is fully retrieved from the network, display “Loading CD cover, please wait...”. Once the image is loaded, the proxy delegates the display to the Icon.</p><div class="informalfigure"><a id="med_id00655a"></a><div class="mediaobject"><a id="med_id00655"></a><img src="../Images/image01155.jpeg" alt="image with no caption" hisrc="figs/web/470fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="designing_the_cd_cover_virtual_proxy">Designing the CD cover Virtual Proxy</h2></div></div></div><p><a id="iddle1094" class="indexterm"></a><a id="iddle1326" class="indexterm"></a><a id="iddle1998" class="indexterm"></a><a id="iddle2198" class="indexterm"></a><a id="iddle2499" class="indexterm"></a>Before writing the code for the CD Cover Viewer, let’s look at the class diagram. You’ll see this looks just like our Remote Proxy class diagram, but here the proxy is used to hide an object that is expensive to create (because we need to retrieve the data for the Icon over the network) as opposed to an object that actually lives somewhere else on the network.</p><div class="informalfigure"><a id="med_id00656a"></a><div class="mediaobject"><a id="med_id00656"></a><img src="../Images/image01156.jpeg" alt="image with no caption" hisrc="figs/web/471fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="how_imageproxy_is_going_to_work">How ImageProxy is going to work</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① ImageProxy first creates an ImageIcon and starts loading it from a network URL.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② While the bytes of the image are being retrieved, ImageProxy displays “Loading CD cover, please wait...”.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ When the image is fully loaded, ImageProxy delegates all method calls to the image icon, including paintIcon(), getWidth() and getHeight().</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ If the user requests a new image, we’ll create a new proxy and start the process over.</strong></span></li></ul></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="writing_the_image_proxy">Writing the Image Proxy</h2></div></div></div><div class="informalfigure"><a id="med_id00657a"></a><div class="mediaobject"><a id="med_id00657"></a><img src="../Images/image01157.jpeg" alt="image with no caption" hisrc="figs/web/472fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_up_close-id00144"></a><h3 class="title">Code Up Close</h3><div class="informalfigure"><a id="med_id00658a"></a><div class="mediaobject"><a id="med_id00658"></a><img src="../Images/image01158.jpeg" alt="image with no caption" hisrc="figs/web/473fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_way_up_close-id00145"></a><h3 class="title">Code Way Up Close</h3><div class="informalfigure"><a id="med_id00659a"></a><div class="mediaobject"><a id="med_id00659"></a><img src="../Images/image01159.jpeg" alt="image with no caption" hisrc="figs/web/474fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note08"></a>Note</h3><p><a id="iddle1097" class="indexterm"></a><a id="iddle1329" class="indexterm"></a><a id="iddle1772" class="indexterm"></a><a id="iddle2001" class="indexterm"></a><a id="iddle2201" class="indexterm"></a><a id="iddle2502" class="indexterm"></a>So, the next time the display is painted after the ImageIcon is instantiated, the paintIcon method will paint the image, not the loading message.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle-id00146"></a><h3 class="title">Design Puzzle</h3><p><a id="iddle1437" class="indexterm"></a><a id="iddle1517" class="indexterm"></a>The ImageProxy class appears to have two states that are controlled by conditional statements. Can you think of another pattern that might clean up this code? How would you redesign ImageProxy?</p><div class="informalfigure"><a id="med_id00660a"></a><div class="mediaobject"><a id="med_id00660"></a><img src="../Images/image01160.jpeg" alt="image with no caption" hisrc="figs/web/475fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="testing_the_cd_cover_viewer">Testing the CD Cover Viewer</h2></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="ready_bake_code"></a><h3 class="title">Ready Bake Code</h3><p><a id="iddle1096" class="indexterm"></a><a id="iddle1328" class="indexterm"></a><a id="iddle2000" class="indexterm"></a><a id="iddle2200" class="indexterm"></a><a id="iddle2501" class="indexterm"></a>Okay, it’s time to test out this fancy new virtual proxy. Behind the scenes we’ve been baking up a new ImageProxyTestDrive that sets up the window, creates a frame, installs the menus and creates our proxy. We don’t go through all that code in gory detail here, but you can always grab the source code and have a look, or check it out at the end of the chapter where we list all the source code for the Virtual Proxy.</p><p>Here’s a partial view of the test drive code:</p><div class="informalfigure"><a id="med_id00661a"></a><div class="mediaobject"><a id="med_id00661"></a><img src="../Images/image01161.jpeg" alt="image with no caption" hisrc="figs/web/476fig01.png.jpg"/></div></div><p>Now let’s run the test drive:</p><div class="informalfigure"><a id="med_id00662a"></a><div class="mediaobject"><a id="med_id00662"></a><img src="../Images/image01162.jpeg" alt="image with no caption" hisrc="figs/web/476fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="things_to_tryhellip">Things to try...</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① Use the menu to load different CD covers; watch the proxy display “loading” until the image has arrived.</li><li class="listitem" style="list-style-type: none">② Resize the window as the “loading” message is displayed. Notice that the proxy is handling the loading without hanging up the Swing window.</li><li class="listitem" style="list-style-type: none">③ Add your own favorite CDs to the ImageProxyTestDrive.</li></ul></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_did_we_doquestion_mark-id00147">What did we do?</h2></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="behind_the_scenes-id00148"></a><h3 class="title">Behind the Scenes</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① <a id="iddle1095" class="indexterm"></a><a id="iddle1327" class="indexterm"></a><a id="iddle1999" class="indexterm"></a><a id="iddle2199" class="indexterm"></a><a id="iddle2500" class="indexterm"></a>We created an ImageProxy for the display. The paintIcon() method is called and ImageProxy fires off a thread to retrieve the image and create the ImageIcon.<div class="informalfigure"><a id="med_id00663a"></a><div class="mediaobject"><a id="med_id00663"></a><img src="../Images/image01163.jpeg" alt="image with no caption" hisrc="figs/web/477fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">② At some point the image is returned and the ImageIcon fully instantiated.</li><li class="listitem" style="list-style-type: none">③ After the ImageIcon is created, the next time paintIcon() is called, the proxy delegates to the ImageIcon.<div class="informalfigure"><a id="med_id00664a"></a><div class="mediaobject"><a id="med_id00664"></a><img src="../Images/image01164.jpeg" alt="image with no caption" hisrc="figs/web/477fig02.png.jpg"/></div></div></li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00149"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch11qa2qe1"></a><a id="ch11qa2q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle1033" class="indexterm"></a><a id="iddle1088" class="indexterm"></a><a id="iddle1303" class="indexterm"></a><a id="iddle1354" class="indexterm"></a><a id="iddle1975" class="indexterm"></a><a id="iddle2150" class="indexterm"></a><a id="iddle2156" class="indexterm"></a><a id="iddle2159" class="indexterm"></a><a id="iddle2179" class="indexterm"></a><a id="iddle2185" class="indexterm"></a><a id="iddle2187" class="indexterm"></a><a id="iddle2193" class="indexterm"></a><a id="iddle2196" class="indexterm"></a><a id="iddle2204" class="indexterm"></a><a id="iddle2206" class="indexterm"></a><a id="iddle2497" class="indexterm"></a><span class="strong"><strong>Q: The Remote Proxy and Virtual Proxy seem so different to me; are they really ONE pattern?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch11qa2q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> You’ll find a lot of variants of the Proxy Pattern in the real world; what they all have in common is that they intercept a method invocation that the client is making on the subject. This level of indirection allows us to do many things, including dispatching requests to a remote subject, providing a representative for an expensive object as it is created, or, as you’ll see, providing some level of protection that can determine which clients should be calling which methods. That’s just the beginning; the general Proxy Pattern can be applied in many different ways, and we’ll cover some of the other ways at the end of the chapter.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch11qa2qe2"></a><a id="ch11qa2q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: ImageProxy seems just like a Decorator to me. I mean, we are basically wrapping one object with another and then delegating the calls to the ImageIcon. What am I missing?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch11qa2q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Sometimes Proxy and Decorator look very similar, but their purposes are different: a decorator adds behavior to a class, while a proxy controls access to it. You might ask, “Isn’t the loading message adding behavior?” In some ways it is; however, more importantly, the ImageProxy is controlling access to an ImageIcon. How does it control access? Well, think about it this way: the proxy is decoupling the client from the ImageIcon. If they were coupled the client would have to wait until each image is retrieved before it could paint its entire interface. The proxy controls access to the ImageIcon so that before it is fully created, the proxy provides another on screen representation. Once the ImageIcon is created the proxy allows access.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch11qa2qe3"></a><a id="ch11qa2q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: How do I make clients use the Proxy rather than the Real Subject?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch11qa2q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Good question. One common technique is to provide a factory that instantiates and returns the subject. Because this happens in a factory method we can then wrap the subject with a proxy before returning it. The client never knows or cares that it’s using a proxy instead of the real thing.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch11qa2qe4"></a><a id="ch11qa2q4"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: I noticed in the ImageProxy example, you always create a new ImageIcon to get the image, even if the image has already been retrieved. Could you implement something similar to the ImageProxy that caches past retrievals?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch11qa2q4a4"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> You are talking about a specialized form of a Virtual Proxy called a Caching Proxy. A caching proxy maintains a cache of previously created objects and when a request is made it returns cached object, if possible.</div><div>We’re going to look at this and at several other variants of the Proxy Pattern at the end of the chapter.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch11qa2qe5"></a><a id="ch11qa2q5"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: I see how Decorator and Proxy relate, but what about Adapter? An adapter seems very similar as well.</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch11qa2q5a5"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Both Proxy and Adapter sit in front of other objects and forward requests to them. Remember that Adapter changes the interface of the objects it adapts, while the Proxy implements the same interface.</div><div>There is one additional similarity that relates to the Protection Proxy. A Protection Proxy may allow or disallow a client access to particular methods in an object based on the role of the client. In this way a Protection Proxy may only provide a partial interface to a client, which is quite similar to some Adapters. We are going to take a look at Protection Proxy in a few pages.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="fireside_chats-id00150"></a><h3 class="title"><code class="literal">Fireside Chats</code></h3><p>Tonight’s talk: <span class="strong"><strong>Proxy and Decorator get intentional.</strong></span></p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Proxy:</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Decorator:</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Hello, Decorator. I presume you’re here because people sometimes get us confused?</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Well, I think the reason people get us confused is that you go around pretending to be an entirely different pattern, when in fact, you’re just a Decorator in disguise. I really don’t think you should be copying all my ideas.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="emphasis"><em>Me</em></span> copying <span class="emphasis"><em>your</em></span> ideas? Please. I control access to objects. You just decorate them. My job is so much more important than yours it’s just not even funny.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>“Just” decorate? You think decorating is some frivolous, unimportant pattern? Let me tell you buddy, I add <span class="emphasis"><em>behavior</em></span>. That’s the most important thing about objects — what they do!</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Fine, so maybe you’re not entirely frivolous... but I still don’t get why you think I’m copying all your ideas. I’m all about representing my subjects, not decorating them.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>You can call it “representation” but if it looks like a duck and walks like a duck... I mean, just look at your Virtual Proxy; it’s just another way of adding behavior to do something while some big expensive object is loading, and your Remote Proxy is a way of talking to remote objects so your clients don’t have to bother with that themselves. It’s all about behavior, just like I said.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>I don’t think you get it, Decorator. I stand in for my Subjects; I don’t just add behavior. Clients use me as a surrogate of a Real Subject, because I can protect them from unwanted access, or keep their GUIs from hanging up while they’re waiting for big objects to load, or hide the fact that their Subjects are running on remote machines. I’d say that’s a very different intent from yours!</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Call it what you want. I implement the same interface as the objects I wrap; so do you.<a id="iddle1322" class="indexterm"></a><a id="iddle1718" class="indexterm"></a><a id="iddle1994" class="indexterm"></a><a id="iddle2174" class="indexterm"></a><a id="iddle2231" class="indexterm"></a><a id="iddle2533" class="indexterm"></a></p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Okay, let’s review that statement. You wrap an object. While sometimes we informally say a proxy wraps its Subject, that’s not really an accurate term.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Oh yeah? Why not?</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Think about a remote proxy... what object am I wrapping? The object I’m representing and controlling access to lives on another machine! Let’s see you do that.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Okay, but we all know remote proxies are kinda weird. Got a second example? I doubt it.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Sure, okay, take a virtual proxy... think about the CD viewer example. When the client first uses me as a proxy the subject doesn’t even exist! So what am I wrapping there?</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Uh huh, and the next thing you’ll be saying is that you actually get to create objects.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>I never knew decorators were so dumb! Of course I sometimes create objects. How do you think a virtual proxy gets its subject?! Okay, you just pointed out a big difference between us: we both know decorators only add window dressing; they never get to instantiate anything.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Oh yeah? Instantiate this!</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Hey, after this conversation I’m convinced you’re just a dumb proxy!</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Dumb proxy? I’d like to see you recursively wrap an object with 10 decorators and keep your head straight at the same time.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Very seldom will you ever see a proxy get into wrapping a subject multiple times; in fact, if you’re wrapping something 10 times, you better go back reexamine your design.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; "> </td><td style="vertical-align: top; "><p>Just like a proxy, acting all real when in fact you just stand in for the objects doing the real work. You know, I actually feel sorry for you.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="using_the_java_apiapostrophes_proxy_to_c">Using the Java API’s Proxy to create a protection proxy</h2></div></div></div><p><a id="iddle1308" class="indexterm"></a><a id="iddle1313" class="indexterm"></a><a id="iddle1468" class="indexterm"></a><a id="iddle1859" class="indexterm"></a><a id="iddle1980" class="indexterm"></a><a id="iddle1985" class="indexterm"></a><a id="iddle2146" class="indexterm"></a><a id="iddle2152" class="indexterm"></a><a id="iddle2176" class="indexterm"></a><a id="iddle2178" class="indexterm"></a><a id="iddle2184" class="indexterm"></a>Java’s got its own proxy support right in the java.lang.reflect package. With this package, Java lets you create a proxy class <span class="emphasis"><em>on the fly</em></span> that implements one or more interfaces and forwards method invocations to a class that you specify. Because the actual proxy class is created at runtime, we refer to this Java technology as a <span class="emphasis"><em>dynamic proxy</em></span>.</p><div class="informalfigure"><a id="med_id00665a"></a><div class="mediaobject"><a id="med_id00665"></a><img src="../Images/image01165.jpeg" alt="image with no caption" hisrc="figs/web/481fig00.png.jpg"/></div></div><p>We’re going to use Java’s dynamic proxy to create our next proxy implementation (a protection proxy), but before we do that, let’s quickly look at a class diagram that shows how dynamic proxies are put together. Like most things in the real world, it differs slightly from the classic definition of the pattern:</p><div class="informalfigure"><a id="med_id00666a"></a><div class="mediaobject"><a id="med_id00666"></a><img src="../Images/image01166.jpeg" alt="image with no caption" hisrc="figs/web/481fig01.png.jpg"/></div></div><p>Because Java creates the Proxy class <span class="emphasis"><em>for you</em></span>, you need a way to tell the Proxy class what to do. You can’t put that code into the Proxy class like we did before, because you’re not implementing one directly. So, if you can’t put this code in the Proxy class, where do you put it? In an InvocationHandler. The job of the InvocationHandler is to respond to any method calls on the proxy. Think of the InvocationHandler as the object the Proxy asks to do all the real work after it’s received the method calls.</p><p>Okay, let’s step through how to use the dynamic proxy...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="matchmaking_in_objectville">Matchmaking in Objectville</h2></div></div></div><div class="informalfigure"><a id="med_id00667a"></a><div class="mediaobject"><a id="med_id00667"></a><img src="../Images/image01167.jpeg" alt="image with no caption" hisrc="figs/web/482fig01.png.jpg"/></div></div><p><a id="iddle1898" class="indexterm"></a>Every town needs a matchmaking service, right? You’ve risen to the task and implemented a dating service for Objectville. You’ve also tried to be innovative by including a “Hot or Not” feature in the service where participants can rate each other — you figure this keeps your customers engaged and looking through possible matches; it also makes things a lot more fun.</p><p>Your service revolves around a PersonBean that allows you to set and get information about a person:</p><div class="informalfigure"><a id="med_id00668a"></a><div class="mediaobject"><a id="med_id00668"></a><img src="../Images/image01168.jpeg" alt="image with no caption" hisrc="figs/web/482fig02.png.jpg"/></div></div><p>Now let’s check out the implementation...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="personbean_implementation">The PersonBean implementation</h2></div></div></div><div class="informalfigure"><a id="med_id00669a"></a><div class="mediaobject"><a id="med_id00669"></a><img src="../Images/image01169.jpeg" alt="image with no caption" hisrc="figs/web/483fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00670a"></a><div class="mediaobject"><a id="med_id00670"></a><img src="../Images/image01170.jpeg" alt="image with no caption" hisrc="figs/web/484fig01.png.jpg"/></div></div><p><a id="iddle1310" class="indexterm"></a><a id="iddle1900" class="indexterm"></a><a id="iddle1982" class="indexterm"></a><a id="iddle2148" class="indexterm"></a><a id="iddle2181" class="indexterm"></a>While we suspect other factors may be keeping Elroy from getting dates, he is right: you shouldn’t be able to vote for yourself or to change another customer’s data. The way our PersonBean is defined, any client can call any of the methods.</p><p>This is a perfect example of where we might be able to use a Protection Proxy. What’s a Protection Proxy? It’s a proxy that controls access to an object based on access rights. For instance, if we had an employee object, a Protection Proxy might allow the employee to call certain methods on the object, a manager to call additional methods (like setSalary()), and a human resources employee to call any method on the object.</p><p>In our dating service we want to make sure that a customer can set his own information while preventing others from altering it. We also want to allow just the opposite with the HotOrNot ratings: we want the other customers to be able to set the rating, but not that particular customer. We also have a number of getter methods in the PersonBean, and because none of these return private information, any customer should be able to call them.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="five-minute_drama_protecting_subjects">Five-minute drama: protecting subjects</h2></div></div></div><div class="informalfigure"><a id="med_id00671a"></a><div class="mediaobject"><a id="med_id00671"></a><img src="../Images/image01171.jpeg" alt="image with no caption" hisrc="figs/web/common21.png.jpg"/></div></div><p><a id="iddle1311" class="indexterm"></a><a id="iddle1901" class="indexterm"></a><a id="iddle1983" class="indexterm"></a><a id="iddle2149" class="indexterm"></a><a id="iddle2182" class="indexterm"></a>The Internet bubble seems a distant memory; those were the days when all you needed to do to find a better, higher-paying job was to walk across the street. Even agents for software developers were in vogue...</p><div class="informalfigure"><a id="med_id00672a"></a><div class="mediaobject"><a id="med_id00672"></a><img src="../Images/image01172.jpeg" alt="image with no caption" hisrc="figs/web/485fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="big_picture_creating_a_dynamic_proxy_for">Big Picture: creating a Dynamic Proxy for the PersonBean</h2></div></div></div><p><a id="iddle1309" class="indexterm"></a><a id="iddle1467" class="indexterm"></a><a id="iddle1899" class="indexterm"></a><a id="iddle1981" class="indexterm"></a><a id="iddle2147" class="indexterm"></a><a id="iddle2180" class="indexterm"></a>We have a couple of problems to fix: customers shouldn’t be changing their own HotOrNot rating and customers shouldn’t be able to change other customers’ personal information. To fix these problems we’re going to create two proxies: one for accessing your own PersonBean object and one for accessing another customer’s PersonBean object. That way, the proxies can control what requests can be made in each circumstance.</p><p>To create these proxies we’re going to use the Java API’s dynamic proxy that you saw a few pages back. Java will create two proxies for us; all we need to do is supply the handlers that know what to do when a method is invoked on the proxy.</p><div class="informalfigure"><a id="med_id00673a"></a><div class="mediaobject"><a id="med_id00673"></a><img src="../Images/image01173.jpeg" alt="image with no caption" hisrc="figs/web/486fig01.png.jpg"/></div></div><p><span class="strong"><strong>Step one:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">Create two <span class="strong"><strong>InvocationHandlers.</strong></span></li><li class="listitem" style="list-style-type: none">InvocationHandlers implement the behavior of the proxy. As you’ll see, Java will take care of creating the actual proxy class and object; we just need to supply a handler that knows what to do when a method is called on it.</li></ul></div><p><span class="strong"><strong>Step two:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">Write the code that creates the dynamic proxies.</li><li class="listitem" style="list-style-type: none">We need to write a little bit of code to generate the proxy class and instantiate it. We’ll step through this code in just a bit.</li></ul></div><p><span class="strong"><strong>Step three:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">Wrap any PersonBean object with the appropriate proxy.</li><li class="listitem" style="list-style-type: none">When we need to use a PersonBean object, either it’s the object of the customer himself (in that case, will call him the “owner”), or it’s another user of the service that the customer is checking out (in that case we’ll call him “non-owner”).</li><li class="listitem" style="list-style-type: none">In either case, we create the appropriate proxy for the PersonBean.</li></ul></div><div class="informalfigure"><a id="med_id00674a"></a><div class="mediaobject"><a id="med_id00674"></a><img src="../Images/image01174.jpeg" alt="image with no caption" hisrc="figs/web/486fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="step_one_creating_invocation_handlers">Step one: creating Invocation Handlers</h2></div></div></div><p><a id="iddle2186" class="indexterm"></a><a id="iddle2205" class="indexterm"></a>We know we need to write two invocation handlers, one for the owner and one for the non-owner. But what are invocation handlers? Here’s the way to think about them: when a method call is made on the proxy, the proxy forwards that call to your invocation handler, but not by calling the invocation handler’s corresponding method. So, what does it call? Have a look at the InvocationHandler interface:</p><div class="informalfigure"><a id="med_id00675a"></a><div class="mediaobject"><a id="med_id00675"></a><img src="../Images/image01175.jpeg" alt="image with no caption" hisrc="figs/web/487fig01.png.jpg"/></div></div><p>There’s only one method, invoke(), and no matter what methods get called on the proxy, the invoke() method is what gets called on the handler. Let’s see how this works:</p><div class="informalfigure"><a id="med_id00676a"></a><div class="mediaobject"><a id="med_id00676"></a><img src="../Images/image01176.jpeg" alt="image with no caption" hisrc="figs/web/487fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="creating_invocation_handlers_continuedhe">Creating Invocation Handlers continued...</h2></div></div></div><p><a id="iddle1860" class="indexterm"></a><a id="iddle2177" class="indexterm"></a><a id="iddle2188" class="indexterm"></a><a id="iddle2207" class="indexterm"></a>When invoke() is called by the proxy, how do you know what to do with the call? Typically, you’ll examine the method that was called on the proxy and make decisions based on the method’s name and possibly its arguments. Let’s implement the OwnerInvocationHandler to see how this works:</p><div class="informalfigure"><a id="med_id00677a"></a><div class="mediaobject"><a id="med_id00677"></a><img src="../Images/image01177.jpeg" alt="image with no caption" hisrc="figs/web/488fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="exercise-id00151"></a><h3 class="title">Exercise</h3><p><a id="iddle1592" class="indexterm"></a>The NonOwnerInvocationHandler works just like the OwnerInvocationHandler except that it <span class="emphasis"><em>allows</em></span> calls to setHotOrNotRating() and it <span class="emphasis"><em>disallows</em></span> calls to any other set method. Go ahead and write this handler yourself:</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="step_two_creating_the_proxy_class_and_in">Step two: creating the Proxy class and instantiating the Proxy object</h2></div></div></div><p><a id="iddle1570" class="indexterm"></a><a id="iddle2189" class="indexterm"></a><a id="iddle2208" class="indexterm"></a><a id="iddle2315" class="indexterm"></a>Now, all we have left is to dynamically create the Proxy class and instantiate the proxy object. Let’s start by writing a method that takes a PersonBean and knows how to create an owner proxy for it. That is, we’re going to create the kind of proxy that forwards its method calls to the OwnerInvocationHandler. Here’s the code:</p><div class="informalfigure"><a id="med_id00678a"></a><div class="mediaobject"><a id="med_id00678"></a><img src="../Images/image01178.jpeg" alt="image with no caption" hisrc="figs/web/490fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00152"></a><h3 class="title">Sharpen your pencil</h3><p>While it is a little complicated, there isn’t much to creating a dynamic proxy. Why don’t you write getNonOwnerProxy(), which returns a proxy for the NonOwnerInvocationHandler:</p><p>Take it further: can you write one method getProxy() that takes a handler and a person and returns a proxy that uses that handler?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="testing_the_matchmaking_service">Testing the matchmaking service</h2></div></div></div><p><a id="iddle1312" class="indexterm"></a><a id="iddle1902" class="indexterm"></a><a id="iddle1984" class="indexterm"></a><a id="iddle2151" class="indexterm"></a><a id="iddle2183" class="indexterm"></a>Let’s give the matchmaking service a test run and see how it controls access to the setter methods based on the proxy that is used.</p><div class="informalfigure"><a id="med_id00679a"></a><div class="mediaobject"><a id="med_id00679"></a><img src="../Images/image01179.jpeg" alt="image with no caption" hisrc="figs/web/491fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="running_the_codehellip">Running the code...</h2></div></div></div><div class="informalfigure"><a id="med_id00680a"></a><div class="mediaobject"><a id="med_id00680"></a><img src="../Images/image01180.jpeg" alt="image with no caption" hisrc="figs/web/492fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00153"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch11qa3qe1"></a><a id="ch11qa3q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle1120" class="indexterm"></a><a id="iddle1466" class="indexterm"></a><a id="iddle2155" class="indexterm"></a><a id="iddle2161" class="indexterm"></a><a id="iddle2190" class="indexterm"></a><span class="strong"><strong>Q: So what exactly is the “dynamic” aspect of dynamic proxies? Is it that I’m instantiating the proxy and setting it to a handler at runtime?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch11qa3q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> No, the proxy is dynamic because its class is created at runtime. Think about it: before your code runs there is no proxy class; it is created on demand from the set of interfaces you pass it.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch11qa3qe2"></a><a id="ch11qa3q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: My InvocationHandler seems like a very strange proxy, it doesn’t implement any of the methods of the class it’s proxying.</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch11qa3q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> That is because the InvocationHandler isn’t a proxy — it is a class that the proxy dispatches to for handling method calls. The proxy itself is created dynamically at runtime by the static Proxy.newProxyInstance() method.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch11qa3qe3"></a><a id="ch11qa3q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Is there any way to tell if a class is a Proxy class?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch11qa3q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Yes. The Proxy class has a static method called isProxyClass(). Calling this method with a class will return true if the class is a dynamic proxy class. Other than that, the proxy class will act like any other class that implements a particular set of interfaces.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch11qa3qe4"></a><a id="ch11qa3q4"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Are there any restrictions on the types of interfaces I can pass into newProxyInstance()?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch11qa3q4a4"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Yes, there are a few. First, it is worth pointing out that we always pass newProxyInstance() an array of interfaces — only interfaces are allowed, no classes. The major restrictions are that all non-public interfaces need to be from the same package. You also can’t have interfaces with clashing method names (that is, two interfaces with a method with the same signature). There are a few other minor nuances as well, so at some point you should take a look at the fine print on dynamic proxies in the javadoc.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark-id00154"></a><h3 class="title">Who Does What?</h3><p><a id="iddle1025" class="indexterm"></a><a id="iddle1347" class="indexterm"></a><a id="iddle1586" class="indexterm"></a><a id="iddle1609" class="indexterm"></a><a id="iddle2162" class="indexterm"></a><a id="iddle2523" class="indexterm"></a>Match each pattern with its description:</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Pattern</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Description</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Decorator</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Wraps another object and provides a different interface to it.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Facade</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Wraps another object and provides additional behavior for it.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Proxy</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Wraps another object to control access to it.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>Adapter</p></td><td style="vertical-align: top; "><p>Wraps a bunch of objects to simplify their interface.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="proxy_zoo">The Proxy Zoo</h2></div></div></div><p><a id="iddle1089" class="indexterm"></a><a id="iddle1304" class="indexterm"></a><a id="iddle1307" class="indexterm"></a><a id="iddle1323" class="indexterm"></a><a id="iddle1677" class="indexterm"></a><a id="iddle1976" class="indexterm"></a><a id="iddle1979" class="indexterm"></a><a id="iddle1995" class="indexterm"></a><a id="iddle2165" class="indexterm"></a><a id="iddle2191" class="indexterm"></a><a id="iddle2194" class="indexterm"></a><a id="iddle2197" class="indexterm"></a><a id="iddle2352" class="indexterm"></a><a id="iddle2498" class="indexterm"></a>Welcome to the Objectville Zoo!</p><div class="informalfigure"><a id="med_id00681a"></a><div class="mediaobject"><a id="med_id00681"></a><img src="../Images/image01181.jpeg" alt="image with no caption" hisrc="figs/web/494fig01.png.jpg"/></div></div><p>You now know about the remote, virtual and protection proxies, but out in the wild you’re going to see lots of mutations of this pattern. Over here in the Proxy corner of the zoo we’ve got a nice collection of wild proxy patterns that we’ve captured for your study.</p><p>Our job isn’t done; we are sure you’re going to see more variations of this pattern in the real world, so give us a hand in cataloging more proxies. Let’s take a look at the existing collection:</p><div class="informalfigure"><a id="med_id00682a"></a><div class="mediaobject"><a id="med_id00682"></a><img src="../Images/image01182.jpeg" alt="image with no caption" hisrc="figs/web/494fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00683a"></a><div class="mediaobject"><a id="med_id00683"></a><img src="../Images/image01183.jpeg" alt="image with no caption" hisrc="figs/web/495fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch11note09"></a>Note</h3><p><a id="iddle1223" class="indexterm"></a><a id="iddle1305" class="indexterm"></a><a id="iddle1306" class="indexterm"></a><a id="iddle1324" class="indexterm"></a><a id="iddle1330" class="indexterm"></a><a id="iddle1605" class="indexterm"></a><a id="iddle1977" class="indexterm"></a><a id="iddle1978" class="indexterm"></a><a id="iddle1996" class="indexterm"></a><a id="iddle2157" class="indexterm"></a><a id="iddle2158" class="indexterm"></a><a id="iddle2192" class="indexterm"></a><a id="iddle2451" class="indexterm"></a>Field Notes: please add your observations of other proxies in the wild here:</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>____________________________________________________</p><p>____________________________________________________</p><p>____________________________________________________</p><p>____________________________________________________</p><p>____________________________________________________</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword-id00155"></a><h3 class="title">Design Patterns Crossword</h3><p>It’s been a LONG chapter. Why not unwind by doing a crossword puzzle before it ends?</p><div class="informalfigure"><a id="med_id00684a"></a><div class="mediaobject"><a id="med_id00684"></a><img src="../Images/image01184.gif" alt="image with no caption" hisrc="figs/web/496fig01.png"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Across</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Down</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>1. Our first mistake: the gumball machine reporting was not _________.</p>
<p>5. Commonly used proxy for web services (two words).</p>
<p>7. Objectville matchmaking gimmick (three words).</p>
<p>11. A _______ proxy class is created at runtime.</p>
<p>13. Java’s dynamic proxy forwards all requests to this (two words).</p>
<p>16. In RMI, the object that takes the network requests on the service side.</p>
<p>17. The CD viewer used this kind of proxy.</p></td><td style="vertical-align: top; "><p>2. Remote _________ was used to implement the gumball machine monitor (two words).</p>
<p>3. Similar to proxy, but with a different purpose.</p>
<p>4. Place to learn about the many proxy variants.</p>
<p>6. Proxy that protects method calls from unauthorized callers.</p>
<p>8. This utility acts as a lookup service for RMI.</p>
<p>9. Why Elroy couldn’t get dates.</p>
<p>10. Software developer agent was being this kind of proxy.</p>
<p>12. In RMI, the proxy is called this.</p>
<p>14. Proxy that stands in for expensive objects.</p>
<p>15. We took one of these to learn RMI.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00156">Tools for your Design Toolbox</h2></div></div></div><p>Your design toolbox is almost full; you’re prepared for almost any design problem that comes your way.</p><div class="informalfigure"><a id="med_id00685a"></a><div class="mediaobject"><a id="med_id00685"></a><img src="../Images/image01185.jpeg" alt="image with no caption" hisrc="figs/web/497fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00157"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The Proxy Pattern provides a representative for another object in order to control the client’s access to it. There are a number of ways it can manage that access.</li><li class="listitem">A Remote Proxy manages interaction between a client and a remote object.</li><li class="listitem">A Virtual Proxy controls access to an object that is expensive to instantiate.</li><li class="listitem">A Protection Proxy controls access to the methods of an object based on the caller.</li><li class="listitem">Many other variants of the Proxy Pattern exist including caching proxies, synchronization proxies, firewall proxies, copy-on-write proxies, and so on.</li><li class="listitem">Proxy is structurally similar to Decorator, but the two differ in their purpose.</li><li class="listitem">The Decorator Pattern adds behavior to an object, while a Proxy controls access.</li><li class="listitem">Java’s built-in support for Proxy can build a dynamic proxy class on demand and dispatch all calls on it to a handler of your choosing.</li><li class="listitem">Like any wrapper, proxies will increase the number of classes and objects in your designs.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="exercise_solution-id00158"></a><h3 class="title">Exercise Solution</h3><p><a id="iddle1438" class="indexterm"></a><a id="iddle1518" class="indexterm"></a><a id="iddle1593" class="indexterm"></a>The NonOwnerInvocationHandler works just like the OwnerInvocationHandler except that it <span class="emphasis"><em>allows</em></span> calls to setHotOrNotRating() and it <span class="emphasis"><em>disallows</em></span> calls to any other set method. Here’s our solution:</p><a id="pro_id00041"></a><pre class="programlisting"><span class="strong"><strong>import java.lang.reflect.*;</strong></span>

<span class="strong"><strong>public class NonOwnerInvocationHandler implements InvocationHandler {</strong></span>
    <span class="strong"><strong>PersonBean person;</strong></span>

    <span class="strong"><strong>public NonOwnerInvocationHandler(PersonBean person) {</strong></span>
        <span class="strong"><strong>this.person = person;</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public Object invoke(Object proxy, Method method, Object[] args)</strong></span>
            <span class="strong"><strong>throws IllegalAccessException {</strong></span>

        <span class="strong"><strong>try {</strong></span>
            <span class="strong"><strong>if (method.getName().startsWith("get")) {</strong></span>
                <span class="strong"><strong>return method.invoke(person, args);</strong></span>
            <span class="strong"><strong>} else if (method.getName().equals("setHotOrNotRating")) {</strong></span>
                <span class="strong"><strong>return method.invoke(person, args);</strong></span>
            <span class="strong"><strong>} else if (method.getName().startsWith("set")) {</strong></span>
                <span class="strong"><strong>throw new IllegalAccessException();</strong></span>
            <span class="strong"><strong>}</strong></span>
        <span class="strong"><strong>} catch (InvocationTargetException e) {</strong></span>
            <span class="strong"><strong>e.printStackTrace();</strong></span>
        <span class="strong"><strong>}</strong></span>
        <span class="strong"><strong>return null;</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle_solution-id00159"></a><h3 class="title">Design Puzzle Solution</h3><p>The ImageProxy class appears to have two states that are controlled by conditional statements. Can you think of another pattern that might clean up this code? How would you redesign ImageProxy?</p><p>Use State Pattern: implement two states, ImageLoaded and ImageNotLoaded. Then put the code from the if statements into their respective states. Start in the ImageNotLoaded state and then transition to the ImageLoaded state once the ImageIcon had been retrieved.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00160"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1571" class="indexterm"></a><a id="iddle2316" class="indexterm"></a>While it is a little complicated, there isn’t much to creating a dynamic proxy. Why don’t you write getNonOwnerProxy(), which returns a proxy for the NonOwnerInvocationHandler. Here’s our solution:</p><a id="pro_id00042"></a><pre class="programlisting"><span class="strong"><strong>PersonBean getNonOwnerProxy(PersonBean person) {</strong></span>

    <span class="strong"><strong>return (PersonBean) Proxy.newProxyInstance(</strong></span>
            <span class="strong"><strong>person.getClass().getClassLoader(),</strong></span>
            <span class="strong"><strong>person.getClass().getInterfaces(),</strong></span>
            <span class="strong"><strong>new NonOwnerInvocationHandler(person));</strong></span>
<span class="strong"><strong>}</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword_soluti-id00161"></a><h3 class="title">Design Patterns Crossword Solution</h3><div class="informalfigure"><a id="med_id00686a"></a><div class="mediaobject"><a id="med_id00686"></a><img src="../Images/image01186.gif" alt="image with no caption" hisrc="figs/web/499fig01.png"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark_solut-id00162"></a><h3 class="title">Who Does What? Solution</h3><p><a id="iddle1587" class="indexterm"></a><a id="iddle2524" class="indexterm"></a>Match each pattern with its description:</p><div class="informalfigure"><a id="med_id00687a"></a><div class="mediaobject"><a id="med_id00687"></a><img src="../Images/image01187.jpeg" alt="image with no caption" hisrc="figs/web/500fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="code_for_the_cd_cover_viewer">The code for the CD Cover Viewer</h2></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="ready_bake_code-id00163"></a><h3 class="title">Ready Bake Code</h3><a id="pro_id00043"></a><pre class="programlisting"><span class="strong"><strong>package headfirst.designpatterns.proxy.virtualproxy;</strong></span>

<span class="strong"><strong>import java.net.*;</strong></span>
<span class="strong"><strong>import java.awt.*;</strong></span>
<span class="strong"><strong>import java.awt.event.*;</strong></span>
<span class="strong"><strong>import javax.swing.*;</strong></span>
<span class="strong"><strong>import java.util.*;</strong></span>
<span class="strong"><strong>public class ImageProxyTestDrive {</strong></span>
    <span class="strong"><strong>ImageComponent imageComponent;</strong></span>
    <span class="strong"><strong>JFrame frame = new JFrame("CD Cover Viewer");</strong></span>
    <span class="strong"><strong>JMenuBar menuBar;</strong></span>
    <span class="strong"><strong>JMenu menu;</strong></span>
    <span class="strong"><strong>Hashtable&lt;String, String&gt; cds = new Hashtable&lt;String, String&gt;();</strong></span>

    <span class="strong"><strong>public static void main (String[] args) throws Exception {</strong></span>
        <span class="strong"><strong>ImageProxyTestDrive testDrive = new ImageProxyTestDrive();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public ImageProxyTestDrive() throws Exception{</strong></span>
        <span class="strong"><strong>cds.put("Buddha Bar","http://images.amazon.com/images/P/B00009XBYK.01.LZZZZZZZ.</strong></span>
<span class="strong"><strong>jpg");</strong></span>
        <span class="strong"><strong>cds.put("Ima","http://images.amazon.com/images/P/B000005IRM.01.LZZZZZZZ.jpg");</strong></span>
        <span class="strong"><strong>cds.put("Karma","http://images.amazon.com/images/P/B000005DCB.01.LZZZZZZZ.gif");</strong></span>
        <span class="strong"><strong>cds.put("MCMXC A.D.","http://images.amazon.com/images/P/B000002URV.01.LZZZZZZZ.</strong></span>
<span class="strong"><strong>jpg");</strong></span>
        <span class="strong"><strong>cds.put("Northern Exposure","http://images.amazon.com/images/P/B000003SFN.01.</strong></span>
<span class="strong"><strong>LZZZZZZZ.jpg");</strong></span>
        <span class="strong"><strong>cds.put("Selected Ambient Works, Vol. 2","http://images.amazon.com/images/P/</strong></span>
<span class="strong"><strong>B000002MNZ.01.LZZZZZZZ.jpg");</strong></span>

        <span class="strong"><strong>URL initialURL = new URL((String)cds.get("Selected Ambient Works, Vol. 2"));</strong></span>
        <span class="strong"><strong>menuBar = new JMenuBar();</strong></span>
        <span class="strong"><strong>menu = new JMenu("Favorite CDs");</strong></span>
        <span class="strong"><strong>menuBar.add(menu);</strong></span>
        <span class="strong"><strong>frame.setJMenuBar(menuBar);</strong></span>
        <span class="strong"><strong>for(Enumeration e = cds.keys(); e.hasMoreElements();) {</strong></span>
            <span class="strong"><strong>String name = (String)e.nextElement();</strong></span>
            <span class="strong"><strong>JMenuItem menuItem = new JMenuItem(name);</strong></span>
            <span class="strong"><strong>menu.add(menuItem);</strong></span>
            <span class="strong"><strong>menuItem.addActionListener(event -&gt; {</strong></span>
                <span class="strong"><strong>imageComponent.setIcon(new ImageProxy(getCDUrl(event.getActionCommand())));</strong></span>
                <span class="strong"><strong>frame.repaint();</strong></span>
            <span class="strong"><strong>});</strong></span>
        <span class="strong"><strong>}</strong></span>

        <span class="strong"><strong>// set up frame and menus</strong></span>

        <span class="strong"><strong>Icon icon = new ImageProxy(initialURL);</strong></span>
        <span class="strong"><strong>imageComponent = new ImageComponent(icon);</strong></span>
        <span class="strong"><strong>frame.getContentPane().add(imageComponent);</strong></span>
        <span class="strong"><strong>frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</strong></span>
        <span class="strong"><strong>frame.setSize(800,600);</strong></span>
        <span class="strong"><strong>frame.setVisible(true);</strong></span>

    <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>URL getCDUrl(String name) {</strong></span>
        <span class="strong"><strong>try {</strong></span>
            <span class="strong"><strong>return new URL((String)cds.get(name));</strong></span>
        <span class="strong"><strong>} catch (MalformedURLException e) {</strong></span>
            <span class="strong"><strong>e.printStackTrace();</strong></span>
            <span class="strong"><strong>return null;</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span>
<span class="strong"><strong>package headfirst.designpatterns.proxy.virtualproxy;</strong></span>

<span class="strong"><strong>import java.net.*;</strong></span>
<span class="strong"><strong>import java.awt.*;</strong></span>
<span class="strong"><strong>import javax.swing.*;</strong></span>

<span class="strong"><strong>class ImageProxy implements Icon {</strong></span>
    <span class="strong"><strong>volatile ImageIcon imageIcon;</strong></span>
    <span class="strong"><strong>final URL imageURL;</strong></span>
    <span class="strong"><strong>Thread retrievalThread;</strong></span>
    <span class="strong"><strong>boolean retrieving = false;</strong></span>

    <span class="strong"><strong>public ImageProxy(URL url) { imageURL = url; }</strong></span>

    <span class="strong"><strong>public int getIconWidth() {</strong></span>
        <span class="strong"><strong>if (imageIcon != null) {</strong></span>
            <span class="strong"><strong>return imageIcon.getIconWidth();</strong></span>
        <span class="strong"><strong>} else {</strong></span>
            <span class="strong"><strong>return 800;</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public int getIconHeight() {</strong></span>
        <span class="strong"><strong>if (imageIcon != null) {</strong></span>
            <span class="strong"><strong>return imageIcon.getIconHeight();</strong></span>
        <span class="strong"><strong>} else {</strong></span>
            <span class="strong"><strong>return 600;</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>synchronized void setImageIcon(ImageIcon imageIcon) {</strong></span>
        <span class="strong"><strong>this.imageIcon = imageIcon;</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void paintIcon(final Component c, Graphics g, int x, int y) {</strong></span>
        <span class="strong"><strong>if (imageIcon != null) {</strong></span>
            <span class="strong"><strong>imageIcon.paintIcon(c, g, x, y);</strong></span>
        <span class="strong"><strong>} else {</strong></span>
            <span class="strong"><strong>g.drawString("Loading CD cover, please wait...", x+300, y+190);</strong></span>
            <span class="strong"><strong>if (!retrieving) {</strong></span>
                <span class="strong"><strong>retrieving = true;</strong></span>
                <span class="strong"><strong>retrievalThread = new Thread(new Runnable() {</strong></span>
                    <span class="strong"><strong>public void run() {</strong></span>
                        <span class="strong"><strong>try {</strong></span>
                            <span class="strong"><strong>setImageIcon(new ImageIcon(imageURL, "CD Cover"));</strong></span>
                            <span class="strong"><strong>c.repaint();</strong></span>
                        <span class="strong"><strong>} catch (Exception e) {</strong></span>
                            <span class="strong"><strong>e.printStackTrace();</strong></span>
                        <span class="strong"><strong>}</strong></span>
                    <span class="strong"><strong>}</strong></span>
                <span class="strong"><strong>});</strong></span>
                <span class="strong"><strong>retrievalThread.start();</strong></span>
            <span class="strong"><strong>}</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span>
<span class="strong"><strong>package headfirst.designpatterns.proxy.virtualproxy;</strong></span>

<span class="strong"><strong>import java.awt.*;</strong></span>
<span class="strong"><strong>import javax.swing.*;</strong></span>

<span class="strong"><strong>class ImageComponent extends JComponent {</strong></span>
    <span class="strong"><strong>private Icon icon;</strong></span>

    <span class="strong"><strong>public ImageComponent(Icon icon) {</strong></span>
        <span class="strong"><strong>this.icon = icon;</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void setIcon(Icon icon) {</strong></span>
        <span class="strong"><strong>this.icon = icon;</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void paintComponent(Graphics g) {</strong></span>
        <span class="strong"><strong>super.paintComponent(g);</strong></span>
        <span class="strong"><strong>int w = icon.getIconWidth();</strong></span>
        <span class="strong"><strong>int h = icon.getIconHeight();</strong></span>
        <span class="strong"><strong>int x = (800 - w)/2;</strong></span>
        <span class="strong"><strong>int y = (600 - h)/2;</strong></span>
        <span class="strong"><strong>icon.paintIcon(this, g, x, y);</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>