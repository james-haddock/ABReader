<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 5. The Singleton Pattern: One of a Kind Objects</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch04.html"/><link rel="next" href="ch06.html"/></head><body><section class="chapter" epub:type="chapter" id="singleton_pattern_one_of_a_kind_objects"><div class="titlepage" id="aid-BE6O2"><div><div><h2 class="title">Chapter 5. The Singleton Pattern: One of a Kind Objects</h2></div></div></div><div class="informalfigure"><a id="med_id00240a"></a><div class="mediaobject"><a id="med_id00240"></a><img src="../Images/image00737.jpeg" alt="image with no caption" hisrc="figs/web/171fig01.png.jpg"/></div></div><p><a id="iddle1414" class="indexterm"></a><a id="iddle2330" class="indexterm"></a><span class="strong"><strong>Our next stop is the Singleton Pattern, our ticket to creating one-of-a-kind objects for which there is only one instance.</strong></span> You might be happy to know that of all patterns, the Singleton is the simplest in terms of its class diagram; in fact, the diagram holds just a single class! But don’t get too comfortable; despite its simplicity from a class design perspective, we are going to encounter quite a few bumps and potholes in its implementation. So buckle up.</p><div class="informalfigure"><a id="med_id00241a"></a><div class="mediaobject"><a id="med_id00241"></a><img src="../Images/image00738.jpeg" alt="image with no caption" hisrc="figs/web/172fig01.png.jpg"/></div></div><p><a id="iddle1792" class="indexterm"></a><a id="iddle2331" class="indexterm"></a><span class="strong"><strong>Developer:</strong></span> What use is that?</p><p><span class="strong"><strong>Guru:</strong></span> There are many objects we only need one of: thread pools, caches, dialog boxes, objects that handle preferences and registry settings, objects used for logging, and objects that act as device drivers to devices like printers and graphics cards. In fact, for many of these types of objects, if we were to instantiate more than one we’d run into all sorts of problems like incorrect program behavior, overuse of resources, or inconsistent results.</p><p><span class="strong"><strong>Developer:</strong></span> Okay, so maybe there are classes that should only be instantiated once, but do I need a whole chapter for this? Can’t I just do this by convention or by global variables? You know, like in Java, I could do it with a static variable.</p><p><span class="strong"><strong>Guru:</strong></span> In many ways, the Singleton Pattern <span class="strong"><strong>is a convention</strong></span> for ensuring one and only one object is instantiated for a given class. If you’ve got a better one, the world would like to hear about it; but remember, like all patterns, the Singleton Pattern is a time-tested method for ensuring only one object gets created. The Singleton Pattern also gives us a global point of access, just like a global variable, but without the downsides.</p><p><span class="strong"><strong>Developer:</strong></span> What downsides?</p><p><span class="strong"><strong>Guru:</strong></span> Well, here’s one example: if you assign an object to a global variable, then that object might be created when your application begins. Right? What if this object is resource intensive and your application never ends up using it? As you will see, with the Singleton Pattern, we can create our objects only when they are needed.</p><p><span class="strong"><strong>Developer:</strong></span> This still doesn’t seem like it should be so difficult.</p><p><span class="strong"><strong>Guru:</strong></span> If you’ve got a good handle on static class variables and methods as well as access modifiers, it’s not. But, in either case, it is interesting to see how a Singleton works, and, as simple as it sounds, Singleton code is hard to get right. Just ask yourself: how do I prevent more than one object from being instantiated? It’s not so obvious, is it?</p><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="little_singleton">The Little Singleton</h2></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="small_socratic_exercise_in_the_style_of">A small Socratic exercise in the style of The Little Lisper</h3></div></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><a id="iddle2022" class="indexterm"></a><a id="iddle2328" class="indexterm"></a>How would you create a single object?</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><a id="pro_id00014"></a><pre class="programlisting"><span class="strong"><strong>new MyObject();</strong></span></pre></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>And, what if another object wanted to create a MyObject? Could it call new on MyObject again?</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Yes, of course.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>So as long as we have a class, can we always instantiate it one or more times?</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Yes. Well, only if it’s a public class.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>And if not?</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Well, if it’s not a public class, only classes in the same package can instantiate it. But they can still instantiate it more than once.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Hmm, interesting.</p>
<p>Did you know you could do this?</p>
<p><span class="inlinemediaobject"><a id="inline_id00242a"></a><img src="../Images/image00739.jpeg" alt="" hisrc="figs/web/173fig01.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>No, I’d never thought of it, but I guess it makes sense because it is a legal definition.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>What does it mean?</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>I suppose it is a class that can’t be instantiated because it has a private constructor.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Well, is there ANY object that could use the private constructor?</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Hmm, I think the code in MyClass is the only code that could call it. But that doesn’t make much sense.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Why not?</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Because I’d have to have an instance of the class to call it, but I can’t have an instance because no other class can instantiate it. It’s a chicken-and-egg problem: I can use the constructor from an object of type MyClass, but I can never instantiate that object because no other object can use “new MyClass()”.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Okay. It was just a thought.</p>
<p>What does this mean?</p>
<p><span class="inlinemediaobject"><a id="inline_id00243a"></a><img src="../Images/image00740.jpeg" alt="" hisrc="figs/web/174fig01.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>MyClass is a class with a static method. We can call the static method like this:</p>
<a id="pro_id00015"></a><pre class="programlisting"><span class="strong"><strong>MyClass.getInstance();</strong></span></pre></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Why did you use MyClass, instead of some object name?</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Well, getInstance() is a static method; in other words, it is a CLASS method. You need to use the class name to reference a static method.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Very interesting. What if we put things together.</p>
<p><span class="emphasis"><em>Now</em></span> can I instantiate a MyClass?</p>
<p><span class="inlinemediaobject"><a id="inline_id00244a"></a><img src="../Images/image00741.jpeg" alt="" hisrc="figs/web/174fig02.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Wow, you sure can.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>So, now can you think of a second way to instantiate an object?</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><a id="pro_id00016"></a><pre class="programlisting"><span class="strong"><strong>MyClass.getInstance();</strong></span></pre></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>Can you finish the code so that only ONE instance of MyClass is ever created?</p></td><td style="vertical-align: top; "><p>Yes, I think so...</p>
<p>(You’ll find the code on the next page.)</p></td></tr></tbody></table></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="dissecting_the_classic_singleton_pattern">Dissecting the classic Singleton Pattern implementation</h2></div></div></div><div class="informalfigure"><a id="med_id00245a"></a><div class="mediaobject"><a id="med_id00245"></a><img src="../Images/image00742.jpeg" alt="image with no caption" hisrc="figs/web/175fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch05note01"></a>Watch it!</h3><p><a id="iddle2335" class="indexterm"></a><a id="iddle2343" class="indexterm"></a>If you’re just flipping through the book, don’t blindly type in this code; you’ll see it has a few issues later in the chapter.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_up_close-id00046"></a><h3 class="title">Code Up Close</h3><div class="informalfigure"><a id="med_id00246a"></a><div class="mediaobject"><a id="med_id00246"></a><img src="../Images/image00743.jpeg" alt="image with no caption" hisrc="figs/web/175fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="patterns_exposed-id00047"></a><h3 class="title">Patterns Exposed</h3><p><a id="iddle2023" class="indexterm"></a><a id="iddle2329" class="indexterm"></a><span class="strong"><strong>This week’s interview: Confessions of a Singleton</strong></span></p><p><span class="strong"><strong>HeadFirst:</strong></span> Today we are pleased to bring you an interview with a Singleton object. Why don’t you begin by telling us a bit about yourself.</p><p><span class="strong"><strong>Singleton:</strong></span> Well, I’m totally unique; there is just one of me!</p><p><span class="strong"><strong>HeadFirst:</strong></span> One?</p><p><span class="strong"><strong>Singleton:</strong></span> Yes, one. I’m based on the Singleton Pattern, which assures that at any time there is only one instance of me.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Isn’t that sort of a waste? Someone took the time to develop a full-blown class and now all we can get is one object out of it?</p><p><span class="strong"><strong>Singleton:</strong></span> Not at all! There is power in ONE. Let’s say you have an object that contains registry settings. You don’t want multiple copies of that object and its values running around — that would lead to chaos. By using an object like me you can assure that every object in your application is making use of the same global resource.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Tell us more...</p><p><span class="strong"><strong>Singleton:</strong></span> Oh, I’m good for all kinds of things. Being single sometimes has its advantages you know. I’m often used to manage pools of resources, like connection or thread pools.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Still, only one of your kind? That sounds lonely.</p><p><span class="strong"><strong>Singleton:</strong></span> Because there’s only one of me, I do keep busy, but it would be nice if more developers knew me — many developers run into bugs because they have multiple copies of objects floating around they’re not even aware of.</p><p><span class="strong"><strong>HeadFirst:</strong></span> So, if we may ask, how do you know there is only one of you? Can’t anyone with a new operator create a “new you”?</p><p><span class="strong"><strong>Singleton:</strong></span> Nope! I’m truly unique.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Well, do developers swear an oath not to instantiate you more than once?</p><p><span class="strong"><strong>Singleton:</strong></span> Of course not. The truth be told... well, this is getting kind of personal but... I have no public constructor.</p><p><span class="strong"><strong>HeadFirst:</strong></span> NO PUBLIC CONSTRUCTOR! Oh, sorry, no public constructor?</p><p><span class="strong"><strong>Singleton:</strong></span> That’s right. My constructor is declared private.</p><p><span class="strong"><strong>HeadFirst:</strong></span> How does that work? How do you EVER get instantiated?</p><p><span class="strong"><strong>Singleton:</strong></span> You see, to get a hold of a Singleton object, you don’t instantiate one, you just ask for an instance. So my class has a static method called getInstance(). Call that, and I’ll show up at once, ready to work. In fact, I may already be helping other objects when you request me.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Well, Mr. Singleton, there seems to be a lot under your covers to make all this work. Thanks for revealing yourself and we hope to speak with you again soon!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="chocolate_factory">The Chocolate Factory</h2></div></div></div><p><a id="iddle1102" class="indexterm"></a><a id="iddle2332" class="indexterm"></a>Everyone knows that all modern chocolate factories have computer-controlled chocolate boilers. The job of the boiler is to take in chocolate and milk, bring them to a boil, and then pass them on to the next phase of making chocolate bars.</p><p>Here’s the controller class for Choc-O-Holic, Inc.’s industrial strength Chocolate Boiler. Check out the code; you’ll notice they’ve tried to be very careful to ensure that bad things don’t happen, like draining 500 gallons of unboiled mixture, or filling the boiler when it’s already full, or boiling an empty boiler!</p><div class="informalfigure"><a id="med_id00247a"></a><div class="mediaobject"><a id="med_id00247"></a><img src="../Images/image00744.jpeg" alt="image with no caption" hisrc="figs/web/177fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00248a"></a><div class="mediaobject"><a id="med_id00248"></a><img src="../Images/image00745.jpeg" alt="image with no caption" hisrc="figs/web/177fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch05note02"></a>Brain Power</h3><p><a id="iddle1562" class="indexterm"></a><a id="iddle2307" class="indexterm"></a>Choc-O-Holic has done a decent job of ensuring bad things don’t happen, don’t ya think? Then again, you probably suspect that if two ChocolateBoiler instances get loose, some very bad things can happen.</p><p>How might things go wrong if more than one instance of ChocolateBoiler is created in an application?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00048"></a><h3 class="title">Sharpen your pencil</h3><p>Can you help Choc-O-Holic improve their ChocolateBoiler class by turning it into a singleton?</p><div class="informalfigure"><a id="med_id00249a"></a><div class="mediaobject"><a id="med_id00249"></a><img src="../Images/image00746.jpeg" alt="image with no caption" hisrc="figs/web/178fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="singleton_pattern_defined">Singleton Pattern defined</h2></div></div></div><p><a id="iddle1686" class="indexterm"></a><a id="iddle1880" class="indexterm"></a><a id="iddle2334" class="indexterm"></a><a id="iddle2338" class="indexterm"></a><span class="strong"><strong>Now that you’ve got the classic implementation of Singleton in your head, it’s time to sit back, enjoy a bar of chocolate, and check out the finer points of the Singleton Pattern.</strong></span></p><p><span class="strong"><strong>Let’s start with the concise definition of the pattern:</strong></span></p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch05note03"></a>Note</h3><p><span class="strong"><strong>The Singleton Pattern</strong></span> ensures a class has only one instance, and provides a global point of access to it.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><span class="strong"><strong>No big surprises there. But let’s break it down a bit more:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">What’s really going on here? We’re taking a class and letting it manage a single instance of itself. We’re also preventing any other class from creating a new instance on its own. To get an instance, you’ve got to go through the class itself.</li><li class="listitem">We’re also providing a global access point to the instance: whenever you need an instance, just query the class and it will hand you back the single instance. As you’ve seen, we can implement this so that the Singleton is created in a lazy manner, which is especially important for resource-intensive objects.</li></ul></div><p><span class="strong"><strong>Okay, let’s check out the class diagram:</strong></span></p><div class="informalfigure"><a id="med_id00250a"></a><div class="mediaobject"><a id="med_id00250"></a><img src="../Images/image00747.jpeg" alt="image with no caption" hisrc="figs/web/179fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="houstoncomma_hersheycomma_pa_we_have_a_p"><span class="strikethrough">Houston,</span> Hershey, PA we have a problem...</h2></div></div></div><p><span class="strong"><strong>It looks like the Chocolate Boiler has let us down; despite the fact we improved the code using Classic Singleton, somehow the ChocolateBoiler’s fill() method was able to start filling the boiler even though a batch of milk and chocolate was already boiling! That’s 500 gallons of spilled milk (and chocolate)! What happened!?</strong></span></p><div class="informalfigure"><a id="med_id00251a"></a><div class="mediaobject"><a id="med_id00251"></a><img src="../Images/image00748.jpeg" alt="image with no caption" hisrc="figs/web/180fig01.png.jpg"/></div></div><p><span class="strong"><strong>Could the addition of threads have caused this? Isn’t it the case that once we’ve set the uniqueInstance variable to the sole instance of ChocolateBoiler, all calls to getInstance() should return the same instance? Right?</strong></span></p><div class="informalfigure"><a id="med_id00252a"></a><div class="mediaobject"><a id="med_id00252"></a><img src="../Images/image00749.jpeg" alt="image with no caption" hisrc="figs/web/180fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="be_the_jvm"></a><h3 class="title">BE the JVM</h3><p><a id="iddle1083" class="indexterm"></a><a id="iddle1334" class="indexterm"></a><a id="iddle1503" class="indexterm"></a><a id="iddle2336" class="indexterm"></a><span class="strong"><strong>We have two threads, each executing this code. Your job is to play the JVM and determine whether there is a case in which two threads might get ahold of different boiler objects. Hint: you really just need to look at the sequence of operations in the getInstance() method and the value of uniqueInstance to see how they might overlap. Use the code magnets to help you study how the code might interleave to create two boiler objects.</strong></span></p><div class="informalfigure"><a id="med_id00253a"></a><div class="mediaobject"><a id="med_id00253"></a><img src="../Images/image00750.jpeg" alt="image with no caption" hisrc="figs/web/181fig01.png.jpg"/></div></div><p><span class="strong"><strong>Make sure you check your answer in <a class="xref" href="part0012.xhtml#be_the_jvm_solution">BE the JVM Solution</a> before continuing!</strong></span></p><div class="informalfigure"><a id="med_id00254a"></a><div class="mediaobject"><a id="med_id00254"></a><img src="../Images/image00751.jpeg" alt="image with no caption" hisrc="figs/web/181fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="dealing_with_multithreading">Dealing with multithreading</h2></div></div></div><p><a id="iddle2450" class="indexterm"></a><span class="strong"><strong>Our multithreading woes are almost trivially fixed by making getInstance() a synchronized method:</strong></span></p><div class="informalfigure"><a id="med_id00255a"></a><div class="mediaobject"><a id="med_id00255"></a><img src="../Images/image00752.jpeg" alt="image with no caption" hisrc="figs/web/182fig01.png.jpg"/></div></div><p>Good point, and it’s actually a little worse than you make out: the only time synchronization is relevant is the first time through this method. In other words, once we’ve set the uniqueInstance variable to an instance of Singleton, we have no further need to synchronize this method. After the first time through, synchronization is totally unneeded overhead!</p><div class="informalfigure"><a id="med_id00256a"></a><div class="mediaobject"><a id="med_id00256"></a><img src="../Images/image00753.jpeg" alt="image with no caption" hisrc="figs/web/182fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="can_we_improve_multithreadingquestion_ma">Can we improve multithreading?</h2></div></div></div><p><a id="iddle1962" class="indexterm"></a>For most Java applications, we obviously need to ensure that the Singleton works in the presence of multiple threads. But, it is expensive to synchronize the getInstance() method, so what do we do?</p><p>Well, we have a few options...</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="onedot_do_nothing_if_the_performance_of">1. Do nothing if the performance of getInstance() isn’t critical to your application.</h3></div></div></div><p>That’s right; if calling the getInstance() method isn’t causing substantial overhead for your application, forget about it. Synchronizing getInstance() is straightforward and effective. Just keep in mind that synchronizing a method can decrease performance by a factor of 100, so if a high-traffic part of your code begins using getInstance(), you may have to reconsider.</p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="twodot_move_to_an_eagerly_created_instan">2. Move to an eagerly created instance rather than a lazily created one.</h3></div></div></div><p>If your application always creates and uses an instance of the Singleton or the overhead of creation and runtime aspects of the Singleton are not onerous, you may want to create your Singleton eagerly, like this:</p><div class="informalfigure"><a id="med_id00257a"></a><div class="mediaobject"><a id="med_id00257"></a><img src="../Images/image00754.jpeg" alt="image with no caption" hisrc="figs/web/183fig01.png.jpg"/></div></div><p>Using this approach, we rely on the JVM to create the unique instance of the Singleton when the class is loaded. The JVM guarantees that the instance will be created before any thread accesses the static uniqueInstance variable.</p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="threedot_use_quotation_markdouble-checke">3. Use “double-checked locking” to reduce the use of synchronization in getInstance().</h3></div></div></div><p><a id="iddle1454" class="indexterm"></a><a id="iddle1870" class="indexterm"></a><a id="iddle2340" class="indexterm"></a><a id="iddle2505" class="indexterm"></a>With double-checked locking, we first check to see if an instance is created, and if not, THEN we synchronize. This way, we only synchronize the first time through, just what we want.</p><p>Let’s check out the code:</p><div class="informalfigure"><a id="med_id00258a"></a><div class="mediaobject"><a id="med_id00258"></a><img src="../Images/image00755.jpeg" alt="image with no caption" hisrc="figs/web/184fig01.png.jpg"/></div></div><p>If performance is an issue in your use of the getInstance() method then this method of implementing the Singleton can drastically reduce the overhead.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch05note04"></a>Watch it!</h3><p><span class="strong"><strong>Double-checked locking doesn’t work in Java 1.4 or earlier!</strong></span></p><p>Unfortunately, in Java version 1.4 and earlier, many JVMs contain implementations of the volatile keyword that allow improper synchronization for double-checked locking. If you must use a JVM earlier than Java 5, consider other methods of implementing your Singleton.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="meanwhilecomma_back_at_the_chocolate_fac">Meanwhile, back at the Chocolate Factory...</h2></div></div></div><p><a id="iddle1103" class="indexterm"></a><a id="iddle1544" class="indexterm"></a><a id="iddle2286" class="indexterm"></a><a id="iddle2333" class="indexterm"></a>While we’ve been off diagnosing the multithreading problems, the chocolate boiler has been cleaned up and is ready to go. But first, we have to fix the multithreading problems. We have a few solutions at hand, each with different tradeoffs, so which solution are we going to employ?</p><div class="informalfigure"><a id="med_id00259a"></a><div class="mediaobject"><a id="med_id00259"></a><img src="../Images/image00756.jpeg" alt="image with no caption" hisrc="figs/web/common22.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00049"></a><h3 class="title">Sharpen your pencil</h3><p>For each solution, describe its applicability to the problem of fixing the Chocolate Boiler code:</p><p><span class="strong"><strong>Synchronize the getInstance() method:</strong></span></p><p>________________________________________________________</p><p>________________________________________________________</p><p><span class="strong"><strong>Use eager instantiation:</strong></span></p><p>________________________________________________________</p><p>________________________________________________________</p><p><span class="strong"><strong>Double-checked locking:</strong></span></p><p>________________________________________________________</p><p>________________________________________________________</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="congratulationsexclamation_mark">Congratulations!</h2></div></div></div><p>At this point, the Chocolate Factory is a happy customer and Choc-O-Holic was glad to have some expertise applied to their boiler code. No matter which multithreading solution you applied, the boiler should be in good shape with no more mishaps. Congratulations. You’ve not only managed to escape 500lbs of hot chocolate in this chapter, but you’ve been through all the potential problems of the Singleton.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00050"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch05qa1qe1"></a><a id="ch05qa1q1"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><a id="iddle1131" class="indexterm"></a><a id="iddle1135" class="indexterm"></a><a id="iddle1685" class="indexterm"></a><a id="iddle1868" class="indexterm"></a><a id="iddle2346" class="indexterm"></a><a id="iddle2405" class="indexterm"></a><span class="strong"><strong>Q: For such a simple pattern consisting of only one class, Singletons sure seem to have some problems.</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch05qa1q1a1"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> Well, we warned you up front! But don’t let the problems discourage you; while implementing Singletons correctly can be tricky, after reading this chapter you are now well informed on the techniques for creating Singletons and should use them wherever you need to control the number of instances you are creating.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch05qa1qe2"></a><a id="ch05qa1q2"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: Can’t I just create a class in which all methods and variables are defined as static? Wouldn’t that be the same as a Singleton?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch05qa1q2a2"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> Yes, if your class is self-contained and doesn’t depend on complex initialization. However, because of the way static initializations are handled in Java, this can get very messy, especially if multiple classes are involved. Often this scenario can result in subtle, hard-to-find bugs involving order of initialization. Unless there is a compelling need to implement your “singleton” this way, it is far better to stay in the object world.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch05qa1qe3"></a><a id="ch05qa1q3"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: What about class loaders? I heard there is a chance that two class loaders could each end up with their own instance of Singleton.</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch05qa1q3a3"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> Yes, that is true as each class loader defines a namespace. If you have two or more class loaders, you can load the same class multiple times (once in each classloader). Now, if that class happens to be a Singleton, then since we have more than one version of the class, we also have more than one instance of the Singleton. So, if you are using multiple classloaders and Singletons, be careful. One way around this problem is to specify the classloader yourself.</p></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch05note05"></a>Relax</h3><p><span class="emphasis"><em><span class="strong"><strong>Rumors of Singletons being eaten by the garbage collectors are greatly exaggerated</strong></span></em></span></p><p><span class="emphasis"><em>Prior to Java 1.2, a bug in the garbage collector allowed Singletons to be prematurely collected if there was no global reference to them. In other words, you could create a Singleton and if the only reference to the Singleton was in the Singleton itself, it would be collected and destroyed by the garbage collector. This leads to confusing bugs because after the Singleton is “collected,” the next call to getInstance() produces a shiny new Singleton. In many applications, this can cause confusing behavior as state is mysteriously reset to initial values or things like network connections are reset.</em></span></p><p><span class="emphasis"><em>Since Java 1.2 this bug has been fixed and a global reference is no longer required. If you are, for some reason, still using a pre-Java 1.2 JVM, then be aware of this issue; otherwise, you can sleep well knowing your Singletons won’t be prematurely collected.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00051"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch05qa2qe1"></a><a id="ch05qa2q1"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><a id="iddle1411" class="indexterm"></a><a id="iddle1687" class="indexterm"></a><a id="iddle2062" class="indexterm"></a><a id="iddle2339" class="indexterm"></a><a id="iddle2342" class="indexterm"></a><a id="iddle2344" class="indexterm"></a><a id="iddle2345" class="indexterm"></a><a id="iddle2436" class="indexterm"></a><span class="strong"><strong>Q: I’ve always been taught that a class should do one thing and one thing only. For a class to do two things is considered bad OO design. Isn’t a Singleton violating this?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch05qa2q1a1"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> You would be referring to the “One Class, One Responsibility” principle, and yes, you are correct, the Singleton is not only responsible for managing its one instance (and providing global access), it is also responsible for whatever its main role is in your application. So, certainly you could argue it is taking on two responsibilities. Nevertheless, it isn’t hard to see that there is utility in a class managing its own instance; it certainly makes the overall design simpler. In addition, many developers are familiar with the Singleton pattern as it is in wide use. That said, some developers do feel the need to abstract out the Singleton functionality.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch05qa2qe2"></a><a id="ch05qa2q2"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: I wanted to subclass my Singleton code, but I ran into problems. Is it okay to subclass a Singleton?</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch05qa2q2a2"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> One problem with subclassing a Singleton is that the constructor is private. You can’t extend a class with a private constructor. So, the first thing you’ll have to do is change your constructor so that it’s public or protected. But then, it’s not really a Singleton anymore, because other classes can instantiate it.</p><p>If you do change your constructor, there’s another issue. The implementation of Singleton is based on a static variable, so if you do a straightforward subclass, all of your derived classes will share the same instance variable. This is probably not what you had in mind. So, for subclassing to work, implementing a registry of sorts is required in the base class.</p><p>Before implementing such a scheme, you should ask yourself what you are really gaining from subclassing a Singleton. Like most patterns, the Singleton is not necessarily meant to be a solution that can fit into a library. In addition, the Singleton code is trivial to add to any existing class. Last, if you are using a large number of Singletons in your application, you should take a hard look at your design. Singletons are meant to be used sparingly.</p></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch05qa2qe3"></a><a id="ch05qa2q3"></a><p><strong>Q:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>Q: I still don’t totally understand why global variables are worse than a Singleton.</strong></span></p></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch05qa2q3a3"></a><p><strong>A:</strong></p></td><td style="text-align: left; vertical-align: top; "><p><span class="strong"><strong>A:</strong></span> In Java, global variables are basically static references to objects. There are a couple of disadvantages to using global variables in this manner. We’ve already mentioned one: the issue of lazy versus eager instantiation. But we need to keep in mind the intent of the pattern: to ensure only one instance of a class exists and to provide global access. A global variable can provide the latter, but not the former. Global variables also tend to encourage developers to pollute the namespace with lots of global references to small objects. Singletons don’t encourage this in the same way, but can be abused nonetheless.</p></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00052">Tools for your Design Toolbox</h2></div></div></div><p>You’ve now added another pattern to your toolbox. Singleton gives you another method of creating objects — in this case, unique objects.</p><div class="informalfigure"><a id="med_id00260a"></a><div class="mediaobject"><a id="med_id00260"></a><img src="../Images/image00757.jpeg" alt="image with no caption" hisrc="figs/web/188fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch05note06"></a>Note</h3><p>As you’ve seen, despite its apparent simplicity, there are a lot of details involved in the Singleton’s implementation. After reading this chapter, though, you are ready to go out and use Singleton in the wild.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00053"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The Singleton Pattern ensures you have at most one instance of a class in your application.</li><li class="listitem">The Singleton Pattern also provides a global access point to that instance.</li><li class="listitem">Java’s implementation of the Singleton Pattern makes use of a private constructor, a static method combined with a static variable.</li><li class="listitem">Examine your performance and resource constraints and carefully choose an appropriate Singleton implementation for multithreaded applications (and we should consider all applications multithreaded!).</li><li class="listitem">Beware of the double-checked locking implementation; it is not thread-safe in versions before Java 2, version 5.</li><li class="listitem">Be careful if you are using multiple class loaders; this could defeat the Singleton implementation and result in multiple instances.</li><li class="listitem">If you are using a JVM earlier than 1.2, you’ll need to create a registry of Singletons to defeat the garbage collector.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword-id00054"></a><h3 class="title">Design Patterns Crossword</h3><p>Sit back, open that case of chocolate that you were sent for solving the multithreading problem, and have some downtime working on this little crossword puzzle; all of the solution words are from this chapter.</p><div class="informalfigure"><a id="med_id00261a"></a><div class="mediaobject"><a id="med_id00261"></a><img src="../Images/image00758.gif" alt="image with no caption" hisrc="figs/web/189fig01.png"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Across</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Down</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>1. It was “one of a kind.”</p>
<p>2. Added to chocolate in the boiler.</p>
<p>8. An incorrect implementation caused this to overflow.</p>
<p>10. Singleton provides a single instance and __________ (three words).</p>
<p>12. Flawed multi-threading approach if not using Java 5 or later.</p>
<p>13. Chocolate capital of the USA.</p>
<p>14. One advantage over global variables: ________ creation.</p>
<p>15. Company that produces boilers.</p>
<p>16. To totally defeat the new constructor, we have to declare the constructor __________.</p></td><td style="vertical-align: top; "><p>1. Multiple __________ can cause problems.</p>
<p>3. A Singleton is a class that manages an instance of ________.</p>
<p>4. If you don’t need to worry about lazy instantiation, you can create your instance __________.</p>
<p>5. Prior to Java 1.2, this can eat your Singletons (two words).</p>
<p>6. The Singleton was embarrassed it had no public __________.</p>
<p>7. The classic implementation doesn’t handle this.</p>
<p>9. Singleton ensures only one of these exists.</p>
<p>11. The Singleton Pattern has one.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="be_the_jvm_solution"></a><h3 class="title">BE the JVM Solution</h3><div class="informalfigure"><a id="med_id00262a"></a><div class="mediaobject"><a id="med_id00262"></a><img src="../Images/image00759.jpeg" alt="image with no caption" hisrc="figs/web/190fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00055"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1084" class="indexterm"></a><a id="iddle1504" class="indexterm"></a><a id="iddle1961" class="indexterm"></a><a id="iddle2337" class="indexterm"></a><a id="iddle1563" class="indexterm"></a><a id="iddle2308" class="indexterm"></a>Can you help Choc-O-Holic improve their ChocolateBoiler class by turning it into a singleton?</p><div class="informalfigure"><a id="med_id00263a"></a><div class="mediaobject"><a id="med_id00263"></a><img src="../Images/image00760.jpeg" alt="image with no caption" hisrc="figs/web/191fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00056"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1545" class="indexterm"></a><a id="iddle2287" class="indexterm"></a>For each solution, describe its applicability to the problem of fixing the Chocolate Boiler code:</p><p><span class="strong"><strong>Synchronize the getInstance() method:</strong></span></p><p><span class="underline">A straightforward technique that is guaranteed to work. We don’t seem to have</span>__________________</p><p><span class="underline">any performance concerns with the chocolate boiler, so this would be a good choice.</span>_____________________</p><p><span class="strong"><strong>Use eager instantiation:</strong></span></p><p><span class="underline">We are always going to instantiate the chocolate boiler in our code, so statically initializing</span>_______</p><p><span class="underline">the instance would cause no concerns. This solution would work as well as the synchronized</span>____</p><p>method, although perhaps be less obvious to a developer familar with the standard pattern.</p><p><span class="strong"><strong>Double-checked locking:</strong></span></p><p><span class="underline">Given we have no performance concerns, double-checked locking seems like overkill. In</span></p><p><span class="underline">addition, we’d have to ensure that we are running at least Java 5.</span>___________________________________________________</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword_soluti-id00057"></a><h3 class="title">Design Patterns Crossword Solution</h3><div class="informalfigure"><a id="med_id00264a"></a><div class="mediaobject"><a id="med_id00264"></a><img src="../Images/image00761.gif" alt="image with no caption" hisrc="figs/web/192fig01.png"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>