<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en">
<head>
<meta content="text/html; charset=utf-8" http-equiv="default-style"/>
<title>Structure and Interpretation of Computer Programs</title>
<link href="../styles/MIT_style.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:5e22faf7-6d97-43f5-a05d-571a507bcb19" name="Adept.expected.resource"/>
</head>
<body><a id="contents"/>
<nav epub:type="toc" id="toc">
<h1 class="title">Contents</h1>
<ol>
<li class="contentsH1"><a href="cover.xhtml#cover">Cover</a></li>
<li class="contentsH1"><a href="c000a.xhtml#f2-title-0001">Foreword</a></li>
<li class="contentsH1"><a href="c000b.xhtml#f3-title-0001">Foreword to Structure and Interpretation of Computer Programs, 1984</a></li>
<li class="contentsH1"><a href="c000c.xhtml#f4-title-0001">Preface</a></li>
<li class="contentsH1"><a href="c000d.xhtml#f5-title-0001">Prefaces to Structure and Interpretation of Computer Programs, 1996 &amp; 1984</a></li>
<li class="contentsH1"><a href="c000e.xhtml#f6-title-0001">Acknowledgments</a></li>
<li class="contentsH1"><a href="c001.xhtml#c1-title-0001">1: Building Abstractions with Functions</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-title-0001">2: Building Abstractions with Data</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-title-0001">3: Modularity, Objects, and State</a></li>
<li class="contentsH1"><a href="c004.xhtml#c4-title-0001">4: Metalinguistic Abstraction</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-title-0001">5: Computing with Register Machines</a></li>
<li class="contentsH1"><a href="c444.xhtml#b1-title-0001">References</a></li>
<li class="contentsH1"><a href="c555.xhtml#b2-title-0001">Index</a></li>
<li class="contentsH1"><a href="c800.xhtml#b2-title-0001">List of Exercises</a></li>
</ol>
</nav>
<nav epub:type="loi" id="figurelist">
<h2>List of figures</h2>
<ol>
<li class="contentsH1"><span>Chapter 1</span>
<ol>
<li class="contentsH1"><a href="c001.xhtml#c1-fig-0001">Figure 1.1 Tree representation, showing the value of each subexpression.</a></li>
<li class="contentsH1"><a href="c001.xhtml#c1-fig-0008">Figure 1.2 Functional decomposition of the sqrt program.</a></li>
<li class="contentsH1"><a href="c001.xhtml#c1-fig-0009">Figure 1.3 A linear recursive process for computing 6!.</a></li>
<li class="contentsH1"><a href="c001.xhtml#c1-fig-0010">Figure 1.4 A linear iterative process for computing 6!.</a></li>
<li class="contentsH1"><a href="c001.xhtml#c1-fig-0012">Figure 1.5 The tree-recursive process generated in computing fib(5).</a></li>
</ol></li>
<li class="contentsH1"><span>Chapter 2</span>
<ol>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0002">Figure 2.1 Data-abstraction barriers in the rational-number package.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0007">Figure 2.2 Box-and-pointer representation of pair(1, 2).</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0008">Figure 2.3 Two ways to combine 1, 2, 3, and 4 using pairs.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0009">Figure 2.4 The sequence 1, 2, 3, 4 represented as a chain of pairs.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0010">Figure 2.5 Structure formed by pair(list(1, 2), list(3, 4)).</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0011">Figure 2.6 The list structure in figure 2.5 viewed as a tree.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0012">Figure 2.7 The signal-flow plans for the functions sum_odd_squares (top) and ev…</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0015">Figure 2.8 A solution to the eight-queens puzzle.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0016">Figure 2.9 Designs generated with the picture language.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0017">Figure 2.10 Images produced by the wave painter, with respect to four different…</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0018">Figure 2.11 Images of William Barton Rogers, founder and first president of MIT…</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0019">Figure 2.12 Creating a complex figure, starting from the wave painter of figure…</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0020">Figure 2.13 Recursive plans for right_split and corner_split.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0021">Figure 2.14 The recursive operation right_split applied to the painters wave an…</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0022">Figure 2.15 A frame is described by three vectors—an origin and two edges.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0026">Figure 2.16 Various binary trees that represent the set {1, 3, 5, 7, 9, 11}.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0027">Figure 2.17 Unbalanced tree produced by adjoining 1 through 7 in sequence.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0028">Figure 2.18 A Huffman encoding tree.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0029">Figure 2.19 Data-abstraction barriers in the complex-number system.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0030">Figure 2.20 Complex numbers as points in the plane.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0031">Figure 2.21 Structure of the generic complex-arithmetic system.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0032">Figure 2.22 Table of operations for the complex-number system.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0033">Figure 2.23 Generic arithmetic system.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0034">Figure 2.24 Representation of 3 + 4i in rectangular form.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0035">Figure 2.25 A tower of types.</a></li>
<li class="contentsH1"><a href="c002.xhtml#c2-fig-0036">Figure 2.26 Relations among types of geometric figures.</a></li>
</ol></li>
<li class="contentsH1"><span>Chapter 3</span>
<ol>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0001">Figure 3.1 A simple environment structure.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0002">Figure 3.2 Environment structure produced by evaluating function square(x) { re…</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0003">Figure 3.3 Environment created by evaluating square(5) in the program environme…</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0004">Figure 3.4 Function objects in the program frame.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0005">Figure 3.5 Environments created by evaluating f(5) using the functions in figur…</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0006">Figure 3.6 Result of defining make_withdraw in the program environment.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0007">Figure 3.7 Result of evaluating const W1 = make_withdraw(100);.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0008">Figure 3.8 Environments created by applying the function object W1.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0009">Figure 3.9 Environments after the call to W1.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0010">Figure 3.10 Using const W2 = make_withdraw(100); to create a second object.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0011">Figure 3.11 The sqrt function with internal declarations.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0012">Figure 3.12 Lists x: list(list("a", "b"), "c", "d") and y: list("e", "f").</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0013">Figure 3.13 Effect of set_head(x, y) on the lists in figure 3.12.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0014">Figure 3.14 Effect of const z = pair(y, tail(x)); on the lists in figure 3.12.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0015">Figure 3.15 Effect of set_tail(x, y) on the lists in figure 3.12.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0016">Figure 3.16 The list z1 formed by pair(x, x).</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0017">Figure 3.17 The list z2 formed by pair(list("a", "b"), list("a", "b")).</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0018">Figure 3.18 Queue operations.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0019">Figure 3.19 Implementation of a queue as a list with front and rear pointers.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0020">Figure 3.20 Result of using insert_queue(q, "d") on the queue of figure 3.19.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0021">Figure 3.21 Result of using delete_queue(q) on the queue of figure 3.20.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0022">Figure 3.22 A table represented as a headed list.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0023">Figure 3.23 A two-dimensional table.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0024">Figure 3.24 Primitive functions in the digital logic simulator.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0025">Figure 3.25 A half-adder circuit.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0026">Figure 3.26 A full-adder circuit.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0027">Figure 3.27 A ripple-carry adder for n-bit numbers.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0028">Figure 3.28 The relation 9C = 5(F – 32) expressed as a constraint network.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0029">Figure 3.29 Timing diagram showing how interleaving the order of events in two …</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0030">Figure 3.30 Concurrent deposits and withdrawals from a joint account in Bank1 a…</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0031">Figure 3.31 The prime sieve viewed as a signal-processing system. Each solid li…</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0036">Figure 3.32 The integral function viewed as a signal-processing system.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0037">Figure 3.33 An RC circuit and the associated signal-flow diagram.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0039">Figure 3.34 An “analog computer circuit” that solves the equation dy/dt = f (y)…</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0040">Figure 3.35 Signal-flow diagram for the solution to a second-order linear diffe…</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0041">Figure 3.36 A series RLC circuit.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0042">Figure 3.37 A signal-flow diagram for the solution to a series RLC circuit.</a></li>
<li class="contentsH1"><a href="c003.xhtml#c3-fig-0043">Figure 3.38 A joint bank account, modeled by merging two streams of transaction…</a></li>
</ol></li>
<li class="contentsH1"><span>Chapter 4</span>
<ol>
<li class="contentsH1"><a href="c004.xhtml#c4-fig-0001">Figure 4.1 The evaluate–apply cycle exposes the essence of a computer language.</a></li>
<li class="contentsH1"><a href="c004.xhtml#c4-fig-0002">Figure 4.2 Syntax abstraction in the evaluator.</a></li>
<li class="contentsH1"><a href="c004.xhtml#c4-fig-0003">Figure 4.3 The factorial program, viewed as an abstract machine.</a></li>
<li class="contentsH1"><a href="c004.xhtml#c4-fig-0004">Figure 4.4 The evaluator emulating a factorial machine.</a></li>
<li class="contentsH1"><a href="c004.xhtml#c4-fig-0005">Figure 4.5 A query processes a stream of frames.</a></li>
<li class="contentsH1"><a href="c004.xhtml#c4-fig-0006">Figure 4.6 The and combination of two queries is produced by operating on the s…</a></li>
<li class="contentsH1"><a href="c004.xhtml#c4-fig-0007">Figure 4.7 The or combination of two queries is produced by operating on the st…</a></li>
<li class="contentsH1"><a href="c004.xhtml#c4-fig-0008">Figure 4.8 Syntax abstraction in the query system.</a></li>
</ol></li>
<li class="contentsH1"><span>Chapter 5</span>
<ol>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0001">Figure 5.1 Data paths for a GCD machine.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0002">Figure 5.2 Controller for a GCD machine.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0003">Figure 5.3 A specification of the GCD machine.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0004">Figure 5.4 A GCD machine that reads inputs and prints results.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0005">Figure 5.5 Data paths and controller for the elaborated GCD machine.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0006">Figure 5.6 Controller instruction sequence for the GCD machine in figure 5.5.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0007">Figure 5.7 Portions of the data paths and controller sequence for a machine wit…</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0008">Figure 5.8 Portions of the controller sequence for a machine that uses the same…</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0009">Figure 5.9 Using a continue register to avoid the duplicate controller sequence…</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0010">Figure 5.10 Assigning labels to the continue register simplifies and generalize…</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0011">Figure 5.11 A recursive factorial machine.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0012">Figure 5.12 Controller for a machine to compute Fibonacci numbers.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0013">Figure 5.13 The make_new_machine function implements the basic machine model.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0014">Figure 5.14 Box-and-pointer and memory-vector representations of the list list(…</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0015">Figure 5.15 Reconfiguration of memory by the garbage-collection process.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0016">Figure 5.16 A silicon-chip implementation of an evaluator for Scheme.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0018">Figure 5.17 Compilation of the declaration of the factorial function.</a></li>
<li class="contentsH1"><a href="c005.xhtml#c5-fig-0021">Figure 5.18 An example of compiler output. See exercis…</a></li>
</ol></li>
</ol>
</nav>
<nav class="guideList" epub:type="landmarks">
<h2>Guide</h2>
<ol>
<li class="contentsH1"><a epub:type="cover" href="cover.xhtml">Cover</a></li>
<li class="contentsH1"><a epub:type="toc" href="contents.xhtml">Table of Contents</a></li>
</ol>
</nav>
</body>
</html>