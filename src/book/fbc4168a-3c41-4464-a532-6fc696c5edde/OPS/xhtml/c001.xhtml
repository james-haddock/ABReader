<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>1 Building Abstractions with Functions</title>
<link href="../styles/MIT_style.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:5e22faf7-6d97-43f5-a05d-571a507bcb19" name="Adept.expected.resource"/>
</head>
<body epub:type="bodymatter">
<section epub:type="chapter" role="doc-chapter">
<header>
<h1><a id="c1-title-0001"/><span class="chapterNumber">1</span><br/><span class="chapterTitle">Building Abstractions with Functions</span></h1>
</header>
<blockquote class="quote-epigraph">
<p class="quote-epigraphparafirst"><a id="c1-para-0001"/>The acts of the mind, wherein it exerts its power over simple ideas, are chiefly these three: 1. Combining several simple ideas into one compound one, and thus all complex ideas are made. 2. The second is bringing two ideas, whether simple or complex, together, and setting them by one another so as to take a view of them at once, without uniting them into one, by which it gets all its ideas of relations. 3. The third is separating them from all other ideas that accompany them in their real existence: this is called abstraction, and thus all its general ideas are made.</p>
<p class="quote-epigraphsource">—John Locke, An Essay Concerning Human Understanding (1690)</p></blockquote>
<p class="paraaftertitle"><a id="c1-para-0002"/>We are about to study the idea of a <i>computational process</i>. Computational processes are abstract beings that inhabit computers. As they evolve, processes manipulate other abstract things called <i>data</i>. The evolution of a process is directed by a pattern of rules called a <i>program</i>. People create programs to direct processes. In effect, we conjure the spirits of the computer with our spells.</p>
<p><a id="c1-para-0003"/>A computational process is indeed much like a sorcerer's idea of a spirit. It cannot be seen or touched. It is not composed of matter at all. However, it is very real. It can perform intellectual work. It can answer questions. It can affect the world by disbursing money at a bank or by controlling a robot arm in a factory. The programs we use to conjure processes are like a sorcerer's spells. They are carefully composed from symbolic expressions in arcane and esoteric <i>programming languages</i> that prescribe the tasks we want our processes to perform.</p>
<p><a id="c1-para-0004"/>A computational process, in a correctly working computer, executes programs precisely and accurately. Thus, like the sorcerer's apprentice, novice programmers must learn to understand and to anticipate the consequences of their conjuring. Even small errors (usually called <i>bugs</i>) in programs can have complex and unanticipated consequences.</p>
<p><a id="c1-para-0005"/>Fortunately, learning to program is considerably less dangerous than learning sorcery, because the spirits we deal with are conveniently contained in a secure way. Real-world programming, however, requires care, expertise, and wisdom. A small bug in a computer-aided design program, for example, can lead to the catastrophic collapse of an airplane or a dam or the self-destruction of an industrial robot.</p>
<p><a id="c1-para-0006"/>Master software engineers have the ability to organize programs so that they can be reasonably sure that the resulting processes will perform the tasks intended. They can visualize the behavior of their systems in advance. They know how to structure programs so that unanticipated problems do not lead to catastrophic consequences, and when problems do arise, they can <i>debug</i> their programs. Well-designed computational systems, like well-designed automobiles or nuclear reactors, are designed in a modular manner, so that the parts can be constructed, replaced, and debugged separately.</p>
<section><a id="c1-title-0002"/>
<section><a id="c1-title-0003"/>
<section><a id="c1-title-0004"/>
<section>
<h5><a id="c1-sec-0004"/><a id="c1-title-0005"/>Programming in JavaScript</h5>
<p class="paraaftertitle"><a id="c1-para-0007"/>We need an appropriate language for describing processes, and we will use for this purpose the programming language JavaScript. Just as our everyday thoughts are usually expressed in our natural language (such as English, Swedish, or Chinese), and descriptions of quantitative phenomena are expressed with mathematical notations, our procedural thoughts will be expressed in JavaScript. JavaScript was developed in 1995 as a programming language for controlling the behavior of World Wide Web browsers through scripts that are embedded in web pages. The language was conceived by Brendan Eich, originally under the name <i>Mocha</i>, which was later renamed to <i>LiveScript</i>, and finally to JavaScript. The name “JavaScript” is a trademark of Oracle Corporation.</p>
<p><a id="c1-para-0008"/>Despite its inception as a language for scripting the web, JavaScript is a generalpurpose programming language. A JavaScript <i>interpreter</i> is a machine that carries out processes described in the JavaScript language. The first JavaScript interpreter was implemented by Eich at Netscape Communications Corporation for the Netscape Navigator web browser. JavaScript inherited its core features from the Scheme and Self programming languages. Scheme is a dialect of Lisp, and was used as the programming language for the original version of this book. From Scheme, JavaScript inherited its most fundamental design principles, such as lexically scoped first-class functions and dynamic typing.</p>
<p><a id="c1-para-0009"/>JavaScript bears only superficial resemblance to the language Java, after which it was (eventually) named; both Java and JavaScript use the block structure of the language C. In contrast with Java and C, which usually employ compilation to lowerlevel languages, JavaScript programs were initially <i>interpreted</i> by web browsers. After Netscape Navigator, other web browsers provided interpreters for the language, including Microsoft's Internet Explorer, whose JavaScript version is called <i>JScript</i>. The popularity of JavaScript for controlling web browsers gave rise to a standardization effort, culminating in <i>ECMAScript</i>. The first edition of the ECMAScript standard was led by Guy Lewis Steele Jr. and completed in June 1997 (ECMA 1997). The sixth edition, known as ECMAScript 2015, was led by Allen Wirfs-Brock and adopted by the General Assembly of ECMA in June 2015 (ECMA 2015).</p>
<p><a id="c1-para-0010"/>The practice of embedding JavaScript programs in web pages encouraged the developers of web browsers to implement JavaScript interpreters. As these programs became more complex, the interpreters became more efficient in executing them, eventually using sophisticated implementation techniques such as Just-In-Time (JIT) compilation. The majority of JavaScript programs as of this writing (2021) are embedded in web pages and interpreted by browsers, but JavaScript is increasingly used as a general-purpose programming language, using systems such as Node.js.</p>
<p><a id="c1-para-0011"/>ECMAScript 2015 possesses a set of features that make it an excellent medium for studying important programming constructs and data structures and for relating them to the linguistic features that support them. Its lexically scoped first-class functions and their syntactic support through lambda expressions provide direct and concise access to functional abstraction, and dynamic typing allows the adaptation to remain close to the Scheme original throughout the book. Above and beyond these considerations, programming in JavaScript is great fun.</p>
</section>
</section>
</section>
<section>
<h2><a id="c1-sec-0005"/><span>1.1</span> <a id="c1-title-0006"/>The Elements of Programming</h2>
<p class="paraaftertitle"><a id="c1-para-0012"/>A powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes. Thus, when we describe a language, we should pay particular attention to the means that the language provides for combining simple ideas to form more complex ideas. Every powerful language has three mechanisms for accomplishing this:</p>
<ul style="list-style-type:disc">
<li><b>primitive expressions</b>, which represent the simplest entities the language is concerned with,</li>
<li><b>means of combination</b>, by which compound elements are built from simpler ones, and</li>
<li><b>means of abstraction</b>, by which compound elements can be named and manipulated as units.</li>
</ul>

<p><a id="c1-para-0016"/>In programming, we deal with two kinds of elements: functions and data. (Later we will discover that they are really not so distinct.) Informally, data is “stuff” that we want to manipulate, and functions are descriptions of the rules for manipulating the data. Thus, any powerful programming language should be able to describe primitive data and primitive functions and should have methods for combining and abstracting functions and data.</p>
<p><a id="c1-para-0017"/>In this chapter we will deal only with simple numerical data so that we can focus on the rules for building functions.<a id="c1-fn-0001a"/><a href="#c1-fn-0001"><sup>1</sup></a> In later chapters we will see that these same rules allow us to build functions to manipulate compound data as well.</p>
<section>
<h3><a id="c1-sec-0006"/><span>1.1.1</span> <a id="c1-title-0007"/>Expressions</h3>
<p class="paraaftertitle"><a id="c1-para-0018"/>One easy way to get started at programming is to examine some typical interactions with an interpreter for the JavaScript language. You type a <i>statement</i>, and the interpreter responds by displaying the result of its <i>evaluating</i> that statement.</p>
<p><a id="c1-para-0019"/>One kind of statement you might type is an expression statement, which consists of an <i>expression</i> followed by a semicolon. One kind of primitive expression is a number. (More precisely, the expression that you type consists of the numerals that represent the number in base 10.) If you present JavaScript with the program</p>
<p class="Sp-text-1"><a id="c1-para-0020"/>486;</p>
<p class="paracontinue"><a id="c1-para-0021"/>the interpreter will respond by printing<a id="c1-fn-0002a"/><a href="#c1-fn-0002"><sup>2</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-0022"/><i>486</i></p>
<p><a id="c1-para-0023"/>Expressions representing numbers may be combined with operators (such as <span class="KeyTerm1">+</span> or <span class="KeyTerm1">*</span>) to form a compound expression that represents the application of a corresponding primitive function to those numbers. For example,</p>
<p class="Sp-text-1"><a id="c1-para-0024"/>137 + 349;</p>
<p class="Sp-text-1"><a id="c1-para-0025"/><i>486</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0026"/>1000 - 334;</p>
<p class="Sp-text-1"><a id="c1-para-0027"/><i>666</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0028"/>5 * 99;</p>
<p class="Sp-text-1"><a id="c1-para-0029"/><i>495</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0030"/>10 / 4;</p>
<p class="Sp-text-1"><a id="c1-para-0031"/><i>2.5</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0032"/>2.7 + 10;</p>
<p class="Sp-text-1"><a id="c1-para-0033"/><i>12.7</i></p>
<p><a id="c1-para-0034"/>Expressions such as these, which contain other expressions as components, are called <i>combinations</i>. Combinations that are formed by an <i>operator</i> symbol in the middle, and <i>operand</i> expressions to the left and right of it, are called <i>operator combinations</i>. The value of an operator combination is obtained by applying the function specified by the operator to the arguments that are the values of the operands.</p>
<p><a id="c1-para-0035"/>The convention of placing the operator between the operands is known as <i>infix notation</i>. It follows the mathematical notation that you are most likely familiar with from school and everyday life. As in mathematics, operator combinations can be <i>nested</i>, that is, they can have operands that themselves are operator combinations:</p>
<p class="Sp-text-1"><a id="c1-para-0036"/>(3 * 5) + (10 - 6);</p>
<p class="Sp-text-1"><a id="c1-para-0037"/><i>19</i></p>
<p class="paracontinue"><a id="c1-para-0038"/>As usual, parentheses are used to group operator combinations in order to avoid ambiguities. JavaScript also follows the usual conventions when parentheses are omitted: multiplication and division bind more strongly than addition and subtraction. For example,</p>
<p class="Sp-text-1"><a id="c1-para-0039"/>3 * 5 + 10 / 2;</p>
<p class="paracontinue"><a id="c1-para-0040"/>stands for</p>
<p class="Sp-text-1"><a id="c1-para-0041"/>(3 * 5) + (10 / 2);</p>
<p class="paracontinue"><a id="c1-para-0042"/>We say that <span class="KeyTerm1">*</span> and <span class="KeyTerm1">/</span> have <i>higher precedence</i> than <span class="KeyTerm1">+</span> and <span class="KeyTerm1">-</span>. Sequences of additions and subtractions are read from left to right, as are sequences of multiplications and divisions. Thus,</p>
<p class="Sp-text-1"><a id="c1-para-0043"/>1 - 5 / 2 * 4 + 3;</p>
<p class="paracontinue"><a id="c1-para-0044"/>stands for</p>
<p class="Sp-text-1"><a id="c1-para-0045"/>(1 - ((5 / 2) * 4)) + 3;</p>
<p class="paracontinue"><a id="c1-para-0046"/>We say that the operators <span class="KeyTerm1">+</span>, <span class="KeyTerm1">-</span>, <span class="KeyTerm1">*</span> and <span class="KeyTerm1">/</span> are <i>left-associative</i>.</p>
<p><a id="c1-para-0047"/>There is no limit (in principle) to the depth of such nesting and to the overall complexity of the expressions that the JavaScript interpreter can evaluate. It is we humans who might get confused by still relatively simple expressions such as</p>
<p class="Sp-text-1"><a id="c1-para-0048"/>3 * 2 * (3 - 5 + 4) + 27 / 6 * 10;</p>
<p class="paracontinue"><a id="c1-para-0049"/>which the interpreter would readily evaluate to be 57. We can help ourselves by writing such an expression in the form</p>
<p class="Sp-text-1"><a id="c1-para-0050"/>3 * 2 * (3 - 5 + 4)</p>
<p class="Sp-text-1"><a id="c1-para-0051"/>+</p>
<p class="Sp-text-1"><a id="c1-para-0052"/>27 / 6 * 10;</p>
<p class="paracontinue"><a id="c1-para-0053"/>to visually separate the major components of the expression.</p>
<p><a id="c1-para-0054"/>Even with complex expressions, the interpreter always operates in the same basic cycle: It reads a statement typed by the user, evaluates the statement, and prints the result. This mode of operation is often expressed by saying that the interpreter runs in a <i>read-evaluate-print loop</i>. Observe in particular that it is not necessary to explicitly instruct the interpreter to print the value of the statement.<a id="c1-fn-0003a"/><a href="#c1-fn-0003"><sup>3</sup></a></p>
</section>
<section>
<h3><a id="c1-sec-0007"/><span>1.1.2</span> <a id="c1-title-0008"/>Naming and the Environment</h3>
<p class="paraaftertitle"><a id="c1-para-0055"/>A critical aspect of a programming language is the means it provides for using names to refer to computational objects, and our first such means are <i>constants</i>. We say that the name identifies a constant whose <i>value</i> is the object.</p>
<p><a id="c1-para-0056"/>In JavaScript, we name constants with <i>constant declarations</i>.</p>
<p class="Sp-text-1"><a id="c1-para-0057"/><b>const</b> size = 2;</p>
<p class="paracontinue"><a id="c1-para-0058"/>causes the interpreter to associate the value 2 with the name <span class="KeyTerm1">size</span>.<a id="c1-fn-0004a"/><a href="#c1-fn-0004"><sup>4</sup></a> Once the name <span class="KeyTerm1">size</span> has been associated with the number 2, we can refer to the value 2 by name:</p>
<p class="Sp-text-1"><a id="c1-para-0059"/>size;</p>
<p class="Sp-text-1"><a id="c1-para-0060"/><i>2</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0061"/>5 * size;</p>
<p class="Sp-text-1"><a id="c1-para-0062"/><i>10</i></p>
<p><a id="c1-para-0063"/>Here are further examples of the use of <span class="KeyTerm1"><b>const</b></span>:</p>
<p class="Sp-text-1"><a id="c1-para-0064"/><b>const</b> pi = 3.14159;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0065"/><b>const</b> radius = 10;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0066"/>pi * radius * radius;</p>
<p class="Sp-text-1"><a id="c1-para-0067"/><i>314.159</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0068"/><b>const</b> circumference = 2 * pi * radius;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-5068"/>circumference;</p>
<p class="Sp-text-1"><a id="c1-para-0069"/><i>62.8318</i></p>
<p><a id="c1-para-0070"/>Constant declaration is our language's simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the <span class="KeyTerm1">circumference</span> computed above. In general, computational objects may have very complex structures, and it would be extremely inconvenient to have to remember and repeat their details each time we want to use them. Indeed, complex programs are constructed by building, step by step, computational objects of increasing complexity. The interpreter makes this step-by-step program construction particularly convenient because name-object associations can be created incrementally in successive interactions. This feature encourages the incremental development and testing of programs and is largely responsible for the fact that a JavaScript program usually consists of a large number of relatively simple functions.</p>
<p><a id="c1-para-0071"/>It should be clear that the possibility of associating values with names and later retrieving them means that the interpreter must maintain some sort of memory that keeps track of the name-object pairs. This memory is called the <i>environment</i> (more precisely the <i>program environment</i>, since we will see later that a computation may involve a number of different environments).<a id="c1-fn-0005a"/><a href="#c1-fn-0005"><sup>5</sup></a></p>
</section>
<section>
<h3><a id="c1-sec-0008"/><span>1.1.3</span> <a id="c1-title-0009"/>Evaluating Operator Combinations</h3>
<p class="paraaftertitle"><a id="c1-para-0072"/>One of our goals in this chapter is to isolate issues about thinking procedurally. As a case in point, let us consider that, in evaluating operator combinations, the interpreter is itself following a procedure.</p>
<ul style="list-style-type:disc">
<li>To evaluate an operator combination, do the following:<ol class="BS_NumberList1">
<li><a id="c1-li-0005"/><span>1. </span>Evaluate the operand expressions of the combination.</li>
<li><a id="c1-li-0006"/><span>2. </span>Apply the function that is denoted by the operator to the arguments that are the values of the operands.</li>
</ol></li>
</ul>

<p class="paracontinue"><a id="c1-para-0076"/>Even this simple rule illustrates some important points about processes in general. First, observe that the first step dictates that in order to accomplish the evaluation process for a combination we must first perform the evaluation process on each operand of the combination. Thus, the evaluation rule is <i>recursive</i> in nature; that is, it includes, as one of its steps, the need to invoke the rule itself.</p>
<p><a id="c1-para-0077"/>Notice how succinctly the idea of recursion can be used to express what, in the case of a deeply nested combination, would otherwise be viewed as a rather complicated process. For example, evaluating</p>
<p class="Sp-text-1"><a id="c1-para-0078"/>(2 + 4 * 6) * (3 + 12);</p>
<p class="paracontinue"><a id="c1-para-0079"/>requires that the evaluation rule be applied to four different combinations. We can obtain a picture of this process by representing the combination in the form of a tree, as shown in <a id="c1-fig-0001a"/><a href="#c1-fig-0001">figure 1.1</a>. Each combination is represented by a node with branches corresponding to the operator and the operands of the combination stemming from it. The terminal nodes (that is, nodes with no branches stemming from them) represent either operators or numbers. Viewing evaluation in terms of the tree, we can imagine that the values of the operands percolate upward, starting from the terminal nodes and then combining at higher and higher levels. In general, we shall see that recursion is a very powerful technique for dealing with hierarchical, treelike objects. In fact, the “percolate values upward” form of the evaluation rule is an example of a general kind of process known as <i>tree accumulation</i>.</p>
<figure id="c1-fig-0001"><img alt="c1-fig-0001.jpg" src="../images/c1-fig-0001.jpg"/><figcaption class="figurecaption">
<p><span class="figureLabel"><a href="#c1-fig-0001a">Figure 1.1</a></span> <a id="c1-para-0080"/>Tree representation, showing the value of each subexpression.</p></figcaption></figure>
<p><a id="c1-para-0081"/>Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, not combinations, but primitive expressions such as numerals or names. We take care of the primitive cases by stipulating that</p>
<ul style="list-style-type:disc">
<li>the values of numerals are the numbers that they name, and</li>
<li>the values of names are the objects associated with those names in the environment.</li>
</ul>

<p class="paracontinue"><a id="c1-para-0084"/>The key point to notice is the role of the environment in determining the meaning of the names in expressions. In an interactive language such as JavaScript, it is meaningless to speak of the value of an expression such as <span class="KeyTerm1">x + 1</span> without specifying any information about the environment that would provide a meaning for the name <span class="KeyTerm1">x</span>. As we shall see in chapter 3, the general notion of the environment as providing a context in which evaluation takes place will play an important role in our understanding of program execution.</p>
<p><a id="c1-para-0085"/>Notice that the evaluation rule given above does not handle declarations. For instance, evaluating <span class="KeyTerm1"><b>const</b> x = 3;</span> does not apply an equality operator <span class="KeyTerm1">=</span> to two arguments, one of which is the value of the name <span class="KeyTerm1">x</span> and the other of which is 3, since the purpose of the declaration is precisely to associate <span class="KeyTerm1">x</span> with a value. (That is, <span class="KeyTerm1"><b>const</b> x = 3;</span> is not a combination.)</p>
<p><a id="c1-para-0086"/>The letters in <span class="KeyTerm1"><b>const</b></span> are rendered in bold to indicate that it is a <i>keyword</i> in JavaScript. Keywords carry a particular meaning, and thus cannot be used as names. A keyword or a combination of keywords in a statement instructs the JavaScript interpreter to treat the statement in a special way. Each such <i>syntactic form</i> has its own evaluation rule. The various kinds of statements and expressions (each with its associated evaluation rule) constitute the syntax of the programming language.</p>
</section>
<section>
<h3><a id="c1-sec-0009"/><span>1.1.4</span> <a id="c1-title-0010"/>Compound Functions</h3>
<p class="paraaftertitle"><a id="c1-para-0087"/>We have identified in JavaScript some of the elements that must appear in any powerful programming language:</p>
<ul style="list-style-type:disc">
<li>Numbers and arithmetic operations are primitive data and functions.</li>
<li>Nesting of combinations provides a means of combining operations.</li>
<li>Constant declarations that associate names with values provide a limited means of abstraction.</li>
</ul>

<p class="paracontinue"><a id="c1-para-0091"/>Now we will learn about <i>function declarations</i>, a much more powerful abstraction technique by which a compound operation can be given a name and then referred to as a unit.</p>
<p><a id="c1-para-0092"/>We begin by examining how to express the idea of “squaring.” We might say, “To square something, take it times itself.” This is expressed in our language as</p>
<p class="Sp-text-1"><a id="c1-para-0093"/><b>function</b> square(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0094"/>    <b>return</b> x * x;</p>
<p class="Sp-text-1"><a id="c1-para-0095"/>}</p>
<p><a id="c1-para-0096"/>We can understand this in the following way:</p>
<p><a id="c1-para-0097"/></p>
<figure id="c1-fig-0002"><img alt="c1-fig-5001.jpg" src="../images/c1-fig-5001.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0098"/>We have here a <i>compound function</i>, which has been given the name <span class="KeyTerm1">square</span>. The function represents the operation of multiplying something by itself. The thing to be multiplied is given a local name, <span class="KeyTerm1">x</span>, which plays the same role that a pronoun plays in natural language. Evaluating the declaration creates this compound function and associates it with the name <span class="KeyTerm1">square</span>.<a id="c1-fn-0006a"/><a href="#c1-fn-0006"><sup>6</sup></a></p>
<p><a id="c1-para-0099"/>The simplest form of a function declaration is</p>
<p class="Sp-text-1"><a id="c1-para-0100"/><b>function</b> <span class="KeyTerm2"><i>name</i></span>(<span class="KeyTerm2"><i>parameters</i></span>) { <b>return</b> <span class="KeyTerm2"><i>expression</i></span>; }</p>
<p class="paracontinue"><a id="c1-para-0101"/>The <i>name</i> is a symbol to be associated with the function definition in the environment.<a id="c1-fn-0007a"/><a href="#c1-fn-0007"><sup>7</sup></a> The <i>parameters</i> are the names used within the body of the function to refer to the corresponding arguments of the function. The <i>parameters</i> are grouped within parentheses and separated by commas, as they will be in an application of the function being declared. In the simplest form, the <i>body</i> of a function declaration is a single <i>return statement</i>,<a id="c1-fn-0008a"/><a href="#c1-fn-0008"><sup>8</sup></a> which consists of the keyword <span class="KeyTerm1"><b>return</b></span> followed by the <i>return expression</i> that will yield the value of the function application, when the parameters are replaced by the actual arguments to which the function is applied. Like constant declarations and expression statements, return statements end with a semicolon.</p>
<p><a id="c1-para-0102"/>Having declared <span class="KeyTerm1">square</span>, we can now use it in a <i>function application</i> expression, which we turn into a statement using a semicolon:</p>
<p class="Sp-text-1"><a id="c1-para-0103"/>square(21);</p>
<p class="Sp-text-1"><a id="c1-para-0104"/><i>441</i></p>
<p class="paracontinue"><a id="c1-para-0105"/>Function applications are—after operator combinations—the second kind of combination of expressions into larger expressions that we encounter. The general form of a function application is</p>
<p class="Sp-text-1"><a id="c1-para-0106"/><span class="KeyTerm2"><i>function</i>-<i>expression</i></span>(<span class="KeyTerm2"><i>argument</i>-<i>expressions</i></span>)</p>
<p class="paracontinue"><a id="c1-para-0107"/>where the <i>function</i>-<i>expression</i> of the application specifies the function to be applied to the comma-separated <i>argument</i>-<i>expressions</i>. To evaluate a function application, the interpreter follows a procedure quite similar to the procedure for operator combinations described in section 1.1.3.</p>
<ul style="list-style-type:disc">
<li>To evaluate a function application, do the following:<ol class="BS_NumberList1">
<li><a id="c1-li-0013"/><span>1. </span>Evaluate the subexpressions of the application, namely the function expression and the argument expressions.</li>
<li><a id="c1-li-0014"/><span>2. </span>Apply the function that is the value of the function expression to the values of the argument expressions.</li>
</ol></li>
</ul>

<p class="Sp-text-1"><a id="c1-para-0111"/>square(2 + 5);</p>
<p class="Sp-text-1"><a id="c1-para-0112"/><i>49</i></p>
<p class="paracontinue"><a id="c1-para-0113"/>Here, the argument expression is itself a compound expression, the operator combination <span class="KeyTerm1">2 + 5</span>.</p>
<p class="Sp-text-1"><a id="c1-para-0114"/>square(square(3));</p>
<p class="Sp-text-1"><a id="c1-para-0115"/><i>81</i></p>
<p class="paracontinue"><a id="c1-para-0116"/>Of course function application expressions can also serve as argument expressions.</p>
<p><a id="c1-para-0117"/>We can also use <span class="KeyTerm1">square</span> as a building block in defining other functions. For example, <i>x</i><sup>2</sup> + <i>y</i><sup>2</sup> can be expressed as</p>
<p class="Sp-text-1"><a id="c1-para-0118"/>square(x) + square(y)</p>
<p class="paracontinue"><a id="c1-para-0119"/>We can easily declare a function <span class="KeyTerm1">sum_of_squares</span><a id="c1-fn-0009a"/><a href="#c1-fn-0009"><sup>9</sup></a> that, given any two numbers as arguments, produces the sum of their squares:</p>
<p class="Sp-text-1"><a id="c1-para-0120"/><b>function</b> sum_of_squares(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-0121"/>    <b>return</b> square(x) + square(y);</p>
<p class="Sp-text-1"><a id="c1-para-0122"/>}</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0123"/>sum_of_squares(3, 4);</p>
<p class="Sp-text-1"><a id="c1-para-0124"/><i>25</i></p>
<p class="paracontinue"><a id="c1-para-0125"/>Now we can use <span class="KeyTerm1">sum_of_squares</span> as a building block in constructing further functions:</p>
<p class="Sp-text-1"><a id="c1-para-0126"/><b>function</b> f(a) {</p>
<p class="Sp-text-1"><a id="c1-para-0127"/>    <b>return</b> sum_of_squares(a + 1, a * 2);</p>
<p class="Sp-text-1"><a id="c1-para-0128"/>}</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0129"/>f(5);</p>
<p class="Sp-text-1"><a id="c1-para-0130"/><i>136</i></p>
<p><a id="c1-para-0131"/>In addition to compound functions, any JavaScript environment provides primitive functions that are built into the interpreter or loaded from libraries. Besides the primitive functions provided by the operators, the JavaScript environment used in this book includes additional primitive functions such as the function <span class="KeyTerm1">math_log</span>, which computes the natural logarithm of its argument.<a id="c1-fn-0010a"/><a href="#c1-fn-0010"><sup>10</sup></a> These additional primitive functions are used in exactly the same way as compound functions; evaluating the application <span class="KeyTerm1">math_log(1)</span> results in the number 0. Indeed, one could not tell by looking at the definition of <span class="KeyTerm1">sum_of_squares</span> given above whether <span class="KeyTerm1">square</span> was built into the interpreter, loaded from a library, or defined as a compound function.</p>
</section>
<section>
<h3><a id="c1-sec-0010"/><span>1.1.5</span> <a id="c1-title-0011"/>The Substitution Model for Function Application</h3>
<p class="paraaftertitle"><a id="c1-para-0132"/>To evaluate a function application, the interpreter follows the process described in section 1.1.4. That is, the interpreter evaluates the elements of the application and applies the function (which is the value of the function expression of the application) to the arguments (which are the values of the argument expressions of the application).</p>
<p><a id="c1-para-0133"/>We can assume that the application of primitive functions is handled by the interpreter or libraries. For compound functions, the application process is as follows:</p>
<ul style="list-style-type:disc">
<li>To apply a compound function to arguments, evaluate the return expression of the function with each parameter replaced by the corresponding argument.<a id="c1-fn-0011a"/><a href="#c1-fn-0011"><sup>11</sup></a></li>
</ul>

<p class="paracontinue"><a id="c1-para-0135"/>To illustrate this process, let's evaluate the application</p>
<p class="Sp-text-1"><a id="c1-para-0136"/>f(5)</p>
<p class="paracontinue"><a id="c1-para-0137"/>where <span class="KeyTerm1">f</span> is the function declared in section 1.1.4. We begin by retrieving the return expression of <span class="KeyTerm1">f</span>:</p>
<p class="Sp-text-1"><a id="c1-para-0138"/>sum_of_squares(a + 1, a * 2)</p>
<p class="paracontinue"><a id="c1-para-0139"/>Then we replace the parameter <span class="KeyTerm1">a</span> by the argument 5:</p>
<p class="Sp-text-1"><a id="c1-para-0140"/>sum_of_squares(5 + 1, 5 * 2)</p>
<p class="paracontinue"><a id="c1-para-0141"/>Thus the problem reduces to the evaluation of an application with two arguments and a function expression <span class="KeyTerm1">sum_of_squares</span>. Evaluating this application involves three subproblems. We must evaluate the function expression to get the function to be applied, and we must evaluate the argument expressions to get the arguments. Now <span class="KeyTerm1">5 + 1</span> produces 6 and <span class="KeyTerm1">5 * 2</span> produces 10, so we must apply the <span class="KeyTerm1">sum_of_squares</span> function to 6 and 10. These values are substituted for the parameters <span class="KeyTerm1">x</span> and <span class="KeyTerm1">y</span> in the body of <span class="KeyTerm1">sum_of_squares</span>, reducing the expression to</p>
<p class="Sp-text-1"><a id="c1-para-0142"/>square(6) + square(10)</p>
<p class="paracontinue"><a id="c1-para-0143"/>If we use the declaration of <span class="KeyTerm1">square</span>, this reduces to</p>
<p class="Sp-text-1"><a id="c1-para-0144"/>(6 * 6) + (10 * 10)</p>
<p class="paracontinue"><a id="c1-para-0145"/>which reduces by multiplication to</p>
<p class="Sp-text-1"><a id="c1-para-0146"/>36 + 100</p>
<p class="paracontinue"><a id="c1-para-0147"/>and finally to</p>
<p class="Sp-text-1"><a id="c1-para-0148"/>136</p>
<p><a id="c1-para-0149"/>The process we have just described is called the <i>substitution model</i> for function application. It can be taken as a model that determines the “meaning” of function application, insofar as the functions in this chapter are concerned. However, there are two points that should be stressed:</p>
<ul style="list-style-type:disc">
<li>The purpose of the substitution is to help us think about function application, not to provide a description of how the interpreter really works. Typical interpreters do not evaluate function applications by manipulating the text of a function to substitute values for the parameters. In practice, the “substitution” is accomplished by using a local environment for the parameters. We will discuss this more fully in chapters 3 and 4 when we examine the implementation of an interpreter in detail.</li>
<li>Over the course of this book, we will present a sequence of increasingly elaborate models of how interpreters work, culminating with a complete implementation of an interpreter and compiler in chapter 5. The substitution model is only the first of these models—a way to get started thinking formally about the evaluation process. In general, when modeling phenomena in science and engineering, we begin with simplified, incomplete models. As we examine things in greater detail, these simple models become inadequate and must be replaced by more refined models. The substitution model is no exception. In particular, when we address in chapter 3 the use of functions with “mutable data,” we will see that the substitution model breaks down and must be replaced by a more complicated model of function application.<a id="c1-fn-0012a"/><a href="#c1-fn-0012"><sup>12</sup></a></li>
</ul>

<section>
<h5><a id="c1-sec-0011"/><a id="c1-title-0012"/>Applicative order versus normal order</h5>
<p class="paraaftertitle"><a id="c1-para-0152"/>According to the description of evaluation given in section 1.1.4, the interpreter first evaluates the function and argument expressions and then applies the resulting function to the resulting arguments. This is not the only way to perform evaluation. An alternative evaluation model would not evaluate the arguments until their values were needed. Instead it would first substitute argument expressions for parameters until it obtained an expression involving only operators and primitive functions, and would then perform the evaluation. If we used this method, the evaluation of</p>
<p class="Sp-text-1"><a id="c1-para-0153"/>f(5)</p>
<p class="paracontinue"><a id="c1-para-0154"/>would proceed according to the sequence of expansions</p>
<p class="Sp-text-1"><a id="c1-para-0155"/>sum_of_squares(5 + 1, 5 * 2)</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0156"/>square(5 + 1)     + square(5 * 2)</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0157"/>(5 + 1) * (5 + 1) + (5 * 2) * (5 * 2)</p>
<p class="paracontinue"><a id="c1-para-0158"/>followed by the reductions</p>
<p class="Sp-text-1"><a id="c1-para-0159"/>6    *    6    +    10    *    10</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0160"/>    36         +         100</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0161"/>              136</p>
<p class="paracontinue"><a id="c1-para-0162"/>This gives the same answer as our previous evaluation model, but the process is different. In particular, the evaluations of <span class="KeyTerm1">5 + 1</span> and <span class="KeyTerm1">5 * 2</span> are each performed twice here, corresponding to the reduction of the expression</p>
<p class="Sp-text-1"><a id="c1-para-0163"/>x * x</p>
<p class="paracontinue"><a id="c1-para-0164"/>with <span class="KeyTerm1">x</span> replaced respectively by <span class="KeyTerm1">5 + 1</span> and <span class="KeyTerm1">5 * 2</span>.</p>
<p><a id="c1-para-0165"/>This alternative “fully expand and then reduce” evaluation method is known as <i>normal-order evaluation</i>, in contrast to the “evaluate the arguments and then apply” method that the interpreter actually uses, which is called <i>applicative-order evaluation</i>. It can be shown that, for function applications that can be modeled using substitution (including all the functions in the first two chapters of this book) and that yield legitimate values, normal-order and applicative-order evaluation produce the same value. (See exercise 1.5 for an instance of an “illegitimate” value where normal-order and applicative-order evaluation do not give the same result.)</p>
<p><a id="c1-para-0166"/>JavaScript uses applicative-order evaluation, partly because of the additional efficiency obtained from avoiding multiple evaluations of expressions such as those illustrated with <span class="KeyTerm1">5 + 1</span> and <span class="KeyTerm1">5 * 2</span> above and, more significantly, because normalorder evaluation becomes much more complicated to deal with when we leave the realm of functions that can be modeled by substitution. On the other hand, normalorder evaluation can be an extremely valuable tool, and we will investigate some of its implications in chapters 3 and 4.<a id="c1-fn-0013a"/><a href="#c1-fn-0013"><sup>13</sup></a></p>
</section>
</section>
<section>
<h3><a id="c1-sec-0012"/><span>1.1.6</span> <a id="c1-title-0013"/>Conditional Expressions and Predicates</h3>
<p class="paraaftertitle"><a id="c1-para-0167"/>The expressive power of the class of functions that we can define at this point is very limited, because we have no way to make tests and to perform different operations depending on the result of a test. For instance, we cannot declare a function that computes the absolute value of a number by testing whether the number is nonnegative and taking different actions in each case according to the rule</p>
<p><a id="c1-para-0168"/></p>
<figure id="c1-fig-0003"><img alt="c1-fig-5002.jpg" src="../images/c1-fig-5002.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0169"/>This construct is a <i>case analysis</i> and can be written in JavaScript using a <i>conditional expression</i> as</p>
<p class="Sp-text-1"><a id="c1-para-0170"/><b>function</b> abs(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0171"/>    <b>return</b> x &gt;= 0 ? x : - x;</p>
<p class="Sp-text-1"><a id="c1-para-0172"/>}</p>
<p class="paracontinue"><a id="c1-para-0173"/>which could be expressed in English as “If <i>x</i> is greater than or equal to zero, return <i>x</i>; otherwise return –<i>x</i>.” The general form of a conditional expression is</p>
<p class="Sp-text-1"><a id="c1-para-0174"/><span class="KeyTerm2"><i>predicate</i></span> ? <span class="KeyTerm2"><i>consequent</i>-<i>expression</i></span> : <span class="KeyTerm2"><i>alternative</i>-<i>expression</i></span></p>
<p class="paracontinue"><a id="c1-para-0175"/>Conditional expressions begin with a <i>predicate</i>—that is, an expression whose value is either <i>true</i> or <i>false</i>, two distinguished <i>boolean</i> values in JavaScript. The primitive boolean expressions <span class="KeyTerm1"><b>true</b></span> and <span class="KeyTerm1"><b>false</b></span> trivially evaluate to the boolean values true and false, respectively. The <i>predicate</i> is followed by a question mark, the <i>consequent</i>-<i>expression</i>, a colon, and finally the <i>alternative</i>-<i>expression</i>.</p>
<p><a id="c1-para-0176"/>To evaluate a conditional expression, the interpreter starts by evaluating the <i>predicate</i> of the expression. If the <i>predicate</i> evaluates to true, the interpreter evaluates the <i>consequent</i>-<i>expression</i> and returns its value as the value of the conditional. If the <i>predicate</i> evaluates to false, it evaluates the <i>alternative</i>-<i>expression</i> and returns its value as the value of the conditional.<a id="c1-fn-0014a"/><a href="#c1-fn-0014"><sup>14</sup></a></p>
<p><a id="c1-para-0177"/>The word <i>predicate</i> is used for operators and functions that return true or false, as well as for expressions that evaluate to true or false. The absolute-value function <span class="KeyTerm1">abs</span> makes use of the primitive predicate <span class="KeyTerm1">&gt;=</span>, an operator that takes two numbers as arguments and tests whether the first number is greater than or equal to the second number, returning true or false accordingly.</p>
<p><a id="c1-para-0178"/>If we prefer to handle the zero case separately, we can specify the function that computes the absolute value of a number by writing</p>
<p><a id="c1-para-0179"/></p>
<figure id="c1-fig-0004"><img alt="c1-fig-5003.jpg" src="../images/c1-fig-5003.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0180"/>In JavaScript, we express a case analysis with multiple cases by nesting conditional expressions as alternative expressions inside other conditional expressions:</p>
<p class="Sp-text-1"><a id="c1-para-0181"/><b>function</b> abs(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0182"/>    <b>return</b> x &gt; 0</p>
<p class="Sp-text-1"><a id="c1-para-0183"/>           ? x</p>
<p class="Sp-text-1"><a id="c1-para-0184"/>           : x === 0</p>
<p class="Sp-text-1"><a id="c1-para-0185"/>           ? 0</p>
<p class="Sp-text-1"><a id="c1-para-0186"/>           : - x;</p>
<p class="Sp-text-1"><a id="c1-para-0187"/>}</p>
<p class="paracontinue"><a id="c1-para-0188"/>Parentheses are not needed around the alternative expression <span class="KeyTerm1">x === 0 ? 0 : - x</span>, because the conditional-expression syntactic form is right-associative. The interpreter ignores spaces and line breaks, here inserted for readability to align the <span class="KeyTerm1">?</span>'s and <span class="KeyTerm1">:</span>'s under the first predicate of the case analysis. The general form of a case analysis is</p>
<p class="Sp-text-1"><a id="c1-para-0189"/><span class="KeyTerm2"><i>p</i><sub>1</sub></span></p>
<p class="Sp-text-1"><a id="c1-para-0190"/>? <span class="KeyTerm2"><i>e</i><sub>1</sub></span></p>
<p class="Sp-text-1"><a id="c1-para-0191"/>: <span class="KeyTerm2"><i>p</i><sub>2</sub></span></p>
<p class="Sp-text-1"><a id="c1-para-0192"/>? <span class="KeyTerm2"><i>e</i><sub>2</sub></span></p>
<p class="Sp-text-1"><a id="c1-para-0193"/>⁝</p>
<p class="Sp-text-1"><a id="c1-para-0194"/>: <span class="KeyTerm2"><i>p<sub>n</sub></i></span></p>
<p class="Sp-text-1"><a id="c1-para-0195"/>? <span class="KeyTerm2"><i>e<sub>n</sub></i></span></p>
<p class="Sp-text-1"><a id="c1-para-0196"/>: <span class="KeyTerm2"><i>final</i>-<i>alternative</i>-<i>expression</i></span></p>
<p class="paracontinue"><a id="c1-para-0197"/>We call a predicate <i>p<sub>i </sub></i>together with its consequent expression <i>e<sub>i </sub></i>a <i>clause</i>. A case analysis can be seen as a sequence of clauses, followed by a final alternative expression. According to the evaluation of conditional expressions, a case analysis is evaluated by first evaluating the predicate <i>p</i><sub>1</sub>. If its value is false, then <i>p</i><sub>2</sub> is evaluated. If <i>p</i><sub>2</sub>'s value is also false, then <i>p</i><sub>3</sub> is evaluated. This process continues until a predicate is found whose value is true, in which case the interpreter returns the value of the corresponding consequent expression <i>e</i> of the clause as the value of the case analysis. If none of the <i>p</i>'s is found to be true, the value of the case analysis is the value of the final alternative expression.</p>
<p><a id="c1-para-0198"/>In addition to primitive predicates such as <span class="KeyTerm1">&gt;=</span>, <span class="KeyTerm1">&gt;</span>, <span class="KeyTerm1">&lt;</span>, <span class="KeyTerm1">&lt;=</span>, <span class="KeyTerm1">===</span>, and <span class="KeyTerm1">!==</span> that are applied to numbers,<a id="c1-fn-0015a"/><a href="#c1-fn-0015"><sup>15</sup></a> there are logical composition operations, which enable us to construct compound predicates. The three most frequently used are these:</p>
<ul style="list-style-type:disc">
<li><i>expression</i><sub>1</sub> <span class="KeyTerm1">&amp;&amp;</span> <i>expression</i><sub>2</sub>
<p class="paraaftertitle"><a id="c1-para-0200"/>This operation expresses <i>logical conjunction</i>, meaning roughly the same as the English word “and.” This syntactic form is syntactic sugar<a id="c1-fn-0016a"/><a href="#c1-fn-0016"><sup>16</sup></a> for</p>
<p class="paraaftertitle"><a id="c1-para-0201"/><i>expression</i><sub>1</sub> <span class="KeyTerm1">?</span> <i>expression</i><sub>2</sub> <span class="KeyTerm1">: <b>false</b></span>.</p></li>
<li><i>expression</i><sub>1</sub> <span class="KeyTerm1">||</span> <i>expression</i><sub>2</sub>
<p class="paraaftertitle"><a id="c1-para-0203"/>This operation expresses <i>logical disjunction</i>, meaning roughly the same as the English word “or.” This syntactic form is syntactic sugar for</p>
<p class="paraaftertitle"><a id="c1-para-0204"/><i>expression</i><sub>1</sub> <span class="KeyTerm1">? <b>true</b> :</span> <i>expression</i><sub>2</sub>.</p></li>
<li><span class="KeyTerm1">!</span> <i>expression</i>
<p class="paraaftertitle"><a id="c1-para-0206"/>This operation expresses <i>logical negation</i>, meaning roughly the same as the English word “not.” The value of the expression is true when <i>expression</i> evaluates to false, and false when <i>expression</i> evaluates to true.</p></li>
</ul>

<p class="paracontinue"><a id="c1-para-0207"/>Notice that <span class="KeyTerm1">&amp;&amp;</span> and <span class="KeyTerm1">||</span> are syntactic forms, not operators; their right-hand expression is not always evaluated. The operator <span class="KeyTerm1">!</span>, on the other hand, follows the evaluation rule of section 1.1.3. It is a <i>unary</i> operator, which means that it takes only one argument, whereas the arithmetic operators and primitive predicates discussed so far are <i>binary</i>, taking two arguments. The operator <span class="KeyTerm1">!</span> precedes its argument; we call it a <i>prefix operator</i>. Another prefix operator is the numeric negation operator, an example of which is the expression <span class="KeyTerm1">- x</span> in the <span class="KeyTerm1">abs</span> functions above.</p>
<p><a id="c1-para-0208"/>As an example of how these predicates are used, the condition that a number <i>x</i> be in the range 5 &lt; <i>x</i> &lt; 10 may be expressed as</p>
<p class="Sp-text-1"><a id="c1-para-0209"/>x &gt; 5 &amp;&amp; x &lt; 10</p>
<p class="paracontinue"><a id="c1-para-0210"/>The syntactic form <span class="KeyTerm1">&amp;&amp;</span> has lower precedence than the comparison operators <span class="KeyTerm1">&gt;</span> and <span class="KeyTerm1">&lt;</span>, and the conditional-expression syntactic form <span class="KeyTerm1">· · · ?· · · :· · ·</span> has lower precedence than any other operator we have encountered so far, a property we used in the <span class="KeyTerm1">abs</span> functions above.</p>
<p><a id="c1-para-0211"/>As another example, we can declare a predicate to test whether one number is greater than or equal to another as</p>
<p class="Sp-text-1"><a id="c1-para-0212"/><b>function</b> greater_or_equal(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-0213"/>    <b>return</b> x &gt; y || x === y;</p>
<p class="Sp-text-1"><a id="c1-para-0214"/>}</p>
<p class="paracontinue"><a id="c1-para-0215"/>or alternatively as</p>
<p class="Sp-text-1"><a id="c1-para-0216"/><b>function</b> greater_or_equal(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-0217"/>    <b>return</b> ! (x &lt; y);</p>
<p class="Sp-text-1"><a id="c1-para-0218"/>}</p>
<p class="paracontinue"><a id="c1-para-0219"/>The function <span class="KeyTerm1">greater_or_equal</span>, when applied to two numbers, behaves the same as the operator <span class="KeyTerm1">&gt;=</span>. Unary operators have higher precedence than binary operators, which makes the parentheses in this example necessary.</p>
<section>
<h5><a id="c1-sec-0013"/><a id="c1-title-0014"/>Exercise 1.1</h5>
<p class="paraaftertitle"><a id="c1-para-0220"/>Below is a sequence of statements. What is the result printed by the interpreter in response to each statement? Assume that the sequence is to be evaluated in the order in which it is presented.</p>
<p class="Sp-text-1"><a id="c1-para-0221"/>10;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0222"/>5 + 3 + 4;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0223"/>9 - 1;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0224"/>6 / 2;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0225"/>2 * 4 + (4 - 6);</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0226"/><b>const</b> a = 3;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0227"/><b>const</b> b = a + 1;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0228"/> a + b + a * b;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0229"/>a === b;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0230"/>b &gt; a &amp;&amp; b &lt; a * b ? b : a;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0231"/>a === 4</p>
<p class="Sp-text-1"><a id="c1-para-0232"/>? 6</p>
<p class="Sp-text-1"><a id="c1-para-0233"/>: b === 4</p>
<p class="Sp-text-1"><a id="c1-para-0234"/>? 6 + 7 + a</p>
<p class="Sp-text-1"><a id="c1-para-0235"/>: 25;</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0236"/>2 + (b &gt; a ? b : a);</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0237"/>(a &gt; b</p>
<p class="Sp-text-1"><a id="c1-para-0238"/>? a</p>
<p class="Sp-text-1"><a id="c1-para-0239"/>: a &lt; b</p>
<p class="Sp-text-1"><a id="c1-para-0240"/>? b</p>
<p class="Sp-text-1"><a id="c1-para-0241"/>: -1)</p>
<p class="Sp-text-1"><a id="c1-para-0242"/>*</p>
<p class="Sp-text-1"><a id="c1-para-0243"/>(a + 1);</p>
<p class="paracontinue"><a id="c1-para-0244"/>The parentheses around the conditional expressions in the last two statements are necessary because the conditional-expression syntactic form has lower precedence than the arithmetic operators <span class="KeyTerm1">+</span> and <span class="KeyTerm1">*</span>.</p>
</section>
<section>
<h5><a id="c1-sec-0014"/><a id="c1-title-0015"/>Exercise 1.2</h5>
<p class="paraaftertitle"><a id="c1-para-0245"/>Translate the following expression into JavaScript</p>
<p><a id="c1-para-0246"/></p>
<figure id="c1-fig-0005"><img alt="c1-fig-5004.jpg" src="../images/c1-fig-5004.jpg"/><figcaption class="figurecaption">
</figcaption></figure>
</section>
<section>
<h5><a id="c1-sec-0015"/><a id="c1-title-0016"/>Exercise 1.3</h5>
<p class="paraaftertitle"><a id="c1-para-0247"/>Declare a function that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.</p>
</section>
<section>
<h5><a id="c1-sec-0016"/><a id="c1-title-0017"/>Exercise 1.4</h5>
<p class="paraaftertitle"><a id="c1-para-0248"/>Observe that our model of evaluation allows for applications whose function expressions are compound expressions. Use this observation to describe the behavior of <span class="KeyTerm1">a_plus_abs_b</span>:</p>
<p class="Sp-text-1"><a id="c1-para-0249"/><b>function</b> plus(a, b) { <b>return</b> a + b; }</p>
<p class="Sp-text-1"><a id="c1-para-0250"/><b>function</b> minus(a, b) { <b>return</b> a - b; }</p>
<p class="Sp-text-1"><a id="c1-para-0251"/><b>function</b> a_plus_abs_b(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0252"/>    <b>return</b> (b &gt;= 0 ? plus : minus)(a, b);</p>
<p class="Sp-text-1"><a id="c1-para-0253"/>}</p>
</section>
<section>
<h5><a id="c1-sec-0017"/><a id="c1-title-0018"/>Exercise 1.5</h5>
<p class="paraaftertitle"><a id="c1-para-0254"/>Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He declares the following two functions:</p>
<p class="Sp-text-1"><a id="c1-para-0255"/><b>function</b> p() { <b>return</b> p(); }</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0256"/><b>function</b> test(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-0257"/>    <b>return</b> x === 0 ? 0 : y;</p>
<p class="Sp-text-1"><a id="c1-para-0258"/>}</p>
<p class="paracontinue"><a id="c1-para-0259"/>Then he evaluates the statement</p>
<p class="Sp-text-1"><a id="c1-para-0260"/>test(0, p());</p>
<p class="paracontinue"><a id="c1-para-0261"/>What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for conditional expressions is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)</p>
</section>
</section>
<section>
<h3><a id="c1-sec-0018"/><span>1.1.7</span> <a id="c1-title-0019"/>Example: Square Roots by Newton's Method</h3>
<p class="paraaftertitle"><a id="c1-para-0262"/>Functions, as introduced above, are much like ordinary mathematical functions. They specify a value that is determined by one or more parameters. But there is an important difference between mathematical functions and computer functions. Computer functions must be effective.</p>
<p><a id="c1-para-0263"/>As a case in point, consider the problem of computing square roots. We can define the square-root function as</p>
<p class="Sp-text-2"><a id="c1-para-0264"/><img alt="c1-fig-5005.jpg" src="../images/c1-fig-5005.jpg"/> = the <i>y</i> such that <i>y</i> ≥ 0 and <i>y</i><sup>2 </sup>= <i>x</i></p>
<p class="paracontinue"><a id="c1-para-0265"/>This describes a perfectly legitimate mathematical function. We could use it to recognize whether one number is the square root of another, or to derive facts about square roots in general. On the other hand, the definition does not describe a computer function. Indeed, it tells us almost nothing about how to actually find the square root of a given number. It will not help matters to rephrase this definition in pseudo-JavaScript:</p>
<p class="Sp-text-1"><a id="c1-para-0266"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0267"/>    <b>return</b> the y with y &gt;= 0 &amp;&amp; square(y) === x;</p>
<p class="Sp-text-1"><a id="c1-para-0268"/>}</p>
<p class="paracontinue"><a id="c1-para-0269"/>This only begs the question.</p>
<p><a id="c1-para-0270"/>The contrast between mathematical function and computer function is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative (what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions.<a id="c1-fn-0017a"/><a href="#c1-fn-0017"><sup>17</sup></a></p>
<p><a id="c1-para-0271"/>How does one compute square roots? The most common way is to use Newton's method of successive approximations, which says that whenever we have a guess <i>y</i> for the value of the square root of a number <i>x</i>, we can perform a simple manipulation to get a better guess (one closer to the actual square root) by averaging <i>y</i> with <i>x</i>/<i>y</i>.<a id="c1-fn-0018a"/><a href="#c1-fn-0018"><sup>18</sup></a> For example, we can compute the square root of 2 as follows. Suppose our initial guess is 1:</p>
<p><a id="c1-para-0272"/></p>
<figure id="c1-fig-0006"><img alt="c1-fig-5006.jpg" src="../images/c1-fig-5006.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0273"/>Continuing this process, we obtain better and better approximations to the square root.</p>
<p><a id="c1-para-0274"/>Now let's formalize the process in terms of functions. We start with a value for the radicand (the number whose square root we are trying to compute) and a value for the guess. If the guess is good enough for our purposes, we are done; if not, we must repeat the process with an improved guess. We write this basic strategy as a function:</p>
<p class="Sp-text-1"><a id="c1-para-0275"/><b>function</b> sqrt_iter(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0276"/>    <b>return</b> is_good_enough(guess, x)</p>
<p class="Sp-text-1"><a id="c1-para-0277"/>           ? guess</p>
<p class="Sp-text-1"><a id="c1-para-0278"/>           : sqrt_iter(improve(guess, x), x);</p>
<p class="Sp-text-1"><a id="c1-para-0279"/>}</p>
<p class="paracontinue"><a id="c1-para-0280"/>A guess is improved by averaging it with the quotient of the radicand and the old guess:</p>
<p class="Sp-text-1"><a id="c1-para-0281"/><b>function</b> improve(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0282"/>    <b>return</b> average(guess, x / guess);</p>
<p class="Sp-text-1"><a id="c1-para-0283"/>}</p>
<p class="paracontinue"><a id="c1-para-0284"/>where</p>
<p class="Sp-text-1"><a id="c1-para-0285"/><b>function</b> average(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-0286"/>    <b>return</b> (x + y) / 2;</p>
<p class="Sp-text-1"><a id="c1-para-0287"/>}</p>
<p class="paracontinue"><a id="c1-para-0288"/>We also have to say what we mean by “good enough.” The following will do for illustration, but it is not really a very good test. (See exercise 1.7.) The idea is to improve the answer until it is close enough so that its square differs from the radicand by less than a predetermined tolerance (here 0.001):<a id="c1-fn-0019a"/><a href="#c1-fn-0019"><sup>19</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-0289"/><b>function</b> is_good_enough(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0290"/>    <b>return</b> abs(square(guess) - x) &lt; 0.001;</p>
<p class="Sp-text-1"><a id="c1-para-0291"/>}</p>
<p class="paracontinue"><a id="c1-para-0292"/>Finally, we need a way to get started. For instance, we can always guess that the square root of any number is 1:</p>
<p class="Sp-text-1"><a id="c1-para-0293"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0294"/>    <b>return</b> sqrt_iter(1, x);</p>
<p class="Sp-text-1"><a id="c1-para-0295"/>}</p>
<p class="paracontinue"><a id="c1-para-0296"/>If we type these declarations to the interpreter, we can use <span class="KeyTerm1">sqrt</span> just as we can use any function:</p>
<p class="Sp-text-1"><a id="c1-para-0297"/>sqrt(9);</p>
<p class="Sp-text-1"><a id="c1-para-0298"/><i>3.00009155413138</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0299"/>sqrt(100 + 37);</p>
<p class="Sp-text-1"><a id="c1-para-0300"/><i>11.704699917758145</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0301"/>sqrt(sqrt(2) + sqrt(3));</p>
<p class="Sp-text-1"><a id="c1-para-0302"/><i>1.7739279023207892</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0303"/>square(sqrt(1000));</p>
<p class="Sp-text-1"><a id="c1-para-0304"/><i>1000.000369924366</i></p>
<p><a id="c1-para-0305"/>The <span class="KeyTerm1">sqrt</span> program also illustrates that the simple functional language we have introduced so far is sufficient for writing any purely numerical program that one could write in, say, C or Pascal. This might seem surprising, since we have not included in our language any iterative (looping) constructs that direct the computer to do something over and over again. The function <span class="KeyTerm1">sqrt_iter</span>, on the other hand, demonstrates how iteration can be accomplished using no special construct other than the ordinary ability to call a function.<a id="c1-fn-0020a"/><a href="#c1-fn-0020"><sup>20</sup></a></p>
<section>
<h5><a id="c1-sec-0019"/><a id="c1-title-0020"/>Exercise 1.6</h5>
<p class="paraaftertitle"><a id="c1-para-0306"/>Alyssa P. Hacker doesn't like the syntax of conditional expressions, involving the characters <span class="KeyTerm1">?</span> and <span class="KeyTerm1">:</span>. “Why can't I just declare an ordinary conditional function whose application works just like conditional expressions?” she asks.<a id="c1-fn-0021a"/><a href="#c1-fn-0021"><sup>21</sup></a> Alyssa's friend Eva Lu Ator claims this can indeed be done, and she declares a <span class="KeyTerm1">conditional</span> function as follows:</p>
<p class="Sp-text-1"><a id="c1-para-0307"/><b>function</b> conditional(predicate, then_clause, else_clause) {</p>
<p class="Sp-text-1"><a id="c1-para-0308"/>    <b>return</b> predicate ? then_clause : else_clause;</p>
<p class="Sp-text-1"><a id="c1-para-0309"/>}</p>
<p class="paracontinue"><a id="c1-para-0310"/>Eva demonstrates the program for Alyssa:</p>
<p class="Sp-text-1"><a id="c1-para-0311"/>conditional(2 === 3, 0, 5);</p>
<p class="Sp-text-1"><a id="c1-para-0312"/><i>5</i></p>
<p class="Sp-text-1"><a id="c1-para-0313"/>conditional(1 === 1, 0, 5);</p>
<p class="Sp-text-1"><a id="c1-para-0314"/><i>0</i></p>
<p class="paracontinue"><a id="c1-para-0315"/>Delighted, Alyssa uses <span class="KeyTerm1">conditional</span> to rewrite the square-root program:</p>
<p class="Sp-text-1"><a id="c1-para-0316"/><b>function</b> sqrt_iter(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0317"/>    <b>return</b> conditional(is_good_enough(guess, x),</p>
<p class="Sp-text-1"><a id="c1-para-0318"/>                        guess,</p>
<p class="Sp-text-1"><a id="c1-para-0319"/>                        sqrt_iter(improve(guess, x),</p>
<p class="Sp-text-1"><a id="c1-para-0320"/>                                  x));</p>
<p class="Sp-text-1"><a id="c1-para-0321"/>}</p>
<p class="paracontinue"><a id="c1-para-0322"/>What happens when Alyssa attempts to use this to compute square roots? Explain.</p>
</section>
<section>
<h5><a id="c1-sec-0020"/><a id="c1-title-0021"/>Exercise 1.7</h5>
<p class="paraaftertitle"><a id="c1-para-0323"/>The <span class="KeyTerm1">is_good_enough</span> test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing <span class="KeyTerm1">is_good_enough</span> is to watch how <span class="KeyTerm1">guess</span> changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root function that uses this kind of end test. Does this work better for small and large numbers?</p>
</section>
<section>
<h5><a id="c1-sec-0021"/><a id="c1-title-0022"/>Exercise 1.8</h5>
<p class="paraaftertitle"><a id="c1-para-0324"/>Newton's method for cube roots is based on the fact that if <i>y</i> is an approximation to the cube root of <i>x</i>, then a better approximation is given by the value</p>
<p><a id="c1-para-0325"/></p>
<figure id="c1-fig-0007"><img alt="c1-fig-5007.jpg" src="../images/c1-fig-5007.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0326"/>Use this formula to implement a cube-root function analogous to the square-root function. (In section 1.3.4 we will see how to implement Newton's method in general as an abstraction of these square-root and cube-root functions.)</p>
</section>
</section>
<section>
<h3><a id="c1-sec-0022"/><span>1.1.8</span> <a id="c1-title-0023"/>Functions as Black-Box Abstractions</h3>
<p class="paraaftertitle"><a id="c1-para-0327"/>The function <span class="KeyTerm1">sqrt</span> is our first example of a process defined by a set of mutually defined functions. Notice that the declaration of <span class="KeyTerm1">sqrt_iter</span> is <i>recursive</i>; that is, the function is defined in terms of itself. The idea of being able to define a function in terms of itself may be disturbing; it may seem unclear how such a “circular” definition could make sense at all, much less specify a well-defined process to be carried out by a computer. This will be addressed more carefully in section 1.2. But first let's consider some other important points illustrated by the <span class="KeyTerm1">sqrt</span> example.</p>
<p><a id="c1-para-0328"/>Observe that the problem of computing square roots breaks up naturally into a number of subproblems: how to tell whether a guess is good enough, how to improve a guess, and so on. Each of these tasks is accomplished by a separate function. The entire <span class="KeyTerm1">sqrt</span> program can be viewed as a cluster of functions (shown in <a id="c1-fig-0008a"/><a href="#c1-fig-0008">figure 1.2</a>) that mirrors the decomposition of the problem into subproblems.</p>
<figure id="c1-fig-0008"><img alt="c1-fig-0002.jpg" src="../images/c1-fig-0002.jpg"/><figcaption class="figurecaption">
<p><span class="figureLabel"><a href="#c1-fig-0008a">Figure 1.2</a></span> <a id="c1-para-0329"/>Functional decomposition of the <span class="KeyTerm1">sqrt</span> program.</p></figcaption></figure>
<p><a id="c1-para-0330"/>The importance of this decomposition strategy is not simply that one is dividing the program into parts. After all, we could take any large program and divide it into parts—the first ten lines, the next ten lines, the next ten lines, and so on. Rather, it is crucial that each function accomplishes an identifiable task that can be used as a module in defining other functions. For example, when we define the <span class="KeyTerm1">is_good_enough</span> function in terms of <span class="KeyTerm1">square</span>, we are able to regard the <span class="KeyTerm1">square</span> function as a “black box.” We are not at that moment concerned with <i>how</i> the function computes its result, only with the fact <i>that</i> it computes the square. The details of how the square is computed can be suppressed, to be considered at a later time. Indeed, as far as the <span class="KeyTerm1">is_good_enough</span> function is concerned, <span class="KeyTerm1">square</span> is not quite a function but rather an abstraction of a function, a so-called <i>functional abstraction</i>. At this level of abstraction, any function that computes the square is equally good.</p>
<p><a id="c1-para-0331"/>Thus, considering only the values they return, the following two functions squaring a number should be indistinguishable. Each takes a numerical argument and produces the square of that number as the value.<a id="c1-fn-0022a"/><a href="#c1-fn-0022"><sup>22</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-0332"/><b>function</b> square(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0333"/>    <b>return</b> x * x;</p>
<p class="Sp-text-1"><a id="c1-para-0334"/>}</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0335"/><b>function</b> square(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0336"/>    <b>return</b> math_exp(double(math_log(x)));</p>
<p class="Sp-text-1"><a id="c1-para-0337"/>}</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0338"/><b>function</b> double(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0339"/>    <b>return</b> x + x;</p>
<p class="Sp-text-1"><a id="c1-para-0340"/>}</p>
<p><a id="c1-para-0341"/>So a function should be able to suppress detail. The users of the function may not have written the function themselves, but may have obtained it from another programmer as a black box. A user should not need to know how the function is implemented in order to use it.</p>
<section>
<h5><a id="c1-sec-0023"/><a id="c1-title-0024"/>Local names</h5>
<p class="paraaftertitle"><a id="c1-para-0342"/>One detail of a function's implementation that should not matter to the user of the function is the implementer's choice of names for the function's parameters. Thus, the following functions should not be distinguishable:</p>
<p class="Sp-text-1"><a id="c1-para-0343"/><b>function</b> square(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0344"/>    <b>return</b> x * x;</p>
<p class="Sp-text-1"><a id="c1-para-0345"/>}</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0346"/><b>function</b> square(y) {</p>
<p class="Sp-text-1"><a id="c1-para-0347"/>    <b>return</b> y * y;</p>
<p class="Sp-text-1"><a id="c1-para-0348"/>}</p>
<p class="paracontinue"><a id="c1-para-0349"/>This principle—that the meaning of a function should be independent of the parameter names used by its author—seems on the surface to be self-evident, but its consequences are profound. The simplest consequence is that the parameter names of a function must be local to the body of the function. For example, we used <span class="KeyTerm1">square</span> in the declaration of <span class="KeyTerm1">is_good_enough</span> in our square-root function:</p>
<p class="Sp-text-1"><a id="c1-para-0350"/><b>function</b> is_good_enough(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0351"/>    <b>return</b> abs(square(guess) - x) &lt; 0.001;</p>
<p class="Sp-text-1"><a id="c1-para-0352"/>}</p>
<p class="paracontinue"><a id="c1-para-0353"/>The intention of the author of <span class="KeyTerm1">is_good_enough</span> is to determine if the square of the first argument is within a given tolerance of the second argument. We see that the author of <span class="KeyTerm1">is_good_enough</span> used the name <span class="KeyTerm1">guess</span> to refer to the first argument and <span class="KeyTerm1">x</span> to refer to the second argument. The argument of <span class="KeyTerm1">square</span> is <span class="KeyTerm1">guess</span>. If the author of <span class="KeyTerm1">square</span> used <span class="KeyTerm1">x</span> (as above) to refer to that argument, we see that the <span class="KeyTerm1">x</span> in <span class="KeyTerm1">is_good_ enough</span> must be a different <span class="KeyTerm1">x</span> than the one in <span class="KeyTerm1">square</span>. Running the function <span class="KeyTerm1">square</span> must not affect the value of <span class="KeyTerm1">x</span> that is used by <span class="KeyTerm1">is_good_enough</span>, because that value of <span class="KeyTerm1">x</span> may be needed by <span class="KeyTerm1">is_good_enough</span> after <span class="KeyTerm1">square</span> is done computing.</p>
<p><a id="c1-para-0354"/>If the parameters were not local to the bodies of their respective functions, then the parameter <span class="KeyTerm1">x</span> in <span class="KeyTerm1">square</span> could be confused with the parameter <span class="KeyTerm1">x</span> in <span class="KeyTerm1">is_good_ enough</span>, and the behavior of <span class="KeyTerm1">is_good_enough</span> would depend upon which version of <span class="KeyTerm1">square</span> we used. Thus, <span class="KeyTerm1">square</span> would not be the black box we desired.</p>
<p><a id="c1-para-0355"/>A parameter of a function has a very special role in the function declaration, in that it doesn't matter what name the parameter has. Such a name is called <i>bound</i>, and we say that the function declaration <i>binds</i> its parameters. The meaning of a function declaration is unchanged if a bound name is consistently renamed throughout the declaration.<a id="c1-fn-0023a"/><a href="#c1-fn-0023"><sup>23</sup></a> If a name is not bound, we say that it is <i>free</i>. The set of statements for which a binding declares a name is called the <i>scope</i> of that name. In a function declaration, the bound names declared as the parameters of the function have the body of the function as their scope.</p>
<p><a id="c1-para-0356"/>In the declaration of <span class="KeyTerm1">is_good_enough</span> above, <span class="KeyTerm1">guess</span> and <span class="KeyTerm1">x</span> are bound names but <span class="KeyTerm1">abs</span> and <span class="KeyTerm1">square</span> are free. The meaning of <span class="KeyTerm1">is_good_enough</span> should be independent of the names we choose for <span class="KeyTerm1">guess</span> and <span class="KeyTerm1">x</span> so long as they are distinct and different from <span class="KeyTerm1">abs</span> and <span class="KeyTerm1">square</span>. (If we renamed <span class="KeyTerm1">guess</span> to <span class="KeyTerm1">abs</span> we would have introduced a bug by <i>capturing</i> the name <span class="KeyTerm1">abs</span>. It would have changed from free to bound.) The meaning of <span class="KeyTerm1">is_good_enough</span> is not independent of the choice of its free names, however. It surely depends upon the fact (external to this declaration) that the name <span class="KeyTerm1">abs</span> refers to a function for computing the absolute value of a number. The function <span class="KeyTerm1">is_good_enough</span> will compute a different function if we substitute <span class="KeyTerm1">math_cos</span> (the primitive cosine function) for <span class="KeyTerm1">abs</span> in its declaration.</p>
</section>
<section>
<h5><a id="c1-sec-0024"/><a id="c1-title-0025"/>Internal declarations and block structure</h5>
<p class="paraaftertitle"><a id="c1-para-0357"/>We have one kind of name isolation available to us so far: The parameters of a function are local to the body of the function. The square-root program illustrates another way in which we would like to control the use of names. The existing program consists of separate functions:</p>
<p class="Sp-text-1"><a id="c1-para-0358"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0359"/>    <b>return</b> sqrt_iter(1, x);</p>
<p class="Sp-text-1"><a id="c1-para-0360"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0361"/><b>function</b> sqrt_iter(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0362"/>    <b>return</b> is_good_enough(guess, x)</p>
<p class="Sp-text-1"><a id="c1-para-0363"/>           ? guess</p>
<p class="Sp-text-1"><a id="c1-para-0364"/>           : sqrt_iter(improve(guess, x), x);</p>
<p class="Sp-text-1"><a id="c1-para-0365"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0366"/><b>function</b> is_good_enough(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0367"/>    <b>return</b> abs(square(guess) - x) &lt; 0.001;</p>
<p class="Sp-text-1"><a id="c1-para-0368"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0369"/><b>function</b> improve(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0370"/>    <b>return</b> average(guess, x / guess);</p>
<p class="Sp-text-1"><a id="c1-para-0371"/>}</p>
<p><a id="c1-para-0372"/>The problem with this program is that the only function that is important to users of <span class="KeyTerm1">sqrt</span> is <span class="KeyTerm1">sqrt</span>. The other functions (<span class="KeyTerm1">sqrt_iter</span>, <span class="KeyTerm1">is_good_enough</span>, and <span class="KeyTerm1">improve</span>) only clutter up their minds. They may not declare any other function called <span class="KeyTerm1">is_good_enough</span> as part of another program to work together with the square-root program, because <span class="KeyTerm1">sqrt</span> needs it. The problem is especially severe in the construction of large systems by many separate programmers. For example, in the construction of a large library of numerical functions, many numerical functions are computed as successive approximations and thus might have functions named <span class="KeyTerm1">is_good_enough</span> and <span class="KeyTerm1">improve</span> as auxiliary functions. We would like to localize the subfunctions, hiding them inside <span class="KeyTerm1">sqrt</span> so that <span class="KeyTerm1">sqrt</span> could coexist with other successive approximations, each having its own private <span class="KeyTerm1">is_good_enough</span> function.<br/>To make this possible, we allow a function to have internal declarations that are local to that function. For example, in the square-root problem we can write</p>
<p class="Sp-text-1"><a id="c1-para-0373"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0374"/>    <b>function</b> is_good_enough(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0375"/>        <b>return</b> abs(square(guess) - x) &lt; 0.001;</p>
<p class="Sp-text-1"><a id="c1-para-0376"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0377"/>    <b>function</b> improve(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0378"/>        <b>return</b> average(guess, x / guess);</p>
<p class="Sp-text-1"><a id="c1-para-0379"/>        }</p>
<p class="Sp-text-1"><a id="c1-para-0380"/>    <b>function</b> sqrt_iter(guess, x) {</p>
<p class="Sp-text-1"><a id="c1-para-0381"/>        <b>return</b> is_good_enough(guess, x)</p>
<p class="Sp-text-1"><a id="c1-para-0382"/>               ? guess</p>
<p class="Sp-text-1"><a id="c1-para-0383"/>               : sqrt_iter(improve(guess, x), x);</p>
<p class="Sp-text-1"><a id="c1-para-0384"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0385"/>    <b>return</b> sqrt_iter(1, x);</p>
<p class="Sp-text-1"><a id="c1-para-0386"/>}</p>
<p><a id="c1-para-0387"/>Any matching pair of braces designates a <i>block</i>, and declarations inside the block are local to the block. Such nesting of declarations, called <i>block structure</i>, is basically the right solution to the simplest name-packaging problem. But there is a better idea lurking here. In addition to internalizing the declarations of the auxiliary functions, we can simplify them. Since <span class="KeyTerm1">x</span> is bound in the declaration of <span class="KeyTerm1">sqrt</span>, the functions <span class="KeyTerm1">is_good_enough</span>, <span class="KeyTerm1">improve</span>, and <span class="KeyTerm1">sqrt_iter</span>, which are declared internally to <span class="KeyTerm1">sqrt</span>, are in the scope of <span class="KeyTerm1">x</span>. Thus, it is not necessary to pass <span class="KeyTerm1">x</span> explicitly to each of these functions. Instead, we allow <span class="KeyTerm1">x</span> to be a free name in the internal declarations, as shown below. Then <span class="KeyTerm1">x</span> gets its value from the argument with which the enclosing function <span class="KeyTerm1">sqrt</span> is called. This discipline is called <i>lexical scoping</i>.<a id="c1-fn-0024a"/><a href="#c1-fn-0024"><sup>24</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-0388"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0389"/>    <b>function</b> is_good_enough(guess) {</p>
<p class="Sp-text-1"><a id="c1-para-0390"/>        <b>return</b> abs(square(guess) - x) &lt; 0.001;</p>
<p class="Sp-text-1"><a id="c1-para-0391"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0392"/>    <b>function</b> improve(guess) {</p>
<p class="Sp-text-1"><a id="c1-para-0393"/>        <b>return</b> average(guess, x / guess);</p>
<p class="Sp-text-1"><a id="c1-para-0394"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0395"/>    <b>function</b> sqrt_iter(guess) {</p>
<p class="Sp-text-1"><a id="c1-para-0396"/>        <b>return</b> is_good_enough(guess)</p>
<p class="Sp-text-1"><a id="c1-para-0397"/>               ? guess</p>
<p class="Sp-text-1"><a id="c1-para-0398"/>               : sqrt_iter(improve(guess));</p>
<p class="Sp-text-1"><a id="c1-para-0399"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0400"/>    <b>return</b> sqrt_iter(1);</p>
<p class="Sp-text-1"><a id="c1-para-0401"/>}</p>
<p><a id="c1-para-0402"/>We will use block structure extensively to help us break up large programs into tractable pieces.<a id="c1-fn-0025a"/><a href="#c1-fn-0025"><sup>25</sup></a> The idea of block structure originated with the programming language Algol 60. It appears in most advanced programming languages and is an important tool for helping to organize the construction of large programs.</p>
</section>
</section>
</section>
<section>
<h2><a id="c1-sec-0025"/><span>1.2</span> <a id="c1-title-0026"/>Functions and the Processes They Generate</h2>
<p class="paraaftertitle"><a id="c1-para-0403"/>We have now considered the elements of programming: We have used primitive arithmetic operations, we have combined these operations, and we have abstracted these composite operations by declaring them as compound functions. But that is not enough to enable us to say that we know how to program. Our situation is analogous to that of someone who has learned the rules for how the pieces move in chess but knows nothing of typical openings, tactics, or strategy. Like the novice chess player, we don't yet know the common patterns of usage in the domain. We lack the knowledge of which moves are worth making (which functions are worth declaring). We lack the experience to predict the consequences of making a move (executing a function).</p>
<p><a id="c1-para-0404"/>The ability to visualize the consequences of the actions under consideration is crucial to becoming an expert programmer, just as it is in any synthetic, creative activity. In becoming an expert photographer, for example, one must learn how to look at a scene and know how dark each region will appear on a print for each possible choice of exposure and processing options. Only then can one reason backward, planning framing, lighting, exposure, and processing to obtain the desired effects. So it is with programming, where we are planning the course of action to be taken by a process and where we control the process by means of a program. To become experts, we must learn to visualize the processes generated by various types of functions. Only after we have developed such a skill can we learn to reliably construct programs that exhibit the desired behavior.</p>
<p><a id="c1-para-0405"/>A function is a pattern for the <i>local evolution</i> of a computational process. It specifies how each stage of the process is built upon the previous stage. We would like to be able to make statements about the overall, or <i>global</i>, behavior of a process whose local evolution has been specified by a function. This is very difficult to do in general, but we can at least try to describe some typical patterns of process evolution.</p>
<p><a id="c1-para-0406"/>In this section we will examine some common “shapes” for processes generated by simple functions. We will also investigate the rates at which these processes consume the important computational resources of time and space. The functions we will consider are very simple. Their role is like that played by test patterns in photography: as oversimplified prototypical patterns, rather than practical examples in their own right.</p>
<section>
<h3><a id="c1-sec-0026"/><span>1.2.1</span> <a id="c1-title-0027"/>Linear Recursion and Iteration</h3>
<p class="paraaftertitle"><a id="c1-para-0407"/>We begin by considering the factorial function, defined by</p>
<p class="Sp-text-2"><a id="c1-para-0408"/><i>n</i>! = <i>n</i> <span class="KeyTerm1">·</span> (<i>n</i> – 1) <span class="KeyTerm1"><i>·</i></span> (<i>n</i> – 2) <span class="KeyTerm1">· · ·</span> 3 <span class="KeyTerm1"><i>·</i></span> 2 <span class="KeyTerm1"><i>·</i></span> 1</p>
<p class="paracontinue"><a id="c1-para-0409"/>There are many ways to compute factorials. One way is to make use of the observation that <i>n</i>! is equal to <i>n</i> times (<i>n</i> – 1)! for any positive integer <i>n</i>:</p>
<p class="Sp-text-2"><a id="c1-para-0410"/><i>n</i>! = <i>n</i> <span class="KeyTerm1"><i>·</i></span> [(<i>n</i> – 1) <span class="KeyTerm1"><i>·</i></span> (<i>n</i> – 2) <span class="KeyTerm1"><i>· · ·</i></span> 3 <span class="KeyTerm1"><i>·</i></span> 2 <span class="KeyTerm1"><i>·</i></span> 1] = <i>n</i> <span class="KeyTerm1"><i>·</i></span> (<i>n</i> – 1)!</p>
<p class="paracontinue"><a id="c1-para-0411"/>Thus, we can compute <i>n</i>! by computing (<i>n</i> – 1)! and multiplying the result by <i>n</i>. If we add the stipulation that 1! is equal to 1, this observation translates directly into a computer function:</p>
<p class="Sp-text-1"><a id="c1-para-0412"/><b>function</b> factorial(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0413"/>    <b>return</b> n === 1</p>
<p class="Sp-text-1"><a id="c1-para-0414"/>           ? 1</p>
<p class="Sp-text-1"><a id="c1-para-0415"/>           : n * factorial(n - 1);</p>
<p class="Sp-text-1"><a id="c1-para-0416"/>}</p>
<p class="paracontinue"><a id="c1-para-0417"/>We can use the substitution model of section 1.1.5 to watch this function in action computing 6!, as shown in <a id="c1-fig-0009a"/><a href="#c1-fig-0009">figure 1.3</a>.</p>
<figure id="c1-fig-0009"><img alt="c1-fig-0003.jpg" src="../images/c1-fig-0003.jpg"/><figcaption class="figurecaption">
<p><span class="figureLabel"><a href="#c1-fig-0009a">Figure 1.3</a></span> <a id="c1-para-0418"/>A linear recursive process for computing 6!.</p></figcaption></figure>
<p><a id="c1-para-0419"/>Now let's take a different perspective on computing factorials. We could describe a rule for computing <i>n</i>! by specifying that we first multiply 1 by 2, then multiply the result by 3, then by 4, and so on until we reach <i>n</i>. More formally, we maintain a running product, together with a counter that counts from 1 up to <i>n</i>. We can describe the computation by saying that the counter and the product simultaneously change from one step to the next according to the rule</p>
<p class="Sp-text-2"><a id="c1-para-0420"/>product <i>←</i> counter <span class="KeyTerm1"><i>·</i></span> product </p>
<p class="Sp-text-2"><a id="c1-para-0421"/>counter <i>←</i> counter + 1</p>
<p class="paracontinue"><a id="c1-para-0422"/>and stipulating that <i>n</i>! is the value of the product when the counter exceeds <i>n</i>.</p>
<p><a id="c1-para-0423"/>Once again, we can recast our description as a function for computing factorials:<a id="c1-fn-0026a"/><a href="#c1-fn-0026"><sup>26</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-0424"/><b>function</b> factorial(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0425"/>    <b>return</b> fact_iter(1, 1, n);</p>
<p class="Sp-text-1"><a id="c1-para-0426"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0427"/><b>function</b> fact_iter(product, counter, max_count) {</p>
<p class="Sp-text-1"><a id="c1-para-0428"/>    <b>return</b> counter &gt; max_count</p>
<p class="Sp-text-1"><a id="c1-para-0429"/>           ? product</p>
<p class="Sp-text-1"><a id="c1-para-0430"/>           : fact_iter(counter * product,</p>
<p class="Sp-text-1"><a id="c1-para-0431"/>                       counter + 1,</p>
<p class="Sp-text-1"><a id="c1-para-0432"/>                       max_count);</p>
<p class="Sp-text-1"><a id="c1-para-0433"/>}</p>
<p class="paracontinue"><a id="c1-para-0434"/>As before, we can use the substitution model to visualize the process of computing 6!, as shown in <a id="c1-fig-0010a"/><a href="#c1-fig-0010">figure 1.4</a>.</p>
<figure id="c1-fig-0010"><img alt="c1-fig-0004.jpg" src="../images/c1-fig-0004.jpg"/><figcaption class="figurecaption">
<p><span class="figureLabel"><a href="#c1-fig-0010a">Figure 1.4</a></span> <a id="c1-para-0435"/>A linear iterative process for computing 6!.</p></figcaption></figure>
<p><a id="c1-para-0436"/>Compare the two processes. From one point of view, they seem hardly different at all. Both compute the same mathematical function on the same domain, and each requires a number of steps proportional to <i>n</i> to compute <i>n</i>!. Indeed, both processes even carry out the same sequence of multiplications, obtaining the same sequence of partial products. On the other hand, when we consider the “shapes” of the two processes, we find that they evolve quite differently.</p>
<p><a id="c1-para-0446"/>Consider the first process. The substitution model reveals a shape of expansion followed by contraction, indicated by the arrow in <a href="#c1-fig-0009">figure 1.3</a>. The expansion occurs as the process builds up a chain of <i>deferred operations</i> (in this case, a chain of multiplications). The contraction occurs as the operations are actually performed. This type of process, characterized by a chain of deferred operations, is called a <i>recursive process</i>. Carrying out this process requires that the interpreter keep track of the operations to be performed later on. In the computation of <i>n</i>!, the length of the chain of deferred multiplications, and hence the amount of information needed to keep track of it, grows linearly with <i>n</i> (is proportional to <i>n</i>), just like the number of steps. Such a process is called a <i>linear recursive process</i>.</p>
<p><a id="c1-para-0447"/>By contrast, the second process does not grow and shrink. At each step, all we need to keep track of, for any <i>n</i>, are the current values of the names <span class="KeyTerm1">product</span>, <span class="KeyTerm1">counter</span>, and <span class="KeyTerm1">max_count</span>. We call this an <i>iterative process</i>. In general, an iterative process is one whose state can be summarized by a fixed number of <i>state variables</i>, together with a fixed rule that describes how the state variables should be updated as the process moves from state to state and an (optional) end test that specifies conditions under which the process should terminate. In computing <i>n</i>!, the number of steps required grows linearly with <i>n</i>. Such a process is called a <i>linear iterative process</i>.</p>
<p><a id="c1-para-0448"/>The contrast between the two processes can be seen in another way. In the iterative case, the state variables provide a complete description of the state of the process at any point. If we stopped the computation between steps, all we would need to do to resume the computation is to supply the interpreter with the values of the three state variables. Not so with the recursive process. In this case there is some additional “hidden” information, maintained by the interpreter and not contained in the state variables, which indicates “where the process is” in negotiating the chain of deferred operations. The longer the chain, the more information must be maintained.<a id="c1-fn-0027a"/><a href="#c1-fn-0027"><sup>27</sup></a></p>
<p><a id="c1-para-0449"/>In contrasting iteration and recursion, we must be careful not to confuse the notion of a recursive <i>process</i> with the notion of a recursive <i>function</i>. When we describe a function as recursive, we are referring to the syntactic fact that the function declaration refers (either directly or indirectly) to the function itself. But when we describe a process as following a pattern that is, say, linearly recursive, we are speaking about how the process evolves, not about the syntax of how a function is written. It may seem disturbing that we refer to a recursive function such as <span class="KeyTerm1">fact_iter</span> as generating an iterative process. However, the process really is iterative: Its state is captured completely by its three state variables, and an interpreter need keep track of only three names in order to execute the process.</p>
<p><a id="c1-para-0450"/>One reason that the distinction between process and function may be confusing is that most implementations of common languages (including C, Java, and Python) are designed in such a way that the interpretation of any recursive function consumes an amount of memory that grows with the number of function calls, even when the process described is, in principle, iterative. As a consequence, these languages can describe iterative processes only by resorting to special-purpose “looping constructs” such as <span class="KeyTerm1">do</span>, <span class="KeyTerm1">repeat</span>, <span class="KeyTerm1">until</span>, <span class="KeyTerm1">for</span>, and <span class="KeyTerm1">while</span>. The implementation of JavaScript we shall consider in chapter 5 does not share this defect. It will execute an iterative process in constant space, even if the iterative process is described by a recursive function. An implementation with this property is called <i>tail-recursive</i>.<a id="c1-fn-0028a"/><a href="#c1-fn-0028"><sup>28</sup></a> With a tailrecursive implementation, iteration can be expressed using the ordinary function call mechanism, so that special iteration constructs are useful only as syntactic sugar.<a id="c1-fn-0029a"/><a href="#c1-fn-0029"><sup>29</sup></a></p>
<section>
<h5><a id="c1-sec-0027"/><a id="c1-title-0028"/>Exercise 1.9</h5>
<p class="paraaftertitle"><a id="c1-para-0451"/>Each of the following two functions defines a method for adding two positive integers in terms of the functions <span class="KeyTerm1">inc</span>, which increments its argument by 1, and <span class="KeyTerm1">dec</span>, which decrements its argument by 1.</p>
<p class="Sp-text-1"><a id="c1-para-0452"/><b>function</b> plus(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0453"/>    <b>return</b> a === 0 ? b : inc(plus(dec(a), b));</p>
<p class="Sp-text-1"><a id="c1-para-0454"/>}</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0455"/><b>function</b> plus(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0456"/>    <b>return</b> a === 0 ? b : plus(dec(a), inc(b));</p>
<p class="Sp-text-1"><a id="c1-para-0457"/>}</p>
<p class="paracontinue"><a id="c1-para-0458"/>Using the substitution model, illustrate the process generated by each function in evaluating <span class="KeyTerm1">plus(4, 5);</span>. Are these processes iterative or recursive?</p>
</section>
<section>
<h5><a id="c1-sec-0028"/><a id="c1-title-0029"/>Exercise 1.10</h5>
<p class="paraaftertitle"><a id="c1-para-0459"/>The following function computes a mathematical function called Ackermann's function.</p>
<p class="Sp-text-1"><a id="c1-para-0460"/><b>function</b> A(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-0461"/>    <b>return</b> y === 0</p>
<p class="Sp-text-1"><a id="c1-para-0462"/>           ? 0</p>
<p class="Sp-text-1"><a id="c1-para-0463"/>           : x === 0</p>
<p class="Sp-text-1"><a id="c1-para-0464"/>           ? 2 * y</p>
<p class="Sp-text-1"><a id="c1-para-0465"/>           : y === 1</p>
<p class="Sp-text-1"><a id="c1-para-0466"/>           ? 2</p>
<p class="Sp-text-1"><a id="c1-para-0467"/>           : A(x - 1, A(x, y - 1));</p>
<p class="Sp-text-1"><a id="c1-para-0468"/>}</p>
<p class="paracontinue"><a id="c1-para-0469"/>What are the values of the following statements?</p>
<p class="Sp-text-1"><a id="c1-para-0470"/>A(1, 10);</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0471"/>A(2, 4);</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0472"/>A(3, 3);</p>
<p class="paracontinue"><a id="c1-para-0473"/>Consider the following functions, where <span class="KeyTerm1">A</span> is the function declared above:</p>
<p class="Sp-text-1"><a id="c1-para-0474"/><b>function</b> f(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0475"/>    <b>return</b> A(0, n);</p>
<p class="Sp-text-1"><a id="c1-para-0476"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0477"/><b>function</b> g(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0478"/>    <b>return</b> A(1, n);</p>
<p class="Sp-text-1"><a id="c1-para-0479"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0480"/><b>function</b> h(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0481"/>    <b>return</b> A(2, n);</p>
<p class="Sp-text-1"><a id="c1-para-0482"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0483"/><b>function</b> k(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0484"/>    <b>return</b> 5 * n * n;</p>
<p class="Sp-text-1"><a id="c1-para-0485"/>}</p>
<p class="paracontinue"><a id="c1-para-0486"/>Give concise mathematical definitions for the functions computed by the functions <span class="KeyTerm1">f</span>, <span class="KeyTerm1">g</span>, and <span class="KeyTerm1">h</span> for positive integer values of <i>n</i>. For example, <i>k</i>(<i>n</i>) computes 5<i>n</i><sup>2</sup>.</p>
</section>
</section>
<section>
<h3><a id="c1-sec-0029"/><span>1.2.2</span> <a id="c1-title-0030"/>Tree Recursion</h3>
<p class="paraaftertitle"><a id="c1-para-0487"/>Another common pattern of computation is called <i>tree recursion</i>. As an example, consider computing the sequence of Fibonacci numbers, in which each number is the sum of the preceding two:</p>
<p class="Sp-text-2"><a id="c1-para-0488"/>0, 1, 1, 2, 3, 5, 8, 13, 21, <span class="KeyTerm1"><i>. . .</i></span></p>
<p class="paracontinue"><a id="c1-para-0489"/>In general, the Fibonacci numbers can be defined by the rule</p>
<p><a id="c1-para-0490"/></p>
<figure id="c1-fig-0011"><img alt="c1-fig-5008.jpg" src="../images/c1-fig-5008.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0491"/>We can immediately translate this definition into a recursive function for computing Fibonacci numbers:</p>
<p class="Sp-text-1"><a id="c1-para-0492"/><b>function</b> fib(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0493"/>    <b>return</b> n === 0</p>
<p class="Sp-text-1"><a id="c1-para-0494"/>           ? 0</p>
<p class="Sp-text-1"><a id="c1-para-0495"/>           : n === 1</p>
<p class="Sp-text-1"><a id="c1-para-0496"/>           ? 1</p>
<p class="Sp-text-1"><a id="c1-para-0497"/>           : fib(n - 1) + fib(n - 2);</p>
<p class="Sp-text-1"><a id="c1-para-0498"/>}</p>
<p><a id="c1-para-0499"/>Consider the pattern of this computation. To compute <span class="KeyTerm1">fib(5)</span>, we compute <span class="KeyTerm1">fib(4)</span> and <span class="KeyTerm1">fib(3)</span>. To compute <span class="KeyTerm1">fib(4)</span>, we compute <span class="KeyTerm1">fib(3)</span> and <span class="KeyTerm1">fib(2)</span>. In general, the evolved process looks like a tree, as shown in <a id="c1-fig-0012a"/><a href="#c1-fig-0012">figure 1.5</a>. Notice that the branches split into two at each level (except at the bottom); this reflects the fact that the <span class="KeyTerm1">fib</span> function calls itself twice each time it is invoked.</p>
<figure id="c1-fig-0012"><img alt="c1-fig-0005.jpg" src="../images/c1-fig-0005.jpg"/><figcaption class="figurecaption">
<p><span class="figureLabel"><a href="#c1-fig-0012a">Figure 1.5</a></span> <a id="c1-para-0500"/>The tree-recursive process generated in computing <span class="KeyTerm1">fib(5)</span>.</p></figcaption></figure>
<p><a id="c1-para-0501"/>This function is instructive as a prototypical tree recursion, but it is a terrible way to compute Fibonacci numbers because it does so much redundant computation. Notice in <a href="#c1-fig-0012">figure 1.5</a> that the entire computation of <span class="KeyTerm1">fib(3)</span>—almost half the work—is duplicated. In fact, it is not hard to show that the number of times the function will compute <span class="KeyTerm1">fib(1)</span> or <span class="KeyTerm1">fib(0)</span> (the number of leaves in the above tree, in general) is precisely Fib(<i>n</i> + 1). To get an idea of how bad this is, one can show that the value of Fib(<i>n</i>) grows exponentially with <i>n</i>. More precisely (see exercise 1.13), Fib(<i>n</i>) is the closest integer to <i>ϕ<sup>n</sup></i>/<img alt="c1-fig-5009.jpg" src="../images/c1-fig-5009.jpg"/>, where</p>
<p class="Sp-text-2"><a id="c1-para-0502"/><i>ϕ</i> = (1 + <img alt="c1-fig-5009.jpg" src="../images/c1-fig-5009.jpg"/>)/2 <i>≈</i> 1.6180</p>
<p class="paracontinue"><a id="c1-para-0503"/>is the <i>golden ratio</i>, which satisfies the equation</p>
<p class="Sp-text-2"><a id="c1-para-0504"/><i>ϕ</i><sup>2</sup> = <i>ϕ</i> + 1</p>
<p class="paracontinue"><a id="c1-para-0505"/>Thus, the process uses a number of steps that grows exponentially with the input. On the other hand, the space required grows only linearly with the input, because we need keep track only of which nodes are above us in the tree at any point in the computation. In general, the number of steps required by a tree-recursive process will be proportional to the number of nodes in the tree, while the space required will be proportional to the maximum depth of the tree.</p>
<p><a id="c1-para-0506"/>We can also formulate an iterative process for computing the Fibonacci numbers. The idea is to use a pair of integers <i>a</i> and <i>b</i>, initialized to Fib(1) = 1 and Fib(0) = 0, and to repeatedly apply the simultaneous transformations</p>
<p class="Sp-text-2"><a id="c1-para-0507"/><i>a</i> <i>←</i> <i>a</i> + <i>b</i></p>
<p class="Sp-text-2"><a id="c1-para-0508"/><i>b</i> <i>←</i> <i>a</i></p>
<p class="paracontinue"><a id="c1-para-0509"/>It is not hard to show that, after applying this transformation <i>n</i> times, <i>a</i> and <i>b</i> will be equal, respectively, to Fib(<i>n</i> + 1) and Fib(<i>n</i>). Thus, we can compute Fibonacci numbers iteratively using the function</p>
<p class="Sp-text-1"><a id="c1-para-0510"/><b>function</b> fib(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0511"/>    <b>return</b> fib_iter(1, 0, n);</p>
<p class="Sp-text-1"><a id="c1-para-0512"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0513"/><b>function</b> fib_iter(a, b, count) {</p>
<p class="Sp-text-1"><a id="c1-para-0514"/>    <b>return</b> count === 0</p>
<p class="Sp-text-1"><a id="c1-para-0515"/>           ? b</p>
<p class="Sp-text-1"><a id="c1-para-0516"/>           : fib_iter(a + b, a, count - 1);</p>
<p class="Sp-text-1"><a id="c1-para-0517"/>}</p>
<p class="paracontinue"><a id="c1-para-0518"/>This second method for computing Fib(<i>n</i>) is a linear iteration. The difference in number of steps required by the two methods—one linear in <i>n</i>, one growing as fast as Fib(<i>n</i>) itself—is enormous, even for small inputs.</p>
<p><a id="c1-para-0519"/>One should not conclude from this that tree-recursive processes are useless. When we consider processes that operate on hierarchically structured data rather than numbers, we will find that tree recursion is a natural and powerful tool.<a id="c1-fn-0030a"/><a href="#c1-fn-0030"><sup>30</sup></a> But even in numerical operations, tree-recursive processes can be useful in helping us to understand and design programs. For instance, although the first <span class="KeyTerm1">fib</span> function is much less efficient than the second one, it is more straightforward, being little more than a translation into JavaScript of the definition of the Fibonacci sequence. To formulate the iterative algorithm required noticing that the computation could be recast as an iteration with three state variables.</p>
<section>
<h5><a id="c1-sec-0030"/><a id="c1-title-0031"/>Example: Counting change</h5>
<p class="paraaftertitle"><a id="c1-para-0520"/>It takes only a bit of cleverness to come up with the iterative Fibonacci algorithm. In contrast, consider the following problem: How many different ways can we make change of $1.00 (100 cents), given half-dollars, quarters, dimes, nickels, and pennies (50 cents, 25 cents, 10 cents, 5 cents, and 1 cent, respectively)? More generally, can we write a function to compute the number of ways to change any given amount of money?</p>
<p><a id="c1-para-0521"/>This problem has a simple solution as a recursive function. Suppose we think of the types of coins available as arranged in some order. Then the following relation holds:</p>
<p><a id="c1-para-0522"/>The number of ways to change amount <i>a</i> using <i>n</i> kinds of coins equals</p>
<ul style="list-style-type:disc">
<li>the number of ways to change amount <i>a</i> using all but the first kind of coin, plus</li>
<li>the number of ways to change amount <i>a</i> – <i>d</i> using all <i>n</i> kinds of coins, where <i>d</i> is the denomination of the first kind of coin.</li>
</ul>

<p><a id="c1-para-0525"/>To see why this is true, observe that the ways to make change can be divided into two groups: those that do not use any of the first kind of coin, and those that do. Therefore, the total number of ways to make change for some amount is equal to the number of ways to make change for the amount without using any of the first kind of coin, plus the number of ways to make change assuming that we do use the first kind of coin. But the latter number is equal to the number of ways to make change for the amount that remains after using a coin of the first kind.</p>
<p><a id="c1-para-0526"/>Thus, we can recursively reduce the problem of changing a given amount to problems of changing smaller amounts or using fewer kinds of coins. Consider this reduction rule carefully, and convince yourself that we can use it to describe an algorithm if we specify the following degenerate cases:<a id="c1-fn-0031a"/><a href="#c1-fn-0031"><sup>31</sup></a></p>
<ul style="list-style-type:disc">
<li>If <i>a</i> is exactly 0, we should count that as 1 way to make change.</li>
<li>If <i>a</i> is less than 0, we should count that as 0 ways to make change.</li>
<li>If <i>n</i> is 0, we should count that as 0 ways to make change.</li>
</ul>

<p class="paracontinue"><a id="c1-para-0530"/>We can easily translate this description into a recursive function:</p>
<p class="Sp-text-1"><a id="c1-para-0531"/><b>function</b> count_change(amount) {</p>
<p class="Sp-text-1"><a id="c1-para-0532"/>    <b>return</b> cc(amount, 5);</p>
<p class="Sp-text-1"><a id="c1-para-0533"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0534"/><b>function</b> cc(amount, kinds_of_coins) {</p>
<p class="Sp-text-1"><a id="c1-para-0535"/>    <b>return</b> amount === 0</p>
<p class="Sp-text-1"><a id="c1-para-0536"/>           ? 1</p>
<p class="Sp-text-1"><a id="c1-para-0537"/>           : amount &lt; 0 || kinds_of_coins === 0</p>
<p class="Sp-text-1"><a id="c1-para-0538"/>           ? 0</p>
<p class="Sp-text-1"><a id="c1-para-0539"/>           : cc(amount, kinds_of_coins - 1)</p>
<p class="Sp-text-1"><a id="c1-para-0540"/>             +</p>
<p class="Sp-text-1"><a id="c1-para-0541"/>             cc(amount - first_denomination(kinds_of_coins), </p>
<p class="Sp-text-1"><a id="c1-para-0542"/>                kinds_of_coins);</p>
<p class="Sp-text-1"><a id="c1-para-0543"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0544"/><b>function</b> first_denomination(kinds_of_coins) {</p>
<p class="Sp-text-1"><a id="c1-para-0545"/>    <b>return</b> kinds_of_coins === 1 ? 1</p>
<p class="Sp-text-1"><a id="c1-para-0546"/>         : kinds_of_coins === 2 ? 5</p>
<p class="Sp-text-1"><a id="c1-para-0547"/>         : kinds_of_coins === 3 ? 10</p>
<p class="Sp-text-1"><a id="c1-para-0548"/>         : kinds_of_coins === 4 ? 25</p>
<p class="Sp-text-1"><a id="c1-para-0549"/>         : kinds_of_coins === 5 ? 50</p>
<p class="Sp-text-1"><a id="c1-para-0550"/>         : 0;</p>
<p class="Sp-text-1"><a id="c1-para-0551"/>}</p>
<p class="paracontinue"><a id="c1-para-0552"/>(The <span class="KeyTerm1">first_denomination</span> function takes as input the number of kinds of coins available and returns the denomination of the first kind. Here we are thinking of the coins as arranged in order from largest to smallest, but any order would do as well.) We can now answer our original question about changing a dollar:</p>
<p class="Sp-text-1"><a id="c1-para-0553"/>count_change(100);</p>
<p class="Sp-text-1"><a id="c1-para-0554"/><i>292</i></p>
<p><a id="c1-para-0555"/>The function <span class="KeyTerm1">count_change</span> generates a tree-recursive process with redundancies similar to those in our first implementation of <span class="KeyTerm1">fib</span>. On the other hand, it is not obvious how to design a better algorithm for computing the result, and we leave this problem as a challenge. The observation that a tree-recursive process may be highly inefficient but often easy to specify and understand has led people to propose that one could get the best of both worlds by designing a “smart compiler” that could transform tree-recursive functions into more efficient functions that compute the same result.<a id="c1-fn-0032a"/><a href="#c1-fn-0032"><sup>32</sup></a></p>
</section>
<section>
<h5><a id="c1-sec-0031"/><a id="c1-title-0032"/>Exercise 1.11</h5>
<p class="paraaftertitle"><a id="c1-para-0556"/>A function <i>f</i> is defined by the rules <i>f</i> (<i>n</i>) = <i>n</i> if <i>n</i> &lt; 3 and <i>f</i> (<i>n</i>) = <i>f</i> (<i>n</i> – 1) + 2<i>f</i> (<i>n</i> – 2) + 3<i>f</i> (<i>n</i> – 3) if <i>n</i> 3. Write a JavaScript function that computes <i>f</i> by means of a recursive process. Write a function that computes <i>f</i> by means of an iterative process.</p>
</section>
<section>
<h5><a id="c1-sec-0032"/><a id="c1-title-0033"/>Exercise 1.12</h5>
<p class="paraaftertitle"><a id="c1-para-0557"/>The following pattern of numbers is called <i>Pascal's triangle</i>.</p>
<p><a id="c1-para-0558"/></p>
<figure id="c1-fig-0013"><img alt="c1-fig-5010.jpg" src="../images/c1-fig-5010.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0559"/>The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it.<a id="c1-fn-0033a"/><a href="#c1-fn-0033"><sup>33</sup></a> Write a function that computes elements of Pascal's triangle by means of a recursive process.</p>
</section>
<section>
<h5><a id="c1-sec-0033"/><a id="c1-title-0034"/>Exercise 1.13</h5>
<p class="paraaftertitle"><a id="c1-para-0560"/>Prove that Fib(<i>n</i>) is the closest integer to <i>ϕ<sup>n</sup></i>/<img alt="c1-fig-5009.jpg" src="../images/c1-fig-5009.jpg"/>, where <i>ϕ</i> = (1 + <img alt="c1-fig-5009.jpg" src="../images/c1-fig-5009.jpg"/>)/2. Hint: Use induction and the definition of the Fibonacci numbers to prove that Fib(<i>n</i>) = (<i>ϕ<sup>n</sup></i> – <i>ψ<sup>n</sup></i>)/<img alt="c1-fig-5009.jpg" src="../images/c1-fig-5009.jpg"/>, where <i>ψ</i> = (1 – <img alt="c1-fig-5009.jpg" src="../images/c1-fig-5009.jpg"/>)/2.</p>
</section>
</section>
<section>
<h3><a id="c1-sec-0034"/><span>1.2.3</span> <a id="c1-title-0035"/>Orders of Growth</h3>
<p class="paraaftertitle"><a id="c1-para-0561"/>The previous examples illustrate that processes can differ considerably in the rates at which they consume computational resources. One convenient way to describe this difference is to use the notion of <i>order of growth</i> to obtain a gross measure of the resources required by a process as the inputs become larger.</p>
<p><a id="c1-para-0562"/>Let <i>n</i> be a parameter that measures the size of the problem, and let <i>R</i>(<i>n</i>) be the amount of resources the process requires for a problem of size <i>n</i>. In our previous examples we took <i>n</i> to be the number for which a given function is to be computed, but there are other possibilities. For instance, if our goal is to compute an approximation to the square root of a number, we might take <i>n</i> to be the number of digits accuracy required. For matrix multiplication we might take <i>n</i> to be the number of rows in the matrices. In general there are a number of properties of the problem with respect to which it will be desirable to analyze a given process. Similarly, <i>R</i>(<i>n</i>) might measure the number of internal storage registers used, the number of elementary machine operations performed, and so on. In computers that do only a fixed number of operations at a time, the time required will be proportional to the number of elementary machine operations performed.</p>
<p><a id="c1-para-0563"/>We say that <i>R</i>(<i>n</i>) has order of growth Θ(<i>f</i> (<i>n</i>)), written <i>R</i>(<i>n</i>) = Θ(<i>f</i> (<i>n</i>)) (pronounced “theta of <i>f</i> (<i>n</i>)”), if there are positive constants <i>k</i><sub>1</sub> and <i>k</i><sub>2</sub> independent of <i>n</i> such that</p>
<p class="Sp-text-2"><a id="c1-para-0564"/><i>k</i><sub>1</sub> <i>f</i> (<i>n</i>) <i>≤ R</i>(<i>n</i>) <i>≤ k</i><sub>2</sub> <i>f</i> (<i>n</i>)</p>
<p class="paracontinue"><a id="c1-para-0565"/>for any sufficiently large value of <i>n</i>. (In other words, for large <i>n</i>, the value <i>R</i>(<i>n</i>) is sandwiched between <i>k</i><sub>1</sub><i>f</i> (<i>n</i>) and <i>k</i><sub>2</sub><i>f</i> (<i>n</i>).)</p>
<p><a id="c1-para-0566"/>For instance, with the linear recursive process for computing factorial described in section 1.2.1 the number of steps grows proportionally to the input <i>n</i>. Thus, the steps required for this process grows as Θ(<i>n</i>). We also saw that the space required grows as Θ(<i>n</i>). For the iterative factorial, the number of steps is still Θ(<i>n</i>) but the space is Θ(1)—that is, constant.<a id="c1-fn-0034a"/><a href="#c1-fn-0034"><sup>34</sup></a> The tree-recursive Fibonacci computation requires Θ(<i>ϕ<sup>n</sup></i>) steps and space Θ(<i>n</i>), where <i>ϕ</i> is the golden ratio described in section 1.2.2.</p>
<p><a id="c1-para-0567"/>Orders of growth provide only a crude description of the behavior of a process. For example, a process requiring <i>n</i><sup>2</sup> steps and a process requiring 1000<i>n</i><sup>2</sup> steps and a process requiring 3<i>n</i><sup>2</sup> + 10<i>n</i> + 17 steps all have Θ(<i>n</i><sup>2</sup>) order of growth. On the other hand, order of growth provides a useful indication of how we may expect the behavior of the process to change as we change the size of the problem. For a Θ(<i>n</i>) (linear) process, doubling the size will roughly double the amount of resources used. For an exponential process, each increment in problem size will multiply the resource utilization by a constant factor. In the remainder of section 1.2 we will examine two algorithms whose order of growth is logarithmic, so that doubling the problem size increases the resource requirement by a constant amount.</p>
<section>
<h5><a id="c1-sec-0035"/><a id="c1-title-0036"/>Exercise 1.14</h5>
<p class="paraaftertitle"><a id="c1-para-0568"/>Draw the tree illustrating the process generated by the <span class="KeyTerm1">count_change</span> function of section 1.2.2 in making change for 11 cents. What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?</p>
</section>
<section>
<h5><a id="c1-sec-0036"/><a id="c1-title-0037"/>Exercise 1.15</h5>
<p class="paraaftertitle"><a id="c1-para-0569"/>The sine of an angle (specified in radians) can be computed by making use of the approximation sin <i>x ≈ x</i> if <i>x</i> is sufficiently small, and the trigonometric identity</p>
<p><a id="c1-para-0570"/></p>
<figure id="c1-fig-0014"><img alt="c1-fig-5011.jpg" src="../images/c1-fig-5011.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0571"/>to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered “sufficiently small” if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in the following functions:</p>
<p class="Sp-text-1"><a id="c1-para-0572"/><b>function</b> cube(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0573"/>    <b>return</b> x * x * x;</p>
<p class="Sp-text-1"><a id="c1-para-0574"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0575"/><b>function</b> p(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0576"/>    <b>return</b> 3 * x - 4 * cube(x);</p>
<p class="Sp-text-1"><a id="c1-para-0577"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0578"/><b>function</b> sine(angle) {</p>
<p class="Sp-text-1"><a id="c1-para-0579"/>    <b>return</b> ! (abs(angle) &gt; 0.1)</p>
<p class="Sp-text-1"><a id="c1-para-0580"/>           ? angle</p>
<p class="Sp-text-1"><a id="c1-para-0581"/>           : p(sine(angle / 3));</p>
<p class="Sp-text-1"><a id="c1-para-0582"/>}</p>
<ol class="BS_NumberListA">
<li><a id="c1-li-0026"/><span>a. </span>How many times is the function <span class="KeyTerm1">p</span> applied when <span class="KeyTerm1">sine(12.15)</span> is evaluated?</li>
<li><a id="c1-li-0027"/><span>b. </span>What is the order of growth in space and number of steps (as a function of <i>a</i>) used by the process generated by the <span class="KeyTerm1">sine</span> function when <span class="KeyTerm1">sine(a)</span> is evaluated?</li>
</ol>
</section>
</section>
<section>
<h3><a id="c1-sec-0037"/><span>1.2.4</span> <a id="c1-title-0038"/>Exponentiation</h3>
<p class="paraaftertitle"><a id="c1-para-0585"/>Consider the problem of computing the exponential of a given number. We would like a function that takes as arguments a base <i>b</i> and a positive integer exponent <i>n</i> and computes <i>b<sup>n</sup></i>. One way to do this is via the recursive definition</p>
<p class="Sp-text-2"><a id="c1-para-0586"/><i>b<sup>n</sup></i> = <i>b b<sup>n</sup></i><sup>–1</sup></p>
<p class="Sp-text-2"><a id="c1-para-0587"/><i>b</i><sup>0</sup> = 1</p>
<p class="paracontinue"><a id="c1-para-0588"/>which translates readily into the function</p>
<p class="Sp-text-1"><a id="c1-para-0589"/><b>function</b> expt(b, n) {</p>
<p class="Sp-text-1"><a id="c1-para-0590"/>    <b>return</b> n === 0</p>
<p class="Sp-text-1"><a id="c1-para-0591"/>           ? 1</p>
<p class="Sp-text-1"><a id="c1-para-0592"/>           : b * expt(b, n - 1);</p>
<p class="Sp-text-1"><a id="c1-para-0593"/>}</p>
<p class="paracontinue"><a id="c1-para-0594"/>This is a linear recursive process, which requires Θ(<i>n</i>) steps and Θ(<i>n</i>) space. Just as with factorial, we can readily formulate an equivalent linear iteration:</p>
<p class="Sp-text-1"><a id="c1-para-0595"/><b>function</b> expt(b, n) {</p>
<p class="Sp-text-1"><a id="c1-para-0596"/>    <b>return</b> expt_iter(b, n, 1);</p>
<p class="Sp-text-1"><a id="c1-para-0597"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0598"/><b>function</b> expt_iter(b, counter, product) {</p>
<p class="Sp-text-1"><a id="c1-para-0599"/>    <b>return</b> counter === 0</p>
<p class="Sp-text-1"><a id="c1-para-0600"/>           ? product</p>
<p class="Sp-text-1"><a id="c1-para-0601"/>           : expt_iter(b, counter - 1, b * product);</p>
<p class="Sp-text-1"><a id="c1-para-0602"/>}</p>
<p class="paracontinue"><a id="c1-para-0603"/>This version requires Θ(<i>n</i>) steps and Θ(1) space.</p>
<p><a id="c1-para-0604"/>We can compute exponentials in fewer steps by using successive squaring. For instance, rather than computing <i>b</i><sup>8</sup> as</p>
<p class="Sp-text-2"><a id="c1-para-0605"/><i>b ·</i> (<i>b ·</i> (<i>b ·</i> (<i>b ·</i> (<i>b ·</i> (<i>b ·</i> (<i>b · b</i>))))))</p>
<p class="paracontinue"><a id="c1-para-0606"/>we can compute it using three multiplications:</p>
<p class="Sp-text-2"><a id="c1-para-0607"/><i>b</i><sup>2</sup> = <i>b · b</i></p>
<p class="Sp-text-2"><a id="c1-para-0608"/><i>b</i><sup>4</sup> = <i>b</i><sup>2 </sup><i>· b</i><sup>2</sup></p>
<p class="Sp-text-2"><a id="c1-para-0609"/><i>b</i><sup>8</sup> = <i>b</i><sup>4</sup> <i>· b</i><sup>4</sup></p>
<p><a id="c1-para-0610"/>This method works fine for exponents that are powers of 2. We can also take advantage of successive squaring in computing exponentials in general if we use the rule</p>
<p class="Sp-text-2"><a id="c1-para-0611"/><i>b<sup>n</sup></i> = (<i>b<sup>n</sup></i><sup>/2</sup>)<sup>2</sup>  if <i>n</i> is even</p>
<p class="Sp-text-2"><a id="c1-para-0612"/><i>b<sup>n</sup></i> = <i>b · b<sup>n</sup></i><sup>–1</sup>  if <i>n</i> is odd</p>
<p class="paracontinue"><a id="c1-para-5612"/>We can express this method as a function:</p>
<p class="Sp-text-1"><a id="c1-para-0613"/><b>function</b> fast_expt(b, n) {</p>
<p class="Sp-text-1"><a id="c1-para-0614"/>    <b>return</b> n === 0</p>
<p class="Sp-text-1"><a id="c1-para-0615"/>           ? 1</p>
<p class="Sp-text-1"><a id="c1-para-0616"/>           : is_even(n)</p>
<p class="Sp-text-1"><a id="c1-para-0617"/>           ? square(fast_expt(b, n / 2))</p>
<p class="Sp-text-1"><a id="c1-para-0618"/>           : b * fast_expt(b, n - 1);</p>
<p class="Sp-text-1"><a id="c1-para-0619"/>}</p>
<p class="paracontinue"><a id="c1-para-0620"/>where the predicate to test whether an integer is even is defined in terms of the operator <span class="KeyTerm1">%</span>, which computes the remainder after integer division, by</p>
<p class="Sp-text-1"><a id="c1-para-0621"/><b>function</b> is_even(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0622"/>    <b>return</b> n % 2 === 0;</p>
<p class="Sp-text-1"><a id="c1-para-0623"/>}</p>
<p class="paracontinue"><a id="c1-para-0624"/>The process evolved by <span class="KeyTerm1">fast_expt</span> grows logarithmically with <i>n</i> in both space and number of steps. To see this, observe that computing <i>b</i><sup>2</sup><i><sup>n</sup></i> using <span class="KeyTerm1">fast_expt</span> requires only one more multiplication than computing <i>b<sup>n</sup></i>. The size of the exponent we can compute therefore doubles (approximately) with every new multiplication we are allowed. Thus, the number of multiplications required for an exponent of <i>n</i> grows about as fast as the logarithm of <i>n</i> to the base 2. The process has Θ(log <i>n</i>) growth.<a id="c1-fn-0035a"/><a href="#c1-fn-0035"><sup>35</sup></a></p>
<p><a id="c1-para-0625"/>The difference between Θ(log <i>n</i>) growth and Θ(<i>n</i>) growth becomes striking as <i>n</i> becomes large. For example, <span class="KeyTerm1">fast_expt</span> for <i>n</i> = 1000 requires only 14 multiplications.<a id="c1-fn-0036a"/><a href="#c1-fn-0036"><sup>36</sup></a> It is also possible to use the idea of successive squaring to devise an iterative algorithm that computes exponentials with a logarithmic number of steps (see exercise 1.16), although, as is often the case with iterative algorithms, this is not written down so straightforwardly as the recursive algorithm.<a id="c1-fn-0037a"/><a href="#c1-fn-0037"><sup>37</sup></a></p>
<section>
<h5><a id="c1-sec-0038"/><a id="c1-title-0039"/>Exercise 1.16</h5>
<p class="paraaftertitle"><a id="c1-para-0626"/>Design a function that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does <span class="KeyTerm1">fast_expt</span>. (Hint: Using the observation that (<i>b<sup>n</sup></i><sup>/2</sup>)<sup>2</sup> = (<i>b</i><sup>2</sup>)<i><sup>n</sup></i><sup>/2</sup>, keep, along with the exponent <i>n</i> and the base <i>b</i>, an additional state variable <i>a</i>, and define the state transformation in such a way that the product <i>ab<sup>n</sup></i> is unchanged from state to state. At the beginning of the process <i>a</i> is taken to be 1, and the answer is given by the value of <i>a</i> at the end of the process. In general, the technique of defining an <i>invariant quantity</i> that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.)</p>
</section>
<section>
<h5><a id="c1-sec-0039"/><a id="c1-title-0040"/>Exercise 1.17</h5>
<p class="paraaftertitle"><a id="c1-para-0627"/>The exponentiation algorithms in this section are based on performing exponentiation by means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition. The following multiplication function (in which it is assumed that our language can only add, not multiply) is analogous to the <span class="KeyTerm1">expt</span> function:</p>
<p class="Sp-text-1"><a id="c1-para-0628"/><b>function</b> times(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0629"/>    <b>return</b> b === 0</p>
<p class="Sp-text-1"><a id="c1-para-0630"/>           ? 0</p>
<p class="Sp-text-1"><a id="c1-para-0631"/>           : a + times(a, b - 1);</p>
<p class="Sp-text-1"><a id="c1-para-0632"/>}</p>
<p class="paracontinue"><a id="c1-para-0633"/>This algorithm takes a number of steps that is linear in <span class="KeyTerm1">b</span>. Now suppose we include, together with addition, the functions <span class="KeyTerm1">double</span>, which doubles an integer, and <span class="KeyTerm1">halve</span>, which divides an (even) integer by 2. Using these, design a multiplication function analogous to <span class="KeyTerm1">fast_expt</span> that uses a logarithmic number of steps.</p>
</section>
<section>
<h5><a id="c1-sec-0040"/><a id="c1-title-0041"/>Exercise 1.18</h5>
<p class="paraaftertitle"><a id="c1-para-0634"/>Using the results of exercises 1.16 and 1.17, devise a function that generates an iterative process for multiplying two integers in terms of adding, doubling, and halving and uses a logarithmic number of steps.<a id="c1-fn-0038a"/><a href="#c1-fn-0038"><sup>38</sup></a></p>
</section>
<section>
<h5><a id="c1-sec-0041"/><a id="c1-title-0042"/>Exercise 1.19</h5>
<p class="paraaftertitle"><a id="c1-para-0635"/>There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps. Recall the transformation of the state variables <i>a</i> and <i>b</i> in the <span class="KeyTerm1">fib_iter</span> process of section 1.2.2: <i>a a</i> + <i>b</i> and <i>b a</i>. Call this transformation <i>T</i>, and observe that applying <i>T</i> over and over again <i>n</i> times, starting with 1 and 0, produces the pair Fib(<i>n</i> + 1) and Fib(<i>n</i>). In other words, the Fibonacci numbers are produced by applying <i>T<sup>n</sup></i>, the <i>n</i>th power of the transformation <i>T</i>, starting with the pair (1, 0). Now consider <i>T</i> to be the special case of <i>p</i> = 0 and <i>q</i> = 1 in a family of transformations <i>T<sub>pq</sub></i>, where <i>T<sub>pq</sub></i> transforms the pair (<i>a</i>, <i>b</i>) according to <i>a ← bq</i> + <i>aq</i> + <i>ap</i> and <i>b ← bp</i> + <i>aq</i>. Show that if we apply such a transformation <i>T<sub>pq</sub></i> twice, the effect is the same as using a single transformation <i>T<sub>p</sub><sub>′</sub><sub>q</sub><sub>′</sub></i> of the same form, and compute <i>p′</i> and <i>q′</i> in terms of <i>p</i> and <i>q</i>. This gives us an explicit way to square these transformations, and thus we can compute <i>T<sup>n</sup></i> using successive squaring, as in the <span class="KeyTerm1">fast_expt</span> function. Put this all together to complete the following function, which runs in a logarithmic number of steps:<a id="c1-fn-0039a"/><a href="#c1-fn-0039"><sup>39</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-0637"/><b>function</b> fib(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0638"/>    <b>return</b> fib_iter(1, 0, 0, 1, n);</p>
<p class="Sp-text-1"><a id="c1-para-0639"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0640"/><b>function</b> fib_iter(a, b, p, q, count) {</p>
<p class="Sp-text-1"><a id="c1-para-0641"/>    <b>return</b> count === 0</p>
<p class="Sp-text-1"><a id="c1-para-0642"/>           ? b</p>
<p class="Sp-text-1"><a id="c1-para-0643"/>           : is_even(count)</p>
<p class="Sp-text-1"><a id="c1-para-0644"/>           ? fib_iter(a,</p>
<p class="Sp-text-1"><a id="c1-para-0645"/>                      b,</p>
<p class="Sp-text-1"><a id="c1-para-0646"/>                      (<span class="KeyTerm2">??</span>),          <span class="KeyTerm2"><i>// compute p′</i></span></p>
<p class="Sp-text-1"><a id="c1-para-0647"/>                      (<span class="KeyTerm2">??</span>),          <span class="KeyTerm2"><i>// compute q′</i></span></p>
<p class="Sp-text-1"><a id="c1-para-0648"/>                      count / 2)</p>
<p class="Sp-text-1"><a id="c1-para-0649"/>           : fib_iter(b * q + a * q + a * p,</p>
<p class="Sp-text-1"><a id="c1-para-0650"/>                      b * p + a * q,</p>
<p class="Sp-text-1"><a id="c1-para-0651"/>                      p,</p>
<p class="Sp-text-1"><a id="c1-para-0652"/>                      q,</p>
<p class="Sp-text-1"><a id="c1-para-0653"/>                      count - 1);</p>
<p class="Sp-text-1"><a id="c1-para-0654"/>}</p>
</section>
</section>
<section>
<h3><a id="c1-sec-0042"/><span>1.2.5</span> <a id="c1-title-0043"/>Greatest Common Divisors</h3>
<p class="paraaftertitle"><a id="c1-para-0655"/>The greatest common divisor (GCD) of two integers <i>a</i> and <i>b</i> is defined to be the largest integer that divides both <i>a</i> and <i>b</i> with no remainder. For example, the GCD of 16 and 28 is 4. In chapter 2, when we investigate how to implement rationalnumber arithmetic, we will need to be able to compute GCDs in order to reduce rational numbers to lowest terms. (To reduce a rational number to lowest terms, we must divide both the numerator and the denominator by their GCD. For example, 16/28 reduces to 4/7.) One way to find the GCD of two integers is to factor them and search for common factors, but there is a famous algorithm that is much more efficient.</p>
<p><a id="c1-para-0656"/>The idea of the algorithm is based on the observation that, if <i>r</i> is the remainder when <i>a</i> is divided by <i>b</i>, then the common divisors of <i>a</i> and <i>b</i> are precisely the same as the common divisors of <i>b</i> and <i>r</i>. Thus, we can use the equation</p>
<p class="Sp-text-2"><a id="c1-para-0657"/>GCD(<i>a</i>, <i>b</i>) = GCD(<i>b</i>, <i>r</i>)</p>
<p class="paracontinue"><a id="c1-para-0658"/>to successively reduce the problem of computing a GCD to the problem of computing the GCD of smaller and smaller pairs of integers. For example,</p>
<p class="Sp-text-2"><a id="c1-para-0659"/>GCD(206, 40) = GCD(40, 6)</p>
<p class="Sp-text-2"><a id="c1-para-0660"/>       = GCD(6, 4)</p>
<p class="Sp-text-2"><a id="c1-para-0661"/>       = GCD(4, 2)</p>
<p class="Sp-text-2"><a id="c1-para-0662"/>       = GCD(2, 0)</p>
<p class="Sp-text-2"><a id="c1-para-0663"/>       = 2</p>
<p class="paracontinue"><a id="c1-para-0664"/>reduces GCD(206, 40) to GCD(2, 0), which is 2. It is possible to show that starting with any two positive integers and performing repeated reductions will always eventually produce a pair where the second number is 0. Then the GCD is the other number in the pair. This method for computing the GCD is known as <i>Euclid's Algorithm</i>.<a id="c1-fn-0040a"/><a href="#c1-fn-0040"><sup>40</sup></a></p>
<p><a id="c1-para-0665"/>It is easy to express Euclid's Algorithm as a function:</p>
<p class="Sp-text-1"><a id="c1-para-0666"/><b>function</b> gcd(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0667"/>    <b>return</b> b === 0 ? a : gcd(b, a % b);</p>
<p class="Sp-text-1"><a id="c1-para-0668"/>}</p>
<p class="paracontinue"><a id="c1-para-0669"/>This generates an iterative process, whose number of steps grows as the logarithm of the numbers involved.</p>
<p><a id="c1-para-0670"/>The fact that the number of steps required by Euclid's Algorithm has logarithmic growth bears an interesting relation to the Fibonacci numbers:</p>
<div class="top"><hr/></div>

<section class="other1"><a id="c1-feafxd-0001"/>
<p class="paraaftertitle"><a id="c1-para-0671"/><b>Lamé's Theorem:</b> If Euclid's Algorithm requires <i>k</i> steps to compute the GCD of some pair, then the smaller number in the pair must be greater than or equal to the <i>k</i>th Fibonacci number.<a id="c1-fn-0041a"/><a href="#c1-fn-0041"><sup>41</sup></a></p>
<div class="bottom "><hr/></div>
</section>

<p><a id="c1-para-0672"/>We can use this theorem to get an order-of-growth estimate for Euclid's Algorithm. Let <i>n</i> be the smaller of the two inputs to the function. If the process takes <i>k</i> steps, then we must have <i>n</i> ≥ Fib(<i>k</i>) ≈ <i>ϕ<sup>k</sup></i>/<img alt="c1-fig-5009.jpg" src="../images/c1-fig-5009.jpg"/>. Therefore the number of steps <i>k</i> grows as the logarithm (to the base <i>ϕ</i>) of <i>n</i>. Hence, the order of growth is Θ(log <i>n</i>).</p>
<section>
<h5><a id="c1-sec-0043"/><a id="c1-title-0044"/>Exercise 1.20</h5>
<p class="paraaftertitle"><a id="c1-para-0673"/>The process that a function generates is of course dependent on the rules used by the interpreter. As an example, consider the iterative <span class="KeyTerm1">gcd</span> function given above. Suppose we were to interpret this function using normal-order evaluation, as discussed in section 1.1.5. (The normal-order-evaluation rule for conditional expressions is described in exercise 1.5.) Using the substitution method (for normal order), illustrate the process generated in evaluating <span class="KeyTerm1">gcd(206, 40)</span> and indicate the <span class="KeyTerm1">remainder</span> operations that are actually performed. How many <span class="KeyTerm1">remainder</span> operations are actually performed in the normal-order evaluation of <span class="KeyTerm1">gcd(206, 40)</span>? In the applicative-order evaluation?</p>
</section>
</section>
<section>
<h3><a id="c1-sec-0044"/><span>1.2.6</span> <a id="c1-title-0045"/>Example: Testing for Primality</h3>
<p class="paraaftertitle"><a id="c1-para-0674"/>This section describes two methods for checking the primality of an integer <i>n</i>, one with order of growth Θ(<img alt="c1-fig-5012.jpg" src="../images/c1-fig-5012.jpg"/>), and a “probabilistic” algorithm with order of growth Θ(log <i>n</i>). The exercises at the end of this section suggest programming projects based on these algorithms.</p>
<section>
<h5><a id="c1-sec-0045"/><a id="c1-title-0046"/>Searching for divisors</h5>
<p class="paraaftertitle"><a id="c1-para-0675"/>Since ancient times, mathematicians have been fascinated by problems concerning prime numbers, and many people have worked on the problem of determining ways to test if numbers are prime. One way to test if a number is prime is to find the number's divisors. The following program finds the smallest integral divisor (greater than 1) of a given number <i>n</i>. It does this in a straightforward way, by testing <i>n</i> for divisibility by successive integers starting with 2.</p>
<p class="Sp-text-1"><a id="c1-para-0676"/><b>function</b> smallest_divisor(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0677"/>    <b>return</b> find_divisor(n, 2);</p>
<p class="Sp-text-1"><a id="c1-para-0678"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0679"/><b>function</b> find_divisor(n, test_divisor) {</p>
<p class="Sp-text-1"><a id="c1-para-0680"/>    <b>return</b> square(test_divisor) &gt; n</p>
<p class="Sp-text-1"><a id="c1-para-0681"/>           ? n</p>
<p class="Sp-text-1"><a id="c1-para-0682"/>           : divides(test_divisor, n)</p>
<p class="Sp-text-1"><a id="c1-para-0683"/>           ? test_divisor</p>
<p class="Sp-text-1"><a id="c1-para-0684"/>           : find_divisor(n, test_divisor + 1);</p>
<p class="Sp-text-1"><a id="c1-para-0685"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0686"/><b>function</b> divides(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0687"/>    <b>return</b> b % a === 0;</p>
<p class="Sp-text-1"><a id="c1-para-0688"/>}</p>
<p><a id="c1-para-0689"/>We can test whether a number is prime as follows: <i>n</i> is prime if and only if <i>n</i> is its own smallest divisor.</p>
<p class="Sp-text-1"><a id="c1-para-0690"/><b>function</b> is_prime(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0691"/>    <b>return</b> n === smallest_divisor(n);</p>
<p class="Sp-text-1"><a id="c1-para-0692"/>}</p>
<p><a id="c1-para-0693"/>The end test for <span class="KeyTerm1">find_divisor</span> is based on the fact that if <i>n</i> is not prime it must have a divisor less than or equal to <img alt="c1-fig-5012.jpg" src="../images/c1-fig-5012.jpg"/>.<a id="c1-fn-0042a"/><a href="#c1-fn-0042"><sup>42</sup></a> This means that the algorithm need only test divisors between 1 and <img alt="c1-fig-5012.jpg" src="../images/c1-fig-5012.jpg"/>. Consequently, the number of steps required to identify <i>n</i> as prime will have order of growth Θ(<img alt="c1-fig-5012.jpg" src="../images/c1-fig-5012.jpg"/>).</p>
</section>
<section>
<h5><a id="c1-sec-0046"/><a id="c1-title-0047"/>The Fermat test</h5>
<p class="paraaftertitle"><a id="c1-para-0694"/>The Θ(log <i>n</i>) primality test is based on a result from number theory known as Fermat's Little Theorem.<a id="c1-fn-0043a"/><a href="#c1-fn-0043"><sup>43</sup></a></p>
<div class="top"><hr/></div>

<section class="other2"><a id="c1-feafxd-0002"/>
<p class="paraaftertitle"><a id="c1-para-0695"/><b>Fermat's Little Theorem:</b> If <i>n</i> is a prime number and <i>a</i> is any positive integer less than <i>n</i>, then <i>a</i> raised to the <i>n</i>th power is congruent to <i>a</i> modulo <i>n</i>.</p>
<div class="bottom "><hr/></div>
</section>

<p class="paracontinue"><a id="c1-para-0696"/>(Two numbers are said to be <i>congruent modulo n</i> if they both have the same remainder when divided by <i>n</i>. The remainder of a number <i>a</i> when divided by <i>n</i> is also referred to as the <i>remainder of a modulo n</i>, or simply as <i>a modulo n</i>.)</p>
<p><a id="c1-para-0697"/>If <i>n</i> is not prime, then, in general, most of the numbers <i>a</i> &lt; <i>n</i> will not satisfy the above relation. This leads to the following algorithm for testing primality: Given a number <i>n</i>, pick a random number <i>a</i> &lt; <i>n</i> and compute the remainder of <i>a<sup>n</sup></i> modulo <i>n</i>. If the result is not equal to <i>a</i>, then <i>n</i> is certainly not prime. If it is <i>a</i>, then chances are good that <i>n</i> is prime. Now pick another random number <i>a</i> and test it with the same method. If it also satisfies the equation, then we can be even more confident that <i>n</i> is prime. By trying more and more values of <i>a</i>, we can increase our confidence in the result. This algorithm is known as the Fermat test.</p>
<p><a id="c1-para-0698"/>To implement the Fermat test, we need a function that computes the exponential of a number modulo another number:</p>
<p class="Sp-text-1"><a id="c1-para-0699"/><b>function</b> expmod(base, exp, m) {</p>
<p class="Sp-text-1"><a id="c1-para-0700"/>    <b>return</b> exp === 0</p>
<p class="Sp-text-1"><a id="c1-para-0701"/>           ? 1</p>
<p class="Sp-text-1"><a id="c1-para-0702"/>           : is_even(exp)</p>
<p class="Sp-text-1"><a id="c1-para-0703"/>           ? square(expmod(base, exp / 2, m)) % m</p>
<p class="Sp-text-1"><a id="c1-para-0704"/>           : (base * expmod(base, exp - 1, m)) % m;</p>
<p class="Sp-text-1"><a id="c1-para-0705"/>}</p>
<p class="paracontinue"><a id="c1-para-0706"/>This is very similar to the <span class="KeyTerm1">fast_expt</span> function of section 1.2.4. It uses successive squaring, so that the number of steps grows logarithmically with the exponent.<a id="c1-fn-0044a"/><a href="#c1-fn-0044"><sup>44</sup></a></p>
<p><a id="c1-para-0707"/>The Fermat test is performed by choosing at random a number <i>a</i> between 1 and <i>n</i> – 1 inclusive and checking whether the remainder modulo <i>n</i> of the <i>n</i>th power of <i>a</i> is equal to <i>a</i>. The random number <i>a</i> is chosen using the primitive function <span class="KeyTerm1">math_random</span>, which returns a nonnegative number less than 1. Hence, to obtain a random number between 1 and <i>n</i> – 1, we multiply the return value of <span class="KeyTerm1">math_random</span> by <i>n</i> – 1, round down the result with the primitive function <span class="KeyTerm1">math_floor</span>, and add 1:</p>
<p class="Sp-text-1"><a id="c1-para-0708"/><b>function</b> fermat_test(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0709"/>    <b>function</b> try_it(a) {</p>
<p class="Sp-text-1"><a id="c1-para-0710"/>        <b>return</b> expmod(a, n, n) === a;</p>
<p class="Sp-text-1"><a id="c1-para-0711"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0712"/>    <b>return</b> try_it(1 + math_floor(math_random() * (n - 1)));</p>
<p class="Sp-text-1"><a id="c1-para-0713"/>}</p>
<p><a id="c1-para-0714"/>The following function runs the test a given number of times, as specified by a parameter. Its value is true if the test succeeds every time, and false otherwise.</p>
<p class="Sp-text-1"><a id="c1-para-0715"/><b>function</b> fast_is_prime(n, times) {</p>
<p class="Sp-text-1"><a id="c1-para-0716"/>    <b>return</b> times === 0</p>
<p class="Sp-text-1"><a id="c1-para-0717"/>           ? <b>true</b></p>
<p class="Sp-text-1"><a id="c1-para-0718"/>           : fermat_test(n)</p>
<p class="Sp-text-1"><a id="c1-para-0719"/>           ? fast_is_prime(n, times - 1)</p>
<p class="Sp-text-1"><a id="c1-para-0720"/>           : <b>false</b>;</p>
<p class="Sp-text-1"><a id="c1-para-0721"/>}</p>
</section>
<section>
<h5><a id="c1-sec-0047"/><a id="c1-title-0048"/>Probabilistic methods</h5>
<p class="paraaftertitle"><a id="c1-para-0722"/>The Fermat test differs in character from most familiar algorithms, in which one computes an answer that is guaranteed to be correct. Here, the answer obtained is only probably correct. More precisely, if <i>n</i> ever fails the Fermat test, we can be certain that <i>n</i> is not prime. But the fact that <i>n</i> passes the test, while an extremely strong indication, is still not a guarantee that <i>n</i> is prime. What we would like to say is that for any number <i>n</i>, if we perform the test enough times and find that <i>n</i> always passes the test, then the probability of error in our primality test can be made as small as we like.</p>
<p><a id="c1-para-0723"/>Unfortunately, this assertion is not quite correct. There do exist numbers that fool the Fermat test: numbers <i>n</i> that are not prime and yet have the property that <i>a<sup>n</sup></i> is congruent to <i>a</i> modulo <i>n</i> for all integers <i>a</i> &lt; <i>n</i>. Such numbers are extremely rare, so the Fermat test is quite reliable in practice.<a id="c1-fn-0045a"/><a href="#c1-fn-0045"><sup>45</sup></a> There are variations of the Fermat test that cannot be fooled. In these tests, as with the Fermat method, one tests the primality of an integer <i>n</i> by choosing a random integer <i>a</i> &lt; <i>n</i> and checking some condition that depends upon <i>n</i> and <i>a</i>. (See exercise 1.28 for an example of such a test.) On the other hand, in contrast to the Fermat test, one can prove that, for any <i>n</i>, the condition does not hold for most of the integers <i>a</i> &lt; <i>n</i> unless <i>n</i> is prime. Thus, if <i>n</i> passes the test for some random choice of <i>a</i>, the chances are better than even that <i>n</i> is prime. If <i>n</i> passes the test for two random choices of <i>a</i>, the chances are better than 3 out of 4 that <i>n</i> is prime. By running the test with more and more randomly chosen values of <i>a</i> we can make the probability of error as small as we like.</p>
<p><a id="c1-para-0724"/>The existence of tests for which one can prove that the chance of error becomes arbitrarily small has sparked interest in algorithms of this type, which have come to be known as <i>probabilistic algorithms</i>. There is a great deal of research activity in this area, and probabilistic algorithms have been fruitfully applied to many fields.<a id="c1-fn-0046a"/><a href="#c1-fn-0046"><sup>46</sup></a></p>
</section>
<section>
<h5><a id="c1-sec-0048"/><a id="c1-title-0049"/>Exercise 1.21</h5>
<p class="paraaftertitle"><a id="c1-para-0725"/>Use the <span class="KeyTerm1">smallest_divisor</span> function to find the smallest divisor of each of the following numbers: 199, 1999, 19999.</p>
</section>
<section>
<h5><a id="c1-sec-0049"/><a id="c1-title-0050"/>Exercise 1.22</h5>
<p class="paraaftertitle"><a id="c1-para-0726"/>Assume a primitive function <span class="KeyTerm1">get_time</span> of no arguments that returns the number of milliseconds that have passed since 00:00:00 UTC on Thursday, 1 January, 1970.<a id="c1-fn-0047a"/><a href="#c1-fn-0047"><sup>47</sup></a> The following <span class="KeyTerm1">timed_prime_test</span> function, when called with an integer <i>n</i>, prints <i>n</i> and checks to see if <i>n</i> is prime. If <i>n</i> is prime, the function prints three asterisks<a id="c1-fn-0048a"/><a href="#c1-fn-0048"><sup>48</sup></a> followed by the amount of time used in performing the test.</p>
<p class="Sp-text-1"><a id="c1-para-0727"/><b>function</b> timed_prime_test(n) { </p>
<p class="Sp-text-1"><a id="c1-para-0728"/>    display(n);</p>
<p class="Sp-text-1"><a id="c1-para-0729"/>    <b>return</b> start_prime_test(n, get_time());</p>
<p class="Sp-text-1"><a id="c1-para-0730"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0731"/><b>function</b> start_prime_test(n, start_time) {</p>
<p class="Sp-text-1"><a id="c1-para-0732"/>    <b>return</b> is_prime(n)</p>
<p class="Sp-text-1"><a id="c1-para-0733"/>           ? report_prime(get_time() - start_time)</p>
<p class="Sp-text-1"><a id="c1-para-0734"/>           : <b>true</b>;</p>
<p class="Sp-text-1"><a id="c1-para-0735"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0736"/><b>function</b> report_prime(elapsed_time) {</p>
<p class="Sp-text-1"><a id="c1-para-0737"/>    display(" *** ");</p>
<p class="Sp-text-1"><a id="c1-para-0738"/>    display(elapsed_time);</p>
<p class="Sp-text-1"><a id="c1-para-0739"/>}</p>
<p class="paracontinue"><a id="c1-para-0740"/>Using this function, write a function <span class="KeyTerm1">search_for_primes</span> that checks the primality of consecutive odd integers in a specified range. Use your function to find the three smallest primes larger than 1000; larger than 10,000; larger than 100,000; larger than 1,000,000. Note the time needed to test each prime. Since the testing algorithm has order of growth of Θ(<img alt="c1-fig-5012.jpg" src="../images/c1-fig-5012.jpg"/>), you should expect that testing for primes around 10,000 should take about <img alt="c1-fig-5013.jpg" src="../images/c1-fig-5013.jpg"/> times as long as testing for primes around 1000. Do your timing data bear this out? How well do the data for 100,000 and 1,000,000 support the <img alt="c1-fig-5012.jpg" src="../images/c1-fig-5012.jpg"/> prediction? Is your result compatible with the notion that programs on your machine run in time proportional to the number of steps required for the computation?</p>
</section>
<section>
<h5><a id="c1-sec-0050"/><a id="c1-title-0051"/>Exercise 1.23</h5>
<p class="paraaftertitle"><a id="c1-para-0741"/>The <span class="KeyTerm1">smallest_divisor</span> function shown at the start of this section does lots of needless testing: After it checks to see if the number is divisible by 2 there is no point in checking to see if it is divisible by any larger even numbers. This suggests that the values used for <span class="KeyTerm1">test_divisor</span> should not be 2, 3, 4, 5, 6, . . . but rather 2, 3, 5, 7, 9, To implement this change, declare a function <span class="KeyTerm1">next</span> that returns 3 if its input is equal to 2 and otherwise returns its input plus 2. Modify the <span class="KeyTerm1">smallest_divisor</span> function to use <span class="KeyTerm1">next(test_divisor)</span> instead of <span class="KeyTerm1">test_divisor + 1</span>. With <span class="KeyTerm1">timed_prime_test</span> incorporating this modified version of <span class="KeyTerm1">smallest_divisor</span>, run the test for each of the 12 primes found in exercise 1.22. Since this modification halves the number of test steps, you should expect it to run about twice as fast. Is this expectation confirmed? If not, what is the observed ratio of the speeds of the two algorithms, and how do you explain the fact that it is different from 2?</p>
</section>
<section>
<h5><a id="c1-sec-0051"/><a id="c1-title-0052"/>Exercise 1.24</h5>
<p class="paraaftertitle"><a id="c1-para-0742"/>Modify the <span class="KeyTerm1">timed_prime_test</span> function of exercise 1.22 to use <span class="KeyTerm1">fast_is_prime</span> (the Fermat method), and test each of the 12 primes you found in that exercise. Since the Fermat test has Θ(log <i>n</i>) growth, how would you expect the time to test primes near 1,000,000 to compare with the time needed to test primes near 1000? Do your data bear this out? Can you explain any discrepancy you find?</p>
</section>
<section>
<h5><a id="c1-sec-0052"/><a id="c1-title-0053"/>Exercise 1.25</h5>
<p class="paraaftertitle"><a id="c1-para-0743"/>Alyssa P. Hacker complains that we went to a lot of extra work in writing <span class="KeyTerm1">expmod</span>. After all, she says, since we already know how to compute exponentials, we could have simply written</p>
<p class="Sp-text-1"><a id="c1-para-0744"/><b>function</b> expmod(base, exp, m) {</p>
<p class="Sp-text-1"><a id="c1-para-0745"/>    <b>return</b> fast_expt(base, exp) % m;</p>
<p class="Sp-text-1"><a id="c1-para-0746"/>}</p>
<p class="paracontinue"><a id="c1-para-0747"/>Is she correct? Would this function serve as well for our fast prime tester? Explain.</p>
</section>
<section>
<h5><a id="c1-sec-0053"/><a id="c1-title-0054"/>Exercise 1.26</h5>
<p class="paraaftertitle"><a id="c1-para-0748"/>Louis Reasoner is having great difficulty doing exercise 1.24. His <span class="KeyTerm1">fast_is_prime</span> test seems to run more slowly than his <span class="KeyTerm1">is_prime</span> test. Louis calls his friend Eva Lu Ator over to help. When they examine Louis's code, they find that he has rewritten the <span class="KeyTerm1">expmod</span> function to use an explicit multiplication, rather than calling <span class="KeyTerm1">square</span>:</p>
<p class="Sp-text-1"><a id="c1-para-0749"/><b>function</b> expmod(base, exp, m) {</p>
<p class="Sp-text-1"><a id="c1-para-0750"/>    <b>return</b> exp === 0</p>
<p class="Sp-text-1"><a id="c1-para-0751"/>           ? 1</p>
<p class="Sp-text-1"><a id="c1-para-0752"/>           : is_even(exp)</p>
<p class="Sp-text-1"><a id="c1-para-0753"/>           ? (  expmod(base, exp / 2, m)</p>
<p class="Sp-text-1"><a id="c1-para-0754"/>              * expmod(base, exp / 2, m)) % m</p>
<p class="Sp-text-1"><a id="c1-para-0755"/>           : (base * expmod(base, exp - 1, m)) % m;</p>
<p class="Sp-text-1"><a id="c1-para-0756"/>}</p>
<p class="paracontinue"><a id="c1-para-0757"/>“I don't see what difference that could make,” says Louis. “I do.” says Eva. “By writing the function like that, you have transformed the Θ(log <i>n</i>) process into a Θ(<i>n</i>) process.” Explain.</p>
</section>
<section>
<h5><a id="c1-sec-0054"/><a id="c1-title-0055"/>Exercise 1.27</h5>
<p class="paraaftertitle"><a id="c1-para-0758"/>Demonstrate that the Carmichael numbers listed in footnote 45 really do fool the Fermat test. That is, write a function that takes an integer <i>n</i> and tests whether <i>a<sup>n</sup></i> is congruent to <i>a</i> modulo <i>n</i> for every <i>a</i> &lt; <i>n</i>, and try your function on the given Carmichael numbers.</p>
</section>
<section>
<h5><a id="c1-sec-0055"/><a id="c1-title-0056"/>Exercise 1.28</h5>
<p class="paraaftertitle"><a id="c1-para-0759"/>One variant of the Fermat test that cannot be fooled is called the <i>Miller–Rabin test</i> (Miller 1976; Rabin 1980). This starts from an alternate form of Fermat's Little Theorem, which states that if <i>n</i> is a prime number and <i>a</i> is any positive integer less than <i>n</i>, then <i>a</i> raised to the (<i>n</i> – 1)st power is congruent to 1 modulo <i>n</i>. To test the primality of a number <i>n</i> by the Miller–Rabin test, we pick a random number <i>a</i> &lt; <i>n</i> and raise <i>a</i> to the (<i>n</i> – 1)st power modulo <i>n</i> using the <span class="KeyTerm1">expmod</span> function. However, whenever we perform the squaring step in <span class="KeyTerm1">expmod</span>, we check to see if we have discovered a “nontrivial square root of 1 modulo <i>n</i>,” that is, a number not equal to 1 or <i>n</i> – 1 whose square is equal to 1 modulo <i>n</i>. It is possible to prove that if such a nontrivial square root of 1 exists, then <i>n</i> is not prime. It is also possible to prove that if <i>n</i> is an odd number that is not prime, then, for at least half the numbers <i>a</i> &lt; <i>n</i>, computing <i>a<sup>n</sup></i><sup>–1</sup> in this way will reveal a nontrivial square root of 1 modulo <i>n</i>. (This is why the Miller–Rabin test cannot be fooled.) Modify the <span class="KeyTerm1">expmod</span> function to signal if it discovers a nontrivial square root of 1, and use this to implement the Miller–Rabin test with a function analogous to <span class="KeyTerm1">fermat_test</span>. Check your function by testing various known primes and non-primes. Hint: One convenient way to make <span class="KeyTerm1">expmod</span> signal is to have it return 0.</p>
</section>
</section>
</section>
<section>
<h2><a id="c1-sec-0056"/><span>1.3</span> <a id="c1-title-0057"/>Formulating Abstractions with Higher-Order Functions</h2>
<p class="paraaftertitle"><a id="c1-para-0760"/>We have seen that functions are, in effect, abstractions that describe compound operations on numbers independent of the particular numbers. For example, when we declare</p>
<p class="Sp-text-1"><a id="c1-para-0761"/><b>function</b> cube(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0762"/>    <b>return</b> x * x * x;</p>
<p class="Sp-text-1"><a id="c1-para-0763"/>}</p>
<p class="paracontinue"><a id="c1-para-0764"/>we are not talking about the cube of a particular number, but rather about a method for obtaining the cube of any number. Of course we could get along without ever declaring this function, by always writing expressions such as</p>
<p class="Sp-text-1"><a id="c1-para-0765"/>3 * 3 * 3</p>
<p class="Sp-text-1"><a id="c1-para-0766"/>x * x * x</p>
<p class="Sp-text-1"><a id="c1-para-0767"/>y * y * y</p>
<p class="paracontinue"><a id="c1-para-0768"/>and never mentioning <span class="KeyTerm1">cube</span> explicitly. This would place us at a serious disadvantage, forcing us to work always at the level of the particular operations that happen to be primitives in the language (multiplication, in this case) rather than in terms of higher-level operations. Our programs would be able to compute cubes, but our language would lack the ability to express the concept of cubing. One of the things we should demand from a powerful programming language is the ability to build abstractions by assigning names to common patterns and then to work in terms of the abstractions directly. Functions provide this ability. This is why all but the most primitive programming languages include mechanisms for declaring functions.</p>
<p><a id="c1-para-0769"/>Yet even in numerical processing we will be severely limited in our ability to create abstractions if we are restricted to functions whose parameters must be numbers. Often the same programming pattern will be used with a number of different functions. To express such patterns as concepts, we will need to construct functions that can accept functions as arguments or return functions as values. Functions that manipulate functions are called <i>higher-order functions.</i> This section shows how higher-order functions can serve as powerful abstraction mechanisms, vastly increasing the expressive power of our language.</p>
<section>
<h3><a id="c1-sec-0057"/><span>1.3.1</span> <a id="c1-title-0058"/>Functions as Arguments</h3>
<p class="paraaftertitle"><a id="c1-para-0770"/>Consider the following three functions. The first computes the sum of the integers from <span class="KeyTerm1">a</span> through <span class="KeyTerm1">b</span>:</p>
<p class="Sp-text-1"><a id="c1-para-0771"/><b>function</b> sum_integers(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0772"/>    <b>return</b> a &gt; b</p>
<p class="Sp-text-1"><a id="c1-para-0773"/>           ? 0</p>
<p class="Sp-text-1"><a id="c1-para-0774"/>           : a + sum_integers(a + 1, b);</p>
<p class="Sp-text-1"><a id="c1-para-0775"/>}</p>
<p class="paracontinue"><a id="c1-para-0776"/>The second computes the sum of the cubes of the integers in the given range:</p>
<p class="Sp-text-1"><a id="c1-para-0777"/><b>function</b> sum_cubes(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0778"/>    <b>return</b> a &gt; b</p>
<p class="Sp-text-1"><a id="c1-para-0779"/>           ? 0</p>
<p class="Sp-text-1"><a id="c1-para-0780"/>           : cube(a) + sum_cubes(a + 1, b);</p>
<p class="Sp-text-1"><a id="c1-para-0781"/>}</p>
<p class="paracontinue"><a id="c1-para-0782"/>The third computes the sum of a sequence of terms in the series</p>
<p><a id="c1-para-0783"/></p>
<figure id="c1-fig-0015"><img alt="c1-fig-5014.jpg" src="../images/c1-fig-5014.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0784"/>which converges to <i>π</i>/8 (very slowly):<a id="c1-fn-0049a"/><a href="#c1-fn-0049"><sup>49</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-0785"/><b>function</b> pi_sum(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0786"/>    <b>return</b> a &gt; b</p>
<p class="Sp-text-1"><a id="c1-para-0787"/>           ? 0</p>
<p class="Sp-text-1"><a id="c1-para-0788"/>           : 1 / (a * (a + 2)) + pi_sum(a + 4, b);</p>
<p class="Sp-text-1"><a id="c1-para-0789"/>}</p>
<p><a id="c1-para-0790"/>These three functions clearly share a common underlying pattern. They are for the most part identical, differing only in the name of the function, the function of <span class="KeyTerm1">a</span> used to compute the term to be added, and the function that provides the next value of <span class="KeyTerm1">a</span>. We could generate each of the functions by filling in slots in the same template:</p>
<p class="Sp-text-1"><a id="c1-para-0791"/><b>function</b> <span class="KeyTerm2"><i>name</i></span>(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0792"/>    <b>return</b> a &gt; b</p>
<p class="Sp-text-1"><a id="c1-para-0793"/>           ? 0</p>
<p class="Sp-text-1"><a id="c1-para-0794"/>           : <span class="KeyTerm2"><i>term</i></span>(a) + <span class="KeyTerm2"><i>name</i></span>(<span class="KeyTerm2"><i>next</i></span>(a), b);</p>
<p class="Sp-text-1"><a id="c1-para-0795"/>}</p>
<p><a id="c1-para-0796"/>The presence of such a common pattern is strong evidence that there is a useful abstraction waiting to be brought to the surface. Indeed, mathematicians long ago identified the abstraction of <i>summation of a series</i> and invented “sigma notation,” for example</p>
<p><a id="c1-para-0797"/></p>
<figure id="c1-fig-0016"><img alt="c1-fig-5016.jpg" src="../images/c1-fig-5016.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0798"/>to express this concept. The power of sigma notation is that it allows mathematicians to deal with the concept of summation itself rather than only with particular sums—for example, to formulate general results about sums that are independent of the particular series being summed.</p>
<p><a id="c1-para-0799"/>Similarly, as program designers, we would like our language to be powerful enough so that we can write a function that expresses the concept of summation itself rather than only functions that compute particular sums. We can do so readily in our functional language by taking the common template shown above and transforming the “slots” into parameters:</p>
<p class="Sp-text-1"><a id="c1-para-0800"/><b>function</b> sum(term, a, next, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0801"/>    <b>return</b> a &gt; b</p>
<p class="Sp-text-1"><a id="c1-para-0802"/>           ? 0</p>
<p class="Sp-text-1"><a id="c1-para-0803"/>           : term(a) + sum(term, next(a), next, b);</p>
<p class="Sp-text-1"><a id="c1-para-0804"/>}</p>
<p class="paracontinue"><a id="c1-para-0805"/>Notice that <span class="KeyTerm1">sum</span> takes as its arguments the lower and upper bounds <span class="KeyTerm1">a</span> and <span class="KeyTerm1">b</span> together with the functions <span class="KeyTerm1">term</span> and <span class="KeyTerm1">next</span>. We can use <span class="KeyTerm1">sum</span> just as we would any function. For example, we can use it (along with a function <span class="KeyTerm1">inc</span> that increments its argument by 1) to define <span class="KeyTerm1">sum_cubes</span>:</p>
<p class="Sp-text-1"><a id="c1-para-0806"/><b>function</b> inc(n) {</p>
<p class="Sp-text-1"><a id="c1-para-0807"/>    <b>return</b> n + 1;</p>
<p class="Sp-text-1"><a id="c1-para-0808"/>}</p>
<p class="Sp-text-1"><a id="c1-para-0809"/><b>function</b> sum_cubes(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0810"/>    <b>return</b> sum(cube, a, inc, b);</p>
<p class="Sp-text-1"><a id="c1-para-0811"/>}</p>
<p class="paracontinue"><a id="c1-para-0812"/>Using this, we can compute the sum of the cubes of the integers from 1 to 10:</p>
<p class="Sp-text-1"><a id="c1-para-0813"/>sum_cubes(1, 10);</p>
<p class="Sp-text-1"><a id="c1-para-0814"/><i>3025</i></p>
<p class="paracontinue"><a id="c1-para-0815"/>With the aid of an identity function to compute the term, we can define <span class="KeyTerm1">sum_ integers</span> in terms of <span class="KeyTerm1">sum</span>:</p>
<p class="Sp-text-1"><a id="c1-para-0816"/><b>function</b> identity(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0817"/>    <b>return</b> x;</p>
<p class="Sp-text-1"><a id="c1-para-0818"/>}</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0819"/><b>function</b> sum_integers(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0820"/>    <b>return</b> sum(identity, a, inc, b);</p>
<p class="Sp-text-1"><a id="c1-para-0821"/>}</p>
<p class="paracontinue"><a id="c1-para-0822"/>Then we can add up the integers from 1 to 10:</p>
<p class="Sp-text-1"><a id="c1-para-0823"/>sum_integers(1, 10);</p>
<p class="Sp-text-1"><a id="c1-para-0824"/><i>55</i></p>
<p class="paracontinue"><a id="c1-para-0825"/>We can also define <span class="KeyTerm1">pi_sum</span> in the same way:<a id="c1-fn-0050a"/><a href="#c1-fn-0050"><sup>50</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-0826"/><b>function</b> pi_sum(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0827"/>    <b>function</b> pi_term(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0828"/>        <b>return</b> 1 / (x * (x + 2));</p>
<p class="Sp-text-1"><a id="c1-para-0829"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0830"/>    <b>function</b> pi_next(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0831"/>        <b>return</b> x + 4;</p>
<p class="Sp-text-1"><a id="c1-para-0832"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0833"/>    <b>return</b> sum(pi_term, a, pi_next, b);</p>
<p class="Sp-text-1"><a id="c1-para-0834"/>}</p>
<p class="paracontinue"><a id="c1-para-0835"/>Using these functions, we can compute an approximation to <i>π</i>:</p>
<p class="Sp-text-1"><a id="c1-para-0836"/>8 * pi_sum(1, 1000);</p>
<p class="Sp-text-1"><a id="c1-para-0837"/><i>3.139592655589783</i></p>
<p><a id="c1-para-0838"/>Once we have <span class="KeyTerm1">sum</span>, we can use it as a building block in formulating further concepts. For instance, the definite integral of a function <i>f</i> between the limits <i>a</i> and <i>b</i> can be approximated numerically using the formula</p>
<p><a id="c1-para-0839"/></p>
<figure id="c1-fig-0017"><img alt="c1-fig-5017.jpg" src="../images/c1-fig-5017.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0840"/>for small values of <i>dx</i>. We can express this directly as a function:</p>
<p class="Sp-text-1"><a id="c1-para-0841"/><b>function</b> integral(f, a, b, dx) {</p>
<p class="Sp-text-1"><a id="c1-para-0842"/>    <b>function</b> add_dx(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0843"/>        <b>return</b> x + dx;</p>
<p class="Sp-text-1"><a id="c1-para-0844"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0845"/>    <b>return</b> sum(f, a + dx / 2, add_dx, b) * dx;</p>
<p class="Sp-text-1"><a id="c1-para-0846"/>}</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0847"/>integral(cube, 0, 1, 0.01);</p>
<p class="Sp-text-1"><a id="c1-para-0848"/><i>0.24998750000000042</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0849"/>integral(cube, 0, 1, 0.001);</p>
<p class="Sp-text-1"><a id="c1-para-0850"/><i>0.249999875000001</i></p>
<p class="paracontinue"><a id="c1-para-0851"/>(The exact value of the integral of <span class="KeyTerm1">cube</span> between 0 and 1 is 1/4.)</p>
<section>
<h5><a id="c1-sec-0058"/><a id="c1-title-0059"/>Exercise 1.29</h5>
<p class="paraaftertitle"><a id="c1-para-0852"/>Simpson's Rule is a more accurate method of numerical integration than the method illustrated above. Using Simpson's Rule, the integral of a function <i>f</i> between <i>a</i> and <i>b</i> is approximated as</p>
<p><a id="c1-para-0853"/></p>
<figure id="c1-fig-0018"><img alt="c1-fig-5018.jpg" src="../images/c1-fig-5018.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-0854"/>where <i>h</i> = (<i>b</i> – <i>a</i>)/<i>n</i>, for some even integer <i>n</i>, and <i>y<sub>k</sub></i> = <i>f</i> (<i>a</i> + <i>kh</i>). (Increasing <i>n</i> increases the accuracy of the approximation.) Declare a function that takes as arguments <i>f, a</i>, <i>b</i>, and <i>n</i> and returns the value of the integral, computed using Simpson's Rule. Use your function to integrate <span class="KeyTerm1">cube</span> between 0 and 1 (with <i>n</i> = 100 and <i>n</i> = 1000), and compare the results to those of the <span class="KeyTerm1">integral</span> function shown above.</p>
</section>
<section>
<h5><a id="c1-sec-0059"/><a id="c1-title-0060"/>Exercise 1.30</h5>
<p class="paraaftertitle"><a id="c1-para-0855"/>The <span class="KeyTerm1">sum</span> function above generates a linear recursion. The function can be rewritten so that the sum is performed iteratively. Show how to do this by filling in the missing expressions in the following declaration:</p>
<p class="Sp-text-1"><a id="c1-para-0856"/><b>function</b> sum(term, a, next, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0857"/>    <b>function</b> iter(a, result) {</p>
<p class="Sp-text-1"><a id="c1-para-0858"/>        <b>return</b> 〈??〉</p>
<p class="Sp-text-1"><a id="c1-para-0859"/>               ? 〈??〉</p>
<p class="Sp-text-1"><a id="c1-para-0860"/>               : iter(〈??〉, 〈??〉);</p>
<p class="Sp-text-1"><a id="c1-para-0861"/>    <sub>}</sub></p>
<p class="Sp-text-1"><a id="c1-para-0862"/>    <b>return</b> iter(〈??〉, 〈??〉);</p>
<p class="Sp-text-1"><a id="c1-para-0863"/>}</p>
</section>
<section>
<h5><a id="c1-sec-0060"/><a id="c1-title-0061"/>Exercise 1.31</h5>
<ol class="BS_NumberListA">
<li><a id="c1-li-0028"/><span>a. </span>The <span class="KeyTerm1">sum</span> function is only the simplest of a vast number of similar abstractions that can be captured as higher-order functions.<a id="c1-fn-0051a"/><a href="#c1-fn-0051"><sup>51</sup></a> Write an analogous function called <span class="KeyTerm1">product</span> that returns the product of the values of a function at points over a given range. Show how to define <span class="KeyTerm1">factorial</span> in terms of <span class="KeyTerm1">product</span>. Also use <span class="KeyTerm1">product</span> to compute approximations to <i>π</i> using the formula<a id="c1-fn-0052a"/><a href="#c1-fn-0052"><sup>52</sup></a>
<figure id="c1-fig-0019"><img alt="c1-fig-5019.jpg" src="../images/c1-fig-5019.jpg"/><figcaption class="figurecaption">
</figcaption></figure></li>
<li><a id="c1-li-0029"/><span>b. </span>If your <span class="KeyTerm1">product</span> function generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.</li>
</ol>
</section>
<section>
<h5><a id="c1-sec-0061"/><a id="c1-title-0062"/>Exercise 1.32</h5>
<ol class="BS_NumberListA">
<li><a id="c1-li-0030"/><span>a. </span>Show that <span class="KeyTerm1">sum</span> and <span class="KeyTerm1">product</span> (exercise 1.31) are both special cases of a still more general notion called <span class="KeyTerm1">accumulate</span> that combines a collection of terms, using some general accumulation function:
<p class="Sp-text-1"><a id="c1-para-0867"/>accumulate(combiner, null_value, term, a, next, b);</p>
<p class="paracontinue"><a id="c1-para-0868"/>The function <span class="KeyTerm1">accumulate</span> takes as arguments the same term and range specifications as <span class="KeyTerm1">sum</span> and <span class="KeyTerm1">product</span>, together with a <span class="KeyTerm1">combiner</span> function (of two arguments) that specifies how the current term is to be combined with the accumulation of the preceding terms and a <span class="KeyTerm1">null_value</span> that specifies what base value to use when the terms run out. Write <span class="KeyTerm1">accumulate</span> and show how <span class="KeyTerm1">sum</span> and <span class="KeyTerm1">product</span> can both be declared as simple calls to <span class="KeyTerm1">accumulate</span>.</p>
<p class="paracontinue"><a id="c1-para-0869"/>b. If your <span class="KeyTerm1">accumulate</span> function generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.</p></li>
</ol>
</section>
<section>
<h5><a id="c1-sec-0062"/><a id="c1-title-0063"/>Exercise 1.33</h5>
<p class="paraaftertitle"><a id="c1-para-0870"/>You can obtain an even more general version of <span class="KeyTerm1">accumulate</span> (exercise 1.32) by introducing the notion of a <i>filter</i> on the terms to be combined. That is, combine only those terms derived from values in the range that satisfy a specified condition. The resulting <span class="KeyTerm1">filtered_ accumulate</span> abstraction takes the same arguments as accumulate, together with an additional predicate of one argument that specifies the filter. Write <span class="KeyTerm1">filtered_accumulate</span> as a function. Show how to express the following using <span class="KeyTerm1">filtered_accumulate</span>:</p>
<ol class="BS_NumberListA">
<li><a id="c1-li-0031"/><span>a. </span>the sum of the squares of the prime numbers in the interval <i>a</i> to <i>b</i> (assuming that you have an <span class="KeyTerm1">is_prime</span> predicate already written)</li>
<li><a id="c1-li-0032"/><span>b. </span>the product of all the positive integers less than <i>n</i> that are relatively prime to <i>n</i> (i.e., all positive integers <i>i</i> &lt; <i>n</i> such that GCD(<i>i</i>, <i>n</i>) = 1).</li>
</ol>
</section>
</section>
<section>
<h3><a id="c1-sec-0063"/><span>1.3.2</span> <a id="c1-title-0064"/>Constructing Functions using Lambda Expressions</h3>
<p class="paraaftertitle"><a id="c1-para-0873"/>In using <span class="KeyTerm1">sum</span> as in section 1.3.1, it seems terribly awkward to have to declare trivial functions such as <span class="KeyTerm1">pi_term</span> and <span class="KeyTerm1">pi_next</span> just so we can use them as arguments to our higher-order function. Rather than declare <span class="KeyTerm1">pi_next</span> and <span class="KeyTerm1">pi_term</span>, it would be more convenient to have a way to directly specify “the function that returns its input incremented by 4” and “the function that returns the reciprocal of its input times its input plus 2.” We can do this by introducing the <i>lambda expression</i> as a syntactic form for creating functions. Using lambda expressions, we can describe what we want as</p>
<p class="Sp-text-1"><a id="c1-para-0874"/>x =&gt; x + 4</p>
<p class="paracontinue"><a id="c1-para-0875"/>and</p>
<p class="Sp-text-1"><a id="c1-para-0876"/>x =&gt; 1 / (x * (x + 2))</p>
<p class="paracontinue"><a id="c1-para-0877"/>Then we can express our <span class="KeyTerm1">pi_sum</span> function without declaring any auxiliary functions:</p>
<p class="Sp-text-1"><a id="c1-para-0878"/><b>function</b> pi_sum(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0879"/>    <b>return</b> sum(x =&gt; 1 / (x * (x + 2)),</p>
<p class="Sp-text-1"><a id="c1-para-0880"/>               a,</p>
<p class="Sp-text-1"><a id="c1-para-0881"/>               x =&gt; x + 4,</p>
<p class="Sp-text-1"><a id="c1-para-0882"/>               b);</p>
<p class="Sp-text-1"><a id="c1-para-0883"/>}</p>
<p><a id="c1-para-0884"/>Again using a lambda expression, we can write the <span class="KeyTerm1">integral</span> function without having to declare the auxiliary function <span class="KeyTerm1">add_dx</span>:</p>
<p class="Sp-text-1"><a id="c1-para-0885"/><b>function</b> integral(f, a, b, dx) {</p>
<p class="Sp-text-1"><a id="c1-para-0886"/>    <b>return</b> sum(f,</p>
<p class="Sp-text-1"><a id="c1-para-0887"/>               a + dx / 2,</p>
<p class="Sp-text-1"><a id="c1-para-0888"/>               x =&gt; x + dx,</p>
<p class="Sp-text-1"><a id="c1-para-0889"/>               b)</p>
<p class="Sp-text-1"><a id="c1-para-0890"/>           * </p>
<p class="Sp-text-1"><a id="c1-para-0891"/>           dx;</p>
<p class="Sp-text-1"><a id="c1-para-0892"/>}</p>
<p><a id="c1-para-0893"/>In general, lambda expressions are used to create functions in the same way as function declarations, except that no name is specified for the function and the <span class="KeyTerm1"><b>return</b></span> keyword and braces are omitted (if there is only one parameter, the parentheses around the parameter list can also be omitted, as in the examples we have seen).<a id="c1-fn-0053a"/><a href="#c1-fn-0053"><sup>53</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-0894"/>(<span class="KeyTerm2"><i>parameters</i></span>) =&gt; <span class="KeyTerm2"><i>expression</i></span></p>
<p class="paracontinue"><a id="c1-para-0895"/>The resulting function is just as much a function as one that is created using a function declaration statement. The only difference is that it has not been associated with any name in the environment. We consider</p>
<p class="Sp-text-1"><a id="c1-para-0896"/><b>function</b> plus4(x) {</p>
<p class="Sp-text-1"><a id="c1-para-0897"/>    <b>return</b> x + 4;</p>
<p class="Sp-text-1"><a id="c1-para-0898"/>}</p>
<p class="paracontinue"><a id="c1-para-0899"/>to be equivalent to<a id="c1-fn-0054a"/><a href="#c1-fn-0054"><sup>54</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-0900"/><b>const</b> plus4 = x =&gt; x + 4;</p>
<p class="paracontinue"><a id="c1-para-0901"/>We can read a lambda expression as follows:</p>
<p><a id="c1-para-0902"/></p>
<figure id="c1-fig-0020"><img alt="c1-fig-5020.jpg" src="../images/c1-fig-5020.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p><a id="c1-para-0903"/>Like any expression that has a function as its value, a lambda expression can be used as the function expression in an application such as</p>
<p class="Sp-text-1"><a id="c1-para-0904"/>((x, y, z) =&gt; x + y + square(z))(1, 2, 3);</p>
<p class="Sp-text-1"><a id="c1-para-0905"/><i>12</i></p>
<p class="paracontinue"><a id="c1-para-0906"/>or, more generally, in any context where we would normally use a function name.<a id="c1-fn-0055a"/><a href="#c1-fn-0055"><sup>55</sup></a> Note that <span class="KeyTerm1">=&gt;</span> has lower precedence than function application and thus the parentheses around the lambda expression are necessary here.</p>
<section>
<h5><a id="c1-sec-0064"/><a id="c1-title-0065"/>Using <span class="KeyTerm1">const</span> to create local names</h5>
<p class="paraaftertitle"><a id="c1-para-0907"/>Another use of lambda expressions is in creating local names. We often need local names in our functions other than those that have been bound as parameters. For example, suppose we wish to compute the function</p>
<p class="Sp-text-2"><a id="c1-para-0908"/><i>f</i> (<i>x</i>, <i>y</i>) = <i>x</i>(1 + <i>xy</i>)<sup>2</sup> + <i>y</i>(1 – <i>y</i>) + (1 + <i>xy</i>)(1 – <i>y</i>) </p>
<p class="paracontinue"><a id="c1-para-0909"/>which we could also express as</p>
<p class="Sp-text-2"><a id="c1-para-0910"/>   <i>a</i> = 1 + <i>xy</i></p>
<p class="Sp-text-2"><a id="c1-para-0911"/>   <i>b</i> = 1 – <i>y</i></p>
<p class="Sp-text-2"><a id="c1-para-0912"/><i>f</i> (<i>x</i>, <i>y</i>) = <i>xa</i><sup>2</sup> + <i>yb</i> + <i>ab</i></p>
<p class="paracontinue"><a id="c1-para-0913"/>In writing a function to compute <i>f,</i> we would like to include as local names not only <i>x</i> and <i>y</i> but also the names of intermediate quantities like <i>a</i> and <i>b</i>. One way to accomplish this is to use an auxiliary function to bind the local names:</p>
<p class="Sp-text-1"><a id="c1-para-0914"/><b>function</b> f(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-0915"/>    <b>function</b> f_helper(a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-0916"/>        <b>return</b> x * square(a) + y * b + a * b;</p>
<p class="Sp-text-1"><a id="c1-para-0917"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0918"/>    <b>return</b> f_helper(1 + x * y, 1 - y);</p>
<p class="Sp-text-1"><a id="c1-para-0919"/>}</p>
<p><a id="c1-para-0920"/>Of course, we could use a lambda expression to specify an anonymous function for binding our local names. The function body then becomes a single call to that function:</p>
<p class="Sp-text-1"><a id="c1-para-0921"/><b>function</b> f_2(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-0922"/>    <b>return</b> ( (a, b) =&gt; x * square(a) + y * b + a * b</p>
<p class="Sp-text-1"><a id="c1-para-0923"/>           )(1 + x * y, 1 - y);</p>
<p class="Sp-text-1"><a id="c1-para-0924"/>}</p>
<p class="paracontinue"><a id="c1-para-0925"/>A more convenient way to declare local names is by using constant declarations within the body of the function. Using <span class="KeyTerm1"><b>const</b></span>, the function can be written as</p>
<p class="Sp-text-1"><a id="c1-para-0926"/><b>function</b> f_3(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-0927"/>    <b>const</b> a = 1 + x * y; </p>
<p class="Sp-text-1"><a id="c1-para-0928"/>    <b>const</b> b = 1 - y;</p>
<p class="Sp-text-1"><a id="c1-para-0929"/>    <b>return</b> x * square(a) + y * b + a * b;</p>
<p class="Sp-text-1"><a id="c1-para-0930"/>}</p>
<p class="paracontinue"><a id="c1-para-0931"/>Names that are declared with <span class="KeyTerm1"><b>const</b></span> inside a block have the body of the immediately surrounding block as their scope.<a id="c1-fn-0056a"/><a href="#c1-fn-0056"><sup>56</sup></a><sup>,</sup><a id="c1-fn-0057a"/><a href="#c1-fn-0057"><sup>57</sup></a></p>
</section>
<section>
<h5><a id="c1-sec-0065"/><a id="c1-title-0066"/>Conditional statements</h5>
<p class="paraaftertitle"><a id="c1-para-0932"/>We have seen that it is often useful to declare names that are local to function declarations. When functions become big, we should keep the scope of the names as narrow as possible. Consider for example <span class="KeyTerm1">expmod</span> in exercise 1.26.</p>
<p class="Sp-text-1"><a id="c1-para-0933"/><b>function</b> expmod(base, exp, m) {</p>
<p class="Sp-text-1"><a id="c1-para-0934"/>    <b>return</b> exp === 0</p>
<p class="Sp-text-1"><a id="c1-para-0935"/>           ? 1</p>
<p class="Sp-text-1"><a id="c1-para-0936"/>           : is_even(exp)</p>
<p class="Sp-text-1"><a id="c1-para-0937"/>           ? ( expmod(base, exp / 2, m)</p>
<p class="Sp-text-1"><a id="c1-para-0938"/>              * expmod(base, exp / 2, m)) % m</p>
<p class="Sp-text-1"><a id="c1-para-0939"/>           : (base * expmod(base, exp - 1, m)) % m;</p>
<p class="Sp-text-1"><a id="c1-para-0940"/>}</p>
<p class="paracontinue"><a id="c1-para-0941"/>This function is unnecessarily inefficient, because it contains two identical calls:</p>
<p class="Sp-text-1"><a id="c1-para-0942"/>expmod(base, exp / 2, m);</p>
<p class="paracontinue"><a id="c1-para-0950"/>While this can be easily fixed in this example using the <span class="KeyTerm1">square</span> function, this is not so easy in general. Without using <span class="KeyTerm1">square</span>, we would be tempted to introduce a local name for the expression as follows:</p>
<p class="Sp-text-1"><a id="c1-para-0951"/><b>function</b> expmod(base, exp, m) {</p>
<p class="Sp-text-1"><a id="c1-para-0952"/>    <b>const</b> half_exp = expmod(base, exp / 2, m);</p>
<p class="Sp-text-1"><a id="c1-para-0953"/>    <b>return</b> exp === 0</p>
<p class="Sp-text-1"><a id="c1-para-0954"/>           ? 1</p>
<p class="Sp-text-1"><a id="c1-para-0955"/>           : is_even(exp)</p>
<p class="Sp-text-1"><a id="c1-para-0956"/>           ? (half_exp * half_exp) % m</p>
<p class="Sp-text-1"><a id="c1-para-0957"/>           : (base * expmod(base, exp - 1, m)) % m;</p>
<p class="Sp-text-1"><a id="c1-para-0958"/>}</p>
<p class="paracontinue"><a id="c1-para-0959"/>This would make the function not just inefficient, but actually nonterminating! The problem is that the constant declaration appears outside the conditional expression, which means that it is executed even when the base case <span class="KeyTerm1">exp === 0</span> is met. To avoid this situation, we provide for <i>conditional statements</i>, and allow return statements to appear in the branches of the statement. Using a conditional statement, we can write the function <span class="KeyTerm1">expmod</span> as follows:</p>
<p class="Sp-text-1"><a id="c1-para-0960"/><b>function</b> expmod(base, exp, m) {</p>
<p class="Sp-text-1"><a id="c1-para-0961"/>    <b>if</b> (exp === 0) {</p>
<p class="Sp-text-1"><a id="c1-para-0962"/>        <b>return</b> 1;</p>
<p class="Sp-text-1"><a id="c1-para-0963"/>    } <b>else</b> {</p>
<p class="Sp-text-1"><a id="c1-para-0964"/>        <b>if</b> (is_even(exp)) {</p>
<p class="Sp-text-1"><a id="c1-para-0965"/>            <b>const</b> half_exp = expmod(base, exp / 2, m);</p>
<p class="Sp-text-1"><a id="c1-para-0966"/>            <b>return</b> (half_exp * half_exp) % m;</p>
<p class="Sp-text-1"><a id="c1-para-0967"/>        } <b>else</b> {</p>
<p class="Sp-text-1"><a id="c1-para-0968"/>            <b>return</b> (base * expmod(base, exp - 1, m)) % m;</p>
<p class="Sp-text-1"><a id="c1-para-0969"/>        }</p>
<p class="Sp-text-1"><a id="c1-para-0970"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0971"/>}</p>
<p><a id="c1-para-0972"/>The general form of a conditional statement is</p>
<p class="Sp-text-1"><a id="c1-para-0973"/><b>if</b> (<span class="KeyTerm2"><i>predicate</i></span>) { <span class="KeyTerm2"><i>consequent</i>-<i>statements</i></span> } <b>else</b> { <span class="KeyTerm2"><i>alternative</i>-<i>statements</i></span> }</p>
<p class="paracontinue"><a id="c1-para-0974"/>As for a conditional expression, the interpreter first evaluates the <i>predicate</i>. If it evaluates to true, the interpreter evaluates the <i>consequent</i>-<i>statements</i> in sequence, and if it evaluates to false, the interpreter evaluates the <i>alternative</i>-<i>statements</i> in sequence. Evaluation of a return statement returns from the surrounding function, ignoring any statements in the sequence after the return statement and any statements after the conditional statement. Note that any constant declarations occurring in either part are local to that part, because each part is enclosed in braces and thus forms its own block.</p>
</section>
<section>
<h5><a id="c1-sec-0066"/><a id="c1-title-0067"/>Exercise 1.34</h5>
<p class="paraaftertitle"><a id="c1-para-0975"/>Suppose we declare</p>
<p class="Sp-text-1"><a id="c1-para-0976"/><b>function</b> f(g) {</p>
<p class="Sp-text-1"><a id="c1-para-0977"/>    <b>return</b> g(2);</p>
<p class="Sp-text-1"><a id="c1-para-0978"/>}</p>
<p class="paracontinue"><a id="c1-para-0979"/>Then we have</p>
<p class="Sp-text-1"><a id="c1-para-0980"/>f(square);</p>
<p class="Sp-text-1"><a id="c1-para-0981"/><i>4</i></p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-0982"/>f(z =&gt; z * (z + 1));</p>
<p class="Sp-text-1"><a id="c1-para-0983"/><i>6</i></p>
<p class="paracontinue"><a id="c1-para-0984"/>What happens if we (perversely) ask the interpreter to evaluate the application <span class="KeyTerm1">f(f)</span>? Explain.</p>
</section>
</section>
<section>
<h3><a id="c1-sec-0067"/><span>1.3.3</span> <a id="c1-title-0068"/>Functions as General Methods</h3>
<p class="paraaftertitle"><a id="c1-para-0985"/>We introduced compound functions in section 1.1.4 as a mechanism for abstracting patterns of numerical operations so as to make them independent of the particular numbers involved. With higher-order functions, such as the <span class="KeyTerm1">integral</span> function of section 1.3.1, we began to see a more powerful kind of abstraction: functions used to express general methods of computation, independent of the particular functions involved. In this section we discuss two more elaborate examples—general methods for finding zeros and fixed points of functions—and show how these methods can be expressed directly as functions.</p>
<section>
<h5><a id="c1-sec-0068"/><a id="c1-title-0069"/>Finding roots of equations by the half-interval method</h5>
<p class="paraaftertitle"><a id="c1-para-0986"/>The <i>half-interval method</i> is a simple but powerful technique for finding roots of an equation <i>f</i> (<i>x</i>) = 0, where <i>f</i> is a continuous function. The idea is that, if we are given points <i>a</i> and <i>b</i> such that <i>f</i> (<i>a</i>) &lt; 0 &lt; <i>f</i> (<i>b</i>), then <i>f</i> must have at least one zero between <i>a</i> and <i>b</i>. To locate a zero, let <i>x</i> be the average of <i>a</i> and <i>b</i> and compute <i>f</i> (<i>x</i>). If <i>f</i> (<i>x</i>) &gt; 0, then <i>f</i> must have a zero between <i>a</i> and <i>x</i>. If <i>f</i> (<i>x</i>) &lt; 0, then <i>f</i> must have a zero between <i>x</i> and <i>b</i>. Continuing in this way, we can identify smaller and smaller intervals on which <i>f</i> must have a zero. When we reach a point where the interval is small enough, the process stops. Since the interval of uncertainty is reduced by half at each step of the process, the maximal number of steps required grows as Θ(log(<i>L</i>/<i>T</i>)), where <i>L</i> is the length of the original interval and <i>T</i> is the error tolerance (that is, the size of the interval we will consider “small enough”). Here is a function that implements this strategy:</p>
<p class="Sp-text-1"><a id="c1-para-0987"/><b>function</b> search(f, neg_point, pos_point) {</p>
<p class="Sp-text-1"><a id="c1-para-0988"/>    <b>const</b> midpoint = average(neg_point, pos_point);</p>
<p class="Sp-text-1"><a id="c1-para-0989"/>    <b>if</b> (close_enough(neg_point, pos_point)) {</p>
<p class="Sp-text-1"><a id="c1-para-0990"/>        <b>return</b> midpoint;</p>
<p class="Sp-text-1"><a id="c1-para-0991"/>    } <b>else</b> {</p>
<p class="Sp-text-1"><a id="c1-para-0992"/>        <b>const</b> test_value = f(midpoint);</p>
<p class="Sp-text-1"><a id="c1-para-0993"/>        <b>return</b> positive(test_value)</p>
<p class="Sp-text-1"><a id="c1-para-0994"/>               ? search(f, neg_point, midpoint)</p>
<p class="Sp-text-1"><a id="c1-para-0995"/>               : negative(test_value)</p>
<p class="Sp-text-1"><a id="c1-para-0996"/>               ? search(f, midpoint, pos_point)</p>
<p class="Sp-text-1"><a id="c1-para-0997"/>               : midpoint;</p>
<p class="Sp-text-1"><a id="c1-para-0998"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-0999"/>}</p>
<p><a id="c1-para-1000"/>We assume that we are initially given the function <i>f</i> together with points at which its values are negative and positive. We first compute the midpoint of the two given points. Next we check to see if the given interval is small enough, and if so we simply return the midpoint as our answer. Otherwise, we compute as a test value the value of <i>f</i> at the midpoint. If the test value is positive, then we continue the process with a new interval running from the original negative point to the midpoint. If the test value is negative, we continue with the interval from the midpoint to the positive point. Finally, there is the possibility that the test value is 0, in which case the midpoint is itself the root we are searching for. To test whether the endpoints are “close enough” we can use a function similar to the one used in section 1.1.7 for computing square roots:<a id="c1-fn-0058a"/><a href="#c1-fn-0058"><sup>58</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-1001"/><b>function</b> close_enough(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-1002"/>    <b>return</b> abs(x - y) &lt; 0.001;</p>
<p class="Sp-text-1"><a id="c1-para-1003"/>}</p>
<p><a id="c1-para-1004"/>The function <span class="KeyTerm1">search</span> is awkward to use directly, because we can accidentally give it points at which <i>f</i> 's values do not have the required sign, in which case we get a wrong answer. Instead we will use <span class="KeyTerm1">search</span> via the following function, which checks to see which of the endpoints has a negative function value and which has a positive value, and calls the <span class="KeyTerm1">search</span> function accordingly. If the function has the same sign on the two given points, the half-interval method cannot be used, in which case the function signals an error.<a id="c1-fn-0059a"/><a href="#c1-fn-0059"><sup>59</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-1005"/><b>function</b> half_interval_method(f, a, b) {</p>
<p class="Sp-text-1"><a id="c1-para-1006"/>    <b>const</b> a_value = f(a);</p>
<p class="Sp-text-1"><a id="c1-para-1007"/>    <b>const</b> b_value = f(b);</p>
<p class="Sp-text-1"><a id="c1-para-1008"/>    <b>return</b> negative(a_value) &amp;&amp; positive(b_value)</p>
<p class="Sp-text-1"><a id="c1-para-1009"/>           ? search(f, a, b)</p>
<p class="Sp-text-1"><a id="c1-para-1010"/>           : negative(b_value) &amp;&amp; positive(a_value)</p>
<p class="Sp-text-1"><a id="c1-para-1011"/>           ? search(f, b, a)</p>
<p class="Sp-text-1"><a id="c1-para-1012"/>           : error("values are not of opposite sign");</p>
<p class="Sp-text-1"><a id="c1-para-1013"/>}</p>
<p><a id="c1-para-1014"/>The following example uses the half-interval method to approximate <i>π</i> as the root between 2 and 4 of sin <i>x</i> = 0:</p>
<p class="Sp-text-1"><a id="c1-para-1015"/>half_interval_method(math_sin, 2, 4);</p>
<p class="Sp-text-1"><a id="c1-para-1016"/><i>3.14111328125</i></p>
<p><a id="c1-para-1017"/>Here is another example, using the half-interval method to search for a root of the equation <i>x</i><sup>3</sup> – 2<i>x</i> – 3 = 0 between 1 and 2:</p>
<p class="Sp-text-1"><a id="c1-para-1018"/>half_interval_method(x =&gt; x * x * x - 2 * x - 3, 1, 2);</p>
<p class="Sp-text-1"><a id="c1-para-1019"/><i>1.89306640625</i></p>
</section>
<section>
<h5><a id="c1-sec-0069"/><a id="c1-title-0070"/>Finding fixed points of functions</h5>
<p class="paraaftertitle"><a id="c1-para-1020"/>A number <i>x</i> is called a <i>fixed point</i> of a function <i>f</i> if <i>x</i> satisfies the equation <i>f</i> (<i>x</i>) = <i>x</i>. For some functions <i>f</i> we can locate a fixed point by beginning with an initial guess and applying <i>f</i> repeatedly,</p>
<p class="Sp-text-2"><a id="c1-para-1021"/><i>f</i> (<i>x</i>), <i>f</i> (<i>f</i> (<i>x</i>)), <i>f</i> (<i>f</i> (<i>f</i> (<i>x</i>))), <span class="KeyTerm1"><i>. . .</i></span></p>
<p class="paracontinue"><a id="c1-para-1022"/>until the value does not change very much. Using this idea, we can devise a function <span class="KeyTerm1">fixed_point</span> that takes as inputs a function and an initial guess and produces an approximation to a fixed point of the function. We apply the function repeatedly until we find two successive values whose difference is less than some prescribed tolerance:</p>
<p class="Sp-text-1"><a id="c1-para-1023"/><b>const</b> tolerance = 0.00001;</p>
<p class="Sp-text-1"><a id="c1-para-1024"/><b>function</b> fixed_point(f, first_guess) {</p>
<p class="Sp-text-1"><a id="c1-para-1025"/>    <b>function</b> close_enough(x, y) {</p>
<p class="Sp-text-1"><a id="c1-para-1026"/>        <b>return</b> abs(x - y) &lt; tolerance;</p>
<p class="Sp-text-1"><a id="c1-para-1027"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-1028"/>    <b>function</b> try_with(guess) {</p>
<p class="Sp-text-1"><a id="c1-para-1029"/>        <b>const</b> next = f(guess);</p>
<p class="Sp-text-1"><a id="c1-para-1030"/>        <b>return</b> close_enough(guess, next)</p>
<p class="Sp-text-1"><a id="c1-para-1031"/>               ? next</p>
<p class="Sp-text-1"><a id="c1-para-1032"/>               : try_with(next);</p>
<p class="Sp-text-1"><a id="c1-para-1033"/>    }</p>
<p class="Sp-text-1"><a id="c1-para-1034"/>    <b>return</b> try_with(first_guess);</p>
<p class="Sp-text-1"><a id="c1-para-1035"/>}</p>
<p class="paracontinue"><a id="c1-para-1036"/>For example, we can use this method to approximate the fixed point of the cosine function, starting with 1 as an initial approximation:<a id="c1-fn-0060a"/><a href="#c1-fn-0060"><sup>60</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-1037"/>fixed_point(math_cos, 1);</p>
<p class="Sp-text-1"><a id="c1-para-1038"/><i>0.7390822985224023</i></p>
<p class="paracontinue"><a id="c1-para-1039"/>Similarly, we can find a solution to the equation <i>y</i> = sin <i>y</i> + cos <i>y</i>:</p>
<p class="Sp-text-1"><a id="c1-para-1040"/>fixed_point(y =&gt; math_sin(y) + math_cos(y), 1);</p>
<p class="Sp-text-1"><a id="c1-para-1041"/><i>1.2587315962971173</i></p>
<p><a id="c1-para-1042"/>The fixed-point process is reminiscent of the process we used for finding square roots in section 1.1.7. Both are based on the idea of repeatedly improving a guess until the result satisfies some criterion. In fact, we can readily formulate the squareroot computation as a fixed-point search. Computing the square root of some number <i>x</i> requires finding a <i>y</i> such that <i>y</i><sup>2</sup> = <i>x</i>. Putting this equation into the equivalent form <i>y</i> = <i>x</i>/<i>y</i>, we recognize that we are looking for a fixed point of the function<a id="c1-fn-0061a"/><a href="#c1-fn-0061"><sup>61</sup></a> <i>y x</i>/<i>y</i>, and we can therefore try to compute square roots as</p>
<p class="Sp-text-1"><a id="c1-para-1043"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-1044"/>    <b>return</b> fixed_point(y =&gt; x / y, 1);</p>
<p class="Sp-text-1"><a id="c1-para-1045"/>}</p>
<p class="paracontinue"><a id="c1-para-1046"/>Unfortunately, this fixed-point search does not converge. Consider an initial guess <i>y</i><sub>1</sub>. The next guess is <i>y</i><sub>2 </sub>= <i>x</i>/<i>y</i><sub>1</sub> and the next guess is <i>y</i><sub>3 </sub>= <i>x</i>/<i>y</i><sub>2 </sub>= <i>x</i>/(<i>x</i>/<i>y</i><sub>1</sub>) = <i>y</i><sub>1</sub>. This results in an infinite loop in which the two guesses <i>y</i><sub>1</sub> and <i>y</i><sub>2</sub> repeat over and over, oscillating about the answer.</p>
<p><a id="c1-para-1047"/>One way to control such oscillations is to prevent the guesses from changing so much. Since the answer is always between our guess <i>y</i> and <i>x</i>/<i>y</i>, we can make a new guess that is not as far from <i>y</i> as <i>x</i>/<i>y</i> by averaging <i>y</i> with <i>x</i>/<i>y</i>, so that the next guess after <i>y</i> is <img alt="c1-fig-5021.jpg" src="../images/c1-fig-5021.jpg"/> (<i>y</i> + <i>x</i>/<i>y</i>) instead of <i>x</i>/<i>y</i>. The process of making such a sequence of guesses is simply the process of looking for a fixed point of <i>y</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <img alt="c1-fig-5021.jpg" src="../images/c1-fig-5021.jpg"/> (<i>y</i> + <i>x</i>/<i>y</i>):</p>
<p class="Sp-text-1"><a id="c1-para-1048"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-1049"/>    <b>return</b> fixed_point(y =&gt; average(y, x / y), 1);</p>
<p class="Sp-text-1"><a id="c1-para-1050"/>}</p>
<p class="paracontinue"><a id="c1-para-1051"/>(Note that <i>y</i> = <img alt="c1-fig-5021.jpg" src="../images/c1-fig-5021.jpg"/> (<i>y</i> + <i>x</i>/<i>y</i>) is a simple transformation of the equation <i>y</i> = <i>x</i>/<i>y</i>; to derive it, add <i>y</i> to both sides of the equation and divide by 2.)</p>
<p><a id="c1-para-1052"/>With this modification, the square-root function works. In fact, if we unravel the definitions, we can see that the sequence of approximations to the square root generated here is precisely the same as the one generated by our original square-root function of section 1.1.7. This approach of averaging successive approximations to a solution, a technique we call <i>average damping</i>, often aids the convergence of fixed-point searches.</p>
</section>
<section>
<h5><a id="c1-sec-0070"/><a id="c1-title-0071"/>Exercise 1.35</h5>
<p class="paraaftertitle"><a id="c1-para-1053"/>Show that the golden ratio <i>ϕ</i> (section 1.2.2) is a fixed point of the transformation <i>x</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> 1 + 1/<i>x</i>, and use this fact to compute <i>ϕ</i> by means of the <span class="KeyTerm1">fixed_point</span> function.</p>
</section>
<section>
<h5><a id="c1-sec-0071"/><a id="c1-title-0072"/>Exercise 1.36</h5>
<p class="paraaftertitle"><a id="c1-para-1054"/>Modify <span class="KeyTerm1">fixed_point</span> so that it prints the sequence of approximations it generates, using the primitive function <span class="KeyTerm1">display</span> shown in exercise 1.22. Then find a solution to <i>x<sup>x</sup></i> = 1000 by finding a fixed point of <i>x</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> log(1000)/ log(<i>x</i>). (Use the primitive function <span class="KeyTerm1">math_log</span>, which computes natural logarithms.) Compare the number of steps this takes with and without average damping. (Note that you cannot start <span class="KeyTerm1">fixed_point</span> with a guess of 1, as this would cause division by log(1) = 0.)</p>
</section>
<section>
<h5><a id="c1-sec-0072"/><a id="c1-title-0073"/>Exercise 1.37</h5>
<p class="paraaftertitle"><a id="c1-para-1055"/>An infinite <i>continued fraction</i> is an expression of the form</p>
<p><a id="c1-para-1056"/></p>
<figure id="c1-fig-0021"><img alt="c1-fig-5023.jpg" src="../images/c1-fig-5023.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-1057"/>As an example, one can show that the infinite continued fraction expansion with the <i>N<sub>i</sub></i> and the <i>D<sub>i</sub></i> all equal to 1 produces 1/<i>ϕ</i>, where <i>ϕ</i> is the golden ratio (described in section 1.2.2). One way to approximate an infinite continued fraction is to truncate the expansion after a given number of terms. Such a truncation—a so-called <i>k-term finite continued fraction</i>—has the form</p>
<p><a id="c1-para-1058"/></p>
<figure id="c1-fig-0022"><img alt="c1-fig-5024.jpg" src="../images/c1-fig-5024.jpg"/><figcaption class="figurecaption">
</figcaption></figure>
<ol class="BS_NumberListA">
<li><a id="c1-li-0033"/><span>a. </span>Suppose that <span class="KeyTerm1">n</span> and <span class="KeyTerm1">d</span> are functions of one argument (the term index <i>i</i>) that return the <i>N<sub>i</sub></i> and <i>D<sub>i</sub></i> of the terms of the continued fraction. Declare a function <span class="KeyTerm1">cont_frac</span> such that evaluating <span class="KeyTerm1">cont_frac(n, d, k)</span> computes the value of the <i>k</i>-term finite continued fraction. Check your function by approximating 1<i>ϕ</i> using
<p class="Sp-text-1"><a id="c1-para-1060"/>cont_frac(i =&gt; 1, i =&gt; 1, k);</p>
<p class="paracontinue"><a id="c1-para-1061"/>for successive values of <span class="KeyTerm1">k</span>. How large must you make <span class="KeyTerm1">k</span> in order to get an approximation that is accurate to 4 decimal places?</p></li>
<li><a id="c1-li-0034"/><span>b. </span>If your <span class="KeyTerm1">cont_frac</span> function generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.</li>
</ol>
</section>
<section>
<h5><a id="c1-sec-0073"/><a id="c1-title-0074"/>Exercise 1.38</h5>
<p class="paraaftertitle"><a id="c1-para-1063"/>In 1737, the Swiss mathematician Leonhard Euler published a memoir <i>De Fractionibus Continuis</i>, which included a continued fraction expansion for <i>e</i> – 2, where <i>e</i> is the base of the natural logarithms. In this fraction, the <i>N<sub>i</sub></i> are all 1, and the <i>D<sub>i</sub></i> are successively 1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8, Write a program that uses your <span class="KeyTerm1">cont_frac</span> function from exercise 1.37 to approximate <i>e</i>, based on Euler's expansion.</p>
</section>
<section>
<h5><a id="c1-sec-0074"/><a id="c1-title-0075"/>Exercise 1.39</h5>
<p class="paraaftertitle"><a id="c1-para-1064"/>A continued fraction representation of the tangent function was published in 1770 by the German mathematician J.H. Lambert:</p>
<p><a id="c1-para-1065"/></p>
<figure id="c1-fig-0023"><img alt="c1-fig-5025.jpg" src="../images/c1-fig-5025.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-1066"/>where <i>x</i> is in radians. Declare a function <span class="KeyTerm1">tan_cf(x, k)</span> that computes an approximation to the tangent function based on Lambert's formula. As in exercise 1.37, <span class="KeyTerm1">k</span> specifies the number of terms to compute.</p>
</section>
</section>
<section>
<h3><a id="c1-sec-0075"/><span>1.3.4</span> <a id="c1-title-0076"/>Functions as Returned Values</h3>
<p class="paraaftertitle"><a id="c1-para-1067"/>The above examples demonstrate how the ability to pass functions as arguments significantly enhances the expressive power of our programming language. We can achieve even more expressive power by creating functions whose returned values are themselves functions.</p>
<p><a id="c1-para-1068"/>We can illustrate this idea by looking again at the fixed-point example described at the end of section 1.3.3. We formulated a new version of the square-root function as a fixed-point search, starting with the observation that <img alt="c1-fig-5005.jpg" src="../images/c1-fig-5005.jpg"/> is a fixed-point of the function <i>y</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i>/<i>y</i>. Then we used average damping to make the approximations converge. Average damping is a useful general technique in itself. Namely, given a function <i>f,</i> we consider the function whose value at <i>x</i> is equal to the average of <i>x</i> and <i>f</i> (<i>x</i>).</p>
<p><a id="c1-para-1069"/>We can express the idea of average damping by means of the following function:</p>
<p class="Sp-text-1"><a id="c1-para-1070"/><b>function</b> average_damp(f) {</p>
<p class="Sp-text-1"><a id="c1-para-1071"/>    <b>return</b> x =&gt; average(x, f(x));</p>
<p class="Sp-text-1"><a id="c1-para-1072"/>}</p>
<p class="paracontinue"><a id="c1-para-1073"/>The function <span class="KeyTerm1">average_damp</span> takes as its argument a function <span class="KeyTerm1">f</span> and returns as its value a function (produced by the lambda expression) that, when applied to a number <span class="KeyTerm1">x</span>, produces the average of <span class="KeyTerm1">x</span> and <span class="KeyTerm1">f(x)</span>. For example, applying <span class="KeyTerm1">average_damp</span> to the <span class="KeyTerm1">square</span> function produces a function whose value at some number <i>x</i> is the average of <i>x</i> and <i>x</i><sup>2</sup>. Applying this resulting function to 10 returns the average of 10 and 100, or 55:<a id="c1-fn-0062a"/><a href="#c1-fn-0062"><sup>62</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-1074"/>average_damp(square)(10);</p>
<p class="Sp-text-1"><a id="c1-para-1075"/><i>55</i></p>
<p><a id="c1-para-1076"/>Using <span class="KeyTerm1">average_damp</span>, we can reformulate the square-root function as follows:</p>
<p class="Sp-text-1"><a id="c1-para-1077"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-1078"/>    <b>return</b> fixed_point(average_damp(y =&gt; x / y), 1);</p>
<p class="Sp-text-1"><a id="c1-para-1079"/>}</p>
<p class="paracontinue"><a id="c1-para-1080"/>Notice how this formulation makes explicit the three ideas in the method: fixedpoint search, average damping, and the function <i>y x</i>/<i>y</i>. It is instructive to compare this formulation of the square-root method with the original version given in section 1.1.7. Bear in mind that these functions express the same process, and notice how much clearer the idea becomes when we express the process in terms of these abstractions. In general, there are many ways to formulate a process as a function. Experienced programmers know how to choose process formulations that are particularly perspicuous, and where useful elements of the process are exposed as separate entities that can be reused in other applications. As a simple example of reuse, notice that the cube root of <i>x</i> is a fixed point of the function <i>y x</i>/<i>y</i><sup>2</sup>, so we can immediately generalize our square-root function to one that extracts cube roots:<a id="c1-fn-0063a"/><a href="#c1-fn-0063"><sup>63</sup></a></p>
<p class="Sp-text-1"><a id="c1-para-1081"/><b>function</b> cube_root(x) {</p>
<p class="Sp-text-1"><a id="c1-para-1082"/>   <b>return</b> fixed_point(average_damp(y =&gt; x / square(y)), 1);</p>
<p class="Sp-text-1"><a id="c1-para-1083"/>}</p>
<section>
<h5><a id="c1-sec-0076"/><a id="c1-title-0077"/>Newton's method</h5>
<p class="paraaftertitle"><a id="c1-para-1084"/>When we first introduced the square-root function, in section 1.1.7, we mentioned that this was a special case of <i>Newton's method</i>. If <i>x</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>g</i>(<i>x</i>) is a differentiable function, then a solution of the equation <i>g</i>(<i>x</i>) = 0 is a fixed point of the function <i>x</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>f</i> (<i>x</i>) where</p>
<p><a id="c1-para-1085"/></p>
<figure id="c1-fig-0024"><img alt="c1-fig-5026.jpg" src="../images/c1-fig-5026.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-1086"/>and <i>Dg</i>(<i>x</i>) is the derivative of <i>g</i> evaluated at <i>x</i>. Newton's method is the use of the fixed-point method we saw above to approximate a solution of the equation by finding a fixed point of the function <i>f</i> .<a id="c1-fn-0064a"/><a href="#c1-fn-0064"><sup>64</sup></a> For many functions <i>g</i> and for sufficiently good initial guesses for <i>x</i>, Newton's method converges very rapidly to a solution of <i>g</i>(<i>x</i>) = 0.<a id="c1-fn-0065a"/><a href="#c1-fn-0065"><sup>65</sup></a></p>
<p><a id="c1-para-1087"/>In order to implement Newton's method as a function, we must first express the idea of derivative. Note that “derivative,” like average damping, is something that transforms a function into another function. For instance, the derivative of the function <i>x</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i><sup>3</sup> is the function <i>x</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> 3<i>x</i><sup>2</sup>. In general, if <i>g</i> is a function and <i>dx</i> is a small number, then the derivative <i>Dg</i> of <i>g</i> is the function whose value at any number <i>x</i> is given (in the limit of small <i>dx</i>) by</p>
<p><a id="c1-para-1088"/></p>
<figure id="c1-fig-0025"><img alt="c1-fig-5027.jpg" src="../images/c1-fig-5027.jpg"/><figcaption class="figurecaption">
</figcaption></figure>

<p class="paracontinue"><a id="c1-para-1089"/>Thus, we can express the idea of derivative (taking <i>dx</i> to be, say, 0.00001) as the function</p>
<p class="Sp-text-1"><a id="c1-para-1090"/><b>function</b> deriv(g) {</p>
<p class="Sp-text-1"><a id="c1-para-1091"/>    <b>return</b> x =&gt; (g(x + dx) - g(x)) / dx;</p>
<p class="Sp-text-1"><a id="c1-para-1092"/>}</p>
<p class="paracontinue"><a id="c1-para-1093"/>along with the declaration</p>
<p class="Sp-text-1"><a id="c1-para-1094"/><b>const</b> dx = 0.00001;</p>
<p><a id="c1-para-1095"/>Like <span class="KeyTerm1">average_damp</span>, <span class="KeyTerm1">deriv</span> is a function that takes a function as argument and returns a function as value. For example, to approximate the derivative of <i>x</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i><sup>3</sup> at 5 (whose exact value is 75) we can evaluate</p>
<p class="Sp-text-1"><a id="c1-para-1096"/><b>function</b> cube(x) { <b>return</b> x * x * x; }</p>
<p class="Sp-text-1"> </p>
<p class="Sp-text-1"><a id="c1-para-1097"/>deriv(cube)(5);</p>
<p class="Sp-text-1"><a id="c1-para-1098"/><i>75.00014999664018</i></p>
<p><a id="c1-para-1099"/>With the aid of <span class="KeyTerm1">deriv</span>, we can express Newton's method as a fixed-point process:</p>
<p class="Sp-text-1"><a id="c1-para-1100"/><b>function</b> newton_transform(g) {</p>
<p class="Sp-text-1"><a id="c1-para-1101"/>    <b>return</b> x =&gt; x - g(x) / deriv(g)(x);</p>
<p class="Sp-text-1"><a id="c1-para-1102"/>}</p>
<p class="Sp-text-1"><a id="c1-para-1103"/><b>function</b> newtons_method(g, guess) {</p>
<p class="Sp-text-1"><a id="c1-para-1104"/>    <b>return</b> fixed_point(newton_transform(g), guess);</p>
<p class="Sp-text-1"><a id="c1-para-1105"/>}</p>
<p class="paracontinue"><a id="c1-para-1106"/>The <span class="KeyTerm1">newton_transform</span> function expresses the formula at the beginning of this section, and <span class="KeyTerm1">newtons_method</span> is readily defined in terms of this. It takes as arguments a function that computes the function for which we want to find a zero, together with an initial guess. For instance, to find the square root of <i>x</i>, we can use Newton's method to find a zero of the function <i>y</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>y</i><sup>2</sup> – <i>x</i> starting with an initial guess of 1.<a id="c1-fn-0066a"/><a href="#c1-fn-0066"><sup>66</sup></a> This provides yet another form of the square-root function:</p>
<p class="Sp-text-1"><a id="c1-para-1107"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-1108"/>    <b>return</b> newtons_method(y =&gt; square(y) - x, 1);</p>
<p class="Sp-text-1"><a id="c1-para-1109"/>}</p>
</section>
<section>
<h5><a id="c1-sec-0077"/><a id="c1-title-0078"/>Abstractions and first-class functions</h5>
<p class="paraaftertitle"><a id="c1-para-1110"/>We've seen two ways to express the square-root computation as an instance of a more general method, once as a fixed-point search and once using Newton's method. Since Newton's method was itself expressed as a fixed-point process, we actually saw two ways to compute square roots as fixed points. Each method begins with a function and finds a fixed point of some transformation of the function. We can express this general idea itself as a function:</p>
<p class="Sp-text-1"><a id="c1-para-1111"/><b>function</b> fixed_point_of_transform(g, transform, guess) {</p>
<p class="Sp-text-1"><a id="c1-para-1112"/>    <b>return</b> fixed_point(transform(g), guess);</p>
<p class="Sp-text-1"><a id="c1-para-1113"/>}</p>
<p class="paracontinue"><a id="c1-para-1114"/>This very general function takes as its arguments a function <span class="KeyTerm1">g</span> that computes some function, a function that transforms <span class="KeyTerm1">g</span>, and an initial guess. The returned result is a fixed point of the transformed function.</p>
<p><a id="c1-para-1115"/>Using this abstraction, we can recast the first square-root computation from this section (where we look for a fixed point of the average-damped version of <i>y</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i>/<i>y</i>) as an instance of this general method:</p>
<p class="Sp-text-1"><a id="c1-para-1116"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-1117"/>    <b>return</b> fixed_point_of_transform(</p>
<p class="Sp-text-1"><a id="c1-para-1118"/>               y =&gt; x / y,</p>
<p class="Sp-text-1"><a id="c1-para-1119"/>               average_damp,</p>
<p class="Sp-text-1"><a id="c1-para-1120"/>               1);</p>
<p class="Sp-text-1"><a id="c1-para-1121"/>}</p>
<p class="paracontinue"><a id="c1-para-1122"/>Similarly, we can express the second square-root computation from this section (an instance of Newton's method that finds a fixed point of the Newton transform of <i>y</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>y</i><sup>2</sup> – <i>x</i>) as</p>
<p class="Sp-text-1"><a id="c1-para-1123"/><b>function</b> sqrt(x) {</p>
<p class="Sp-text-1"><a id="c1-para-1124"/>    <b>return</b> fixed_point_of_transform(</p>
<p class="Sp-text-1"><a id="c1-para-1125"/>               y =&gt; square(y) - x,</p>
<p class="Sp-text-1"><a id="c1-para-1126"/>               newton_transform,</p>
<p class="Sp-text-1"><a id="c1-para-1127"/>               1);</p>
<p class="Sp-text-1"><a id="c1-para-1128"/>}</p>
<p><a id="c1-para-1129"/>We began section 1.3 with the observation that compound functions are a crucial abstraction mechanism, because they permit us to express general methods of computing as explicit elements in our programming language. Now we've seen how higher-order functions permit us to manipulate these general methods to create further abstractions.</p>
<p><a id="c1-para-1130"/>As programmers, we should be alert to opportunities to identify the underlying abstractions in our programs and to build upon them and generalize them to create more powerful abstractions. This is not to say that one should always write programs in the most abstract way possible; expert programmers know how to choose the level of abstraction appropriate to their task. But it is important to be able to think in terms of these abstractions, so that we can be ready to apply them in new contexts. The significance of higher-order functions is that they enable us to represent these abstractions explicitly as elements in our programming language, so that they can be handled just like other computational elements.</p>
<p><a id="c1-para-1131"/>In general, programming languages impose restrictions on the ways in which computational elements can be manipulated. Elements with the fewest restrictions are said to have <i>first-class</i> status. Some of the “rights and privileges” of first-class elements are:<a id="c1-fn-0067a"/><a href="#c1-fn-0067"><sup>67</sup></a></p>
<ul style="list-style-type:disc">
<li>They may be referred to using names.</li>
<li>They may be passed as arguments to functions.</li>
<li>They may be returned as the results of functions.</li>
<li>They may be included in data structures.<a id="c1-fn-0068a"/><a href="#c1-fn-0068"><sup>68</sup></a></li>
</ul>

<p class="paracontinue"><a id="c1-para-1136"/>JavaScript, like other high-level programming languages, awards functions full firstclass status. This poses challenges for efficient implementation, but the resulting gain in expressive power is enormous.<a id="c1-fn-0069a"/><a href="#c1-fn-0069"><sup>69</sup></a></p>
</section>
<section>
<h5><a id="c1-sec-0078"/><a id="c1-title-0079"/>Exercise 1.40</h5>
<p class="paraaftertitle"><a id="c1-para-1137"/>Declare a function <span class="KeyTerm1">cubic</span> that can be used together with the <span class="KeyTerm1">newtons_method</span> function in expressions of the form</p>
<p class="Sp-text-1"><a id="c1-para-1138"/>newtons_method(cubic(a, b, c), 1)</p>
<p class="paracontinue"><a id="c1-para-1139"/>to approximate zeros of the cubic <i>x</i><sup>3</sup> + <i>ax</i><sup>2</sup> + <i>bx</i> + <i>c</i>.</p>
</section>
<section>
<h5><a id="c1-sec-0079"/><a id="c1-title-0080"/>Exercise 1.41</h5>
<p class="paraaftertitle"><a id="c1-para-1140"/>Declare a function <span class="KeyTerm1">double</span> that takes a function of one argument as argument and returns a function that applies the original function twice. For example, if <span class="KeyTerm1">inc</span> is a function that adds 1 to its argument, then <span class="KeyTerm1">double(inc)</span> should be a function that adds 2. What value is returned by</p>
<p class="Sp-text-1"><a id="c1-para-1141"/>double(double(double))(inc)(5);</p>
</section>
<section>
<h5><a id="c1-sec-0080"/><a id="c1-title-0081"/>Exercise 1.42</h5>
<p class="paraaftertitle"><a id="c1-para-1142"/>Let <i>f</i> and <i>g</i> be two one-argument functions. The <i>composition f</i> after <i>g</i> is defined to be the function <i>x</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>f</i> (<i>g</i>(<i>x</i>)). Declare a function <span class="KeyTerm1">compose</span> that implements composition. For example, if <span class="KeyTerm1">inc</span> is a function that adds 1 to its argument,</p>
<p class="Sp-text-1"><a id="c1-para-1143"/>compose(square, inc)(6);</p>
<p class="Sp-text-1"><a id="c1-para-1144"/><i>49</i></p>
</section>
<section>
<h5><a id="c1-sec-0081"/><a id="c1-title-0082"/>Exercise 1.43</h5>
<p class="paraaftertitle"><a id="c1-para-1145"/>If <i>f</i> is a numerical function and <i>n</i> is a positive integer, then we can form the <i>n</i>th repeated application of <i>f,</i> which is defined to be the function whose value at <i>x</i> is <i>f</i> (<i>f</i> (<i>. . .</i> (<i>f</i> (<i>x</i>)) <i>. . .</i>)). For example, if <i>f</i> is the function <i>x</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i> + 1, then the <i>n</i>th repeated application of <i>f</i> is the function <i>x</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i> + <i>n</i>. If <i>f</i> is the operation of squaring a number, then the <i>n</i>th repeated application of <i>f</i> is the function that raises its argument to the 2<i><sup>n</sup></i>th power. Write a function that takes as inputs a function that computes <i>f</i> and a positive integer <i>n</i> and returns the function that computes the <i>n</i>th repeated application of <i>f</i> . Your function should be able to be used as follows:</p>
<p class="Sp-text-1"><a id="c1-para-1146"/>repeated(square, 2)(5);</p>
<p class="Sp-text-1"><a id="c1-para-1147"/><i>625</i></p>
<p class="paracontinue"><a id="c1-para-1148"/>Hint: You may find it convenient to use <span class="KeyTerm1">compose</span> from exercise 1.42.</p>
</section>
<section>
<h5><a id="c1-sec-0082"/><a id="c1-title-0083"/>Exercise 1.44</h5>
<p class="paraaftertitle"><a id="c1-para-1149"/>The idea of <i>smoothing</i> a function is an important concept in signal processing. If <i>f</i> is a function and <i>dx</i> is some small number, then the smoothed version of <i>f</i> is the function whose value at a point <i>x</i> is the average of <i>f</i> (<i>x</i> – <i>dx</i>), <i>f</i> (<i>x</i>), and <i>f</i> (<i>x</i> + <i>dx</i>). Write a function <span class="KeyTerm1">smooth</span> that takes as input a function that computes <i>f</i> and returns a function that computes the smoothed <i>f</i> . It is sometimes valuable to repeatedly smooth a function (that is, smooth the smoothed function, and so on) to obtained the <i>n-fold smoothed function</i>. Show how to generate the <i>n</i>-fold smoothed function of any given function using <span class="KeyTerm1">smooth</span> and <span class="KeyTerm1">repeated</span> from exercise 1.43.</p>
</section>
<section>
<h5><a id="c1-sec-0083"/><a id="c1-title-0084"/>Exercise 1.45</h5>
<p class="paraaftertitle"><a id="c1-para-1150"/>We saw in section 1.3.3 that attempting to compute square roots by naively finding a fixed point of <i>y</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i>/<i>y</i> does not converge, and that this can be fixed by average damping. The same method works for finding cube roots as fixed points of the average-damped <i>y</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i>/<i>y</i><sup>2</sup>. Unfortunately, the process does not work for fourth roots—a single average damp is not enough to make a fixed-point search for <i>y</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i>/<i>y</i><sup>3</sup> converge. On the other hand, if we average-damp twice (i.e., use the average damp of the average damp of <i>y</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i>/<i>y</i><sup>3</sup>) the fixedpoint search does converge. Do some experiments to determine how many average damps are required to compute <i>n</i>th roots as a fixed-point search based upon repeated average damping of <i>y</i> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> <i>x</i>/<i>y<sup>n</sup></i><sup>–1</sup>. Use this to implement a simple function for computing <i>n</i>th roots using <span class="KeyTerm1">fixed_point</span>, <span class="KeyTerm1">average_damp</span>, and the <span class="KeyTerm1">repeated</span> function of exercise 1.43. Assume that any arithmetic operations you need are available as primitives.</p>
</section>
<section>
<h5><a id="c1-sec-0084"/><a id="c1-title-0085"/>Exercise 1.46</h5>
<p class="paraaftertitle"><a id="c1-para-1151"/>Several of the numerical methods described in this chapter are instances of an extremely general computational strategy known as <i>iterative improvement</i>. Iterative improvement says that, to compute something, we start with an initial guess for the answer, test if the guess is good enough, and otherwise improve the guess and continue the process using the improved guess as the new guess. Write a function <span class="KeyTerm1">iterative_improve</span> that takes two functions as arguments: a method for telling whether a guess is good enough and a method for improving a guess. The function <span class="KeyTerm1">iterative_improve</span> should return as its value a function that takes a guess as argument and keeps improving the guess until it is good enough. Rewrite the <span class="KeyTerm1">sqrt</span> function of section 1.1.7 and the <span class="KeyTerm1">fixed_point</span> function of section 1.3.3 in terms of <span class="KeyTerm1">iterative_improve</span>.</p>
</section>
</section>
</section>
</section>
<section class="BS_enoteSec">
<aside class="noteEntry"><a id="c1-fn-0001"/><a href="#c1-fn-0001a">1</a> The characterization of numbers as “simple data” is a barefaced bluff. In fact, the treatment of numbers is one of the trickiest and most confusing aspects of any programming language. Some typical issues involved are these: Some computer systems distinguish <i>integers</i>, such as 2, from <i>real numbers</i>, such as 2.71. Is the real number 2.00 different from the integer 2? Are the arithmetic operations used for integers the same as the operations used for real numbers? Does 6 divided by 2 produce 3, or 3.0? How large a number can we represent? How many decimal places of accuracy can we represent? Is the range of integers the same as the range of real numbers? Above and beyond these questions, of course, lies a collection of issues concerning roundoff and truncation errors—the entire science of numerical analysis. Since our focus in this book is on large-scale program design rather than on numerical techniques, we are going to ignore these problems. The numerical examples in this chapter will exhibit the usual roundoff behavior that one observes when using arithmetic operations that preserve a limited number of decimal places of accuracy in noninteger operations.</aside>
<aside class="noteEntry"><a id="c1-fn-0002"/><a href="#c1-fn-0002a">2</a> Throughout this book, we distinguish between the input typed by the user and any text printed by the interpreter by showing the latter in slanted characters.</aside>
<aside class="noteEntry"><a id="c1-fn-0003"/><a href="#c1-fn-0003a">3</a> JavaScript obeys the convention that every statement has a value (see exercise 4.8). This convention, together with the reputation of JavaScript programmers as not caring about efficiency, leads us to paraphrase a quip on Lisp programmers by Alan Perlis (who was himself paraphrasing Oscar Wilde): <i>JavaScript programmers know the value of everything but the cost of nothing.</i></aside>
<aside class="noteEntry"><a id="c1-fn-0004"/><a href="#c1-fn-0004a">4</a> In this book, we do not show the interpreter's response to evaluating programs that end with declarations, since this might depend on previous statements. See exercise 4.8 for details.</aside>
<aside class="noteEntry"><a id="c1-fn-0005"/><a href="#c1-fn-0005a">5</a> Chapter 3 will show that this notion of environment is crucial for understanding how the interpreter works. Chapter 4 will use environments for implementing interpreters.</aside>
<aside class="noteEntry"><a id="c1-fn-0006"/><a href="#c1-fn-0006a">6</a> Observe that there are two different operations being combined here: we are creating the function, and we are giving it the name <span class="KeyTerm1">square</span>. It is possible, indeed important, to be able to separate these two notions—to create functions without naming them, and to give names to functions that have already been created. We will see how to do this in section 1.3.2.</aside>
<aside class="noteEntry"><a id="c1-fn-0007"/><a href="#c1-fn-0007a">7</a> Throughout this book, we will describe the general syntax of expressions by using italic symbols—e.g., <i>name</i>—to denote the “slots” in the expression to be filled in when such an expression is actually used.</aside>
<aside class="noteEntry"><a id="c1-fn-0008"/><a href="#c1-fn-0008a">8</a> More generally, the body of the function can be a sequence of statements. In this case, the interpreter evaluates each statement in the sequence in turn until a return statement determines the value of the function application.</aside>
<aside class="noteEntry"><a id="c1-fn-0009"/><a href="#c1-fn-0009a">9</a> The way multi-part names such as <span class="KeyTerm1">sum_of_squares</span> are written affects the readability of programs, and programming communities differ on this. According to the common JavaScript convention, called <i>camel case</i>, the name would be <span class="KeyTerm1">sumOfSquares</span>. The convention used in this book is called <i>snake case</i>, and was chosen for its closer resemblance to the convention used in the Scheme version of this book, where hyphens play the role of our underscores.</aside>
<aside class="noteEntry"><a id="c1-fn-0010"/><a href="#c1-fn-0010a">10</a> Our JavaScript environment includes all functions and constants of ECMAScript's Math object, under the names <span class="KeyTerm1">math_<i>. . .</i></span>. For example, ECMAScript's <span class="KeyTerm1">Math.log</span> is available as <span class="KeyTerm1">math_log</span>. The MIT Press web page for this book includes the JavaScript package <span class="KeyTerm1">sicp</span> that provides these and all other JavaScript functions that are considered primitive in the book.</aside>
<aside class="noteEntry"><a id="c1-fn-0011"/><a href="#c1-fn-0011a">11</a> If the body of the function is a sequence of statements, the body is evaluated with the parameters replaced, and the value of the application is the value of the return expression of the first return statement encountered.</aside>
<aside class="noteEntry"><a id="c1-fn-0012"/><a href="#c1-fn-0012a">12</a> Despite the simplicity of the substitution idea, it turns out to be surprisingly complicated to give a rigorous mathematical definition of the substitution process. The problem arises from the possibility of confusion between the names used for the parameters of a function and the (possibly identical) names used in the expressions to which the function may be applied. Indeed, there is a long history of erroneous definitions of <i>substitution</i> in the literature of logic and programming semantics. See Stoy 1977 for a careful discussion of substitution.</aside>
<aside class="noteEntry"><a id="c1-fn-0013"/><a href="#c1-fn-0013a">13</a> In chapter 3 we will introduce <i>stream processing</i>, which is a way of handling apparently “infinite” data structures by incorporating a limited form of normal-order evaluation. In section 4.2 we will modify the JavaScript interpreter to produce a normal-order variant of JavaScript.</aside>
<aside class="noteEntry"><a id="c1-fn-0014"/><a href="#c1-fn-0014a">14</a> Conditionals in full JavaScript accept any value, not just a boolean, as the result of evaluating the <i>predicate</i> expression (see footnote 14 in section 4.1.3 for details). The programs in this book use only boolean values as predicates of conditionals.</aside>
<aside class="noteEntry"><a id="c1-fn-0015"/><a href="#c1-fn-0015a">15</a> For now, we restrict these operators to number arguments. In sections 2.3.1 and 3.3.1, we shall generalize the equality and inequality predicates <span class="KeyTerm1">===</span> and <span class="KeyTerm1">!==</span>.</aside>
<aside class="noteEntry"><a id="c1-fn-0016"/><a href="#c1-fn-0016a">16</a> Syntactic forms that are simply convenient alternative surface structures for things that can be written in more uniform ways are sometimes called <i>syntactic sugar</i>, to use a phrase coined by Peter Landin.</aside>
<aside class="noteEntry"><a id="c1-fn-0017"/><a href="#c1-fn-0017a">17</a> Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science. For instance, to say that the answer produced by a program is “correct” is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things). In a related vein, programming language designers have explored so-called very highlevel languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given “what is” knowledge specified by the programmer, they can generate “how to” knowledge automatically. This cannot be done in general, but there are important areas where progress has been made. We shall revisit this idea in chapter 4.</aside>
<aside class="noteEntry"><a id="c1-fn-0018"/><a href="#c1-fn-0018a">18</a> This square-root algorithm is actually a special case of Newton's method, which is a general technique for finding roots of equations. The square-root algorithm itself was developed by Heron of Alexandria in the first century CE. We will see how to express the general Newton's method as a JavaScript function in section 1.3.4.</aside>
<aside class="noteEntry"><a id="c1-fn-0019"/><a href="#c1-fn-0019a">19</a> We will usually give predicates names starting with <span class="KeyTerm1">is_</span>, to help us remember that they are predicates.</aside>
<aside class="noteEntry"><a id="c1-fn-0020"/><a href="#c1-fn-0020a">20</a> Readers who are worried about the efficiency issues involved in using function calls to implement iteration should note the remarks on “tail recursion” in section 1.2.1.</aside>
<aside class="noteEntry"><a id="c1-fn-0021"/><a href="#c1-fn-0021a">21</a> As a Lisp hacker from the original <i>Structure and Interpretation of Computer Programs</i>, Alyssa prefers a simpler, more uniform syntax.</aside>
<aside class="noteEntry"><a id="c1-fn-0022"/><a href="#c1-fn-0022a">22</a> It is not even clear which of these functions is a more efficient implementation. This depends upon the hardware available. There are machines for which the “obvious” implementation is the less efficient one. Consider a machine that has extensive tables of logarithms and antilogarithms stored in a very efficient manner.</aside>
<aside class="noteEntry"><a id="c1-fn-0023"/><a href="#c1-fn-0023a">23</a> The concept of consistent renaming is actually subtle and difficult to define formally. Famous logicians have made embarrassing errors here.</aside>
<aside class="noteEntry"><a id="c1-fn-0024"/><a href="#c1-fn-0024a">24</a> Lexical scoping dictates that free names in a function are taken to refer to bindings made by enclosing function declarations; that is, they are looked up in the environment in which the function was declared. We will see how this works in detail in chapter 3 when we study environments and the detailed behavior of the interpreter.</aside>
<aside class="noteEntry"><a id="c1-fn-0025"/><a href="#c1-fn-0025a">25</a> Embedded declarations must come first in a function body. The management is not responsible for the consequences of running programs that intertwine declaration and use; see also footnotes 54 and 56 in section 1.3.2.</aside>
<aside class="noteEntry"><a id="c1-fn-0026"/><a href="#c1-fn-0026a">26</a> In a real program we would probably use the block structure introduced in the last section to hide the declaration of <span class="KeyTerm1">fact_iter</span>:
<br/><span class="BS_Sp-text-1_FN"><b>function</b> factorial(n) {</span>
<br/><span class="BS_Sp-text-1_FN">    <b>function</b> iter(product, counter) {</span>
<br/><span class="BS_Sp-text-1_FN">        <b>return</b> counter &gt; n</span>
<br/><span class="BS_Sp-text-1_FN">               ? product</span>
<br/><span class="BS_Sp-text-1_FN">               : iter(counter * product,</span>
<br/><span class="BS_Sp-text-1_FN">                      counter + 1);</span>
<br/><span class="BS_Sp-text-1_FN">    }</span>
<br/><span class="BS_Sp-text-1_FN">    <b>return</b> iter(1, 1);</span>
<br/><span class="BS_Sp-text-1_FN">}</span>
<br/>We avoided doing this here so as to minimize the number of things to think about at once.</aside>
<aside class="noteEntry"><a id="c1-fn-0027"/><a href="#c1-fn-0027a">27</a> When we discuss the implementation of functions on register machines in chapter 5, we will see that any iterative process can be realized “in hardware” as a machine that has a fixed set of registers and no auxiliary memory. In contrast, realizing a recursive process requires a machine that uses an auxiliary data structure known as a <i>stack</i>.</aside>
<aside class="noteEntry"><a id="c1-fn-0028"/><a href="#c1-fn-0028a">28</a> Tail recursion has long been known as a compiler optimization trick. A coherent semantic basis for tail recursion was provided by Carl Hewitt (1977), who explained it in terms of the “message-passing” model of computation that we shall discuss in chapter 3. Inspired by this, Gerald Jay Sussman and Guy Lewis Steele Jr. (see Steele 1975) constructed a tail-recursive interpreter for Scheme. Steele later showed how tail recursion is a consequence of the natural way to compile function calls (Steele 1977). The IEEE standard for Scheme requires that Scheme implementations be tail-recursive. The ECMA standard for JavaScript eventually followed suit with ECMAScript 2015 (ECMA 2015). Note, however, that as of this writing (2021), most implementations of JavaScript do not comply with this standard with respect to tail recursion.</aside>
<aside class="noteEntry"><a id="c1-fn-0029"/><a href="#c1-fn-0029a">29</a> Exercise 4.7 explores JavaScript's while loops as syntactic sugar for functions that give rise to iterative processes. The full language JavaScript, like other conventional languages, features a plethora of syntactic forms, all of which can be expressed more uniformly in the language Lisp. This, together with the fact that these constructs typically involve semicolons whose placement rules are sometimes not obvious, led Alan Perlis to quip: “Syntactic sugar causes cancer of the semicolon.”</aside>
<aside class="noteEntry"><a id="c1-fn-0030"/><a href="#c1-fn-0030a">30</a> An example of this was hinted at in section 1.1.3: The interpreter itself evaluates expressions using a tree-recursive process.</aside>
<aside class="noteEntry"><a id="c1-fn-0031"/><a href="#c1-fn-0031a">31</a> For example, work through in detail how the reduction rule applies to the problem of making change for 10 cents using pennies and nickels.</aside>
<aside class="noteEntry"><a id="c1-fn-0032"/><a href="#c1-fn-0032a">32</a> One approach to coping with redundant computations is to arrange matters so that we automatically construct a table of values as they are computed. Each time we are asked to apply the function to some argument, we first look to see if the value is already stored in the table, in which case we avoid performing the redundant computation. This strategy, known as <i>tabulation</i> or <i>memoization</i>, can be implemented in a straightforward way. Tabulation can sometimes be used to transform processes that require an exponential number of steps (such as <span class="KeyTerm1">count_change</span>) into processes whose space and time requirements grow linearly with the input. See exercise 3.27.</aside>
<aside class="noteEntry"><a id="c1-fn-0033"/><a href="#c1-fn-0033a">33</a> The elements of Pascal's triangle are called the <i>binomial coefficients</i>, because the <i>n</i>th row consists of the coefficients of the terms in the expansion of (<i>x</i> + <i>y</i>)<i><sup>n</sup></i>. This pattern for computing the coefficients appeared in Blaise Pascal's 1653 seminal work on probability theory, <i>Traité du triangle arithmétique</i>. According to Edwards (2019), the same pattern appears in the works of the eleventh-century Persian mathematician Al-Karaji, in the works of the twelfthcentury Hindu mathematician Bhaskara, and in the works of the thirteenth-century Chinese mathematician Yang Hui.</aside>
<aside class="noteEntry"><a id="c1-fn-0034"/><a href="#c1-fn-0034a">34</a> These statements mask a great deal of oversimplification. For instance, if we count process steps as “machine operations” we are making the assumption that the number of machine operations needed to perform, say, a multiplication is independent of the size of the numbers to be multiplied, which is false if the numbers are sufficiently large. Similar remarks hold for the estimates of space. Like the design and description of a process, the analysis of a process can be carried out at various levels of abstraction.</aside>
<aside class="noteEntry"><a id="c1-fn-0035"/><a href="#c1-fn-0035a">35</a> More precisely, the number of multiplications required is equal to 1 less than the log base 2 of <i>n</i>, plus the number of ones in the binary representation of <i>n</i>. This total is always less than twice the log base 2 of <i>n</i>. The arbitrary constants <i>k</i><sub>1</sub> and <i>k</i><sub>2</sub> in the definition of order notation imply that, for a logarithmic process, the base to which logarithms are taken does not matter, so all such processes are described as Θ(log <i>n</i>).</aside>
<aside class="noteEntry"><a id="c1-fn-0036"/><a href="#c1-fn-0036a">36</a> You may wonder why anyone would care about raising numbers to the 1000th power. See section 1.2.6.</aside>
<aside class="noteEntry"><a id="c1-fn-0037"/><a href="#c1-fn-0037a">37</a> This iterative algorithm is ancient. It appears in the <i>Chandah-sutra</i> by Áchárya, written before 200 BCE. See Knuth 1997b, section 4.6.3, for a full discussion and analysis of this and other methods of exponentiation.</aside>
<aside class="noteEntry"><a id="c1-fn-0038"/><a href="#c1-fn-0038a">38</a> This algorithm, which is sometimes known as the “Russian peasant method” of multiplication, is ancient. Examples of its use are found in the Rhind Papyrus, one of the two oldest mathematical documents in existence, written about 1700 BCE (and copied from an even older document) by an Egyptian scribe named A’h-mose.</aside>
<aside class="noteEntry"><a id="c1-fn-0039"/><a href="#c1-fn-0039a">39</a> This exercise was suggested by Joe Stoy, based on an example in Kaldewaij 1990.</aside>
<aside class="noteEntry"><a id="c1-fn-0040"/><a href="#c1-fn-0040a">40</a> Euclid's Algorithm is so called because it appears in Euclid's <i>Elements</i> (Book 7, ca. 300 BCE). According to Knuth (1997a), it can be considered the oldest known nontrivial algorithm. The ancient Egyptian method of multiplication (exercise 1.18) is surely older, but, as Knuth explains, Euclid's Algorithm is the oldest known to have been presented as a general algorithm, rather than as a set of illustrative examples.</aside>
<aside class="noteEntry"><a id="c1-fn-0041"/><a href="#c1-fn-0041a">41</a> This theorem was proved in 1845 by Gabriel Lamé, a French mathematician and engineer known chiefly for his contributions to mathematical physics. To prove the theorem, we consider pairs (<i>a<sub>k</sub></i>, <i>b<sub>k</sub></i>), where <i>a<sub>k</sub> b<sub>k</sub></i>, for which Euclid's Algorithm terminates in <i>k</i> steps. The proof is based on the claim that, if (<i>a<sub>k</sub></i><sub>+1</sub>, <i>b<sub>k</sub></i><sub>+1</sub>) (<i>a<sub>k</sub></i>, <i>b<sub>k</sub></i>) (<i>a<sub>k</sub></i><sub>–1</sub>, <i>b<sub>k</sub></i><sub>–1</sub>) are three successive pairs in the reduction process, then we must have <i>b<sub>k</sub></i><sub>+1</sub> <i>b<sub>k</sub></i> + <i>b<sub>k</sub></i><sub>–1</sub>. To verify the claim, consider that a reduction step is defined by applying the transformation <i>a<sub>k</sub></i><sub>–1</sub> = <i>b<sub>k</sub></i>, <i>b<sub>k</sub></i><sub>–1</sub> = remainder of <i>a<sub>k</sub></i> divided by <i>b<sub>k</sub></i>. The second equation means that <i>a<sub>k</sub></i> = <i>qb<sub>k</sub></i> + <i>b<sub>k</sub></i><sub>–1</sub> for some positive integer <i>q</i>. And since <i>q</i> must be at least 1 we have <i>a<sub>k</sub></i> = <i>qb<sub>k</sub></i> + <i>b<sub>k</sub></i><sub>–1</sub> <i>b<sub>k</sub></i> + <i>b<sub>k</sub></i><sub>–1</sub>. But in the previous reduction step we have <i>b<sub>k</sub></i><sub>+1</sub> = <i>a<sub>k</sub></i>. Therefore, <i>b<sub>k</sub></i><sub>+1</sub> = <i>a<sub>k</sub> b<sub>k</sub></i> + <i>b<sub>k</sub></i><sub>–1</sub>. This verifies the claim. Now we can prove the theorem by induction on <i>k</i>, the number of steps that the algorithm requires to terminate. The result is true for <i>k</i> = 1, since this merely requires that <i>b</i> be at least as large as Fib(1) = 1. Now, assume that the result is true for all integers less than or equal to <i>k</i> and establish the result for <i>k</i> + 1. Let (<i>a<sub>k</sub></i><sub>+1</sub>, <i>b<sub>k</sub></i><sub>+1</sub>) (<i>a<sub>k</sub></i>, <i>b<sub>k</sub></i>) (<i>a<sub>k</sub></i><sub>–1</sub>, <i>b<sub>k</sub></i><sub>–1</sub>) be successive pairs in the reduction process. By our induction hypotheses, we have <i>b<sub>k</sub></i><sub>–1</sub> Fib(<i>k</i> – 1) and <i>b<sub>k</sub></i> Fib(<i>k</i>). Thus, applying the claim we just proved together with the definition of the Fibonacci numbers gives <i>b<sub>k</sub></i><sub>+1</sub> <i>b<sub>k</sub></i> + <i>b<sub>k</sub></i><sub>–1</sub> Fib(<i>k</i>) + Fib(<i>k</i> – 1) = Fib(<i>k</i> + 1), which completes the proof of Lamé's Theorem.</aside>
<aside class="noteEntry"><a id="c1-fn-0042"/><a href="#c1-fn-0042a">42</a> If <i>d</i> is a divisor of <i>n</i>, then so is <i>n</i>/<i>d</i>. But <i>d</i> and <i>n</i>/<i>d</i> cannot both be greater than <img alt="c1-fig-5012.jpg" src="../images/c1-fig-5012.jpg"/>.</aside>
<aside class="noteEntry"><a id="c1-fn-0043"/><a href="#c1-fn-0043a">43</a> Pierre de Fermat (1601–1665) is considered to be the founder of modern number theory. He obtained many important number-theoretic results, but he usually announced just the results, without providing his proofs. Fermat's Little Theorem was stated in a letter he wrote in 1640. The first published proof was given by Euler in 1736 (and an earlier, identical proof was discovered in the unpublished manuscripts of Leibniz). The most famous of Fermat's results—known as Fermat's Last Theorem—was jotted down in 1637 in his copy of the book <i>Arithmetic</i> (by the third-century Greek mathematician Diophantus) with the remark “I have discovered a truly remarkable proof, but this margin is too small to contain it.” Finding a proof of Fermat's Last Theorem became one of the most famous challenges in number theory. A complete solution was finally given in 1995 by Andrew Wiles of Princeton University.</aside>
<aside class="noteEntry"><a id="c1-fn-0044"/><a href="#c1-fn-0044a">44</a> The reduction steps in the cases where the exponent <i>e</i> is greater than 1 are based on the fact that, for any integers <i>x</i>, <i>y</i>, and <i>m</i>, we can find the remainder of <i>x</i> times <i>y</i> modulo <i>m</i> by computing separately the remainders of <i>x</i> modulo <i>m</i> and <i>y</i> modulo <i>m</i>, multiplying these, and then taking the remainder of the result modulo <i>m</i>. For instance, in the case where <i>e</i> is even, we compute the remainder of <i>b<sup>e</sup></i><sup>/2</sup> modulo <i>m</i>, square this, and take the remainder modulo <i>m</i>. This technique is useful because it means we can perform our computation without ever having to deal with numbers much larger than <i>m</i>. (Compare exercise 1.25.)</aside>
<aside class="noteEntry"><a id="c1-fn-0045"/><a href="#c1-fn-0045a">45</a> Numbers that fool the Fermat test are called <i>Carmichael numbers</i>, and little is known about them other than that they are extremely rare. There are 255 Carmichael numbers below 100,000,000. The smallest few are 561, 1105, 1729, 2465, 2821, and 6601. In testing primality of very large numbers chosen at random, the chance of stumbling upon a value that fools the Fermat test is less than the chance that cosmic radiation will cause the computer to make an error in carrying out a “correct” algorithm. Considering an algorithm to be inadequate for the first reason but not for the second illustrates the difference between mathematics and engineering.</aside>
<aside class="noteEntry"><a id="c1-fn-0046"/><a href="#c1-fn-0046a">46</a> One of the most striking applications of probabilistic prime testing has been to the field of cryptography. Although it is computationally infeasible to factor an arbitrary 300-digit number as of this writing (2021), the primality of such a number can be checked in a few seconds with the Fermat test. This fact forms the basis of a technique for constructing “unbreakable codes” suggested by Rivest, Shamir, and Adleman (1977). The resulting <i>RSA algorithm</i> has become a widely used technique for enhancing the security of electronic communications. Because of this and related developments, the study of prime numbers, once considered the epitome of a topic in “pure” mathematics to be studied only for its own sake, now turns out to have important practical applications to cryptography, electronic funds transfer, and information retrieval.</aside>
<aside class="noteEntry"><a id="c1-fn-0047"/><a href="#c1-fn-0047a">47</a> This date is called the <i>UNIX epoch</i> and is part of the specification of functions that deal with time in the UNIX<sup>TM</sup> operating system.</aside>
<aside class="noteEntry"><a id="c1-fn-0048"/><a href="#c1-fn-0048a">48</a> The primitive function <span class="KeyTerm1">display</span> returns its argument, but also prints it. Here <span class="KeyTerm1">" *** "</span> is a <i>string</i>, a sequence of characters that we pass as argument to the <span class="KeyTerm1">display</span> function. Section 2.3.1 introduces strings more thoroughly.</aside>
<aside class="noteEntry"><a id="c1-fn-0049"/><a href="#c1-fn-0049a">49</a> This series, usually written in the equivalent form <img alt="c1-fig-5015.jpg" src="../images/c1-fig-5015.jpg"/>, is due to Leibniz. We'll see how to use this as the basis for some fancy numerical tricks in section 3.5.3.</aside>
<aside class="noteEntry"><a id="c1-fn-0050"/><a href="#c1-fn-0050a">50</a> Notice that we have used block structure (section 1.1.8) to embed the declarations of <span class="KeyTerm1">pi_next</span> and <span class="KeyTerm1">pi_term</span> within <span class="KeyTerm1">pi_sum</span>, since these functions are unlikely to be useful for any other purpose. We will see how to get rid of them altogether in section 1.3.2.</aside>
<aside class="noteEntry"><a id="c1-fn-0051"/><a href="#c1-fn-0051a">51</a> The intent of exercises 1.31–1.33 is to demonstrate the expressive power that is attained by using an appropriate abstraction to consolidate many seemingly disparate operations. However, though accumulation and filtering are elegant ideas, our hands are somewhat tied in using them at this point since we do not yet have data structures to provide suitable means of combination for these abstractions. We will return to these ideas in section 2.2.3 when we show how to use <i>sequences</i> as interfaces for combining filters and accumulators to build even more powerful abstractions. We will see there how these methods really come into their own as a powerful and elegant approach to designing programs.</aside>
<aside class="noteEntry"><a id="c1-fn-0052"/><a href="#c1-fn-0052a">52</a> This formula was discovered by the seventeenth-century English mathematician John Wallis.</aside>
<aside class="noteEntry"><a id="c1-fn-0053"/><a href="#c1-fn-0053a">53</a> In section 2.2.4, we will extend the syntax of lambda expressions to allow a block as the body rather than just an expression, as in function declaration statements.</aside>
<aside class="noteEntry"><a id="c1-fn-0054"/><a href="#c1-fn-0054a">54</a> In JavaScript, there are subtle differences between the two versions: A function declaration statement is automatically “hoisted” (moved) to the beginning of the surrounding block or to the beginning of the program if it occurs outside of any block, whereas a constant declaration is not moved. Names declared with function declaration can be reassigned using assignment (section 3.1.1), whereas names declared with constant declarations can't. In this book, we avoid these features and treat a function declaration as equivalent to the corresponding constant declaration.</aside>
<aside class="noteEntry"><a id="c1-fn-0055"/><a href="#c1-fn-0055a">55</a> It would be clearer and less intimidating to people learning JavaScript if a term more obvious than <i>lambda expression</i>, such as <i>function definition</i>, were used. But the convention is very firmly entrenched, not just for Lisp and Scheme but also for JavaScript, Java and other languages, no doubt partly due to the influence of the Scheme editions of this book. The notation is adopted from the <i>λ</i> calculus, a mathematical formalism introduced by the mathematical logician Alonzo Church (1941). Church developed the <i>λ</i> calculus to provide a rigorous foundation for studying the notions of function and function application. The <i>λ</i> calculus has become a basic tool for mathematical investigations of the semantics of programming languages.</aside>
<aside class="noteEntry"><a id="c1-fn-0056"/><a href="#c1-fn-0056a">56</a> Note that a name declared in a block cannot be used before the declaration is fully evaluated, regardless of whether the same name is declared outside the block. Thus in the program below, the attempt to use the <span class="KeyTerm1">a</span> declared at the top level to provide a value for the calculation of the <span class="KeyTerm1">b</span> declared in <span class="KeyTerm1">f</span> cannot work.
<br/><span class="BS_Sp-text-1_FN"><b>const</b> a = 1;</span>
<br/><span class="BS_Sp-text-1_FN"><b>function</b> f(x) {</span>
<br/><span class="BS_Sp-text-1_FN">    <b>const</b> b = a + x;</span>
<br/><span class="BS_Sp-text-1_FN">    <b>const</b> a = 5;</span>
<br/><span class="BS_Sp-text-1_FN">    <b>return</b> a + b;</span>
<br/><span class="BS_Sp-text-1_FN">}</span>
<br/><span class="BS_Sp-text-1_FN">f(10);</span>
<br/>The program leads to an error, because the <span class="KeyTerm1">a</span> in <span class="KeyTerm1">a + x</span> is used before its declaration is evaluated. We will return to this program in section 4.1.6 (exercise 4.19), after we learn more about evaluation.</aside>
<aside class="noteEntry"><a id="c1-fn-0057"/><a href="#c1-fn-0057a">57</a> The substitution model can be expanded to say that for a constant declaration, the value of the expression after <span class="KeyTerm1">=</span> is substituted for the name before <span class="KeyTerm1">=</span> in the rest of the block body (after the declaration), similar to the substitution of arguments for parameters in the evaluation of a function application.</aside>
<aside class="noteEntry"><a id="c1-fn-0058"/><a href="#c1-fn-0058a">58</a> We have used 0.001 as a representative “small” number to indicate a tolerance for the acceptable error in a calculation. The appropriate tolerance for a real calculation depends upon the problem to be solved and the limitations of the computer and the algorithm. This is often a very subtle consideration, requiring help from a numerical analyst or some other kind of magician.</aside>
<aside class="noteEntry"><a id="c1-fn-0059"/><a href="#c1-fn-0059a">59</a> This can be accomplished using <span class="KeyTerm1">error</span>, which takes as argument a string that is printed as error message along with the number of the program line that gave rise to the call of <span class="KeyTerm1">error</span>.</aside>
<aside class="noteEntry"><a id="c1-fn-0060"/><a href="#c1-fn-0060a">60</a> To obtain a fixed point of cosine on a calculator, set it to radians mode and then repeatedly press the cos button until the value does not change any longer.</aside>
<aside class="noteEntry"><a id="c1-fn-0061"/><a href="#c1-fn-0061a">61</a> <img alt="c1-fig-5022.jpg" src="../images/c1-fig-5022.jpg"/> (pronounced “maps to”) is the mathematician's way of writing lambda expressions. <i>y x</i>/<i>y</i> means <span class="KeyTerm1">y =&gt; x / y</span>, that is, the function whose value at <i>y</i> is <i>x</i>/<i>y</i>.</aside>
<aside class="noteEntry"><a id="c1-fn-0062"/><a href="#c1-fn-0062a">62</a> Observe that this is an application whose function expression is itself an application. Exercise 1.4 already demonstrated the ability to form such applications, but that was only a toy example. Here we begin to see the real need for such applications—when applying a function that is obtained as the value returned by a higher-order function.</aside>
<aside class="noteEntry"><a id="c1-fn-0063"/><a href="#c1-fn-0063a">63</a> See exercise 1.45 for a further generalization.</aside>
<aside class="noteEntry"><a id="c1-fn-0064"/><a href="#c1-fn-0064a">64</a> Elementary calculus books usually describe Newton's method in terms of the sequence of approximations <i>x<sub>n</sub></i><sub>+1</sub> = <i>x<sub>n</sub></i> – <i>g</i>(<i>x<sub>n</sub></i>)/<i>Dg</i>(<i>x<sub>n</sub></i>). Having language for talking about processes and using the idea of fixed points simplifies the description of the method.</aside>
<aside class="noteEntry"><a id="c1-fn-0065"/><a href="#c1-fn-0065a">65</a> Newton's method does not always converge to an answer, but it can be shown that in favorable cases each iteration doubles the number-of-digits accuracy of the approximation to the solution. In such cases, Newton's method will converge much more rapidly than the half-interval method.</aside>
<aside class="noteEntry"><a id="c1-fn-0066"/><a href="#c1-fn-0066a">66</a> For finding square roots, Newton's method converges rapidly to the correct solution from any starting point.</aside>
<aside class="noteEntry"><a id="c1-fn-0067"/><a href="#c1-fn-0067a">67</a> The notion of first-class status of programming-language elements is due to the British computer scientist Christopher Strachey (1916–1975).</aside>
<aside class="noteEntry"><a id="c1-fn-0068"/><a href="#c1-fn-0068a">68</a> We'll see examples of this after we introduce data structures in chapter 2.</aside>
<aside class="noteEntry"><a id="c1-fn-0069"/><a href="#c1-fn-0069a">69</a> The major implementation cost of first-class functions is that allowing functions to be returned as values requires reserving storage for a function's free names even while the function is not executing. In the JavaScript implementation we will study in section 4.1, these names are stored in the function's environment.</aside>
</section>
</section>
</body>
</html>