<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Index</title>
<link href="../styles/MIT_style.css" rel="stylesheet" type="text/css"/>
<link href="../styles/MIT_index.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:5e22faf7-6d97-43f5-a05d-571a507bcb19" name="Adept.expected.resource"/>
</head>
<body epub:type="backmatter">
<section epub:type="index" role="doc-index">
<header>
<h1><a id="b2-title-0001"/><span class="chapterTitle">Index</span></h1>
</header>
<section>
<p class="paraaftertitle"><a id="b2-para-0001"/>Page numbers for JavaScript declarations are in <i>italics</i>.</p>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-para-0002"/>Page numbers followed by <i>n</i> indicate footnotes.</li>
<li><a id="b2-para-0003"/><span class="KeyTerm1">"</span> (double quote), 124, 125 (ex. 2.55)</li>
<li><a id="b2-para-0004"/><span class="KeyTerm1">'</span> (single quote), 126 (ex. 2.55)</li>
<li><a id="b2-para-0005"/><span class="KeyTerm1">ˋ</span> (back quote), 546</li>
<li><a id="b2-para-0006"/><span class="KeyTerm1">+</span></li>
<li><a id="b2-para-0007"/>as numeric addition operator, 4</li>
<li><a id="b2-para-0008"/>as string concatenation operator, 75</li>
<li><a id="b2-para-0009"/><span class="KeyTerm1">-</span></li>
<li><a id="b2-para-0010"/>as numeric negation operator, 15</li>
<li><a id="b2-para-0011"/>as numeric subtraction operator, 5</li>
<li><a id="b2-para-0012"/><span class="KeyTerm1">*</span> (multiplication operator), 4</li>
<li><a id="b2-para-0013"/><span class="KeyTerm1">/</span> (division operator), 4</li>
<li><a id="b2-para-0014"/><span class="KeyTerm1">%</span> (remainder operator), 39</li>
<li><a id="b2-para-0015"/><span class="KeyTerm1">&amp;&amp;</span> (logical conjunction), 15</li>
<li><a id="b2-para-0016"/>as derived component, 336 (ex. 4.4)</li>
<li><a id="b2-para-0017"/>evaluation of, 15</li>
<li><a id="b2-para-0018"/>implementing in metacircular evaluator, 336 (ex. 4.4)</li>
<li><a id="b2-para-0019"/>parsing of, 336 (ex. 4.4)</li>
<li><a id="b2-para-0020"/>why a syntactic form, 15</li>
<li><a id="b2-para-0021"/><span class="KeyTerm1">||</span> (logical disjunction), 15</li>
<li><a id="b2-para-0022"/>as derived component, 336 (ex. 4.4)</li>
<li><a id="b2-para-0023"/>evaluation of, 15</li>
<li><a id="b2-para-0024"/>implementing in metacircular evaluator, 336 (ex. 4.4)</li>
<li><a id="b2-para-0025"/>parsing of, 336 (ex. 4.4)</li>
<li><a id="b2-para-0026"/>why a syntactic form, 15</li>
<li><a id="b2-para-0027"/><span class="KeyTerm1">? :</span>, 14, <i>see also</i> conditional expression</li>
<li><a id="b2-para-0028"/><span class="KeyTerm1">!</span> (logical negation operator), 15</li>
<li><a id="b2-para-0029"/><span class="KeyTerm1">!==</span></li>
<li><a id="b2-para-0030"/>as numeric comparison operator, 15</li>
<li><a id="b2-para-0031"/>as string comparison operator, 124</li>
<li><a id="b2-para-0032"/><span class="KeyTerm1">=</span>, 192, <i>see also</i> assignment</li>
<li><a id="b2-para-0033"/><span class="KeyTerm1">===</span></li>
<li><a id="b2-para-0034"/>as equality of pointers, 228, 489</li>
<li><a id="b2-para-0035"/>as general comparison operator, 228</li>
<li><a id="b2-para-0036"/>as numeric equality operator, 15, 490<i>n</i></li>
<li><a id="b2-para-0037"/>as string comparison operator, 124, 490</li>
<li><a id="b2-para-0038"/><span class="KeyTerm1">&gt;</span> (numeric comparison operator), 15</li>
<li><a id="b2-para-0039"/><span class="KeyTerm1">&gt;=</span> (numeric comparison operator), 14</li>
<li><a id="b2-para-0040"/><span class="KeyTerm1">&lt;</span> (numeric comparison operator), 15</li>
<li><a id="b2-para-0041"/><span class="KeyTerm1">&lt;=</span> (numeric comparison operator), 15</li>
<li><a id="b2-para-0042"/><span class="KeyTerm1">=&gt;</span>, 54, <i>see also</i> lambda expression</li>
<li><a id="b2-para-0043"/>↦notation for mathematical function, 61<i>n</i></li>
<li><a id="b2-para-0044"/><span class="KeyTerm1">[ , ]</span> (box notation for pairs), 86</li>
<li><a id="b2-para-0045"/><span class="KeyTerm1">;</span>, <i>see</i> semicolon</li>
<li><a id="b2-para-0046"/><span class="KeyTerm1">…</span> (rest parameter and spread syntax), 276</li>
<li><a id="b2-para-0047"/>$, pattern variables starting with, 403</li>
<li><a id="b2-para-0048"/><i>//</i> (for comments in programs), 108<i>n</i></li>
<li><a id="b2-para-0049"/><i>θ</i>(<i>f</i> (<i>n</i>)) (theta of <i>f</i> (<i>n</i>)), 37</li>
<li><a id="b2-para-0050"/>λ calculus (lambda calculus), 55<i>n</i></li>
<li><a id="b2-para-0051"/><i>π</i>, <i>see</i> pi</li>
<li><a id="b2-para-0052"/>Σ (sigma) notation, 50</li></ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-0001"/><span class="KeyTerm1">abs</span>, <i>14</i></li>
<li><a id="b2-li-0002"/>absolute value, 13</li>
<li><a id="b2-li-0003"/>abstract data, 72, <i>see also</i> data abstraction</li>
<li><a id="b2-li-0004"/>abstraction, <i>see also</i> data abstraction; higher-order functions; means of abstraction<ul class="none">
<li><a id="b2-li-0005"/>common pattern and, 50</li>
<li><a id="b2-li-0006"/>functional, 22</li>
<li><a id="b2-li-0007"/>metalinguistic, 318</li>
<li><a id="b2-li-0008"/>in register-machine design, 456–457</li>
<li><a id="b2-li-0009"/>of search in nondeterministic programming, 378</li>
</ul></li>
<li><a id="b2-li-0010"/>abstraction barriers, 71, 76–78, 147<ul class="none">
<li><a id="b2-li-0011"/>in complex-number system, 148</li>
<li><a id="b2-li-0012"/>in generic arithmetic system, 164</li>
<li><a id="b2-li-0013"/>in query language, 437</li>
<li><a id="b2-li-0014"/>in representing JavaScript syntax, 329</li>
</ul></li>
<li><a id="b2-li-0015"/>abstract models for data, 78<i>n</i></li>
<li><a id="b2-li-0016"/>abstract syntax<ul class="none">
<li><a id="b2-li-0017"/>in metacircular evaluator, 322</li>
<li><a id="b2-li-0018"/>in query interpreter, 425</li>
</ul></li>
<li><a id="b2-li-0019"/><span class="KeyTerm1">accelerated_sequence</span>, <i>297</i></li>
<li><a id="b2-li-0020"/><span class="KeyTerm1">accumulate</span>, 53 (ex. 1.32), <i>100</i>
<ul class="none">
<li><a id="b2-li-0021"/>same as <span class="KeyTerm1">fold_right</span>, 105 (ex. 2.38)</li>
</ul></li>
<li><a id="b2-li-0022"/><span class="KeyTerm1">accumulate_n</span>, 104 (ex. 2.36)</li>
<li><a id="b2-li-0023"/>accumulator, 100, 196 (ex. 3.1)</li>
<li><a id="b2-li-0024"/>Ackermann's function, 31 (ex. 1.10)</li>
<li><a id="b2-li-0025"/>acquire a mutex, 276</li>
<li><a id="b2-li-0026"/>actions, in register machine, 454–455</li>
<li><a id="b2-li-0027"/><span class="KeyTerm1">actual_value</span>, <i>364</i></li>
<li><a id="b2-li-0028"/>Ada, 411 (ex. 4.61)</li>
<li><a id="b2-li-0029"/>Adams, Norman I., IV, 356<i>n</i></li>
<li><a id="b2-li-0030"/><span class="KeyTerm1">add</span> (generic), <i>165</i>
<ul class="none">
<li><a id="b2-li-0031"/>used for polynomial coefficients, 179, 180</li>
</ul></li>
<li><a id="b2-li-0032"/><span class="KeyTerm1">add_action</span>, 244, <i>247</i></li>
<li><a id="b2-li-0033"/><span class="KeyTerm1">add_complex</span>, <i>150</i></li>
<li><a id="b2-li-0034"/><span class="KeyTerm1">add_complex_to_javascript_num</span>, <i>169</i></li>
<li><a id="b2-li-0035"/><span class="KeyTerm1">addend</span>, <i>128</i></li>
<li><a id="b2-li-0036"/><span class="KeyTerm1">adder</span> (primitive constraint), <i>256</i></li>
<li><a id="b2-li-0037"/>adder<ul class="none">
<li><a id="b2-li-0038"/>full, 243</li>
<li><a id="b2-li-0039"/>half, 242</li>
<li><a id="b2-li-0040"/>ripple-carry, 245 (ex. 3.30)</li>
</ul></li>
<li><a id="b2-li-0041"/><span class="KeyTerm1">add_interval</span>, <i>81</i></li>
<li><a id="b2-li-0042"/>additivity, 72, 147, 156–162, 166</li>
<li><a id="b2-li-0043"/><span class="KeyTerm1">add_lists</span>, <i>371</i></li>
<li><a id="b2-li-0044"/><span class="KeyTerm1">add_poly</span>, <i>178</i></li>
<li><a id="b2-li-0045"/><span class="KeyTerm1">add_rat</span>, <i>73</i></li>
<li><a id="b2-li-0046"/>address, 488</li>
<li><a id="b2-li-0047"/>address arithmetic, 488</li>
<li><a id="b2-li-0048"/><span class="KeyTerm1">add_rule_or_assertion</span>, <i>434</i></li>
<li><a id="b2-li-0049"/><span class="KeyTerm1">add_streams</span>, <i>290</i></li>
<li><a id="b2-li-0050"/><span class="KeyTerm1">add_terms</span>, <i>179</i></li>
<li><a id="b2-li-0051"/><span class="KeyTerm1">add_to_agenda</span>, 248, <i>251</i></li>
<li><a id="b2-li-0052"/><span class="KeyTerm1">add_vect</span>, 118 (ex. 2.46)</li>
<li><a id="b2-li-0053"/><span class="KeyTerm1">adjoin_arg</span>, <i>505n</i></li>
<li><a id="b2-li-0054"/>adjoining to a list with <span class="KeyTerm1">pair</span>, 88</li>
<li><a id="b2-li-0055"/><span class="KeyTerm1">adjoin_set</span>, 131<ul class="none">
<li><a id="b2-li-0056"/>binary-tree representation, <i>136</i></li>
<li><a id="b2-li-0057"/>ordered-list representation, 135 (ex. 2.61)</li>
<li><a id="b2-li-0058"/>unordered-list representation, <i>132</i></li>
<li><a id="b2-li-0059"/>for weighted sets, <i>145</i></li>
</ul></li>
<li><a id="b2-li-0060"/><span class="KeyTerm1">adjoin_term</span>, 179, <i>182</i></li>
</ul>
</section>
<section>
<h2>Adleman, Leonard, 46<i>n</i></h2>
<ul class="none">
<li><a id="b2-li-0061"/>administrative assistant, importance of, 403</li>
<li><a id="b2-li-0062"/><span class="KeyTerm1">advance_pc</span>, <i>479</i></li>
<li><a id="b2-li-0063"/><span class="KeyTerm1">after_delay</span>, 244, <i>248</i></li>
<li><a id="b2-li-0064"/>agenda, <i>see</i> digital-circuit simulation A’h-mose, 40<i>n</i></li>
<li><a id="b2-li-0065"/>algebra, symbolic, <i>see</i> symbolic algebra</li>
<li><a id="b2-li-0066"/>algebraic expression, 176<ul class="none">
<li><a id="b2-li-0067"/>differentiating, 126–131</li>
<li><a id="b2-li-0068"/>representing, 128–131</li>
<li><a id="b2-li-0069"/>simplifying, 129–130</li>
</ul></li>
<li><a id="b2-li-0070"/>algebraic specification for data, 79<i>n</i></li>
<li><a id="b2-li-0071"/>Algol<ul class="none">
<li><a id="b2-li-0072"/>block structure, 26</li>
<li><a id="b2-li-0073"/>call-by-name argument passing, 286<i>n</i>, 363<i>n</i></li>
<li><a id="b2-li-0074"/>thunks, 286<i>n</i>, 363<i>n</i></li>
</ul></li>
<li><a id="b2-li-0075"/>algorithm<ul class="none">
<li><a id="b2-li-0076"/>optimal, 104<i>n</i></li>
<li><a id="b2-li-0077"/>probabilistic, 45–46, 188<i>n</i></li>
</ul></li>
<li><a id="b2-li-0078"/>aliasing, 204<i>n</i></li>
<li><a id="b2-li-0079"/>Al-Karaji, 36<i>n</i></li>
<li><a id="b2-li-0080"/>Allen, John, 494<i>n</i></li>
<li><a id="b2-li-0081"/><span class="KeyTerm1">all_regs</span> (compiler), <i>542n</i></li>
<li><a id="b2-li-0082"/>alternative<ul class="none">
<li><a id="b2-li-0083"/>of conditional expression, 14</li>
<li><a id="b2-li-0084"/>of conditional statement, 57</li>
</ul></li>
<li><a id="b2-li-0085"/><span class="KeyTerm1">always_true</span>, <i>428</i></li>
<li><a id="b2-li-0086"/><span class="KeyTerm1">amb</span>, <i>374</i></li>
<li><a id="b2-li-0087"/><span class="KeyTerm1">amb</span> evaluator, <i>see</i> nondeterministic evaluator</li>
<li><a id="b2-li-0088"/><span class="KeyTerm1">ambeval</span>, <i>388</i></li>
<li><a id="b2-li-0089"/>analog computer, 306 (fig. 3.34)</li>
<li><a id="b2-li-0090"/><span class="KeyTerm1">analyze</span>
<ul class="none">
<li><a id="b2-li-0091"/>metacircular, <i>356</i></li>
<li><a id="b2-li-0092"/>nondeterministic, 387</li>
</ul></li>
<li><a id="b2-li-0093"/><span class="KeyTerm1">analyze_…</span>
<ul class="none">
<li><a id="b2-li-0094"/>metacircular, 356–359, 360 (ex. 4.21)</li>
<li><a id="b2-li-0095"/>nondeterministic, 389–392</li>
</ul></li>
<li><a id="b2-li-0096"/><span class="KeyTerm1">analyze_amb</span>, <i>394</i></li>
<li><a id="b2-li-0097"/>analyzing evaluator, 355–360<ul class="none">
<li><a id="b2-li-0098"/>as basis for nondeterministic evaluator, 386</li>
</ul></li>
<li><a id="b2-li-0099"/><span class="KeyTerm1">and</span> (query language), 405<ul class="none">
<li><a id="b2-li-0100"/>evaluation of, 413, 426, 446 (ex. 4.73)</li>
</ul></li>
<li><a id="b2-li-0101"/>and-gate, 241<ul class="none">
<li><a id="b2-li-0102"/><span class="KeyTerm1">and_gate</span>, <i>245</i></li>
</ul></li>
<li><a id="b2-li-0103"/><span class="KeyTerm1">an_element_of</span>, <i>375</i></li>
<li><a id="b2-li-0104"/><span class="KeyTerm1">angle</span>
<ul class="none">
<li><a id="b2-li-0105"/>data-directed, <i>160</i></li>
<li><a id="b2-li-0106"/>polar representation, <i>152</i></li>
<li><a id="b2-li-0107"/>rectangular representation, <i>151</i></li>
<li><a id="b2-li-0108"/>with tagged data, <i>154</i></li>
</ul></li>
<li><a id="b2-li-0109"/><span class="KeyTerm1">angle_polar</span>, <i>154</i></li>
<li><a id="b2-li-0110"/><span class="KeyTerm1">angle_rectangular</span>, <i>153</i></li>
<li><a id="b2-li-0111"/><span class="KeyTerm1">an_integer_starting_from</span>, <i>375</i></li>
<li><a id="b2-li-0112"/>Appel, Andrew W., 541<i>n</i></li>
<li><a id="b2-li-0113"/><span class="KeyTerm1">append</span>, <i>88</i>, <i>225</i> (ex. 3.12)<ul class="none">
<li><a id="b2-li-0114"/>as accumulation, 103 (ex. 2.33)</li>
<li><a id="b2-li-0115"/><span class="KeyTerm1">append_mutator</span> vs., 225 (ex. 3.12)</li>
<li><a id="b2-li-0116"/>as register machine, 492 (ex. 5.21)</li>
<li><a id="b2-li-0117"/>“what is” (rules) vs. “how to” (function), 399–400</li>
</ul></li>
<li><a id="b2-li-0118"/><span class="KeyTerm1">append_instruction_sequences</span>, 524, <i>544</i></li>
<li><a id="b2-li-0119"/><span class="KeyTerm1">append_mutator</span>, <i>225</i> (ex. 3.12)<ul class="none">
<li><a id="b2-li-0120"/>as register machine, 492 (ex. 5.21)</li>
</ul></li>
<li><a id="b2-li-0121"/><span class="KeyTerm1">append_to_form</span> (rules), <i>410</i></li>
<li><a id="b2-li-0122"/>applicative-order evaluation, 13<ul class="none">
<li><a id="b2-li-0123"/>in JavaScript, 13</li>
<li><a id="b2-li-0124"/>normal order vs., 17 (ex. 1.5), 43 (ex. 1.20), 361–362</li>
</ul></li>
<li><a id="b2-li-0125"/><span class="KeyTerm1">apply</span> (lazy), <i>364</i></li>
<li><a id="b2-li-0126"/><span class="KeyTerm1">apply</span> (metacircular), <i>324</i>
<ul class="none">
<li><a id="b2-li-0127"/>tail recursion and, 324<i>n</i></li>
</ul></li>
<li><a id="b2-li-0128"/><span class="KeyTerm1">apply</span> (primitive method), 346<i>n</i></li>
<li><a id="b2-li-0129"/><span class="KeyTerm1">apply_a_rule</span>, <i>430</i></li>
<li><a id="b2-li-0130"/><span class="KeyTerm1">apply_dispatch</span>, <i>507</i>
<ul class="none">
<li><a id="b2-li-0131"/>modified for compiled code, <i>558</i></li>
</ul></li>
<li><a id="b2-li-0132"/><span class="KeyTerm1">apply_generic</span>, <i>160</i>
<ul class="none">
<li><a id="b2-li-0133"/>with coercion, <i>171</i>, 174 (ex. 2.81)</li>
<li><a id="b2-li-0134"/>with coercion by raising, 175 (ex. 2.84)</li>
<li><a id="b2-li-0135"/>with coercion of multiple arguments, 175 (ex. 2.82)</li>
<li><a id="b2-li-0136"/>with coercion to simplify, 176 (ex. 2.85)</li>
<li><a id="b2-li-0137"/>with message passing, <i>163</i></li>
<li><a id="b2-li-0138"/>with tower of types, 173</li>
</ul></li>
<li><a id="b2-li-0139"/><span class="KeyTerm1">apply_in_underlying_javascript</span>, 159<i>n</i>, <i>346n</i></li>
<li><a id="b2-li-0140"/><span class="KeyTerm1">apply_primitive_function</span>, 324, 340, <i>346</i></li>
<li><a id="b2-li-0141"/><span class="KeyTerm1">apply_rules</span>, <i>430</i></li>
<li><a id="b2-li-0142"/>arbiter, 278<i>n</i></li>
<li><a id="b2-li-0143"/>arctangent, 151<i>n</i></li>
<li><a id="b2-li-0144"/><span class="KeyTerm1">arg_expressions</span>, 331</li>
<li><a id="b2-li-0145"/><span class="KeyTerm1">argl</span> register, 500</li>
<li><a id="b2-li-0146"/>argument(s), 9<ul class="none">
<li><a id="b2-li-0147"/>arbitrary number of, 276</li>
<li><a id="b2-li-0148"/>delayed, 306</li>
</ul></li>
<li><a id="b2-li-0149"/>argument passing, <i>see</i> call-by-name argument passing; call-by-need argument passing</li>
<li><a id="b2-li-0150"/>Aristotle's <i>De caelo</i> (Buridan's commentary on), 278<i>n</i></li>
<li><a id="b2-li-0151"/>arithmetic<ul class="none">
<li><a id="b2-li-0152"/>address arithmetic, 488</li>
<li><a id="b2-li-0153"/>generic, 163, <i>see also</i> generic arithmetic operations</li>
<li><a id="b2-li-0154"/>on complex numbers, 148</li>
<li><a id="b2-li-0155"/>on intervals, 81–84</li>
<li><a id="b2-li-0156"/>on polynomials, <i>see</i> polynomial arithmetic</li>
<li><a id="b2-li-0157"/>on power series, 294 (ex. 3.60), 295 (ex. 3.62)</li>
<li><a id="b2-li-0158"/>on rational numbers, 72–76</li>
<li><a id="b2-li-0159"/>operators for, 4</li>
</ul></li>
<li><a id="b2-li-0160"/>array, <i>see</i> vector (data structure)</li>
<li><a id="b2-li-0161"/>arrow function, <i>see</i> lambda expression</li>
<li><a id="b2-li-0162"/><span class="KeyTerm1">articles</span>, <i>381</i></li>
<li><a id="b2-li-0163"/>ASCII code, 140</li>
<li><a id="b2-li-0164"/><span class="KeyTerm1">assemble</span>, <i>474</i>, <i>475n</i></li>
<li><a id="b2-li-0165"/>assembler, 470, 474–477</li>
<li><a id="b2-li-0166"/><span class="KeyTerm1">assert</span> (query interpreter), 419</li>
<li><a id="b2-li-0167"/>assertion, 401<ul class="none">
<li><a id="b2-li-0168"/>implicit, 407</li>
</ul></li>
<li><a id="b2-li-0169"/><span class="KeyTerm1">assertion_body</span>, <i>443</i></li>
<li><a id="b2-li-0170"/><span class="KeyTerm1">assign</span> (in register machine), 453<ul class="none">
<li><a id="b2-li-0171"/>instruction constructor, <i>478</i></li>
<li><a id="b2-li-0172"/>simulating, 478</li>
<li><a id="b2-li-0173"/>storing label in register, 459</li>
</ul></li>
<li><a id="b2-li-0174"/>assignment, 190–206<ul class="none">
<li><a id="b2-li-0175"/>assignment expression, 192</li>
<li><a id="b2-li-0176"/>assignment operation, 190</li>
<li><a id="b2-li-0177"/>benefits of, 197–200</li>
<li><a id="b2-li-0178"/>bugs associated with, 204<i>n</i>, 205</li>
<li><a id="b2-li-0179"/>constant/variable declaration vs., 192<i>n</i></li>
<li><a id="b2-li-0180"/>costs of, 200–206</li>
<li><a id="b2-li-0181"/>equality test vs., 192<i>n</i></li>
<li><a id="b2-li-0182"/>evaluation of, 210</li>
<li><a id="b2-li-0183"/>parsing of, 333</li>
<li><a id="b2-li-0184"/>value of, 192<i>n</i></li>
</ul></li>
<li><a id="b2-li-0185"/><span class="KeyTerm1">assignment_symbol</span>, <i>333</i></li>
<li><a id="b2-li-0186"/><span class="KeyTerm1">assignment_value_expression</span>, 333</li>
<li><a id="b2-li-0187"/><span class="KeyTerm1">assign_reg_name</span>, <i>478</i></li>
<li><a id="b2-li-0188"/><span class="KeyTerm1">assign_symbol_value</span>, 341, <i>342</i></li>
<li><a id="b2-li-0189"/><span class="KeyTerm1">assign_value_exp</span>, <i>478</i></li>
<li><a id="b2-li-0190"/><span class="KeyTerm1">assoc</span>, <i>236</i></li>
<li><a id="b2-li-0191"/>associativity<ul class="none">
<li><a id="b2-li-0192"/>of conditional expression, 14</li>
<li><a id="b2-li-0193"/>of operators, 5</li>
</ul></li>
<li><a id="b2-li-0194"/>atomic operations supported in hardware, 278<i>n</i></li>
<li><a id="b2-li-0195"/>atomic requirement for test_and_set, 277</li>
<li><a id="b2-li-0196"/><span class="KeyTerm1">attach_tag</span>, <i>152</i>
<ul class="none">
<li><a id="b2-li-0197"/>using JavaScript data types, 168 (ex. 2.78)</li>
</ul></li>
<li><a id="b2-li-0198"/><span class="KeyTerm1">augend</span>, <i>128</i></li>
<li><a id="b2-li-0199"/>automagically, 376</li>
<li><a id="b2-li-0200"/>automatic search, 373, <i>see also</i> search history of, 376<i>n</i></li>
<li><a id="b2-li-0201"/>automatic storage allocation, 487</li>
<li><a id="b2-li-0202"/><span class="KeyTerm1">average</span>, <i>19</i></li>
<li><a id="b2-li-0203"/><span class="KeyTerm1">average_damp</span>, <i>63</i></li>
<li><a id="b2-li-0204"/>average damping, 61</li>
<li><a id="b2-li-0205"/><span class="KeyTerm1">averager</span> (constraint), 261 (ex. 3.33)</li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-0206"/>back quotes, 546</li>
<li><a id="b2-li-0207"/>backtracking, 376, <i>see also</i> nondeterministic computing</li>
<li><a id="b2-li-0208"/>Backus, John, 314<i>n</i></li>
<li><a id="b2-li-0209"/>Baker, Henry G., Jr., 494<i>n</i></li>
<li><a id="b2-li-0210"/>balanced binary tree, 137, <i>see also</i> binary tree</li>
<li><a id="b2-li-0211"/>balanced mobile, 96 (ex. 2.29)</li>
<li><a id="b2-li-0212"/>bank account, 190, 220 (ex. 3.11)<ul class="none">
<li><a id="b2-li-0213"/>exchanging balances, 272</li>
<li><a id="b2-li-0214"/>joint, 203, 205 (ex. 3.7)</li>
<li><a id="b2-li-0215"/>joint, modeled with streams, 315 (fig. 3.38)</li>
<li><a id="b2-li-0216"/>joint, with concurrent access, 264</li>
<li><a id="b2-li-0217"/>password-protected, 196 (ex. 3.3)</li>
<li><a id="b2-li-0218"/>serialized, 269</li>
<li><a id="b2-li-0219"/>stream model, 313</li>
<li><a id="b2-li-0220"/>transferring money, 274 (ex. 3.44)</li>
</ul></li>
<li><a id="b2-li-0221"/>barrier synchronization, 279<i>n</i></li>
<li><a id="b2-li-0222"/>Barth, John, 317</li>
<li><a id="b2-li-0223"/>Batali, John Dean, 499<i>n</i></li>
<li><a id="b2-li-0224"/><span class="KeyTerm1">below</span>, 112, 122 (ex. 2.51)</li>
<li><a id="b2-li-0225"/>Bertrand's Hypothesis, 292<i>n</i></li>
<li><a id="b2-li-0226"/><span class="KeyTerm1">beside</span>, 112, <i>122</i></li>
<li><a id="b2-li-0227"/>Bhaskara, 36<i>n</i></li>
<li><a id="b2-li-0228"/>bignum, 490</li>
<li><a id="b2-li-0229"/>binary numbers, addition of, <i>see</i> adder binary operator, 15</li>
<li><a id="b2-li-0230"/>binary search, 135</li>
<li><a id="b2-li-0231"/>binary tree, 135<ul class="none">
<li><a id="b2-li-0232"/>balanced, 137</li>
<li><a id="b2-li-0233"/>converting a list to a, 137 (ex. 2.64)</li>
<li><a id="b2-li-0234"/>converting to a list, 137 (ex. 2.63)</li>
<li><a id="b2-li-0235"/>for Huffman encoding, 141</li>
<li><a id="b2-li-0236"/>represented with lists, 136</li>
<li><a id="b2-li-0237"/>set represented as, 135–138</li>
<li><a id="b2-li-0238"/>table structured as, 240 (ex. 3.26)</li>
</ul></li>
<li><a id="b2-li-0239"/>bind, 23</li>
<li><a id="b2-li-0240"/>binding, 206<ul class="none">
<li><a id="b2-li-0241"/>deep, 343<i>n</i></li>
</ul></li>
<li><a id="b2-li-0242"/><span class="KeyTerm1">binding_in_frame</span>, <i>444</i></li>
<li><a id="b2-li-0243"/><span class="KeyTerm1">binding_value</span>, <i>444</i></li>
<li><a id="b2-li-0244"/><span class="KeyTerm1">binding_variable</span>, <i>444</i></li>
<li><a id="b2-li-0245"/>binomial coefficients, 36<i>n</i></li>
<li><a id="b2-li-0246"/>black box, 22</li>
<li><a id="b2-li-0247"/>block, 25<ul class="none">
<li><a id="b2-li-0248"/>empty, 251<i>n</i></li>
<li><a id="b2-li-0249"/>parsing of, 333</li>
</ul></li>
<li><a id="b2-li-0250"/><span class="KeyTerm1">block_body</span>, 333</li>
<li><a id="b2-li-0251"/>blocked process, 277<i>n</i></li>
<li><a id="b2-li-0252"/>block structure, 25–26, 351–355<ul class="none">
<li><a id="b2-li-0253"/>in environment model, 218–222</li>
<li><a id="b2-li-0254"/>in query language, 447 (ex. 4.76)</li>
<li><a id="b2-li-0255"/>body of a function, 9</li>
</ul></li>
<li><a id="b2-li-0256"/>boolean values (true, false), 14</li>
<li><a id="b2-li-0257"/>Borning, Alan, 252<i>n</i></li>
<li><a id="b2-li-0258"/>Borodin, Alan, 104<i>n</i></li>
<li><a id="b2-li-0259"/>bound name, 23</li>
<li><a id="b2-li-0260"/>box-and-pointer notation, 84<ul class="none">
<li><a id="b2-li-0261"/>end-of-list marker, 85</li>
</ul></li>
<li><a id="b2-li-0262"/>box notation for pairs, 86</li>
<li><a id="b2-li-0263"/><span class="KeyTerm1">branch</span> (in register machine), 452<ul class="none">
<li><a id="b2-li-0264"/>instruction constructor, <i>480</i></li>
<li><a id="b2-li-0265"/>simulating, 479</li>
</ul></li>
<li><a id="b2-li-0266"/><span class="KeyTerm1">branch_dest</span>, <i>480</i></li>
<li><a id="b2-li-0267"/>branch of a tree, 7</li>
<li><a id="b2-li-0268"/><span class="KeyTerm1"><b>break</b></span> (keyword), 338 (ex. 4.7), <i>see also</i> while loop breakpoint, 486 (ex. 5.18)</li>
<li><a id="b2-li-0269"/>broken heart, 495</li>
<li><a id="b2-li-0270"/>B-tree, 137<i>n</i></li>
<li><a id="b2-li-0271"/>bug, 1<ul class="none">
<li><a id="b2-li-0272"/>capturing a free name, 24</li>
<li><a id="b2-li-0273"/>order of assignments, 205</li>
<li><a id="b2-li-0274"/>side effect with aliasing, 204<i>n</i></li>
</ul></li>
<li><a id="b2-li-0275"/>bureaucracy, 419</li>
<li><a id="b2-li-0276"/>Buridan, Jean, 278<i>n</i></li>
<li><a id="b2-li-0277"/>busy-waiting, 277<i>n</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-0278"/>C<ul class="none">
<li><a id="b2-li-0279"/>compiling JavaScript into, 564 (ex. 5.55)</li>
<li><a id="b2-li-0280"/>error handling, 561<i>n</i></li>
<li><a id="b2-li-0281"/>JavaScript interpreter written in, 564 (ex. 5.54), 564 (ex. 5.55)</li>
<li><a id="b2-li-0282"/>recursive functions in, 30</li>
</ul></li>
<li><a id="b2-li-0283"/>cache-coherence protocols, 265<i>n</i></li>
<li><a id="b2-li-0284"/> calculator, fixed points with, 61<i>n</i></li>
<li><a id="b2-li-0285"/>call-by-name argument passing, 286<i>n</i>, 363<i>n</i></li>
<li><a id="b2-li-0286"/>call-by-need argument passing, 286<i>n</i>, 363<i>n</i>
<ul class="none">
<li><a id="b2-li-0287"/>memoization and, 293<i>n</i></li>
</ul></li>
<li><a id="b2-li-0288"/><span class="KeyTerm1">call_each</span>, <i>247</i></li>
<li><a id="b2-li-0289"/>camel case, 10<i>n</i></li>
<li><a id="b2-li-0290"/>canonical form, for polynomials, 184</li>
<li><a id="b2-li-0291"/>capturing a free name, 24</li>
<li><a id="b2-li-0292"/>Carmichael numbers, 45<i>n</i>, 48 (ex. 1.27)</li>
<li><a id="b2-li-0293"/>case analysis, 13, <i>see also</i> conditional expression<ul class="none">
<li><a id="b2-li-0294"/>data-directed programming vs., 323</li>
<li><a id="b2-li-0295"/>general, 14</li>
<li><a id="b2-li-0296"/>as sequence of clauses, 15</li>
</ul></li>
<li><a id="b2-li-0297"/>cell, in serializer implementation, 276</li>
<li><a id="b2-li-0298"/><span class="KeyTerm1">celsius_fahrenheit_converter</span>, <i>254</i>
<ul class="none">
<li><a id="b2-li-0299"/>expression-oriented, <i>262</i> (ex. 3.37)</li>
</ul></li>
<li><a id="b2-li-0300"/><span class="KeyTerm1">center</span>, <i>83</i></li>
<li><a id="b2-li-0301"/>Chaitin, Gregory, 197<i>n</i> </li>
<li><a id="b2-li-0302"/>Chandah-sutra, 40<i>n</i></li>
<li><a id="b2-li-0303"/>change and sameness<ul class="none">
<li><a id="b2-li-0304"/>meaning of, 202–204</li>
<li><a id="b2-li-0305"/>shared data and, 226</li>
</ul></li>
<li><a id="b2-li-0306"/>changing money, <i>see</i> counting change Chapman, David, 376<i>n</i></li>
<li><a id="b2-li-0307"/>character, ASCII encoding, 140</li>
<li><a id="b2-li-0308"/>Charniak, Eugene, 376<i>n</i></li>
<li><a id="b2-li-0309"/>Chebyshev, Pafnutii L’vovich, 292<i>n</i></li>
<li><a id="b2-li-0310"/><span class="KeyTerm1">check_an_assertion</span>, <i>428</i></li>
<li><a id="b2-li-0311"/>chess, eight-queens puzzle, 108 (ex. 2.42), 380 (ex. 4.42)</li>
<li><a id="b2-li-0312"/>chip implementation of Scheme, 499</li>
<li><a id="b2-li-0313"/>chronological backtracking, 376</li>
<li><a id="b2-li-0314"/>Church, Alonzo, 55<i>n</i>, 80 (ex. 2.6)</li>
<li><a id="b2-li-0315"/>Church numerals, 80 (ex. 2.6) Church–Turing thesis, 349<i>n</i></li>
<li><a id="b2-li-0316"/>circuit<ul class="none">
<li><a id="b2-li-0317"/>digital, <i>see</i> digital-circuit simulation</li>
<li><a id="b2-li-0318"/>modeled with streams, 303 (ex. 3.73), 308 (ex. 3.80)</li>
</ul></li>
<li><a id="b2-li-0319"/>Clark, Keith L., 422<i>n</i></li>
<li><a id="b2-li-0320"/>clause of a case analysis, 15</li>
<li><a id="b2-li-0321"/>Clinger, William, 363<i>n</i></li>
<li><a id="b2-li-0322"/>closed world assumption, 422</li>
<li><a id="b2-li-0323"/>closure, 71<ul class="none">
<li><a id="b2-li-0324"/>in abstract algebra, 85<i>n</i></li>
<li><a id="b2-li-0325"/>closure property of picture-language operations, 110, 113</li>
<li><a id="b2-li-0326"/>closure property of <span class="KeyTerm1">pair</span>, 84</li>
</ul></li>
<li><a id="b2-li-0327"/>coal, bituminous, 112<i>n</i></li>
<li><a id="b2-li-0328"/>code<ul class="none">
<li><a id="b2-li-0329"/>ASCII, 140</li>
<li><a id="b2-li-0330"/>fixed-length, 140</li>
<li><a id="b2-li-0331"/>Huffman, <i>see</i> Huffman code Morse, 140</li>
<li><a id="b2-li-0332"/>prefix, 140</li>
<li><a id="b2-li-0333"/>variable-length, 140</li>
</ul></li>
<li><a id="b2-li-0334"/>code generator, 523<ul class="none">
<li><a id="b2-li-0335"/>arguments of, 523</li>
<li><a id="b2-li-0336"/>value of, 524</li>
</ul></li>
<li><a id="b2-li-0337"/><span class="KeyTerm1">coeff</span>, 179, <i>182</i></li>
<li><a id="b2-li-0338"/>coercion, 170–176<ul class="none">
<li><a id="b2-li-0339"/>function, 170</li>
<li><a id="b2-li-0340"/>in algebraic manipulation, 184</li>
<li><a id="b2-li-0341"/>in polynomial arithmetic, 180</li>
<li><a id="b2-li-0342"/>table, 170</li>
</ul></li>
<li><a id="b2-li-0343"/>Colmerauer, Alain, 399<i>n</i></li>
<li><a id="b2-li-0344"/>combination, 4, <i>see also</i> function application; operator combination</li>
<li><a id="b2-li-0345"/>combination, means of, 3, <i>see also</i> closure</li>
<li><a id="b2-li-0346"/>comments in programs, 108<i>n</i></li>
<li><a id="b2-li-0347"/><span class="KeyTerm1">comp</span> register, 500</li>
<li><a id="b2-li-0348"/>compacting garbage collector, 494<i>n</i></li>
<li><a id="b2-li-0349"/>compilation, <i>see</i> compiler</li>
<li><a id="b2-li-0350"/><span class="KeyTerm1">compile</span>, <i>523</i></li>
<li><a id="b2-li-0351"/><span class="KeyTerm1">compile_and_go</span>, 558, <i>560</i></li>
<li><a id="b2-li-0352"/><span class="KeyTerm1">compile_and_run</span>, 563 (ex. 5.51)</li>
<li><a id="b2-li-0353"/><span class="KeyTerm1">compile_application</span>, <i>536</i></li>
<li><a id="b2-li-0354"/><span class="KeyTerm1">compile_assignment</span>, <i>529</i></li>
<li><a id="b2-li-0355"/><span class="KeyTerm1">compile_block</span>, <i>532</i></li>
<li><a id="b2-li-0356"/><span class="KeyTerm1">compile_conditional</span>, <i>530</i></li>
<li><a id="b2-li-0357"/><span class="KeyTerm1">compiled_apply</span>, <i>558</i></li>
<li><a id="b2-li-0358"/><span class="KeyTerm1">compile_declaration</span>, <i>529</i></li>
<li><a id="b2-li-0359"/><span class="KeyTerm1">compiled_function_entry</span>, <i>532n</i></li>
<li><a id="b2-li-0360"/><span class="KeyTerm1">compiled_function_env</span>, <i>532n</i></li>
<li><a id="b2-li-0361"/><span class="KeyTerm1">compile_fun_appl</span>, <i>542</i></li>
<li><a id="b2-li-0362"/><span class="KeyTerm1">compile_function_call</span>, <i>538</i></li>
<li><a id="b2-li-0363"/><span class="KeyTerm1">compile_lambda_body</span>, <i>534</i></li>
<li><a id="b2-li-0364"/><span class="KeyTerm1">compile_lambda_expression</span>, <i>533</i></li>
<li><a id="b2-li-0365"/><span class="KeyTerm1">compile_linkage</span>, <i>527</i></li>
<li><a id="b2-li-0366"/><span class="KeyTerm1">compile_literal</span>, <i>528</i></li>
<li><a id="b2-li-0367"/><span class="KeyTerm1">compile_name</span>, <i>528</i></li>
<li><a id="b2-li-0368"/>compiler, 519–521<ul class="none">
<li><a id="b2-li-0369"/>interpreter vs., 520–521, 561</li>
<li><a id="b2-li-0370"/>tail recursion, stack allocation, and garbage-collection, 541<i>n</i></li>
</ul></li>
<li><a id="b2-li-0371"/><span class="KeyTerm1">compile_return_statement</span>, <i>543</i></li>
<li><a id="b2-li-0372"/>compiler for JavaScript, 521–564, <i>see also</i> code generator; compile-time environment; instruction sequence; linkage descriptor; target register<ul class="none">
<li><a id="b2-li-0373"/>analyzing evaluator vs., 521, 522</li>
<li><a id="b2-li-0374"/>assignments, 528</li>
<li><a id="b2-li-0375"/>blocks, 531</li>
<li><a id="b2-li-0376"/>code generators, <i>see</i> <span class="KeyTerm1">compile_<i>. . .</i></span></li>
<li><a id="b2-li-0377"/>combinations, 535–542</li>
<li><a id="b2-li-0378"/>conditionals, 529</li>
<li><a id="b2-li-0379"/>dead code analysis, 534 (ex. 5.34)</li>
<li><a id="b2-li-0380"/>declarations, 528</li>
<li><a id="b2-li-0381"/>efficiency, 521–522</li>
<li><a id="b2-li-0382"/>example compilation, 546–549</li>
<li><a id="b2-li-0383"/>explicit-control evaluator vs., 521–522, 526 (ex. 5.33), 560</li>
<li><a id="b2-li-0384"/>expression-syntax functions, 522</li>
<li><a id="b2-li-0385"/>function applications, 535–542</li>
<li><a id="b2-li-0386"/>interfacing to evaluator, 557–564</li>
<li><a id="b2-li-0387"/>label generation, 530<i>n</i></li>
<li><a id="b2-li-0388"/>lambda expressions, 532</li>
<li><a id="b2-li-0389"/>lexical addressing, 554–555</li>
<li><a id="b2-li-0390"/>linkage code, 527</li>
<li><a id="b2-li-0391"/>literals, 528</li>
<li><a id="b2-li-0392"/>machine-operation use, 520<i>n</i></li>
<li><a id="b2-li-0393"/>monitoring performance (stack use) of compiled code, 560, 562 (ex. 5.48), 562 (ex. 5.49)</li>
<li><a id="b2-li-0394"/>names, 528</li>
<li><a id="b2-li-0395"/>open coding of primitives, 553 (ex. 5.41)</li>
<li><a id="b2-li-0396"/>order of argument evaluation, 549 (ex. 5.39)</li>
<li><a id="b2-li-0397"/>register use, 520<i>n</i>, 521, 542<i>n</i></li>
<li><a id="b2-li-0398"/>return statements, 543</li>
<li><a id="b2-li-0399"/>running compiled code, 557–564</li>
<li><a id="b2-li-0400"/>scanning out internal declarations, 555</li>
<li><a id="b2-li-0401"/>sequences of statements, 531</li>
<li><a id="b2-li-0402"/>stack usage, 525, 526 (ex. 5.32), 553 (ex. 5.40)</li>
<li><a id="b2-li-0403"/>structure of, 522–526</li>
<li><a id="b2-li-0404"/>tail-recursive code generated by, 541</li>
</ul></li>
<li><a id="b2-li-0405"/><span class="KeyTerm1">compile_sequence</span>, <i>531</i></li>
<li><a id="b2-li-0406"/>compile-time environment, 555, 556 (ex. 5.43), 556 (ex. 5.44), 557 (ex. 5.47)</li>
<li><a id="b2-li-0407"/><span class="KeyTerm1">complex</span> package, 167</li>
<li><a id="b2-li-0408"/>complex-number arithmetic, 148<ul class="none">
<li><a id="b2-li-0409"/>interfaced to generic arithmetic system, 167</li>
<li><a id="b2-li-0410"/>structure of system, 155 (fig. 2.21)</li>
</ul></li>
<li><a id="b2-li-0411"/>complex numbers<ul class="none">
<li><a id="b2-li-0412"/>polar representation, 151</li>
<li><a id="b2-li-0413"/>rectangular representation, 151</li>
<li><a id="b2-li-0414"/>rectangular vs. polar form, 149</li>
<li><a id="b2-li-0415"/>represented as tagged data, 152–155</li>
</ul></li>
<li><a id="b2-li-0416"/><span class="KeyTerm1">complex_to_complex</span>, <i>175</i> (ex. 2.81)</li>
<li><a id="b2-li-0417"/>composition of functions, 67 (ex. 1.42)</li>
<li><a id="b2-li-0418"/><span class="KeyTerm1">compound_apply</span>, <i>508</i></li>
<li><a id="b2-li-0419"/>compound data, need for, 69–71</li>
<li><a id="b2-li-0420"/>compound expression, 4, <i>see also</i> function application; operator combination; syntactic form<ul class="none">
<li><a id="b2-li-0421"/>as function expression of application, 17 (ex. 1.4)</li>
</ul></li>
<li><a id="b2-li-0422"/>compound function, 8, <i>see also</i> function used like primitive function, 10</li>
<li><a id="b2-li-0423"/>compound query, 405–406<ul class="none">
<li><a id="b2-li-0424"/>processing, 413–415, 426–428, 445 (ex. 4.72), 446 (ex. 4.73), 446 (ex. 4.74)</li>
</ul></li>
<li><a id="b2-li-0425"/>computability, 349<i>n</i>, 351<i>n</i></li>
<li><a id="b2-li-0426"/>computational process, 1, <i>see also</i> process</li>
<li><a id="b2-li-0427"/>computer science, 318, 349<i>n</i>
<ul class="none">
<li><a id="b2-li-0428"/>mathematics vs., 18, 398</li>
</ul></li>
<li><a id="b2-li-0429"/>concatenating strings, 75</li>
<li><a id="b2-li-0430"/><span class="KeyTerm1">conclusion</span>, <i>444</i></li>
<li><a id="b2-li-0431"/>concrete data representation, 72</li>
<li><a id="b2-li-0432"/>concurrency, 263–280<ul class="none">
<li><a id="b2-li-0433"/>correctness of concurrent programs, 266–268</li>
<li><a id="b2-li-0434"/>deadlock, 278–279</li>
<li><a id="b2-li-0435"/>functional programming and, 314</li>
<li><a id="b2-li-0436"/>mechanisms for controlling, 268–280</li>
</ul></li>
<li><a id="b2-li-0437"/><span class="KeyTerm1">concurrent_execute</span>, 269</li>
<li><a id="b2-li-0438"/><span class="KeyTerm1">conditional_alternative</span>, 331</li>
<li><a id="b2-li-0439"/><span class="KeyTerm1">conditional_consequent</span>, 331</li>
<li><a id="b2-li-0440"/>conditional expression, 14, <i>see also</i> case analysis<ul class="none">
<li><a id="b2-li-0441"/>as alternative of conditional expression, 14</li>
<li><a id="b2-li-0442"/>evaluation of, 14</li>
<li><a id="b2-li-0443"/>non-boolean value as predicate, 14<i>n</i></li>
<li><a id="b2-li-0444"/>normal-order evaluation of, 17 (ex. 1.5)</li>
<li><a id="b2-li-0445"/> as operand of operator combination, 17 (ex. 1.1)</li>
<li><a id="b2-li-0446"/>parsing of, 331</li>
<li><a id="b2-li-0447"/>precedence of, 17 (ex. 1.1)</li>
<li><a id="b2-li-0448"/>right-associativity of, 14</li>
<li><a id="b2-li-0449"/>why a syntactic form, 20 (ex. 1.6)</li>
</ul></li>
<li><a id="b2-li-0450"/><span class="KeyTerm1">conditional_predicate</span>, 331</li>
<li><a id="b2-li-0451"/>conditional statement, 57<ul class="none">
<li><a id="b2-li-0452"/>alternative statements of, 57</li>
<li><a id="b2-li-0453"/>conditional instead of alternative block, 179</li>
<li><a id="b2-li-0454"/>consequent statements of, 57</li>
<li><a id="b2-li-0455"/>need for, 57</li>
<li><a id="b2-li-0456"/>one-armed (without alternative), 251<i>n</i></li>
<li><a id="b2-li-0457"/>parsing of, 331</li>
<li><a id="b2-li-0458"/>predicate, consequent, and alternative of, 57</li>
</ul></li>
<li><a id="b2-li-0459"/>congruent modulo <i>n</i>, 44</li>
<li><a id="b2-li-0460"/><span class="KeyTerm1">conjoin</span>, <i>426</i></li>
<li><a id="b2-li-0461"/>conjunction, 15, <i>see also</i> <span class="KeyTerm1">&amp;&amp;</span> (logical conjunction)</li>
<li><a id="b2-li-0462"/><span class="KeyTerm1">connect</span>, 255, <i>261</i></li>
<li><a id="b2-li-0463"/>connector(s), in constraint system, 253<ul class="none">
<li><a id="b2-li-0464"/>operations on, 255</li>
<li><a id="b2-li-0465"/>representing, 258</li>
</ul></li>
<li><a id="b2-li-0466"/>Conniver, 376<i>n</i></li>
<li><a id="b2-li-0467"/>consciousness, expansion of, 325<i>n</i></li>
<li><a id="b2-li-0468"/>consequent<ul class="none">
<li><a id="b2-li-0469"/>of clause, 15</li>
<li><a id="b2-li-0470"/>of conditional expression, 14</li>
<li><a id="b2-li-0471"/>of conditional statement, 57</li>
</ul></li>
<li><a id="b2-li-0472"/><span class="KeyTerm1"><b>const</b></span> (keyword), 5, <i>see also</i> constant declaration</li>
<li><a id="b2-li-0473"/><span class="KeyTerm1">constant</span> (in register machine), 453, <i>482</i>
<ul class="none">
<li><a id="b2-li-0474"/>simulating, 482</li>
<li><a id="b2-li-0475"/>syntax of, 468</li>
</ul></li>
<li><a id="b2-li-0476"/><span class="KeyTerm1">constant</span> (primitive constraint), <i>258</i></li>
<li><a id="b2-li-0477"/>constant (in JavaScript), 5<ul class="none">
<li><a id="b2-li-0478"/>detecting assignment to, 343 (ex. 4.11), 557 (ex. 5.46)</li>
<li><a id="b2-li-0479"/>value of, 5</li>
</ul></li>
<li><a id="b2-li-0480"/>constant declaration, 5<ul class="none">
<li><a id="b2-li-0481"/>parsing of, 333</li>
<li><a id="b2-li-0482"/>why a syntactic form, 8</li>
</ul></li>
<li><a id="b2-li-0483"/><span class="KeyTerm1">constant_exp_value</span>, <i>482</i></li>
<li><a id="b2-li-0484"/>constraint(s)<ul class="none">
<li><a id="b2-li-0485"/>primitive, 253</li>
<li><a id="b2-li-0486"/>propagation of, 252–262</li>
</ul></li>
<li><a id="b2-li-0487"/>constraint network, 253</li>
<li><a id="b2-li-0488"/><span class="KeyTerm1">construct_arglist</span>, <i>537</i></li>
<li><a id="b2-li-0489"/>constructing a list with <span class="KeyTerm1">pair</span>, 88</li>
<li><a id="b2-li-0490"/>constructor, 72<ul class="none">
<li><a id="b2-li-0491"/>as abstraction barrier, 76</li>
</ul></li>
<li><a id="b2-li-0492"/><span class="KeyTerm1">contents</span>, <i>152</i>, <i>443</i>
<ul class="none">
<li><a id="b2-li-0493"/>using JavaScript data types, 168 (ex. 2.78)</li>
</ul></li>
<li><a id="b2-li-0494"/>continuation<ul class="none">
<li><a id="b2-li-0495"/>in nondeterministic evaluator, 386–388, <i>see also</i> failure continuation; success continuation</li>
<li><a id="b2-li-0496"/>in register-machine simulator, 475<i>n</i></li>
</ul></li>
<li><a id="b2-li-0497"/><span class="KeyTerm1"><b>continue</b></span> (keyword), 338 (ex. 4.7), <i>see also</i> while loop</li>
<li><a id="b2-li-0498"/><span class="KeyTerm1">continue</span> register, 459<ul class="none">
<li><a id="b2-li-0499"/>in explicit-control evaluator, 500</li>
<li><a id="b2-li-0500"/>recursion and, 464</li>
</ul></li>
<li><a id="b2-li-0501"/>continued fraction, 62 (ex. 1.37)<ul class="none">
<li><a id="b2-li-0502"/><i>e</i> as, 62 (ex. 1.38)</li>
<li><a id="b2-li-0503"/>golden ratio as, 62 (ex. 1.37)</li>
<li><a id="b2-li-0504"/>tangent as, 63 (ex. 1.39)</li>
</ul></li>
<li><a id="b2-li-0505"/>controller for register machine, 450–452, <i>see also</i> register-machine language controller diagram, 451<ul class="none">
<li><a id="b2-li-0506"/>control structure, 419</li>
</ul></li>
<li><a id="b2-li-0507"/>conventional interface, 71<ul class="none">
<li><a id="b2-li-0508"/>sequence as, 98–110</li>
</ul></li>
<li><a id="b2-li-0509"/><span class="KeyTerm1">convert</span>, <i>440</i></li>
<li><a id="b2-li-0510"/><span class="KeyTerm1">convert_to_query_syntax</span>, <i>438</i></li>
<li><a id="b2-li-0511"/>Cormen, Thomas H., 137<i>n</i></li>
<li><a id="b2-li-0512"/><span class="KeyTerm1">corner_split</span>, <i>115</i></li>
<li><a id="b2-li-0513"/>correctness of a program, 18<i>n</i></li>
<li><a id="b2-li-0514"/>cosine<ul class="none">
<li><a id="b2-li-0515"/>fixed point of, 61</li>
<li><a id="b2-li-0516"/>power series for, 294 (ex. 3.59)</li>
</ul></li>
<li><a id="b2-li-0517"/>cosmic radiation, 45<i>n</i></li>
<li><a id="b2-li-0518"/><span class="KeyTerm1">count_change</span>, <i>35</i></li>
<li><a id="b2-li-0519"/>counting change, 34–35, 89 (ex. 2.19)</li>
<li><a id="b2-li-0520"/><span class="KeyTerm1">count_leaves</span>, 93, <i>94</i>
<ul class="none">
<li><a id="b2-li-0521"/>as accumulation, 104 (ex. 2.35)</li>
<li><a id="b2-li-0522"/>as register machine, 492 (ex. 5.20)</li>
</ul></li>
<li><a id="b2-li-0523"/><span class="KeyTerm1">count_pairs</span>, <i>229</i> (ex. 3.16)</li>
<li><a id="b2-li-0524"/>credit-card accounts, international, 280<i>n</i></li>
<li><a id="b2-li-0525"/>Cressey, David, 495<i>n</i></li>
<li><a id="b2-li-0526"/>Crockford, Douglas, 339<i>n</i></li>
<li><a id="b2-li-0527"/>cross-type operations, 169</li>
<li><a id="b2-li-0528"/>cryptography, 46<i>n</i></li>
<li><a id="b2-li-0529"/><span class="KeyTerm1">cube</span>, <i>38</i> (ex. 1.15), <i>48</i>, <i>65</i></li>
<li><a id="b2-li-0530"/><span class="KeyTerm1">cube_root</span>, <i>64</i></li>
<li><a id="b2-li-0531"/>cube root<ul class="none">
<li><a id="b2-li-0532"/>as fixed point, 64</li>
<li><a id="b2-li-0533"/>by Newton's method, 21 (ex. 1.8)</li>
</ul></li>
<li><a id="b2-li-0534"/><span class="KeyTerm1">current_time</span>, 248, <i>250</i></li>
<li><a id="b2-li-0535"/>current time, for simulation agenda, 250</li>
<li><a id="b2-li-0536"/>Curry, Haskell Brooks, 90 (ex. 2.20)</li>
<li><a id="b2-li-0537"/>currying, 90 (ex. 2.20)</li>
<li><a id="b2-li-0538"/>cycle in list, 226 (ex. 3.13)<ul class="none">
<li><a id="b2-li-0539"/>detecting, 229 (ex. 3.18)</li>
</ul></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-0540"/>Darlington, John, 314<i>n</i></li>
<li><a id="b2-li-0541"/>data, 1, 3<ul class="none">
<li><a id="b2-li-0542"/>abstract, 72, <i>see also</i> data abstraction abstract models for, 78<i>n</i></li>
<li><a id="b2-li-0543"/>algebraic specification for, 79<i>n</i></li>
<li><a id="b2-li-0544"/>compound, 69–71</li>
<li><a id="b2-li-0545"/>concrete representation of, 72</li>
<li><a id="b2-li-0546"/>functional representation of, 78–80</li>
<li><a id="b2-li-0547"/>hierarchical, 85, 93–96</li>
<li><a id="b2-li-0548"/>list-structured, 74</li>
<li><a id="b2-li-0549"/>meaning of, 78–80</li>
<li><a id="b2-li-0550"/>mutable, <i>see</i> mutable data objects numerical, 3</li>
<li><a id="b2-li-0551"/>as program, 348–350</li>
<li><a id="b2-li-0552"/>shared, 226–229</li>
<li><a id="b2-li-0553"/>symbolic, 124</li>
<li><a id="b2-li-0554"/>tagged, 152–155, 489<i>n</i></li>
</ul></li>
<li><a id="b2-li-0555"/>data abstraction, 70, 72, 147, 149, 329, <i>see also</i> metacircular evaluator for queue, 231</li>
<li><a id="b2-li-0556"/>data base<ul class="none">
<li><a id="b2-li-0557"/>data-directed programming and, 162 (ex. 2.74)</li>
<li><a id="b2-li-0558"/>Gargle personnel, 401–403</li>
<li><a id="b2-li-0559"/>indexing, 413<i>n</i>, 434</li>
<li><a id="b2-li-0560"/>Insatiable Enterprises personnel, 161 (ex. 2.74)</li>
<li><a id="b2-li-0561"/>logic programming and, 401</li>
<li><a id="b2-li-0562"/>as set of records, 139</li>
</ul></li>
<li><a id="b2-li-0563"/>data-directed programming, 148, 156–162<ul class="none">
<li><a id="b2-li-0564"/>case analysis vs., 323</li>
<li><a id="b2-li-0565"/>in metacircular evaluator, 336 (ex. 4.3)</li>
<li><a id="b2-li-0566"/>in query interpreter, 425</li>
</ul></li>
<li><a id="b2-li-0567"/>data-directed recursion, 180</li>
<li><a id="b2-li-0568"/>data paths for register machine, 450–452</li>
<li><a id="b2-li-0569"/>data-path diagram, 450</li>
<li><a id="b2-li-0570"/>data types<ul class="none">
<li><a id="b2-li-0571"/>in JavaScript, 168 (ex. 2.78)</li>
<li><a id="b2-li-0572"/>in statically typed languages, 310<i>n</i></li>
</ul></li>
<li><a id="b2-li-0573"/>deadlock, 278–279<ul class="none">
<li><a id="b2-li-0574"/>avoidance, 278</li>
<li><a id="b2-li-0575"/>recovery, 279<i>n</i></li>
</ul></li>
<li><a id="b2-li-0576"/>debug, 1</li>
<li><a id="b2-li-0577"/>declaration, <i>see also</i> internal declaration<ul class="none">
<li><a id="b2-li-0578"/>of constant (<span class="KeyTerm1"><b>const</b></span>), 5</li>
<li><a id="b2-li-0579"/>environment model of, 208</li>
<li><a id="b2-li-0580"/>of function (<span class="KeyTerm1"><b>function</b></span>), 8</li>
<li><a id="b2-li-0581"/>use of name before, 56<i>n</i>, 222</li>
<li><a id="b2-li-0582"/>of variable (<span class="KeyTerm1"><b>let</b></span>), 191</li>
</ul></li>
<li><a id="b2-li-0583"/><span class="KeyTerm1">declaration_symbol</span>, <i>333</i></li>
<li><a id="b2-li-0584"/><span class="KeyTerm1">declaration_value_expression</span>, <i>333</i></li>
<li><a id="b2-li-0585"/>declarative vs. imperative knowledge, 18, 398<ul class="none">
<li><a id="b2-li-0586"/>logic programming and, 399–400, 419</li>
<li><a id="b2-li-0587"/>nondeterministic computing and, 373<i>n</i></li>
</ul></li>
<li><a id="b2-li-0588"/><span class="KeyTerm1">decode</span>, <i>144</i></li>
<li><a id="b2-li-0589"/>decomposition of program into parts, 22</li>
<li><a id="b2-li-0590"/>deep binding, 343<i>n</i></li>
<li><a id="b2-li-0591"/><span class="KeyTerm1">deep_reverse</span>, 95 (ex. 2.27)</li>
<li><a id="b2-li-0592"/>deferred operations, 29</li>
<li><a id="b2-li-0593"/>definite integral, 51–52<ul class="none">
<li><a id="b2-li-0594"/>estimated with Monte Carlo simulation, 200 (ex. 3.5), 312 (ex. 3.82)</li>
</ul></li>
<li><a id="b2-li-0595"/>de Kleer, Johan, 376<i>n</i>, 421<i>n</i></li>
<li><a id="b2-li-0596"/>delay, in digital circuit, 241</li>
<li><a id="b2-li-0597"/>delayed argument, 306</li>
<li><a id="b2-li-0598"/>delayed evaluation, 190, 281<ul class="none">
<li><a id="b2-li-0599"/>assignment and, 288 (ex. 3.52)</li>
<li><a id="b2-li-0600"/>explicit vs. automatic, 372</li>
<li><a id="b2-li-0601"/>in lazy evaluator, 360–372</li>
<li><a id="b2-li-0602"/>normal-order evaluation and, 310</li>
<li><a id="b2-li-0603"/>printing and, 287<i>n</i></li>
<li><a id="b2-li-0604"/>streams and, 305–309</li>
</ul></li>
<li><a id="b2-li-0605"/>delayed expression, 283<ul class="none">
<li><a id="b2-li-0606"/>explicit, 306</li>
<li><a id="b2-li-0607"/>explicit vs. automatic, 372</li>
<li><a id="b2-li-0608"/>lazy evaluation and, 370</li>
<li><a id="b2-li-0609"/>memoized, 286, 293<i>n</i></li>
</ul></li>
<li><a id="b2-li-0610"/><span class="KeyTerm1">delay_it</span>, <i>366</i></li>
<li><a id="b2-li-0611"/><span class="KeyTerm1">delete_queue</span>, 232, <i>234</i></li>
<li><a id="b2-li-0612"/><span class="KeyTerm1">denom</span>, 72, <i>74</i>
<ul class="none">
<li><a id="b2-li-0613"/>axiom for, 78</li>
<li><a id="b2-li-0614"/>reducing to lowest terms, <i>77</i></li>
</ul></li>
<li><a id="b2-li-0615"/>dense polynomial, 181</li>
<li><a id="b2-li-0616"/>dependency-directed backtracking, 376<i>n</i></li>
<li><a id="b2-li-0617"/><span class="KeyTerm1">depends_on</span>, <i>433</i></li>
<li><a id="b2-li-0618"/><span class="KeyTerm1">deposit</span> message for bank account, <i>194</i></li>
<li><a id="b2-li-0619"/><span class="KeyTerm1">deposit</span>, with external serializer, <i>274</i></li>
<li><a id="b2-li-0620"/>depth-first search, 376</li>
<li><a id="b2-li-0621"/>deque, 235 (ex. 3.23)</li>
<li><a id="b2-li-0622"/><span class="KeyTerm1">deriv</span> (numerical), <i>65</i></li>
<li><a id="b2-li-0623"/><span class="KeyTerm1">deriv</span> (symbolic), <i>127</i>
<ul class="none">
<li><a id="b2-li-0624"/>data-directed, <i>161</i> (ex. 2.73)</li>
</ul></li>
<li><a id="b2-li-0625"/>derivative of a function, 64</li>
<li><a id="b2-li-0626"/>derived component, 335<ul class="none">
<li><a id="b2-li-0627"/>adding to explicit-control evaluator, 513 (ex. 5.25)</li>
</ul></li>
<li><a id="b2-li-0628"/>derived components in evaluator, 334–335<ul class="none">
<li><a id="b2-li-0629"/>function declaration, 334</li>
<li><a id="b2-li-0630"/>operator combination, 335</li>
</ul></li>
<li><a id="b2-li-0631"/>design, stratified, 123</li>
<li><a id="b2-li-0632"/>differential equation, 306, <i>see also</i> <span class="KeyTerm1">solve</span>
<ul class="none">
<li><a id="b2-li-0633"/>second-order, 308 (ex. 3.78), 308 (ex. 3.79)</li>
</ul></li>
<li><a id="b2-li-0634"/>differentiation<ul class="none">
<li><a id="b2-li-0635"/>numerical, 64</li>
<li><a id="b2-li-0636"/>rules for, 126, 130 (ex. 2.56)</li>
<li><a id="b2-li-0637"/>symbolic, 126–131, 160 (ex. 2.73)</li>
</ul></li>
<li><a id="b2-li-0638"/>diffusion, simulation of, 267</li>
<li><a id="b2-li-0639"/>digital-circuit simulation, 241–252<ul class="none">
<li><a id="b2-li-0640"/>agenda, 247–248</li>
<li><a id="b2-li-0641"/>agenda implementation, 250–252</li>
<li><a id="b2-li-0642"/>primitive function boxes, 244–245</li>
<li><a id="b2-li-0643"/>representing wires, 246–247</li>
<li><a id="b2-li-0644"/>sample simulation, 248–249</li>
</ul></li>
<li><a id="b2-li-0645"/>digital signal, 241</li>
<li><a id="b2-li-0646"/>Dijkstra, Edsger Wybe, 276<i>n</i></li>
<li><a id="b2-li-0647"/>Dinesman, Howard P., 378</li>
<li><a id="b2-li-0648"/>Diophantus's <i>Arithmetic</i>, Fermat's copy of, 44<i>n</i></li>
<li><a id="b2-li-0649"/>Dirichlet, Peter Gustav Lejeune, 198<i>n</i></li>
<li><a id="b2-li-0650"/><span class="KeyTerm1">dirichlet_stream</span>, <i>312</i></li>
<li><a id="b2-li-0651"/><span class="KeyTerm1">dirichlet_test</span>, <i>198</i></li>
<li><a id="b2-li-0652"/><span class="KeyTerm1">disjoin</span>, <i>427</i>
<ul class="none">
<li><a id="b2-li-0653"/>without delayed expression, <i>444</i> (ex. 4.68)</li>
</ul></li>
<li><a id="b2-li-0654"/>disjunction, 15, <i>see also</i> <span class="KeyTerm1">||</span> (logical disjunction)</li>
<li><a id="b2-li-0655"/>dispatching<ul class="none">
<li><a id="b2-li-0656"/>comparing different styles, 163 (ex. 2.76)</li>
<li><a id="b2-li-0657"/>on type, 156, <i>see also</i> data-directed programming</li>
</ul></li>
<li><a id="b2-li-0658"/><span class="KeyTerm1">display</span> (primitive function), 46 (ex. 1.22), 75<i>n</i></li>
<li><a id="b2-li-0659"/><span class="KeyTerm1">display</span> operation in register machine, 455</li>
<li><a id="b2-li-0660"/><span class="KeyTerm1">display_stream</span>, <i>284</i></li>
<li><a id="b2-li-0661"/><span class="KeyTerm1">distinct</span>, <i>379n</i></li>
<li><a id="b2-li-0662"/><span class="KeyTerm1">div</span> (generic), <i>165</i></li>
<li><a id="b2-li-0663"/><span class="KeyTerm1">div_complex</span>, <i>150</i></li>
<li><a id="b2-li-0664"/><span class="KeyTerm1">divides</span>, <i>43</i></li>
<li><a id="b2-li-0665"/><span class="KeyTerm1">div_interval</span>, <i>82</i>
<ul class="none">
<li><a id="b2-li-0666"/>division by zero, 82 (ex. 2.10)</li>
</ul></li>
<li><a id="b2-li-0667"/><span class="KeyTerm1">div_poly</span>, 183 (ex. 2.91)</li>
<li><a id="b2-li-0668"/><span class="KeyTerm1">div_rat</span>, <i>73</i></li>
<li><a id="b2-li-0669"/><span class="KeyTerm1">div_series</span>, 295 (ex. 3.62)</li>
<li><a id="b2-li-0670"/><span class="KeyTerm1">div_terms</span>, <i>183</i> (ex. 2.91)</li>
<li><a id="b2-li-0671"/>dog, perfectly rational behavior of, 278<i>n</i></li>
<li><a id="b2-li-0672"/><span class="KeyTerm1">dot_product</span>, <i>105</i> (ex. 2.37)</li>
<li><a id="b2-li-0673"/>Doyle, Jon, 376<i>n</i> <span class="KeyTerm1">draw_line</span>, 119</li>
<li><a id="b2-li-0674"/><span class="KeyTerm1">driver_loop</span>
<ul class="none">
<li><a id="b2-li-0675"/>for lazy evaluator, <i>365</i></li>
<li><a id="b2-li-0676"/>for metacircular evaluator, <i>347</i></li>
<li><a id="b2-li-0677"/>for nondeterministic evaluator, <i>395</i></li>
</ul></li>
<li><a id="b2-li-0678"/>driver loop<ul class="none">
<li><a id="b2-li-0679"/>in explicit-control evaluator, 514</li>
<li><a id="b2-li-0680"/>in lazy evaluator, 365</li>
<li><a id="b2-li-0681"/>in metacircular evaluator, 346</li>
<li><a id="b2-li-0682"/>in nondeterministic evaluator, 377, 394</li>
<li><a id="b2-li-0683"/>in query interpreter, 418, 424</li>
</ul></li>
<li><a id="b2-li-0684"/>duplicate parameters, 336 (ex. 4.5)</li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-0685"/><i>e</i>
<ul class="none">
<li><a id="b2-li-0686"/>as continued fraction, 62 (ex. 1.38)</li>
<li><a id="b2-li-0687"/>as solution to differential equation, 307</li>
</ul></li>
<li><a id="b2-li-0688"/><i>e<sup>x</sup></i>, power series for, 294 (ex. 3.59)</li>
<li><a id="b2-li-0689"/>Earth, measuring circumference of, 289<i>n</i></li>
<li><a id="b2-li-0690"/><span class="KeyTerm1">eceval</span>, <i>515</i></li>
<li><a id="b2-li-0691"/>ECMAScript, 2<ul class="none">
<li><a id="b2-li-0692"/><span class="KeyTerm1">Math</span> object, 10<i>n</i></li>
</ul></li>
<li><a id="b2-li-0693"/><span class="KeyTerm1">edge1_frame</span>, 117</li>
<li><a id="b2-li-0694"/><span class="KeyTerm1">edge2_frame</span>, 117</li>
<li><a id="b2-li-0695"/>Edwards, Anthony William Fairbank, 36<i>n</i></li>
<li><a id="b2-li-0696"/>efficiency, <i>see also</i> order of growth of compilation, 521<ul class="none">
<li><a id="b2-li-0697"/>of data-base access, 413<i>n</i></li>
<li><a id="b2-li-0698"/>of evaluation, 355</li>
<li><a id="b2-li-0699"/>of query processing, 414</li>
<li><a id="b2-li-0700"/>of tree-recursive process, 35</li>
</ul></li>
<li><a id="b2-li-0701"/>Eich, Brendan, 2</li>
<li><a id="b2-li-0702"/>EIEIO, 279<i>n</i></li>
<li><a id="b2-li-0703"/>eight-queens puzzle, 108 (ex. 2.42), 380 (ex. 4.42)</li>
<li><a id="b2-li-0704"/>electrical circuits, modeled with streams, 303 (ex. 3.73), 308 (ex. 3.80)</li>
<li><a id="b2-li-0705"/><span class="KeyTerm1">element_expressions</span>, <i>442</i></li>
<li><a id="b2-li-0706"/><span class="KeyTerm1"><b>else</b></span> (keyword), 57, <i>see also</i> conditional statement</li>
<li><a id="b2-li-0707"/>embedded language, language design using, 360</li>
<li><a id="b2-li-0708"/><span class="KeyTerm1">empty_arglist</span>, <i>505n</i></li>
<li><a id="b2-li-0709"/>empty list, 87, <i>see also</i> <span class="KeyTerm1"><b>null</b></span>
<ul class="none">
<li><a id="b2-li-0710"/>recognizing with <span class="KeyTerm1">is_null</span>, 87</li>
</ul></li>
<li><a id="b2-li-0711"/>empty stream, 283</li>
<li><a id="b2-li-0712"/>encapsulated name, 193<i>n</i></li>
<li><a id="b2-li-0713"/><span class="KeyTerm1">enclosing_environment</span>, <i>341</i></li>
<li><a id="b2-li-0714"/>enclosing environment, 206</li>
<li><a id="b2-li-0715"/><span class="KeyTerm1">encode</span>, <i>145</i> (ex. 2.68)</li>
<li><a id="b2-li-0716"/>end-of-list marker, 85</li>
<li><a id="b2-li-0717"/><span class="KeyTerm1">end_segment</span>, 77 (ex. 2.2), 120 (ex. 2.48)</li>
<li><a id="b2-li-0718"/><span class="KeyTerm1">end_with_linkage</span>, <i>527</i></li>
<li><a id="b2-li-0719"/>engineering vs. mathematics, 45<i>n</i></li>
<li><a id="b2-li-0720"/> <span class="KeyTerm1">entry</span>, <i>136</i></li>
<li><a id="b2-li-0721"/><span class="KeyTerm1">enumerate_interval</span>, <i>101</i></li>
<li><a id="b2-li-0722"/><span class="KeyTerm1">enumerate_tree</span>, <i>101</i></li>
<li><a id="b2-li-0723"/>enumerator, 99</li>
<li><a id="b2-li-0724"/><span class="KeyTerm1">env</span> register, 500</li>
<li><a id="b2-li-0725"/>environment, 6, 206<ul class="none">
<li><a id="b2-li-0726"/>compile-time, <i>see</i> compile-time environment</li>
<li><a id="b2-li-0727"/>as context for evaluation, 7</li>
<li><a id="b2-li-0728"/>enclosing, 206</li>
<li><a id="b2-li-0729"/>global, <i>see</i> global environment</li>
<li><a id="b2-li-0730"/>lexical scoping and, 25<i>n</i></li>
<li><a id="b2-li-0731"/>program, <i>see</i> program environment</li>
<li><a id="b2-li-0732"/>in query interpreter, 447 (ex. 4.76)</li>
<li><a id="b2-li-0733"/>renaming vs., 447 (ex. 4.76)</li>
</ul></li>
<li><a id="b2-li-0734"/>environment model of evaluation, 190, 206–222<ul class="none">
<li><a id="b2-li-0735"/>environment structure, 207 (fig. 3.1)</li>
<li><a id="b2-li-0736"/>function application, 207</li>
<li><a id="b2-li-0737"/>function-application example, 210–213</li>
<li><a id="b2-li-0738"/>internal declarations, 218–222</li>
<li><a id="b2-li-0739"/>local state, 213–218</li>
<li><a id="b2-li-0740"/>message passing, 220 (ex. 3.11)</li>
<li><a id="b2-li-0741"/>metacircular evaluator and, 320</li>
<li><a id="b2-li-0742"/>rules for evaluation, 207–210</li>
<li><a id="b2-li-0743"/>tail recursion and, 213<i>n</i></li>
</ul></li>
<li><a id="b2-li-0744"/><span class="KeyTerm1">equal</span>, 125 (ex. 2.54)</li>
<li><a id="b2-li-0745"/>equality<ul class="none">
<li><a id="b2-li-0746"/>in generic arithmetic system, 169 (ex. 2.79)</li>
<li><a id="b2-li-0747"/>of lists, 125 (ex. 2.54)</li>
<li><a id="b2-li-0748"/>of numbers, 15, 125 (ex. 2.54), 490<i>n</i></li>
<li><a id="b2-li-0749"/>referential transparency and, 203</li>
<li><a id="b2-li-0750"/>of strings, 124, 125 (ex. 2.54), 490</li>
</ul></li>
<li><a id="b2-li-0751"/><span class="KeyTerm1">equal_rat</span>, <i>73</i></li>
<li><a id="b2-li-0752"/>equation, solving, <i>see</i> half-interval method; Newton's method; <span class="KeyTerm1">solve</span></li>
<li><a id="b2-li-0753"/>Eratosthenes, 289<i>n</i></li>
<li><a id="b2-li-0754"/><span class="KeyTerm1">error</span> (primitive function), 60<i>n</i>
<ul class="none">
<li><a id="b2-li-0755"/>optional second argument, 79<i>n</i></li>
</ul></li>
<li><a id="b2-li-0756"/>error handling<ul class="none">
<li><a id="b2-li-0757"/>in compiled code, 561<i>n</i></li>
<li><a id="b2-li-0758"/>in explicit-control evaluator, 515, 518 (ex. 5.31)</li>
</ul></li>
<li><a id="b2-li-0759"/>Escher, Maurits Cornelis, 110<i>n</i></li>
<li><a id="b2-li-0760"/><span class="KeyTerm1">estimate_integral</span>, 200 (ex. 3.5)</li>
<li><a id="b2-li-0761"/><span class="KeyTerm1">estimate_pi</span>, <i>198, 199</i></li>
<li><a id="b2-li-0762"/>Euclid's Algorithm, 41–42, 450, <i>see also</i> greatest common divisor<ul class="none">
<li><a id="b2-li-0763"/>order of growth, 42</li>
<li><a id="b2-li-0764"/>for polynomials, 185<i>n</i></li>
</ul></li>
<li><a id="b2-li-0765"/>Euclid's <i>Elements</i>, 42<i>n</i></li>
<li><a id="b2-li-0766"/>Euclid's proof of infinite number of primes, 292<i>n</i></li>
<li><a id="b2-li-0767"/>Euclidean ring, 185<i>n</i></li>
<li><a id="b2-li-0768"/>Euler, Leonhard, 62 (ex. 1.38)<ul class="none">
<li><a id="b2-li-0769"/>proof of Fermat's Little Theorem, 44<i>n</i></li>
<li><a id="b2-li-0770"/>series accelerator, 297</li>
</ul></li>
<li><a id="b2-li-0771"/><span class="KeyTerm1">euler_transform</span>, <i>297</i></li>
<li><a id="b2-li-0772"/><span class="KeyTerm1">eval</span> (primitive function in JavaScript), 350</li>
<li><a id="b2-li-0773"/><span class="KeyTerm1">eval_assignment</span>, <i>327</i></li>
<li><a id="b2-li-0774"/><span class="KeyTerm1">eval_block</span>, <i>326</i></li>
<li><a id="b2-li-0775"/><span class="KeyTerm1">eval_conditional</span> (lazy), <i>365</i></li>
<li><a id="b2-li-0776"/><span class="KeyTerm1">eval_conditional</span> (metacircular), <i>325</i></li>
<li><a id="b2-li-0777"/><span class="KeyTerm1">eval_declaration</span>, <i>328</i></li>
<li><a id="b2-li-0778"/><span class="KeyTerm1">eval_dispatch</span>, <i>501</i></li>
<li><a id="b2-li-0779"/><span class="KeyTerm1">eval_return_statement</span>, <i>327</i></li>
<li><a id="b2-li-0780"/><span class="KeyTerm1">eval_sequence</span>, <i>326</i></li>
<li><a id="b2-li-0781"/><span class="KeyTerm1">evaluate</span> (lazy), 363</li>
<li><a id="b2-li-0782"/><span class="KeyTerm1">evaluate</span> (metacircular), <i>323</i>
<ul class="none">
<li><a id="b2-li-0783"/>analyzing version, <i>356</i></li>
<li><a id="b2-li-0784"/>data-directed, 336 (ex. 4.3)</li>
</ul></li>
<li><a id="b2-li-0785"/><span class="KeyTerm1">evaluate_query</span>, 418, <i>426</i></li>
<li><a id="b2-li-0786"/>evaluation<ul class="none">
<li><a id="b2-li-0787"/>applicative-order, <i>see</i> applicative-order evaluation</li>
<li><a id="b2-li-0788"/>delayed, <i>see</i> delayed evaluation environment model of, <i>see</i></li>
<li><a id="b2-li-0789"/>environment model of evaluation models of, 513</li>
<li><a id="b2-li-0790"/>normal-order, <i>see</i> normal-order evaluation</li>
<li><a id="b2-li-0791"/>of <span class="KeyTerm1">&amp;&amp;</span>, 15</li>
<li><a id="b2-li-0792"/>of <span class="KeyTerm1">||</span>, 15</li>
<li><a id="b2-li-0793"/>of conditional expression, 14</li>
<li><a id="b2-li-0794"/>of function application, 9</li>
<li><a id="b2-li-0795"/>of operator combination, 6–8</li>
<li><a id="b2-li-0796"/>of primitive expression, 7</li>
<li><a id="b2-li-0797"/>order of subexpression evaluation, <i>see</i></li>
<li><a id="b2-li-0798"/>order of evaluation</li>
<li><a id="b2-li-0799"/>substitution model of, <i>see</i> substitution model of function application</li>
</ul></li>
<li><a id="b2-li-0800"/>evaluator, 318, <i>see also</i> interpreter<ul class="none">
<li><a id="b2-li-0801"/>as abstract machine, 349</li>
<li><a id="b2-li-0802"/>metacircular, 320</li>
<li><a id="b2-li-0803"/>as universal machine, 349</li>
</ul></li>
<li><a id="b2-li-0804"/>evaluators, <i>see</i> metacircular evaluator; analyzing evaluator; lazy evaluator; nondeterministic evaluator; query interpreter; explicit-control evaluator</li>
<li><a id="b2-li-0805"/><span class="KeyTerm1">ev_application</span>, <i>505</i></li>
<li><a id="b2-li-0806"/><span class="KeyTerm1">ev_assignment</span>, <i>512</i></li>
<li><a id="b2-li-0807"/><span class="KeyTerm1">ev_block</span>, <i>512</i></li>
<li><a id="b2-li-0808"/><span class="KeyTerm1">ev_conditional</span>,  <i>502</i></li>
<li><a id="b2-li-0809"/><span class="KeyTerm1">ev_declaration</span>, <i>513</i></li>
<li><a id="b2-li-0810"/><span class="KeyTerm1">even_fibs</span>, <i>99</i>, <i>102</i></li>
<li><a id="b2-li-0811"/>event-driven simulation, 241</li>
<li><a id="b2-li-0812"/><span class="KeyTerm1">ev_function_declaration</span>, <i>513</i></li>
<li><a id="b2-li-0813"/><span class="KeyTerm1">ev_lambda</span>, <i>501</i></li>
<li><a id="b2-li-0814"/>evlis tail recursion, 506<i>n</i></li>
<li><a id="b2-li-0815"/><span class="KeyTerm1">ev_literal</span>, <i>501</i></li>
<li><a id="b2-li-0816"/><span class="KeyTerm1">ev_name</span>, <i>501</i></li>
<li><a id="b2-li-0817"/><span class="KeyTerm1">ev_operator_combination</span>, <i>505</i></li>
<li><a id="b2-li-0818"/><span class="KeyTerm1">ev_return</span>, <i>509</i></li>
<li><a id="b2-li-0819"/><span class="KeyTerm1">ev_sequence</span>, <i>503</i></li>
<li><a id="b2-li-0820"/><span class="KeyTerm1">exchange</span>, <i>272</i></li>
<li><a id="b2-li-0821"/><span class="KeyTerm1">execute</span>, 472</li>
<li><a id="b2-li-0822"/><span class="KeyTerm1">execute_application</span>
<ul class="none">
<li><a id="b2-li-0823"/>metacircular, <i>357</i></li>
<li><a id="b2-li-0824"/>nondeterministic, <i>393</i></li>
</ul></li>
<li><a id="b2-li-0825"/>execution function<ul class="none">
<li><a id="b2-li-0826"/>in analyzing evaluator, 356</li>
<li><a id="b2-li-0827"/>in nondeterministic evaluator, 386, 388</li>
<li><a id="b2-li-0828"/>in register-machine simulator, 472, 477–484</li>
</ul></li>
<li><a id="b2-li-0829"/>explicit-control evaluator for JavaScript, 499–519<ul class="none">
<li><a id="b2-li-0830"/>argument evaluation, 505–507</li>
<li><a id="b2-li-0831"/>assignments, 512</li>
<li><a id="b2-li-0832"/>blocks, 512</li>
<li><a id="b2-li-0833"/>combinations, 504–509</li>
<li><a id="b2-li-0834"/>compound functions, 508</li>
<li><a id="b2-li-0835"/>conditionals, 502</li>
<li><a id="b2-li-0836"/>controller, 500–515</li>
<li><a id="b2-li-0837"/>data paths, 500</li>
<li><a id="b2-li-0838"/>declarations, 512</li>
<li><a id="b2-li-0839"/>derived components, 513 (ex. 5.25)</li>
<li><a id="b2-li-0840"/>driver loop, 514</li>
<li><a id="b2-li-0841"/>error handling, 515, 518 (ex. 5.31)</li>
<li><a id="b2-li-0842"/>expressions with no subexpressions to evaluate, 501</li>
<li><a id="b2-li-0843"/>function application, 504–509</li>
<li><a id="b2-li-0844"/>as machine-language program, 520</li>
<li><a id="b2-li-0845"/>machine model, 515</li>
<li><a id="b2-li-0846"/>modified for compiled code, 557–559</li>
<li><a id="b2-li-0847"/>monitoring performance (stack use), 516–518</li>
<li><a id="b2-li-0848"/>normal-order evaluation, 513 (ex. 5.26)</li>
<li><a id="b2-li-0849"/>operations, 500</li>
<li><a id="b2-li-0850"/>optimizations (additional), 526 (ex. 5.33)</li>
<li><a id="b2-li-0851"/>primitive functions, 507</li>
<li><a id="b2-li-0852"/>registers, 500</li>
<li><a id="b2-li-0853"/>return statements, 508–511</li>
<li><a id="b2-li-0854"/>running, 513–516</li>
<li><a id="b2-li-0855"/>sequences of statements, 502–504</li>
<li><a id="b2-li-0856"/>stack usage, 504</li>
<li><a id="b2-li-0857"/>syntactic forms (additional), 513 (ex. 5.25)</li>
<li><a id="b2-li-0858"/>tail recursion, 511 (ex. 5.22), 509–511, 517 (ex. 5.27), 518 (ex. 5.29)</li>
<li><a id="b2-li-0859"/>as universal machine, 519</li>
</ul></li>
<li><a id="b2-li-0860"/><span class="KeyTerm1">expmod</span>, <i>44</i>, <i>47</i> (ex. 1.25), <i>47</i> (ex. 1.26)</li>
<li><a id="b2-li-0861"/>exponential growth, 37<ul class="none">
<li><a id="b2-li-0862"/>of tree-recursive Fibonacci-number computation, 33</li>
</ul></li>
<li><a id="b2-li-0863"/>exponentiation, 38–40<ul class="none">
<li><a id="b2-li-0864"/>modulo <i>n</i>, 44</li>
</ul></li>
<li><a id="b2-li-0865"/>expression, 3, <i>see also</i> compound expression; primitive expression<ul class="none">
<li><a id="b2-li-0866"/>algebraic, <i>see</i> algebraic expressions</li>
<li><a id="b2-li-0867"/>literal, 322</li>
<li><a id="b2-li-0868"/>primitive boolean, 14</li>
<li><a id="b2-li-0869"/>symbolic, 71, <i>see also</i> string(s); symbol(s)</li>
</ul></li>
<li><a id="b2-li-0870"/>expression-oriented vs. imperative programming style, 262<i>n</i></li>
<li><a id="b2-li-0871"/>expression statement, 3<ul class="none">
<li><a id="b2-li-0872"/>parsing of, 331</li>
</ul></li>
<li><a id="b2-li-0873"/><span class="KeyTerm1">expt</span>
<ul class="none">
<li><a id="b2-li-0874"/>linear iterative version, <i>38</i></li>
<li><a id="b2-li-0875"/>linear recursive version, <i>38</i></li>
<li><a id="b2-li-0876"/>register machine for, 466 (ex. 5.4)</li>
</ul></li>
<li><a id="b2-li-0877"/><span class="KeyTerm1">extend</span>, <i>444</i></li>
<li><a id="b2-li-0878"/><span class="KeyTerm1">extend_environment</span>, 341, <i>341</i></li>
<li><a id="b2-li-0879"/><span class="KeyTerm1">extend_if_consistent</span>, <i>429</i></li>
<li><a id="b2-li-0880"/><span class="KeyTerm1">extend_if_possible</span>, <i>433</i></li>
<li><a id="b2-li-0881"/><span class="KeyTerm1">external_entry</span>, <i>559</i></li>
<li><a id="b2-li-0882"/><span class="KeyTerm1">extract_labels</span>, <i>475</i>, <i>475n</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-0883"/><span class="KeyTerm1">factorial</span>
<ul class="none">
<li><a id="b2-li-0884"/>as an abstract machine, 349</li>
<li><a id="b2-li-0885"/>compilation of, 546–549</li>
<li><a id="b2-li-0886"/>environment structure in evaluating, 212 (ex. 3.9)</li>
<li><a id="b2-li-0887"/>linear iterative version, <i>28</i></li>
<li><a id="b2-li-0888"/>linear recursive version, <i>27</i></li>
<li><a id="b2-li-0889"/>register machine for (iterative), 452 (ex. 5.1), 454 (ex. 5.2)</li>
<li><a id="b2-li-0890"/>register machine for (recursive), 462–464, 465 (fig. 5.11)</li>
<li><a id="b2-li-0891"/>stack usage, compiled, 562 (ex. 5.48)</li>
<li><a id="b2-li-0892"/>stack usage, interpreted, 517 (ex. 5.27), 517 (ex. 5.28)</li>
<li><a id="b2-li-0893"/>stack usage, register machine, 486 (ex. 5.13)</li>
<li><a id="b2-li-0894"/>with assignment, <i>205</i></li>
<li><a id="b2-li-0895"/>with higher-order functions, 52 (ex. 1.31)</li>
<li><a id="b2-li-0896"/>with while loop, <i>338</i> (ex. 4.7)</li>
</ul></li>
<li><a id="b2-li-0897"/>factorial, 27, <i>see also</i> <span class="KeyTerm1">factorial</span>
<ul class="none">
<li><a id="b2-li-0898"/>without declaration or assignment, 353 (ex. 4.18)</li>
<li><a id="b2-li-0899"/>infinite stream, 292 (ex. 3.54)</li>
</ul></li>
<li><a id="b2-li-0900"/>failure, in nondeterministic computation, 374<ul class="none">
<li><a id="b2-li-0901"/>bug vs., 389</li>
<li><a id="b2-li-0902"/>searching and, 376</li>
</ul></li>
<li><a id="b2-li-0903"/>failure continuation (nondeterministic evaluator), 386, 388<ul class="none">
<li><a id="b2-li-0904"/>constructed by <span class="KeyTerm1">amb</span>, 394</li>
<li><a id="b2-li-0905"/>constructed by assignment, 390</li>
<li><a id="b2-li-0906"/>constructed by driver loop, 394</li>
</ul></li>
<li><a id="b2-li-0907"/><span class="KeyTerm1"><b>false</b></span> (keyword), 14</li>
<li><a id="b2-li-0908"/>falsiness, 339<i>n</i></li>
<li><a id="b2-li-0909"/><span class="KeyTerm1">fast_expt</span>, <i>39</i></li>
<li><a id="b2-li-0910"/><span class="KeyTerm1">fast_is_prime</span>, <i>45</i></li>
<li><a id="b2-li-0911"/>feedback loop, modeled with streams, 305</li>
<li><a id="b2-li-0912"/>Feeley, Marc, 356<i>n</i></li>
<li><a id="b2-li-0913"/>Feigenbaum, Edward, 400<i>n</i></li>
<li><a id="b2-li-0914"/>Fenichel, Robert, 494<i>n</i></li>
<li><a id="b2-li-0915"/>Fermat, Pierre de, 44<i>n</i></li>
<li><a id="b2-li-0916"/>Fermat's Little Theorem, 44<ul class="none">
<li><a id="b2-li-0917"/>alternate form, 48 (ex. 1.28)</li>
<li><a id="b2-li-0918"/>proof, 44<i>n</i></li>
</ul></li>
<li><a id="b2-li-0919"/><span class="KeyTerm1">fermat_test</span>, <i>45</i></li>
<li><a id="b2-li-0920"/>Fermat test for primality, 44–45<ul class="none">
<li><a id="b2-li-0921"/>variant of, 48 (ex. 1.28)</li>
</ul></li>
<li><a id="b2-li-0922"/><span class="KeyTerm1">fetch_assertions</span>, <i>434</i></li>
<li><a id="b2-li-0923"/><span class="KeyTerm1">fetch_rules</span>, <i>434</i></li>
<li><a id="b2-li-0924"/><span class="KeyTerm1">fib</span>
<ul class="none">
<li><a id="b2-li-0925"/>linear iterative version, <i>33</i></li>
<li><a id="b2-li-0926"/>logarithmic version, <i>40</i> (ex. 1.19)</li>
<li><a id="b2-li-0927"/>register machine for (tree-recursive), 466, 467 (fig. 5.12)</li>
<li><a id="b2-li-0928"/>stack usage, compiled, 562 (ex. 5.49)</li>
<li><a id="b2-li-0929"/>stack usage, interpreted, 518 (ex. 5.30)</li>
<li><a id="b2-li-0930"/>tree-recursive version, <i>32</i>, <i>518</i> (ex. 5.30)</li>
<li><a id="b2-li-0931"/>with memoization, <i>240</i> (ex. 3.27)</li>
</ul></li>
<li><a id="b2-li-0932"/>Fibonacci numbers, 32, <i>see also</i> <span class="KeyTerm1">fib</span>
<ul class="none">
<li><a id="b2-li-0933"/>Euclid's GCD algorithm and, 42</li>
<li><a id="b2-li-0934"/>infinite stream of, <i>see</i> <span class="KeyTerm1">fibs</span></li>
</ul></li>
<li><a id="b2-li-0935"/><span class="KeyTerm1">fibs</span> (infinite stream), <i>289</i>
<ul class="none">
<li><a id="b2-li-0936"/>implicit definition, <i>291</i></li>
</ul></li>
<li><a id="b2-li-0937"/>FIFO buffer, 231</li>
<li><a id="b2-li-0938"/><span class="KeyTerm1">filter</span>, <i>100</i></li>
<li><a id="b2-li-0939"/>filter, 53 (ex. 1.33), 100</li>
<li><a id="b2-li-0940"/><span class="KeyTerm1">filtered_accumulate</span>, 53 (ex. 1.33)</li>
<li><a id="b2-li-0941"/><span class="KeyTerm1">find_assertions</span>, <i>428</i></li>
<li><a id="b2-li-0942"/><span class="KeyTerm1">find_divisor</span>, <i>43</i></li>
<li><a id="b2-li-0943"/><span class="KeyTerm1">first_agenda_item</span>, 248, <i>252</i></li>
<li><a id="b2-li-0944"/>first-class elements in language, 67</li>
<li><a id="b2-li-0945"/> <span class="KeyTerm1">first_conjunct</span>, <i>443</i></li>
<li><a id="b2-li-0946"/><span class="KeyTerm1">first_disjunct</span>,  <i>443</i></li>
<li><a id="b2-li-0947"/><span class="KeyTerm1">first_frame</span>, <i>341</i></li>
<li><a id="b2-li-0948"/><span class="KeyTerm1">first_segment</span>, <i>250</i></li>
<li><a id="b2-li-0949"/><span class="KeyTerm1">first_statement</span>, <i>332</i></li>
<li><a id="b2-li-0950"/><span class="KeyTerm1">first_term</span>, 179, <i>182</i></li>
<li><a id="b2-li-0951"/>fixed-length code, 140</li>
<li><a id="b2-li-0952"/><span class="KeyTerm1">fixed_point</span>, <i>60</i>
<ul class="none">
<li><a id="b2-li-0953"/>as iterative improvement, 68 (ex. 1.46)</li>
</ul></li>
<li><a id="b2-li-0954"/>fixed point, 60–61<ul class="none">
<li><a id="b2-li-0955"/>computing with calculator, 61<i>n</i></li>
<li><a id="b2-li-0956"/>of cosine, 61</li>
<li><a id="b2-li-0957"/>cube root as, 64</li>
<li><a id="b2-li-0958"/>fourth root as, 68 (ex. 1.45)</li>
<li><a id="b2-li-0959"/>golden ratio as, 62 (ex. 1.35)</li>
<li><a id="b2-li-0960"/>as iterative improvement, 68 (ex. 1.46)</li>
<li><a id="b2-li-0961"/>in Newton's method, 64</li>
<li><a id="b2-li-0962"/><i>n</i>th root as, 68 (ex. 1.45)</li>
<li><a id="b2-li-0963"/>square root as, 61, 63, 66</li>
<li><a id="b2-li-0964"/>of transformed function, 66</li>
<li><a id="b2-li-0965"/>unification and, 432<i>n</i></li>
</ul></li>
<li><a id="b2-li-0966"/><span class="KeyTerm1">fixed_point_of_transform</span>, <i>66</i></li>
<li><a id="b2-li-0967"/><span class="KeyTerm1">flag</span> register, 472</li>
<li><a id="b2-li-0968"/><span class="KeyTerm1">flatmap</span>, <i>107</i></li>
<li><a id="b2-li-0969"/><span class="KeyTerm1">flatten_stream</span>, <i>436</i></li>
<li><a id="b2-li-0970"/><span class="KeyTerm1">flip_horiz</span>, 112, 122 (ex. 2.50)</li>
<li><a id="b2-li-0971"/><span class="KeyTerm1">flipped_pairs</span>, <i>114</i>, <i>117</i>, <i>117n</i></li>
<li><a id="b2-li-0972"/><span class="KeyTerm1">flip_vert</span>, 112, <i>121</i></li>
<li><a id="b2-li-0973"/>Floyd, Robert, 376<i>n</i></li>
<li><a id="b2-li-0974"/><span class="KeyTerm1">fold_left</span>, <i>106</i> (ex. 2.38)</li>
<li><a id="b2-li-0975"/><span class="KeyTerm1">fold_right</span>, 105 (ex. 2.38)</li>
<li><a id="b2-li-0976"/>Forbus, Kenneth D., 376<i>n</i></li>
<li><a id="b2-li-0977"/><span class="KeyTerm1">force_it</span>, <i>366</i>
<ul class="none">
<li><a id="b2-li-0978"/>memoized version, <i>367</i></li>
</ul></li>
<li><a id="b2-li-0979"/>forcing<ul class="none">
<li><a id="b2-li-0980"/>tail of stream, 283</li>
<li><a id="b2-li-0981"/>of thunk, 363</li>
</ul></li>
<li><a id="b2-li-0982"/><span class="KeyTerm1">for_each</span>, 92 (ex. 2.23), <i>369</i> (ex. 4.28)</li>
<li><a id="b2-li-0983"/><span class="KeyTerm1">for_each_except</span>, <i>260</i></li>
<li><a id="b2-li-0984"/><span class="KeyTerm1">forget_value</span>, 255, <i>261</i></li>
<li><a id="b2-li-0985"/>formal parameters, <i>see</i> parameters Fortran, 103<i>n</i>
<ul class="none">
<li><a id="b2-li-0986"/>inventor of, 314<i>n</i></li>
</ul></li>
<li><a id="b2-li-0987"/>forwarding address, 495</li>
<li><a id="b2-li-0988"/>fourth root, as fixed point, 68 (ex. 1.45)</li>
<li><a id="b2-li-0989"/>fraction, <i>see</i> rational number(s)</li>
<li><a id="b2-li-0990"/>frame (environment model), 206<ul class="none">
<li><a id="b2-li-0991"/>as repository of local state, 213–218</li>
<li><a id="b2-li-0992"/>global, 206</li>
</ul></li>
<li><a id="b2-li-0993"/>frame (picture language), 110, 117<ul class="none">
<li><a id="b2-li-0994"/>coordinate map, 117</li>
</ul></li>
<li><a id="b2-li-0995"/>frame (query interpreter), 412, <i>see also</i> pattern matching; unification<ul class="none">
<li><a id="b2-li-0996"/>representation, 444</li>
</ul></li>
<li><a id="b2-li-0997"/><span class="KeyTerm1">frame_coord_map</span>, <i>118</i></li>
<li><a id="b2-li-0998"/>framed-stack discipline, 504<i>n</i></li>
<li><a id="b2-li-0999"/><span class="KeyTerm1">frame_symbols</span>, <i>341</i></li>
<li><a id="b2-li-1000"/><span class="KeyTerm1">frame_values</span>, <i>341</i></li>
<li><a id="b2-li-1001"/><span class="KeyTerm1">free</span> register, 491, 495</li>
<li><a id="b2-li-1002"/>free list, 491<i>n</i></li>
<li><a id="b2-li-1003"/>free name, 23<ul class="none">
<li><a id="b2-li-1004"/>capturing, 24</li>
<li><a id="b2-li-1005"/>in internal declaration, 25</li>
</ul></li>
<li><a id="b2-li-1006"/>Friedman, Daniel P., 286<i>n</i>, 319<i>n</i></li>
<li><a id="b2-li-1007"/><span class="KeyTerm1">fringe</span>, 95 (ex. 2.28)<ul class="none">
<li><a id="b2-li-1008"/>as a tree enumeration, 101<i>n</i></li>
</ul></li>
<li><a id="b2-li-1009"/><span class="KeyTerm1">front_ptr</span>, <i>232</i></li>
<li><a id="b2-li-1010"/><span class="KeyTerm1">front_queue</span>, 231, <i>233</i></li>
<li><a id="b2-li-1011"/>full-adder, 243<ul class="none">
<li><a id="b2-li-1012"/><span class="KeyTerm1">full_adder</span>, <i>243</i></li>
</ul></li>
<li><a id="b2-li-1013"/><span class="KeyTerm1">fun</span> register, 500</li>
<li><a id="b2-li-1014"/><span class="KeyTerm1"><b>function</b></span> (keyword), 8, <i>see also</i> function declaration</li>
<li><a id="b2-li-1015"/>function (JavaScript), 3, 8<ul class="none">
<li><a id="b2-li-1016"/>anonymous, 54</li>
<li><a id="b2-li-1017"/>as argument, 49–53</li>
<li><a id="b2-li-1018"/>as black box, 22–23</li>
<li><a id="b2-li-1019"/>body of, 9</li>
<li><a id="b2-li-1020"/>compound, 8</li>
<li><a id="b2-li-1021"/>creating with function declaration, 8</li>
<li><a id="b2-li-1022"/>creating with lambda expression, 54, 208, 210</li>
<li><a id="b2-li-1023"/>declaration of, 8–9</li>
<li><a id="b2-li-1024"/>first-class, 67</li>
<li><a id="b2-li-1025"/>as general method, 58–63</li>
<li><a id="b2-li-1026"/>generic, 143, 148</li>
<li><a id="b2-li-1027"/>higher-order, <i>see</i> higher-order function</li>
<li><a id="b2-li-1028"/>mathematical function vs., 18</li>
<li><a id="b2-li-1029"/>memoized, 240 (ex. 3.27)</li>
<li><a id="b2-li-1030"/>monitored, 196 (ex. 3.2)</li>
<li><a id="b2-li-1031"/>name of, 9</li>
<li><a id="b2-li-1032"/>naming (with function declaration), 8</li>
<li><a id="b2-li-1033"/>parameters of, 9</li>
<li><a id="b2-li-1034"/>as pattern for local evolution of a process, 26</li>
<li><a id="b2-li-1035"/>primitive, 10</li>
<li><a id="b2-li-1036"/>as returned value, 63–68</li>
<li><a id="b2-li-1037"/>returning multiple values, 475<i>n</i></li>
<li><a id="b2-li-1038"/>scope of parameters, 24</li>
<li><a id="b2-li-1039"/>syntactic form vs., 362 (ex. 4.24)</li>
</ul></li>
<li><a id="b2-li-1040"/>with any number of arguments, 276</li>
<li><a id="b2-li-1041"/>function (mathematical)<ul class="none">
<li><a id="b2-li-1042"/>↦ notation for, 61<i>n</i></li>
<li><a id="b2-li-1043"/>Ackermann's, 31 (ex. 1.10)</li>
<li><a id="b2-li-1044"/>composition of, 67 (ex. 1.42)</li>
<li><a id="b2-li-1045"/>derivative of, 64</li>
<li><a id="b2-li-1046"/>fixed point of, 60–61</li>
<li><a id="b2-li-1047"/>JavaScript function vs., 18</li>
<li><a id="b2-li-1048"/>rational, 184–188</li>
<li><a id="b2-li-1049"/>repeated application of, 68 (ex. 1.43)</li>
<li><a id="b2-li-1050"/>smoothing of, 68 (ex. 1.44)</li>
</ul></li>
<li><a id="b2-li-1051"/>functional abstraction, 22</li>
<li><a id="b2-li-1052"/>functional programming, 200, 311–315<ul class="none">
<li><a id="b2-li-1053"/>concurrency and, 314</li>
<li><a id="b2-li-1054"/>functional programming languages, 314</li>
<li><a id="b2-li-1055"/>time and, 313–315</li>
</ul></li>
<li><a id="b2-li-1056"/>functional representation of data, 78–80<ul class="none">
<li><a id="b2-li-1057"/>mutable data, 229–230</li>
</ul></li>
<li><a id="b2-li-1058"/>function application<ul class="none">
<li><a id="b2-li-1059"/>compound expression as function expression of, 17 (ex. 1.4)</li>
<li><a id="b2-li-1060"/>environment model of, 207, 210–213</li>
<li><a id="b2-li-1061"/>evaluation of, 9</li>
<li><a id="b2-li-1062"/>as function expression of application, 63<i>n</i></li>
<li><a id="b2-li-1063"/>parsing of, 331</li>
<li><a id="b2-li-1064"/>substitution model of, <i>see</i> substitution</li>
<li><a id="b2-li-1065"/>model of function application</li>
</ul></li>
<li><a id="b2-li-1066"/><span class="KeyTerm1">function_body</span>, <i>340</i></li>
<li><a id="b2-li-1067"/>function box, in digital circuit, 241</li>
<li><a id="b2-li-1068"/>function declaration, 8<ul class="none">
<li><a id="b2-li-1069"/>as derived component, 334</li>
<li><a id="b2-li-1070"/>hoisting of, 54<i>n</i>, 352 (ex. 4.17)</li>
<li><a id="b2-li-1071"/>lambda expression vs., 54</li>
<li><a id="b2-li-1072"/>parsing of, 334</li>
</ul></li>
<li><a id="b2-li-1073"/><span class="KeyTerm1">function_declaration_body</span>,  334</li>
<li><a id="b2-li-1074"/><span class="KeyTerm1">function_declaration_name</span>, 334</li>
<li><a id="b2-li-1075"/><span class="KeyTerm1">function_declaration_parameters</span>, 334</li>
<li><a id="b2-li-1076"/><span class="KeyTerm1">function_decl_to_constant_decl</span>, <i>334</i></li>
<li><a id="b2-li-1077"/><span class="KeyTerm1">function_environment</span>, <i>340</i></li>
<li><a id="b2-li-1078"/><span class="KeyTerm1">function_expression</span>, 331</li>
<li><a id="b2-li-1079"/>function expression, 9<ul class="none">
<li><a id="b2-li-1080"/>application as, 63<i>n</i></li>
<li><a id="b2-li-1081"/>compound expression as, 17 (ex. 1.4)</li>
<li><a id="b2-li-1082"/>lambda expression as, 55</li>
</ul></li>
<li><a id="b2-li-1083"/><span class="KeyTerm1">function_parameters</span>, <i>340</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-1084"/>Gabriel, Richard P., 353<i>n</i></li>
<li><a id="b2-li-1085"/>garbage collection, 493–498<ul class="none">
<li><a id="b2-li-1086"/>memoization and, 366<i>n</i></li>
<li><a id="b2-li-1087"/>mutation and, 223<i>n</i></li>
<li><a id="b2-li-1088"/>tail recursion and, 541<i>n</i></li>
</ul></li>
<li><a id="b2-li-1089"/>garbage collector<ul class="none">
<li><a id="b2-li-1090"/>compacting, 494<i>n</i></li>
<li><a id="b2-li-1091"/>mark-sweep, 494<i>n</i></li>
<li><a id="b2-li-1092"/>stop-and-copy, 493–498</li>
</ul></li>
<li><a id="b2-li-1093"/>Gargle, 378, 401</li>
<li><a id="b2-li-1094"/>GCD, <i>see</i> greatest common divisor</li>
<li><a id="b2-li-1095"/><span class="KeyTerm1">gcd</span>, <i>42</i>
<ul class="none">
<li><a id="b2-li-1096"/>register machine for, 450–452, 469</li>
</ul></li>
<li><a id="b2-li-1097"/><span class="KeyTerm1">gcd_machine</span>, <i>469</i></li>
<li><a id="b2-li-1098"/><span class="KeyTerm1">gcd_terms</span>, <i>186</i></li>
<li><a id="b2-li-1099"/>general-purpose computer, as universal machine, 519</li>
<li><a id="b2-li-1100"/><span class="KeyTerm1">generate_huffman_tree</span>, <i>146</i> (ex. 2.69)</li>
<li><a id="b2-li-1101"/>generating sentences, 385 (ex. 4.47)</li>
<li><a id="b2-li-1102"/>generic arithmetic operations, 164–169<ul class="none">
<li><a id="b2-li-1103"/>structure of system, 164 (fig. 2.23)</li>
</ul></li>
<li><a id="b2-li-1104"/>generic function, 143, 148<ul class="none">
<li><a id="b2-li-1105"/>generic selector, 154, 155</li>
</ul></li>
<li><a id="b2-li-1106"/>generic operation, 71</li>
<li><a id="b2-li-1107"/>generic types, <i>see</i> polymorphic types</li>
<li><a id="b2-li-1108"/>Genesis, 411 (ex. 4.61)</li>
<li><a id="b2-li-1109"/><span class="KeyTerm1">get</span>, 157, <i>239</i></li>
<li><a id="b2-li-1110"/><span class="KeyTerm1">get_contents</span>, <i>471</i></li>
<li><a id="b2-li-1111"/><span class="KeyTerm1">get_current_environment</span>, <i>514</i></li>
<li><a id="b2-li-1112"/><span class="KeyTerm1">get_register</span>, <i>472</i></li>
<li><a id="b2-li-1113"/><span class="KeyTerm1">get_register_contents</span>, 469, <i>472</i></li>
<li><a id="b2-li-1114"/><span class="KeyTerm1">get_signal</span>, 244, <i>247</i></li>
<li><a id="b2-li-1115"/><span class="KeyTerm1">get_time</span> (primitive function), 46 (ex. 1.22)</li>
<li><a id="b2-li-1116"/><span class="KeyTerm1">get_value</span>, 255, <i>261</i></li>
<li><a id="b2-li-1117"/>global environment, 207<ul class="none">
<li><a id="b2-li-1118"/>in metacircular evaluator, 344</li>
</ul></li>
<li><a id="b2-li-1119"/>global frame, 206</li>
<li><a id="b2-li-1120"/>Goguen, Joseph, 78<i>n</i></li>
<li><a id="b2-li-1121"/>golden ratio, 33<ul class="none">
<li><a id="b2-li-1122"/>as continued fraction, 62 (ex. 1.37)</li>
<li><a id="b2-li-1123"/>as fixed point, 62 (ex. 1.35)</li>
</ul></li>
<li><a id="b2-li-1124"/>good parts of JavaScript, 339<i>n</i></li>
<li><a id="b2-li-1125"/> Gordon, Michael, 310<i>n</i></li>
<li><a id="b2-li-1126"/><span class="KeyTerm1">go_to</span> (in register machine), 452<ul class="none">
<li><a id="b2-li-1127"/>destination in register, 459</li>
<li><a id="b2-li-1128"/>instruction constructor, <i>480</i></li>
<li><a id="b2-li-1129"/>simulating, 480</li>
</ul></li>
<li><a id="b2-li-1130"/><span class="KeyTerm1">go_to_dest</span>, <i>480</i></li>
<li><a id="b2-li-1131"/>grammar, 381</li>
<li><a id="b2-li-1132"/>graphics, <i>see</i> picture language</li>
<li><a id="b2-li-1133"/>Gray, Jim, 279<i>n</i></li>
<li><a id="b2-li-1134"/>greatest common divisor, 41–42, <i>see also</i> <span class="KeyTerm1">gcd</span>
<ul class="none">
<li><a id="b2-li-1135"/>generic, 186 (ex. 2.94)</li>
<li><a id="b2-li-1136"/>of polynomials, 185</li>
<li><a id="b2-li-1137"/>used to estimate <i>π</i>, 198</li>
<li><a id="b2-li-1138"/>used in rational-number arithmetic, 75</li>
<li><a id="b2-li-1139"/>Green, Cordell, 399<i>n</i></li>
</ul></li>
<li><a id="b2-li-1140"/>Guttag, John Vogel, 79<i>n</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-1141"/>half-adder, 242<ul class="none">
<li><a id="b2-li-1142"/><span class="KeyTerm1">half_adder</span>, <i>243</i></li>
<li><a id="b2-li-1143"/>simulation of, 248–249</li>
</ul></li>
<li><a id="b2-li-1144"/>half-interval method, 58–60<ul class="none">
<li><a id="b2-li-1145"/><span class="KeyTerm1">half_interval_method</span>, 60</li>
<li><a id="b2-li-1146"/>Newton's method vs., 64<i>n</i></li>
</ul></li>
<li><a id="b2-li-1147"/>halting problem, 350 (ex. 4.15)</li>
<li><a id="b2-li-1148"/>Halting Theorem, 351<i>n</i></li>
<li><a id="b2-li-1149"/>Hamming, Richard Wesley, 142<i>n</i>, 292 (ex. 3.56)</li>
<li><a id="b2-li-1150"/>Hanson, Christopher P., 541<i>n</i></li>
<li><a id="b2-li-1151"/>Hardy, Godfrey Harold, 292<i>n</i>, 302<i>n</i></li>
<li><a id="b2-li-1152"/>Haskell, 90 (ex. 2.20), 310<i>n</i></li>
<li><a id="b2-li-1153"/>Hassle, 362<i>n</i></li>
<li><a id="b2-li-1154"/><span class="KeyTerm1">has_value</span>, 255, <i>261</i></li>
<li><a id="b2-li-1155"/>Havender, J., 279<i>n</i></li>
<li><a id="b2-li-1156"/>Haynes, Christopher T., 319<i>n</i></li>
<li><a id="b2-li-1157"/><span class="KeyTerm1">head</span> (primitive function), 73<ul class="none">
<li><a id="b2-li-1158"/>axiom for, 79</li>
<li><a id="b2-li-1159"/>functional implementation of, <i>79</i>, <i>80</i> (ex. 2.4), <i>229, 230</i>, <i>371</i></li>
<li><a id="b2-li-1160"/>implemented with vectors, 490</li>
<li><a id="b2-li-1161"/>as list operation, 86</li>
</ul></li>
<li><a id="b2-li-1162"/>headed list, 235, 250<i>n</i></li>
<li><a id="b2-li-1163"/>Henderson, Peter, 110<i>n</i>, 290<i>n</i>, 314<i>n</i>
<ul class="none">
<li><a id="b2-li-1164"/>Henderson diagram, 290</li>
</ul></li>
<li><a id="b2-li-1165"/>Henz, Martin, children of, 124</li>
<li><a id="b2-li-1166"/>Heraclitus, 189</li>
<li><a id="b2-li-1167"/>Heron of Alexandria, 19<i>n</i></li>
<li><a id="b2-li-1168"/>Hewitt, Carl Eddie, 30<i>n</i>, 376<i>n</i>, 399<i>n</i>, 494<i>n</i></li>
<li><a id="b2-li-1169"/>hiding principle, 193<i>n</i></li>
<li><a id="b2-li-1170"/>hierarchical data structures, 85, 93–96</li>
<li><a id="b2-li-1171"/>hierarchy of types, 172–176<ul class="none">
<li><a id="b2-li-1172"/>inadequacy of, 173</li>
<li><a id="b2-li-1173"/>in symbolic algebra, 184</li>
</ul></li>
<li><a id="b2-li-1174"/>higher-order functions, 49<ul class="none">
<li><a id="b2-li-1175"/>function as argument, 49–53</li>
<li><a id="b2-li-1176"/>function as general method, 58–63</li>
<li><a id="b2-li-1177"/>function as returned value, 63–68</li>
<li><a id="b2-li-1178"/>in metacircular evaluator, 325<i>n</i></li>
<li><a id="b2-li-1179"/>static typing and, 310<i>n</i></li>
</ul></li>
<li><a id="b2-li-1180"/>high-level language, machine language vs., 318</li>
<li><a id="b2-li-1181"/>Hilfinger, Paul, 138<i>n</i></li>
<li><a id="b2-li-1182"/>Hoare, Charles Antony Richard, 78<i>n</i></li>
<li><a id="b2-li-1183"/>Hodges, Andrew, 349<i>n</i></li>
<li><a id="b2-li-1184"/>Hofstadter, Douglas R., 350<i>n</i></li>
<li><a id="b2-li-1185"/>hoisting of function declarations, 54<i>n</i>, 352 (ex. 4.17)</li>
<li><a id="b2-li-1186"/>Horner, W. G., 104<i>n</i></li>
<li><a id="b2-li-1187"/>Horner's rule, 103 (ex. 2.34)</li>
<li><a id="b2-li-1188"/>“how to” vs. “what is” description, <i>see</i> imperative vs. declarative knowledge</li>
<li><a id="b2-li-1189"/>Huffman, David, 141</li>
<li><a id="b2-li-1190"/>Huffman code, 140–147<ul class="none">
<li><a id="b2-li-1191"/>optimality of, 142</li>
<li><a id="b2-li-1192"/>order of growth of encoding, 147 (ex. 2.72)</li>
</ul></li>
<li><a id="b2-li-1193"/>Hughes, R. J. M., 371<i>n</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-1194"/><span class="KeyTerm1">identity</span>, <i>50</i></li>
<li><a id="b2-li-1195"/><span class="KeyTerm1"><b>if</b></span> (keyword), 57, <i>see also</i> conditional statement</li>
<li><a id="b2-li-1196"/><span class="KeyTerm1">imag_part</span>
<ul class="none">
<li><a id="b2-li-1197"/>data-directed, <i>160</i></li>
<li><a id="b2-li-1198"/>polar representation, <i>152</i></li>
<li><a id="b2-li-1199"/>rectangular representation, <i>151</i></li>
<li><a id="b2-li-1200"/>with tagged data, <i>154</i></li>
</ul></li>
<li><a id="b2-li-1201"/><span class="KeyTerm1">imag_part_polar</span>, <i>154</i></li>
<li><a id="b2-li-1202"/><span class="KeyTerm1">imag_part_rectangular</span>, <i>153</i></li>
<li><a id="b2-li-1203"/>immediately invoked lambda expression, 217 (ex. 3.10)</li>
<li><a id="b2-li-1204"/>imperative programming, 204</li>
<li><a id="b2-li-1205"/>imperative vs. declarative knowledge, 18, 398<ul class="none">
<li><a id="b2-li-1206"/>logic programming and, 399–400, 419</li>
<li><a id="b2-li-1207"/>nondeterministic computing and, 373<i>n</i></li>
</ul></li>
<li><a id="b2-li-1208"/>imperative vs. expression-oriented programming style, 262<i>n</i></li>
<li><a id="b2-li-1209"/><span class="KeyTerm1">inc</span>, <i>50</i></li>
<li><a id="b2-li-1210"/>incremental development of programs, 6</li>
<li><a id="b2-li-1211"/>indentation, 335 (ex. 4.2)</li>
<li><a id="b2-li-1212"/>indeterminate of a polynomial, 177</li>
<li><a id="b2-li-1213"/>indexing a data base, 413<i>n</i>, 434</li>
<li><a id="b2-li-1214"/>inference, method of, 419</li>
<li><a id="b2-li-1215"/>infinite series, 432<i>n</i></li>
<li><a id="b2-li-1216"/>infinite stream(s), 288–295<ul class="none">
<li><a id="b2-li-1217"/>merging, 293 (ex. 3.56), 300, 302 (ex. 3.70), 315</li>
<li><a id="b2-li-1218"/>merging as a relation, 315<i>n</i></li>
<li><a id="b2-li-1219"/>of factorials, 292 (ex. 3.54)</li>
<li><a id="b2-li-1220"/>of Fibonacci numbers, <i>see</i> <span class="KeyTerm1">fibs</span></li>
<li><a id="b2-li-1221"/>of integers, <i>see</i> <span class="KeyTerm1">integers</span></li>
<li><a id="b2-li-1222"/>of pairs, 299–302</li>
<li><a id="b2-li-1223"/>of prime numbers, <i>see</i> <span class="KeyTerm1">primes</span></li>
<li><a id="b2-li-1224"/>of random numbers, 312</li>
<li><a id="b2-li-1225"/>representing power series, 294 (ex. 3.59)</li>
<li><a id="b2-li-1226"/>to model signals, 302–305</li>
<li><a id="b2-li-1227"/>to sum a series, 296</li>
</ul></li>
<li><a id="b2-li-1228"/>infix notation, 4<ul class="none">
<li><a id="b2-li-1229"/>prefix notation vs., 131 (ex. 2.58)</li>
</ul></li>
<li><a id="b2-li-1230"/>infix operator, 4</li>
<li><a id="b2-li-1231"/><span class="KeyTerm1">inform_about_no_value</span>, <i>256</i></li>
<li><a id="b2-li-1232"/><span class="KeyTerm1">inform_about_value</span>, <i>256</i></li>
<li><a id="b2-li-1233"/>information retrieval, <i>see</i> data base</li>
<li><a id="b2-li-1234"/>Ingerman, Peter, 363<i>n</i></li>
<li><a id="b2-li-1235"/><span class="KeyTerm1">initialize_stack</span> operation in register machine, 472, 484</li>
<li><a id="b2-li-1236"/><span class="KeyTerm1">insert</span>
<ul class="none">
<li><a id="b2-li-1237"/>in one-dimensional table, <i>237</i></li>
<li><a id="b2-li-1238"/>in two-dimensional table, <i>238</i></li>
</ul></li>
<li><a id="b2-li-1239"/><span class="KeyTerm1">insert_queue</span>, 231, <i>233</i></li>
<li><a id="b2-li-1240"/><span class="KeyTerm1">install_complex_package</span>, <i>167</i></li>
<li><a id="b2-li-1241"/><span class="KeyTerm1">install_javascript_number_package</span>, <i>165</i></li>
<li><a id="b2-li-1242"/><span class="KeyTerm1">install_polar_package</span>, <i>159</i></li>
<li><a id="b2-li-1243"/><span class="KeyTerm1">install_polynomial_package</span>, <i>178</i></li>
<li><a id="b2-li-1244"/><span class="KeyTerm1">install_rational_package</span>, <i>166</i></li>
<li><a id="b2-li-1245"/><span class="KeyTerm1">install_rectangular_package</span>, <i>158</i></li>
<li><a id="b2-li-1246"/>instantiate a pattern, 404</li>
<li><a id="b2-li-1247"/><span class="KeyTerm1">instantiate_expression</span>, 425, <i>439</i></li>
<li><a id="b2-li-1248"/><span class="KeyTerm1">instantiate_term</span>, <i>440</i></li>
<li><a id="b2-li-1249"/><span class="KeyTerm1">inst_controller_instruction</span>, <i>476</i></li>
<li><a id="b2-li-1250"/><span class="KeyTerm1">inst_execution_fun</span>, <i>476</i></li>
<li><a id="b2-li-1251"/>instruction counting, 486 (ex. 5.14)</li>
<li><a id="b2-li-1252"/>instruction execution function, 472</li>
<li><a id="b2-li-1253"/><span class="KeyTerm1">instructions</span>, <i>543</i></li>
<li><a id="b2-li-1254"/>instruction sequence, 524–526, 543–546</li>
<li><a id="b2-li-1255"/>instruction tracing, 486 (ex. 5.15)</li>
<li><a id="b2-li-1256"/>integer(s), 3<i>n</i></li>
<li><a id="b2-li-1257"/>integerizing factor, 187</li>
<li><a id="b2-li-1258"/><span class="KeyTerm1">integers</span> (infinite stream), <i>288</i>
<ul class="none">
<li><a id="b2-li-1259"/>implicit definition, <i>290</i></li>
<li><a id="b2-li-1260"/>lazy-list version, <i>371</i></li>
</ul></li>
<li><a id="b2-li-1261"/><span class="KeyTerm1">integers_starting_from</span>, <i>288</i></li>
<li><a id="b2-li-1262"/><span class="KeyTerm1">integral</span>, <i>51</i>, <i>303</i>, <i>307</i> (ex. 3.77)<ul class="none">
<li><a id="b2-li-1263"/>with delayed argument, <i>307</i></li>
<li><a id="b2-li-1264"/>with lambda expression, <i>54</i></li>
<li><a id="b2-li-1265"/>lazy-list version, <i>372</i></li>
<li><a id="b2-li-1266"/>need for delayed evaluation, 305</li>
</ul></li>
<li><a id="b2-li-1267"/>integral, <i>see also</i> definite integral; Monte Carlo integration<ul class="none">
<li><a id="b2-li-1268"/>of a power series, 294 (ex. 3.59)</li>
</ul></li>
<li><a id="b2-li-1269"/>integrated-circuit implementation of Scheme, 499</li>
<li><a id="b2-li-1270"/><span class="KeyTerm1">integrate_series</span>, 294 (ex. 3.59)</li>
<li><a id="b2-li-1271"/>integrator, for signals, 303</li>
<li><a id="b2-li-1272"/><span class="KeyTerm1">interleave</span>, <i>301</i></li>
<li><a id="b2-li-1273"/><span class="KeyTerm1">interleave_delayed</span>, <i>435</i></li>
<li><a id="b2-li-1274"/>internal declaration, 25–26<ul class="none">
<li><a id="b2-li-1275"/>in environment model, 218–222</li>
<li><a id="b2-li-1276"/>free name in, 25</li>
<li><a id="b2-li-1277"/>names distinct from parameters, 336 (ex. 4.5)</li>
<li><a id="b2-li-1278"/>in nondeterministic evaluator, 391<i>n</i></li>
<li><a id="b2-li-1279"/>position of, 26<i>n</i></li>
<li><a id="b2-li-1280"/>restrictions on, 354</li>
<li><a id="b2-li-1281"/>scanning out, 352</li>
<li><a id="b2-li-1282"/>scope of name, 351–355</li>
</ul></li>
<li><a id="b2-li-1283"/>Internet “Worm”, 561<i>n</i></li>
<li><a id="b2-li-1284"/>interning strings, 490</li>
<li><a id="b2-li-1285"/>interpreter, 2, <i>see also</i> evaluator<ul class="none">
<li><a id="b2-li-1286"/>compiler vs., 520–521, 561</li>
<li><a id="b2-li-1287"/>read-evaluate-print loop, 5</li>
</ul></li>
<li><a id="b2-li-1288"/><span class="KeyTerm1">intersection_set</span>, 131<ul class="none">
<li><a id="b2-li-1289"/>binary-tree representation, 138 (ex. 2.65)</li>
<li><a id="b2-li-1290"/>ordered-list representation, <i>134</i></li>
<li><a id="b2-li-1291"/>unordered-list representation, <i>132</i></li>
</ul></li>
<li><a id="b2-li-1292"/>interval arithmetic, 81–84</li>
<li><a id="b2-li-1293"/>invariant quantity of an iterative process, 40 (ex. 1.16)</li>
<li><a id="b2-li-1294"/>inverter, 241<ul class="none">
<li><a id="b2-li-1295"/><span class="KeyTerm1">inverter</span>, <i>244</i></li>
</ul></li>
<li><a id="b2-li-1296"/><span class="KeyTerm1">is_</span>, in predicate names, 20<i>n</i></li>
<li><a id="b2-li-1297"/><span class="KeyTerm1">is_amb</span>, <i>387</i></li>
<li><a id="b2-li-1298"/><span class="KeyTerm1">is_application</span>, 331</li>
<li><a id="b2-li-1299"/><span class="KeyTerm1">is_assertion</span>, <i>443</i></li>
<li><a id="b2-li-1300"/><span class="KeyTerm1">is_assignment</span>, 333</li>
<li><a id="b2-li-1301"/><span class="KeyTerm1">is_block</span>, 333</li>
<li><a id="b2-li-1302"/><span class="KeyTerm1">is_boolean</span>, 339<i>n</i></li>
<li><a id="b2-li-1303"/><span class="KeyTerm1">is_compiled_function</span>, <i>532n</i></li>
<li><a id="b2-li-1304"/><span class="KeyTerm1">is_compound_function</span>, <i>340</i></li>
<li><a id="b2-li-1305"/><span class="KeyTerm1">is_conditional</span>, 331</li>
<li><a id="b2-li-1306"/><span class="KeyTerm1">is_constant_exp</span>, <i>482</i></li>
<li><a id="b2-li-1307"/><span class="KeyTerm1">is_declaration</span>, <i>334</i></li>
<li><a id="b2-li-1308"/><span class="KeyTerm1">is_divisible</span>, <i>288</i></li>
<li><a id="b2-li-1309"/><span class="KeyTerm1">is_element_of_set</span>, 131<ul class="none">
<li><a id="b2-li-1310"/>binary-tree representation, <i>136</i></li>
<li><a id="b2-li-1311"/>ordered-list representation, <i>134</i></li>
<li><a id="b2-li-1312"/>unordered-list representation, <i>132</i></li>
</ul></li>
<li><a id="b2-li-1313"/><span class="KeyTerm1">is_empty_agenda</span>, 248, <i>250</i></li>
<li><a id="b2-li-1314"/><span class="KeyTerm1">is_empty_conjunction</span>, <i>443</i></li>
<li><a id="b2-li-1315"/><span class="KeyTerm1">is_empty_disjunction</span>,  <i>443</i></li>
<li><a id="b2-li-1316"/><span class="KeyTerm1">is_empty_queue</span>, 231, <i>232</i></li>
<li><a id="b2-li-1317"/><span class="KeyTerm1">is_empty_sequence</span>, <i>332</i></li>
<li><a id="b2-li-1318"/><span class="KeyTerm1">is_empty_termlist</span>, 179, <i>182</i></li>
<li><a id="b2-li-1319"/><span class="KeyTerm1">is_equal</span> (generic predicate), 169 (ex. 2.79)</li>
<li><a id="b2-li-1320"/><span class="KeyTerm1">is_equal_to_zero</span> (generic), 169 (ex. 2.80)<ul class="none">
<li><a id="b2-li-1321"/>for polynomials, 182 (ex. 2.87)</li>
</ul></li>
<li><a id="b2-li-1322"/><span class="KeyTerm1">is_even</span>, <i>39</i></li>
<li><a id="b2-li-1323"/><span class="KeyTerm1">is_falsy</span>, <i>340</i>
<ul class="none">
<li><a id="b2-li-1324"/>full JavaScript version, <i>339n</i></li>
<li><a id="b2-li-1325"/>why used in explicit-control evaluator, <i>502n</i></li>
</ul></li>
<li><a id="b2-li-1326"/><span class="KeyTerm1">is_function_declaration</span>, 334</li>
<li><a id="b2-li-1327"/><span class="KeyTerm1">is_label_exp</span>, <i>482</i></li>
<li><a id="b2-li-1328"/><span class="KeyTerm1">is_lambda_expression</span>, 332</li>
<li><a id="b2-li-1329"/><span class="KeyTerm1">is_last_argument_expression</span>, <i>505n</i></li>
<li><a id="b2-li-1330"/><span class="KeyTerm1">is_last_statement</span>, <i>332</i></li>
<li><a id="b2-li-1331"/><span class="KeyTerm1">is_leaf</span>, <i>143</i></li>
<li><a id="b2-li-1332"/><span class="KeyTerm1">is_list_construction</span>, <i>442</i></li>
<li><a id="b2-li-1333"/><span class="KeyTerm1">is_literal</span>, <i>330</i></li>
<li><a id="b2-li-1334"/><span class="KeyTerm1">is_name</span>, 331</li>
<li><a id="b2-li-1335"/><span class="KeyTerm1">is_null</span> (primitive function), 87<ul class="none">
<li><a id="b2-li-1336"/>implemented with typed pointers, 491</li>
</ul></li>
<li><a id="b2-li-1337"/><span class="KeyTerm1">is_number</span> (primitive function), 127<ul class="none">
<li><a id="b2-li-1338"/>data types and, 168 (ex. 2.78)</li>
<li><a id="b2-li-1339"/>implemented with typed pointers, 491</li>
</ul></li>
<li><a id="b2-li-1340"/><span class="KeyTerm1">is_operation_exp</span>, <i>483</i></li>
<li><a id="b2-li-1341"/><span class="KeyTerm1">is_pair</span> (primitive function), 94<ul class="none">
<li><a id="b2-li-1342"/>implemented with typed pointers, 491</li>
</ul></li>
<li><a id="b2-li-1343"/><span class="KeyTerm1">is_polar</span>, <i>153</i></li>
<li><a id="b2-li-1344"/><span class="KeyTerm1">is_prime</span>, <i>43</i>, <i>291</i></li>
<li><a id="b2-li-1345"/><span class="KeyTerm1">is_primitive_function</span>, 340, <i>345</i></li>
<li><a id="b2-li-1346"/><span class="KeyTerm1">is_product</span>, <i>128</i></li>
<li><a id="b2-li-1347"/><span class="KeyTerm1">is_rectangular</span>, <i>153</i></li>
<li><a id="b2-li-1348"/><span class="KeyTerm1">is_register_exp</span>, <i>482</i></li>
<li><a id="b2-li-1349"/><span class="KeyTerm1">is_return_statement</span>, 333</li>
<li><a id="b2-li-1350"/><span class="KeyTerm1">is_return_value</span>, <i>340</i></li>
<li><a id="b2-li-1351"/><span class="KeyTerm1">is_rule</span>, <i>444</i></li>
<li><a id="b2-li-1352"/><span class="KeyTerm1">is_same_variable</span>, <i>128</i>, 178</li>
<li><a id="b2-li-1353"/><span class="KeyTerm1">is_sequence</span>, 332</li>
<li><a id="b2-li-1354"/><span class="KeyTerm1">is_string</span> (primitive function), 128<ul class="none">
<li><a id="b2-li-1355"/>data types and, 168 (ex. 2.78)</li>
<li><a id="b2-li-1356"/>implemented with typed pointers, 491</li>
</ul></li>
<li><a id="b2-li-1357"/><span class="KeyTerm1">is_sum</span>, <i>128</i></li>
<li><a id="b2-li-1358"/><span class="KeyTerm1">is_tagged_list</span>, <i>330</i></li>
<li><a id="b2-li-1359"/><span class="KeyTerm1">is_truthy</span>, 325, <i>340</i>
<ul class="none">
<li><a id="b2-li-1360"/>full JavaScript version, <i>339n</i></li>
</ul></li>
<li><a id="b2-li-1361"/><span class="KeyTerm1">is_undefined</span> (primitive function), 157</li>
<li><a id="b2-li-1362"/><span class="KeyTerm1">is_variable</span>
<ul class="none">
<li><a id="b2-li-1363"/>for algebraic expressions, <i>128</i></li>
<li><a id="b2-li-1364"/>in query system, <i>437</i></li>
</ul></li>
<li><a id="b2-li-1365"/>iteration contructs, <i>see</i> looping constructs</li>
<li><a id="b2-li-1366"/>iterative improvement, 68 (ex. 1.46)</li>
<li><a id="b2-li-1367"/>iterative process, 29<ul class="none">
<li><a id="b2-li-1368"/>as a stream process, 295–299</li>
<li><a id="b2-li-1369"/>design of algorithm, 40 (ex. 1.16)</li>
<li><a id="b2-li-1370"/>implemented by function call, 20, 30, 511, <i>see also</i> tail recursion</li>
<li><a id="b2-li-1371"/>linear, 29, 37</li>
<li><a id="b2-li-1372"/>recursive process vs., 27–30, 212 (ex. 3.9), 462, 549 (ex. 5.37)</li>
</ul></li>
<li><a id="b2-li-1373"/>register machine for, 462</li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-1374"/>Jaffar, Joxan, 432<i>n</i></li>
<li><a id="b2-li-1375"/>Java, recursive functions in, 30</li>
<li><a id="b2-li-1376"/>JavaScript<ul class="none">
<li><a id="b2-li-1377"/>applicative-order evaluation in, 13</li>
<li><a id="b2-li-1378"/><span class="KeyTerm1">eval</span> in, <i>350</i></li>
<li><a id="b2-li-1379"/>first-class functions in, 67</li>
<li><a id="b2-li-1380"/>good parts, 339<i>n</i></li>
<li><a id="b2-li-1381"/>history of, 2</li>
<li><a id="b2-li-1382"/>internal type system, 168 (ex. 2.78)</li>
<li><a id="b2-li-1383"/>tail recursion in, 30<i>n</i></li>
</ul></li>
<li><a id="b2-li-1384"/>JavaScript environment used in this book, 10</li>
<li><a id="b2-li-1385"/><span class="KeyTerm1">javascript_number</span> package, 165</li>
<li><a id="b2-li-1386"/><span class="KeyTerm1">javascript_number_to_complex</span>, <i>170</i></li>
<li><a id="b2-li-1387"/><span class="KeyTerm1">javascript_number_to_javascript_number</span>, <i>175</i> (ex. 2.81)</li>
<li><a id="b2-li-1388"/>JavaScript package <span class="KeyTerm1">sicp</span>, 10<i>n</i></li>
<li><a id="b2-li-1389"/><span class="KeyTerm1">javascript_predicate</span> (query interpreter), <i>427</i></li>
<li><a id="b2-li-1390"/><span class="KeyTerm1">javascript_predicate</span> (query language), 406, 422<ul class="none">
<li><a id="b2-li-1391"/>evaluation of, 415, 427, 446 (ex. 4.74)</li>
</ul></li>
<li><a id="b2-li-1392"/><span class="KeyTerm1">javascript_predicate_expression</span>, <i>443</i></li>
<li><a id="b2-li-1393"/>Jayaraman, Sundaresan, 252<i>n</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-1394"/>Kaldewaij, Anne, 41<i>n</i></li>
<li><a id="b2-li-1395"/>Karr, Alphonse, 189</li>
<li><a id="b2-li-1396"/>Kepler, Johannes, 449</li>
<li><a id="b2-li-1397"/><span class="KeyTerm1">key</span>, 139</li>
<li><a id="b2-li-1398"/>key of a record<ul class="none">
<li><a id="b2-li-1399"/>in a data base, 139</li>
<li><a id="b2-li-1400"/>in a table, 235</li>
<li><a id="b2-li-1401"/>testing equality of, 240 (ex. 3.24)</li>
</ul></li>
<li><a id="b2-li-1402"/>keyword, 8</li>
<li><a id="b2-li-1403"/>keywords<ul class="none">
<li><a id="b2-li-1404"/><span class="KeyTerm1"><b>break</b></span>, 338 (ex. 4.7)</li>
<li><a id="b2-li-1405"/><span class="KeyTerm1"><b>const</b></span>, 5</li>
<li><a id="b2-li-1406"/><span class="KeyTerm1"><b>continue</b></span>, 338 (ex. 4.7)</li>
<li><a id="b2-li-1407"/><span class="KeyTerm1"><b>else</b></span>, 57</li>
<li><a id="b2-li-1408"/><span class="KeyTerm1"><b>false</b></span>, 14</li>
<li><a id="b2-li-1409"/><span class="KeyTerm1"><b>function</b></span>, 8</li>
<li><a id="b2-li-1410"/><span class="KeyTerm1"><b>if</b></span>, 57</li>
<li><a id="b2-li-1411"/><span class="KeyTerm1"><b>let</b></span>, 191</li>
<li><a id="b2-li-1412"/><span class="KeyTerm1"><b>null</b></span>, 85</li>
<li><a id="b2-li-1413"/><span class="KeyTerm1"><b>return</b></span>, 9</li>
<li><a id="b2-li-1414"/><span class="KeyTerm1"><b>true</b></span>, 14</li>
<li><a id="b2-li-1415"/><span class="KeyTerm1"><b>while</b></span>, 337 (ex. 4.7)</li>
</ul></li>
<li><a id="b2-li-1416"/>Knuth, Donald E., 40<i>n</i>, 42<i>n</i>, 104<i>n</i>, 197, 198<i>n</i></li>
<li><a id="b2-li-1417"/>Kolmogorov, A. N., 197<i>n</i></li>
<li><a id="b2-li-1418"/>Konopasek, Milos, 252<i>n</i></li>
<li><a id="b2-li-1419"/>Kowalski, Robert, 399<i>n</i></li>
<li><a id="b2-li-1420"/>KRC, 106<i>n</i>, 300<i>n</i></li>
<li><a id="b2-li-1421"/><span class="KeyTerm1">label</span> (in register machine), 452, <i>482</i>
<ul class="none">
<li><a id="b2-li-1422"/>simulating, 482</li>
</ul></li>
<li><a id="b2-li-1423"/><span class="KeyTerm1">label_exp_label</span>, <i>482</i></li>
<li><a id="b2-li-1424"/>Lagrange interpolation formula, 177<i>n</i></li>
<li><a id="b2-li-1425"/><i>λ</i> (lambda calculus), 55<i>n</i></li>
<li><a id="b2-li-1426"/><span class="KeyTerm1">lambda_body</span>, 332</li>
<li><a id="b2-li-1427"/>lambda expression, 54<ul class="none">
<li><a id="b2-li-1428"/>block as body of, 116<i>n</i></li>
<li><a id="b2-li-1429"/>as function expression of application, 55</li>
<li><a id="b2-li-1430"/>function declaration vs., 54</li>
<li><a id="b2-li-1431"/>immediately invoked, 217 (ex. 3.10)</li>
<li><a id="b2-li-1432"/>lazy evaluation and, 370</li>
<li><a id="b2-li-1433"/>parsing of, 332</li>
<li><a id="b2-li-1434"/>precedence of, 55</li>
<li><a id="b2-li-1435"/>value of, 210</li>
</ul></li>
<li><a id="b2-li-1436"/><span class="KeyTerm1">lambda_parameter_symbols</span>, <i>332</i></li>
<li><a id="b2-li-1437"/>Lambert, J.H., 63 (ex. 1.39)</li>
<li><a id="b2-li-1438"/>Lamé, Gabriel, 42<i>n</i></li>
<li><a id="b2-li-1439"/>Lamé's Theorem, 42</li>
<li><a id="b2-li-1440"/>Lamport, Leslie, 280<i>n</i></li>
<li><a id="b2-li-1441"/>Lampson, Butler, 204<i>n</i></li>
<li><a id="b2-li-1442"/>Landin, Peter, 15<i>n</i>, 286<i>n</i></li>
<li><a id="b2-li-1443"/>language, <i>see</i> parsing natural language; programming language</li>
<li><a id="b2-li-1444"/>Lapalme, Guy, 356<i>n</i></li>
<li><a id="b2-li-1445"/><span class="KeyTerm1">last_pair</span>, 89 (ex. 2.17), <i>225</i> (ex. 3.12)<ul class="none">
<li><a id="b2-li-1446"/>rules, 411 (ex. 4.60)</li>
</ul></li>
<li><a id="b2-li-1447"/>lazy evaluation, 361</li>
<li><a id="b2-li-1448"/>lazy evaluator, 360–370</li>
<li><a id="b2-li-1449"/>lazy list, 370–372</li>
<li><a id="b2-li-1450"/>lazy pair, 370–372</li>
<li><a id="b2-li-1451"/>lazy tree, 371<i>n</i></li>
<li><a id="b2-li-1452"/>least commitment, principle of, 152</li>
<li><a id="b2-li-1453"/>left-associative, 5</li>
<li><a id="b2-li-1454"/><span class="KeyTerm1">left_branch</span>, <i>136</i>, <i>143</i></li>
<li><a id="b2-li-1455"/>Leibniz, Baron Gottfried Wilhelm von proof of Fermat's Little Theorem, 44<i>n</i>
<ul class="none">
<li><a id="b2-li-1456"/>series for <i>π</i>, 49<i>n</i>, 296</li>
</ul></li>
<li><a id="b2-li-1457"/>Leiserson, Charles E., 137<i>n</i>, 302<i>n</i></li>
<li><a id="b2-li-1458"/><span class="KeyTerm1">length</span>, 87<ul class="none">
<li><a id="b2-li-1459"/>as accumulation, 103 (ex. 2.33)</li>
<li><a id="b2-li-1460"/>iterative version, <i>88</i></li>
<li><a id="b2-li-1461"/>recursive version, <i>88</i></li>
</ul></li>
<li><a id="b2-li-1462"/><span class="KeyTerm1"><b>let</b></span> (keyword), 191, <i>see also</i> variable, declaration</li>
<li><a id="b2-li-1463"/><span class="KeyTerm1"><b>let</b>*</span> (Scheme variant of <span class="KeyTerm1"><b>let</b></span>), 336 (ex. 4.6)</li>
<li><a id="b2-li-1464"/><span class="KeyTerm1">lexical_address_assign</span>, 555, 556 (ex. 5.42)</li>
<li><a id="b2-li-1465"/>lexical addressing, 554–555<ul class="none">
<li><a id="b2-li-1466"/>lexical address, 555</li>
</ul></li>
<li><a id="b2-li-1467"/><span class="KeyTerm1">lexical_address_lookup</span>, 555, 556 (ex. 5.42)</li>
<li><a id="b2-li-1468"/>lexical scoping, 25, <i>see also</i> scope of a name<ul class="none">
<li><a id="b2-li-1469"/>environment structure and, 554</li>
</ul></li>
<li><a id="b2-li-1470"/>Lieberman, Henry, 494<i>n</i></li>
<li><a id="b2-li-1471"/>LIFO buffer, <i>see</i> stack</li>
<li><a id="b2-li-1472"/>linear growth, 29, 37</li>
<li><a id="b2-li-1473"/>linear iterative process, 29<ul class="none">
<li><a id="b2-li-1474"/>order of growth, 37</li>
</ul></li>
<li><a id="b2-li-1475"/>linear recursive process, 29<ul class="none">
<li><a id="b2-li-1476"/>order of growth, 37</li>
</ul></li>
<li><a id="b2-li-1477"/>line segment<ul class="none">
<li><a id="b2-li-1478"/>represented as pair of points, 77 (ex. 2.2)</li>
<li><a id="b2-li-1479"/>represented as pair of vectors, 120 (ex. 2.48)</li>
</ul></li>
<li><a id="b2-li-1480"/>linkage descriptor, 523</li>
<li><a id="b2-li-1481"/>Liskov, Barbara Huberman, 79<i>n</i></li>
<li><a id="b2-li-1482"/>Lisp, <i>see also</i> Scheme<ul class="none">
<li><a id="b2-li-1483"/>as ancestor of JavaScript, 2</li>
<li><a id="b2-li-1484"/>on DEC PDP-1, 494<i>n</i></li>
<li><a id="b2-li-1485"/>efficiency of, 5<i>n</i></li>
<li><a id="b2-li-1486"/>MDL dialect of, 495<i>n</i></li>
</ul></li>
<li><a id="b2-li-1487"/><span class="KeyTerm1">list</span> (primitive function), 86</li>
<li><a id="b2-li-1488"/>list(s), 86, <i>see also</i> list structure<ul class="none">
<li><a id="b2-li-1489"/>adjoining to with <span class="KeyTerm1">pair</span>, 88</li>
<li><a id="b2-li-1490"/>combining with <span class="KeyTerm1">append</span>, 88</li>
<li><a id="b2-li-1491"/>constructing with <span class="KeyTerm1">pair</span>, 88</li>
<li><a id="b2-li-1492"/>converting a binary tree to a, 137 (ex. 2.63)</li>
<li><a id="b2-li-1493"/>converting to a binary tree, 137 (ex. 2.64)</li>
<li><a id="b2-li-1494"/>empty, <i>see</i> empty list equality of, 125 (ex. 2.54)</li>
<li><a id="b2-li-1495"/>headed, 235, 250<i>n</i></li>
<li><a id="b2-li-1496"/>last pair of, 89 (ex. 2.17)</li>
<li><a id="b2-li-1497"/>lazy, 370–372</li>
<li><a id="b2-li-1498"/>length of, 87</li>
<li><a id="b2-li-1499"/>list structure vs., 86<i>n</i></li>
<li><a id="b2-li-1500"/>manipulation with <span class="KeyTerm1">head</span>, <span class="KeyTerm1">tail</span>, and <span class="KeyTerm1">pair</span>, 86</li>
<li><a id="b2-li-1501"/>mapping over, 90–92</li>
<li><a id="b2-li-1502"/><i>n</i>th element of, 87</li>
<li><a id="b2-li-1503"/>operations on, 87–90</li>
<li><a id="b2-li-1504"/>printed representation of, 86</li>
<li><a id="b2-li-1505"/>reversing, 89 (ex. 2.18)</li>
<li><a id="b2-li-1506"/>techniques for manipulating, 87–90</li>
<li><a id="b2-li-1507"/>walking down with <span class="KeyTerm1">tail</span>, 87</li>
</ul></li>
<li><a id="b2-li-1508"/><span class="KeyTerm1">list_difference</span>,  <i>544</i></li>
<li><a id="b2-li-1509"/>list notation for data, 87</li>
<li><a id="b2-li-1510"/><span class="KeyTerm1">list_of_arg_values</span>, <i>364</i></li>
<li><a id="b2-li-1511"/><span class="KeyTerm1">list_of_delayed_args</span>, <i>364</i></li>
<li><a id="b2-li-1512"/><span class="KeyTerm1">list_of_values</span>, <i>325</i>
<ul class="none">
<li><a id="b2-li-1513"/>without higher-order functions, <i>325n</i></li>
</ul></li>
<li><a id="b2-li-1514"/><span class="KeyTerm1">list_ref</span>, <i>87</i>, <i>371</i></li>
<li><a id="b2-li-1515"/>list structure, 74, <i>see also</i> list(s)<ul class="none">
<li><a id="b2-li-1516"/>list vs., 86<i>n</i></li>
<li><a id="b2-li-1517"/>mutable, 222–226</li>
<li><a id="b2-li-1518"/>represented using vectors, 488–492</li>
</ul></li>
<li><a id="b2-li-1519"/>list-structured memory, 487–498</li>
<li><a id="b2-li-1520"/><span class="KeyTerm1">list_to_tree</span>, <i>138</i> (ex. 2.64)</li>
<li><a id="b2-li-1521"/><span class="KeyTerm1">list_union</span>, <i>544</i></li>
<li><a id="b2-li-1522"/>literal expression, 322<ul class="none">
<li><a id="b2-li-1523"/>parsing of, 330</li>
</ul></li>
<li><a id="b2-li-1524"/><span class="KeyTerm1">literal_value</span>, <i>330</i></li>
<li><a id="b2-li-1525"/><span class="KeyTerm1">lives_near</span> (rule), <i>407</i>, 409 (ex. 4.58)</li>
<li><a id="b2-li-1526"/>local evolution of a process, 26</li>
<li><a id="b2-li-1527"/>local name, 23–24, 55–56</li>
<li><a id="b2-li-1528"/>local state, 190–206<ul class="none">
<li><a id="b2-li-1529"/>maintained in frames, 213–218</li>
</ul></li>
<li><a id="b2-li-1530"/>local state variable, 190–197</li>
<li><a id="b2-li-1531"/>location, 488</li>
<li><a id="b2-li-1532"/>Locke, John, 1</li>
<li><a id="b2-li-1533"/>logarithm, approximating ln 2, 299 (ex. 3.65)</li>
<li><a id="b2-li-1534"/>logarithmic growth, 37, 39, 135<i>n</i></li>
<li><a id="b2-li-1535"/>logical and (digital logic), 241</li>
<li><a id="b2-li-1536"/>logical conjunction, 15, <i>see also</i> <span class="KeyTerm1">&amp;&amp;</span> (logical conjunction)</li>
<li><a id="b2-li-1537"/>logical disjunction, 15, <i>see also</i> <span class="KeyTerm1">||</span> (logical disjunction)</li>
<li><a id="b2-li-1538"/><span class="KeyTerm1">logical_not</span>, <i>244</i></li>
<li><a id="b2-li-1539"/>logical or (digital logic), 241</li>
<li><a id="b2-li-1540"/>logic programming, 398–400, <i>see also</i> query interpreter; query language<ul class="none">
<li><a id="b2-li-1541"/>computers for, 400<i>n</i></li>
<li><a id="b2-li-1542"/>history of, 398<i>n</i>, 400<i>n</i></li>
<li><a id="b2-li-1543"/>in Japan, 400<i>n</i></li>
<li><a id="b2-li-1544"/>logic programming languages, 400</li>
<li><a id="b2-li-1545"/>mathematical logic vs., 419–424</li>
</ul></li>
<li><a id="b2-li-1546"/>logic puzzles, 378–380</li>
<li><a id="b2-li-1547"/><span class="KeyTerm1">lookup</span>
<ul class="none">
<li><a id="b2-li-1548"/>in one-dimensional table, <i>236</i></li>
<li><a id="b2-li-1549"/>in set of records, <i>139</i></li>
<li><a id="b2-li-1550"/>in two-dimensional table, <i>237</i></li>
</ul></li>
<li><a id="b2-li-1551"/><span class="KeyTerm1">lookup_label</span>, <i>476</i></li>
<li><a id="b2-li-1552"/><span class="KeyTerm1">lookup_prim</span>, <i>483</i></li>
<li><a id="b2-li-1553"/><span class="KeyTerm1">lookup_symbol_value</span>, 341, <i>342</i>
<ul class="none">
<li><a id="b2-li-1554"/>for scanned-out declarations, 344 (ex. 4.12)</li>
</ul></li>
<li><a id="b2-li-1555"/>looping constructs, 20, 30, <i>see also</i> while loop</li>
<li><a id="b2-li-1556"/><span class="KeyTerm1">lower_bound</span>, 82 (ex. 2.7)</li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-1557"/>machine language, 520<ul class="none">
<li><a id="b2-li-1558"/>high-level language vs., 318</li>
</ul></li>
<li><a id="b2-li-1559"/>magician, <i>see</i> numerical analyst</li>
<li><a id="b2-li-1560"/><span class="KeyTerm1">magnitude</span>
<ul class="none">
<li><a id="b2-li-1561"/>data-directed, <i>160</i></li>
<li><a id="b2-li-1562"/>polar representation, <i>152</i></li>
<li><a id="b2-li-1563"/>rectangular representation, <i>151</i></li>
<li><a id="b2-li-1564"/>with tagged data, <i>154</i></li>
</ul></li>
<li><a id="b2-li-1565"/><span class="KeyTerm1">magnitude_polar</span>, <i>154</i></li>
<li><a id="b2-li-1566"/><span class="KeyTerm1">magnitude_rectangular</span>, <i>153</i></li>
<li><a id="b2-li-1567"/><span class="KeyTerm1">make_account</span>, <i>195</i>
<ul class="none">
<li><a id="b2-li-1568"/>in environment model, 220 (ex. 3.11)</li>
<li><a id="b2-li-1569"/>with serialization, <i>270</i>, <i>271</i> (ex. 3.41), <i>272</i> (ex. 3.42)</li>
</ul></li>
<li><a id="b2-li-1570"/><span class="KeyTerm1">make_account_and_serializer</span>, <i>273</i></li>
<li><a id="b2-li-1571"/><span class="KeyTerm1">make_accumulator</span>, 196 (ex. 3.1)</li>
<li><a id="b2-li-1572"/><span class="KeyTerm1">make_agenda</span>, 248, <i>250</i></li>
<li><a id="b2-li-1573"/><span class="KeyTerm1">make_application</span>, <i>331</i></li>
<li><a id="b2-li-1574"/><span class="KeyTerm1">make_assign_ef</span>, <i>478</i></li>
<li><a id="b2-li-1575"/><span class="KeyTerm1">make_binding</span>, <i>444</i></li>
<li><a id="b2-li-1576"/><span class="KeyTerm1">make_branch_ef</span>, <i>480</i></li>
<li><a id="b2-li-1577"/><span class="KeyTerm1">make_center_percent</span>, 83 (ex. 2.12)</li>
<li><a id="b2-li-1578"/><span class="KeyTerm1">make_center_width</span>, <i>83</i></li>
<li><a id="b2-li-1579"/><span class="KeyTerm1">make_code_tree</span>, <i>143</i></li>
<li><a id="b2-li-1580"/><span class="KeyTerm1">make_compiled_function</span>, <i>532n</i></li>
<li><a id="b2-li-1581"/><span class="KeyTerm1">make_complex_from_mag_ang</span>, <i>167</i></li>
<li><a id="b2-li-1582"/><span class="KeyTerm1">make_complex_from_real_imag</span>, <i>167</i></li>
<li><a id="b2-li-1583"/><span class="KeyTerm1">make_connector</span>, <i>259</i></li>
<li><a id="b2-li-1584"/><span class="KeyTerm1">make_constant_declaration</span>, <i>334</i></li>
<li><a id="b2-li-1585"/><span class="KeyTerm1">make_cycle</span>, <i>226</i> (ex. 3.13)</li>
<li><a id="b2-li-1586"/><span class="KeyTerm1">make_decrementer</span>, <i>201</i></li>
<li><a id="b2-li-1587"/><span class="KeyTerm1">make_execution_function</span>, <i>477</i></li>
<li><a id="b2-li-1588"/><span class="KeyTerm1">make_frame</span>, 117, <i>119</i> (ex. 2.47), <i>341</i></li>
<li><a id="b2-li-1589"/><span class="KeyTerm1">make_from_mag_ang</span>, <i>155</i>, <i>160</i>
<ul class="none">
<li><a id="b2-li-1590"/>message-passing, 163 (ex. 2.75)</li>
<li><a id="b2-li-1591"/>polar representation, <i>152</i></li>
<li><a id="b2-li-1592"/>rectangular representation, <i>151</i></li>
</ul></li>
<li><a id="b2-li-1593"/><span class="KeyTerm1">make_from_mag_ang_polar</span>, <i>154</i></li>
<li><a id="b2-li-1594"/><span class="KeyTerm1">make_from_mag_ang_rectangular</span>, <i>153</i></li>
<li><a id="b2-li-1595"/><span class="KeyTerm1">make_from_real_imag</span>, <i>155</i>, <i>160</i>
<ul class="none">
<li><a id="b2-li-1596"/>message-passing, <i>162</i></li>
<li><a id="b2-li-1597"/>polar representation, <i>152</i></li>
<li><a id="b2-li-1598"/>rectangular representation, <i>151</i></li>
</ul></li>
<li><a id="b2-li-1599"/><span class="KeyTerm1">make_from_real_imag_polar</span>, <i>154</i></li>
<li><a id="b2-li-1600"/><span class="KeyTerm1">make_from_real_imag_rectangular</span>, <i>153</i></li>
<li><a id="b2-li-1601"/><span class="KeyTerm1">make_function</span>, <i>340</i></li>
<li><a id="b2-li-1602"/><span class="KeyTerm1">make_go_to_ef</span>, <i>480</i></li>
<li><a id="b2-li-1603"/><span class="KeyTerm1">make_inst</span>, <i>476</i></li>
<li><a id="b2-li-1604"/><span class="KeyTerm1">make_instruction_sequence</span>, <i>526</i></li>
<li><a id="b2-li-1605"/><span class="KeyTerm1">make_interval</span>, 81, <i>82</i> (ex. 2.7)</li>
<li><a id="b2-li-1606"/><span class="KeyTerm1">make_javascript_number</span>, <i>165</i></li>
<li><a id="b2-li-1607"/><span class="KeyTerm1">make_joint</span>, 205 (ex. 3.7)</li>
<li><a id="b2-li-1608"/><span class="KeyTerm1">make_label</span>, <i>530n</i></li>
<li><a id="b2-li-1609"/><span class="KeyTerm1">make_label_entry</span>, <i>476</i></li>
<li><a id="b2-li-1610"/><span class="KeyTerm1">make_lambda_expression</span>, <i>332</i></li>
<li><a id="b2-li-1611"/><span class="KeyTerm1">make_leaf</span>, <i>143</i></li>
<li><a id="b2-li-1612"/><span class="KeyTerm1">make_leaf_set</span>, <i>145</i></li>
<li><a id="b2-li-1613"/><span class="KeyTerm1">make_literal</span>, <i>330</i></li>
<li><a id="b2-li-1614"/><span class="KeyTerm1">make_machine</span>, 468, <i>470</i></li>
<li><a id="b2-li-1615"/><span class="KeyTerm1">make_monitored</span>, 196 (ex. 3.2)</li>
<li><a id="b2-li-1616"/><span class="KeyTerm1">make_mutex</span>, <i>277</i></li>
<li><a id="b2-li-1617"/><span class="KeyTerm1">make_name</span>, <i>331</i></li>
<li><a id="b2-li-1618"/><span class="KeyTerm1">make_new_machine</span>, 473 (fig. 5.13)</li>
<li><a id="b2-li-1619"/><span class="KeyTerm1">make_new_variable</span>, <i>438</i></li>
<li><a id="b2-li-1620"/><span class="KeyTerm1">make_operation_exp_ef</span>, <i>482</i></li>
<li><a id="b2-li-1621"/><span class="KeyTerm1">make_perform_ef</span>, <i>481</i></li>
<li><a id="b2-li-1622"/><span class="KeyTerm1">make_point</span>, 77 (ex. 2.2)</li>
<li><a id="b2-li-1623"/><span class="KeyTerm1">make_poly</span>, <i>178</i></li>
<li><a id="b2-li-1624"/><span class="KeyTerm1">make_polynomial</span>, <i>182</i></li>
<li><a id="b2-li-1625"/><span class="KeyTerm1">make_primitive_exp_ef</span>, <i>482</i></li>
<li><a id="b2-li-1626"/><span class="KeyTerm1">make_product</span>, <i>128</i>, <i>130</i></li>
<li><a id="b2-li-1627"/><span class="KeyTerm1">make_queue</span>, 231, <i>233</i></li>
<li><a id="b2-li-1628"/><span class="KeyTerm1">make_rat</span>, 72, <i>74</i>, <i>77</i>
<ul class="none">
<li><a id="b2-li-1629"/>axiom for, 78</li>
<li><a id="b2-li-1630"/>reducing to lowest terms, <i>75</i></li>
</ul></li>
<li><a id="b2-li-1631"/><span class="KeyTerm1">make_rational</span>, <i>166</i></li>
<li><a id="b2-li-1632"/><span class="KeyTerm1">make_register</span>, <i>470</i></li>
<li><a id="b2-li-1633"/><span class="KeyTerm1">make_restore_ef</span>, <i>481</i></li>
<li><a id="b2-li-1634"/><span class="KeyTerm1">make_return_value</span>, <i>340</i></li>
<li><a id="b2-li-1635"/><span class="KeyTerm1">make_save_ef</span>, <i>481</i></li>
<li><a id="b2-li-1636"/><span class="KeyTerm1">make_segment</span>, 77 (ex. 2.2), 120 (ex. 2.48)</li>
<li><a id="b2-li-1637"/><span class="KeyTerm1">make_serializer</span>, <i>276</i></li>
<li><a id="b2-li-1638"/><span class="KeyTerm1">make_simplified_withdraw</span>, <i>201</i>, <i>313</i></li>
<li><a id="b2-li-1639"/><span class="KeyTerm1">make_stack</span>, <i>471</i>
<ul class="none">
<li><a id="b2-li-1640"/>with monitored stack, <i>485</i> <span class="KeyTerm1">make_sum</span>, <i>128, 129</i></li>
</ul></li>
<li><a id="b2-li-1641"/><span class="KeyTerm1">make_table</span>
<ul class="none">
<li><a id="b2-li-1642"/>message-passing implementation, <i>239</i></li>
<li><a id="b2-li-1643"/>one-dimensional table, <i>237</i></li>
</ul></li>
<li><a id="b2-li-1644"/><span class="KeyTerm1">make_tableau</span>, <i>297</i></li>
<li><a id="b2-li-1645"/><span class="KeyTerm1">make_term</span>, 179, <i>182</i></li>
<li><a id="b2-li-1646"/><span class="KeyTerm1">make_test_ef</span>, <i>479</i></li>
<li><a id="b2-li-1647"/><span class="KeyTerm1">make_time_segment</span>, <i>250</i></li>
<li><a id="b2-li-1648"/><span class="KeyTerm1">make_tree</span>, <i>136</i></li>
<li><a id="b2-li-1649"/><span class="KeyTerm1">make_vect</span>, 118 (ex. 2.46)</li>
<li><a id="b2-li-1650"/><span class="KeyTerm1">make_wire</span>, 242, <i>246</i>, 249 (ex. 3.31)</li>
<li><a id="b2-li-1651"/><span class="KeyTerm1">make_withdraw</span>, <i>194</i>
<ul class="none">
<li><a id="b2-li-1652"/>in environment model, 213–218</li>
<li><a id="b2-li-1653"/>using immediately invoked lambda expression, <i>217</i> (ex. 3.10)</li>
</ul></li>
<li><a id="b2-li-1654"/>making change, <i>see</i> counting change</li>
<li><a id="b2-li-1655"/><span class="KeyTerm1">map</span>, <i>91</i>, <i>371</i>
<ul class="none">
<li><a id="b2-li-1656"/>as accumulation, 103 (ex. 2.33)</li>
</ul></li>
<li><a id="b2-li-1657"/>mapping<ul class="none">
<li><a id="b2-li-1658"/>over lists, 90–92</li>
<li><a id="b2-li-1659"/>nested, 106–110, 299–302</li>
<li><a id="b2-li-1660"/>as a transducer, 100</li>
<li><a id="b2-li-1661"/>over trees, 96–98</li>
</ul></li>
<li><a id="b2-li-1662"/><span class="KeyTerm1">map_successive_pairs</span>, <i>312</i></li>
<li><a id="b2-li-1663"/>mark-sweep garbage collector, 494<i>n</i> <span class="KeyTerm1">math_atan2</span> (primitive function), 151<i>n</i> <span class="KeyTerm1">math_cos</span> (primitive function), 61</li>
<li><a id="b2-li-1664"/>mathematical function, <i>see</i> function (mathematical)</li>
<li><a id="b2-li-1665"/>mathematics<ul class="none">
<li><a id="b2-li-1666"/>computer science vs., 18, 398</li>
<li><a id="b2-li-1667"/>engineering vs., 45<i>n</i></li>
</ul></li>
<li><a id="b2-li-1668"/><span class="KeyTerm1">math_floor</span> (primitive function), 45</li>
<li><a id="b2-li-1669"/><span class="KeyTerm1">math_log</span> (primitive function), 10, 62 (ex. 1.36)</li>
<li><a id="b2-li-1670"/><span class="KeyTerm1">math_max</span> (primitive function), 81</li>
<li><a id="b2-li-1671"/><span class="KeyTerm1">math_min</span> (primitive function), 81</li>
<li><a id="b2-li-1672"/><span class="KeyTerm1">math_random</span> (primitive function), 44<ul class="none">
<li><a id="b2-li-1673"/>assignment needed for, 191<i>n</i></li>
</ul></li>
<li><a id="b2-li-1674"/><span class="KeyTerm1">math_round</span> (primitive function), 176<i>n</i></li>
<li><a id="b2-li-1675"/><span class="KeyTerm1">math_sin</span> (primitive function), 61</li>
<li><a id="b2-li-1676"/><span class="KeyTerm1">math_trunc</span> (primitive function), 293 (ex. 3.58)</li>
<li><a id="b2-li-1677"/>matrix, represented as sequence, 105 (ex. 2.37)</li>
<li><a id="b2-li-1678"/><span class="KeyTerm1">matrix_times_matrix</span>, 105 (ex. 2.37)</li>
<li><a id="b2-li-1679"/><span class="KeyTerm1">matrix_times_vector</span>, 105 (ex. 2.37)</li>
<li><a id="b2-li-1680"/>McAllester, David Allen, 376<i>n</i></li>
<li><a id="b2-li-1681"/>McCarthy, John, 374<i>n</i></li>
<li><a id="b2-li-1682"/>McDermott, Drew, 376<i>n</i></li>
<li><a id="b2-li-1683"/>MDL, 495<i>n</i></li>
<li><a id="b2-li-1684"/>means of abstraction, 3<ul class="none">
<li><a id="b2-li-1685"/>constant declaration as, 6</li>
</ul></li>
<li><a id="b2-li-1686"/>means of combination, 3, <i>see also</i> closure</li>
<li><a id="b2-li-1687"/>measure in a Euclidean ring, 185<i>n</i></li>
<li><a id="b2-li-1688"/><span class="KeyTerm1">member</span>, <i>125</i>
<ul class="none">
<li><a id="b2-li-1689"/>extended to use pointer equality, 260<i>n</i></li>
</ul></li>
<li><a id="b2-li-1690"/><span class="KeyTerm1">memo</span>, <i>286</i></li>
<li><a id="b2-li-1691"/><span class="KeyTerm1">memo_fib</span>, <i>240</i> (ex. 3.27)</li>
<li><a id="b2-li-1692"/>memoization, 35<i>n</i>, 240 (ex. 3.27)<ul class="none">
<li><a id="b2-li-1693"/>call-by-need and, 293<i>n</i></li>
<li><a id="b2-li-1694"/>garbage collection and, 366<i>n</i></li>
<li><a id="b2-li-1695"/>in stream tail, 286</li>
<li><a id="b2-li-1696"/>of thunks, 363</li>
</ul></li>
<li><a id="b2-li-1697"/><span class="KeyTerm1">memoize</span>, <i>241</i> (ex. 3.27)</li>
<li><a id="b2-li-1698"/>memory<ul class="none">
<li><a id="b2-li-1699"/>in 1965, 375<i>n</i></li>
<li><a id="b2-li-1700"/>list-structured, 487–498</li>
</ul></li>
<li><a id="b2-li-1701"/><span class="KeyTerm1">merge</span>, <i>293</i> (ex. 3.56)</li>
<li><a id="b2-li-1702"/><span class="KeyTerm1">merge_weighted</span>, 302 (ex. 3.70)</li>
<li><a id="b2-li-1703"/>merging infinite streams, <i>see</i> infinite stream(s)</li>
<li><a id="b2-li-1704"/>message passing, 80, 162–164<ul class="none">
<li><a id="b2-li-1705"/>environment model and, 220 (ex. 3.11)</li>
<li><a id="b2-li-1706"/>in bank account, 195</li>
<li><a id="b2-li-1707"/>in digital-circuit simulation, 246</li>
<li><a id="b2-li-1708"/>tail recursion and, 30<i>n</i></li>
</ul></li>
<li><a id="b2-li-1709"/>metacircular evaluator, 320</li>
<li><a id="b2-li-1710"/>metacircular evaluator for JavaScript, 319–351<ul class="none">
<li><a id="b2-li-1711"/><span class="KeyTerm1">&amp;&amp;</span> (logical conjunction), 336 (ex. 4.4)</li>
<li><a id="b2-li-1712"/><span class="KeyTerm1">||</span> (logical disjunction), 336 (ex. 4.4)</li>
<li><a id="b2-li-1713"/>analyzing version, 355–360</li>
<li><a id="b2-li-1714"/>compilation of, 564 (ex. 5.53), 564 (ex. 5.55)</li>
<li><a id="b2-li-1715"/>component representation, 322, 328–335</li>
<li><a id="b2-li-1716"/>data abstraction in, 321, 322, 342</li>
<li><a id="b2-li-1717"/>data-directed <span class="KeyTerm1">evaluate</span>, 336 (ex. 4.3)</li>
<li><a id="b2-li-1718"/>derived components, 334–335</li>
<li><a id="b2-li-1719"/>driver loop, 346</li>
<li><a id="b2-li-1720"/>efficiency of, 355</li>
<li><a id="b2-li-1721"/>environment model of evaluation in, 320</li>
<li><a id="b2-li-1722"/>environment operations, 341</li>
<li><a id="b2-li-1723"/><span class="KeyTerm1">evaluate</span> and <span class="KeyTerm1">apply</span>, 321–328</li>
<li><a id="b2-li-1724"/><span class="KeyTerm1">evaluate</span>–<span class="KeyTerm1">apply</span> cycle, 320, 321 (fig. 4.1)</li>
<li><a id="b2-li-1725"/>global environment, 344</li>
<li><a id="b2-li-1726"/>higher-order functions in, 325<i>n</i></li>
<li><a id="b2-li-1727"/>implemented language vs. implementation language, 325</li>
<li><a id="b2-li-1728"/>job of, 320<i>n</i></li>
<li><a id="b2-li-1729"/><span class="KeyTerm1"><b>let</b>*</span> (Scheme variant of <span class="KeyTerm1"><b>let</b></span>), 336 (ex. 4.6)</li>
<li><a id="b2-li-1730"/>order of argument evaluation, 328 (ex. 4.1)</li>
<li><a id="b2-li-1731"/>parameters distinct from local names, 336 (ex. 4.5)</li>
<li><a id="b2-li-1732"/>preventing duplicate parameters, 336 (ex. 4.5)</li>
<li><a id="b2-li-1733"/>primitive functions, 344–346</li>
<li><a id="b2-li-1734"/>representation of environments, 341–343</li>
<li><a id="b2-li-1735"/>representation of functions, 340</li>
<li><a id="b2-li-1736"/>representation of true and false, 339</li>
<li><a id="b2-li-1737"/>return value, 324</li>
<li><a id="b2-li-1738"/>running, 344–348</li>
<li><a id="b2-li-1739"/>symbolic differentiation and, 329</li>
<li><a id="b2-li-1740"/>syntactic forms (additional), 336 (ex. 4.4), 336 (ex. 4.6), 337 (ex. 4.7)</li>
<li><a id="b2-li-1741"/>syntactic forms as derived components, 334–335</li>
<li><a id="b2-li-1742"/>syntax of evaluated language, 328–335</li>
<li><a id="b2-li-1743"/>tail recursion and, 324<i>n</i>, 327<i>n</i>, 509</li>
<li><a id="b2-li-1744"/><span class="KeyTerm1">undefined</span>, 344</li>
<li><a id="b2-li-1745"/>value of program at top level, 338 (ex. 4.8)</li>
<li><a id="b2-li-1746"/>while loop, 337 (ex. 4.7)</li>
</ul></li>
<li><a id="b2-li-1747"/>metalinguistic abstraction, 318</li>
<li><a id="b2-li-1748"/>MicroPlanner, 376<i>n</i></li>
<li><a id="b2-li-1749"/><span class="KeyTerm1">midpoint_segment</span>, 77 (ex. 2.2)</li>
<li><a id="b2-li-1750"/>Miller, Gary L., 48 (ex. 1.28)</li>
<li><a id="b2-li-1751"/>Miller, James S., 541<i>n</i></li>
<li><a id="b2-li-1752"/>Miller–Rabin test for primality, 48 (ex. 1.28)</li>
<li><a id="b2-li-1753"/>Milner, Robin, 310<i>n</i></li>
<li><a id="b2-li-1754"/>Minsky, Marvin Lee, xxiv, 494<i>n</i></li>
<li><a id="b2-li-1755"/>Miranda, 106<i>n</i></li>
<li><a id="b2-li-1756"/>MIT, 399<i>n</i>
<ul class="none">
<li><a id="b2-li-1757"/>early history of, 112<i>n</i></li>
<li><a id="b2-li-1758"/>Research Laboratory of Electronics, 494<i>n</i></li>
</ul></li>
<li><a id="b2-li-1759"/>ML, 310<i>n</i></li>
<li><a id="b2-li-1760"/>mobile, 96 (ex. 2.29)</li>
<li><a id="b2-li-1761"/>Mocha, 2</li>
<li><a id="b2-li-1762"/>modeling<ul class="none">
<li><a id="b2-li-1763"/>as a design strategy, 189</li>
<li><a id="b2-li-1764"/>in science and engineering, 12</li>
</ul></li>
<li><a id="b2-li-1765"/>models of evaluation, 513</li>
<li><a id="b2-li-1766"/>modified registers, <i>see</i> instruction sequence</li>
<li><a id="b2-li-1767"/><span class="KeyTerm1">modifies_register</span>, <i>543</i></li>
<li><a id="b2-li-1768"/>modularity, 102, 189<ul class="none">
<li><a id="b2-li-1769"/>along object boundaries, 315<i>n</i></li>
<li><a id="b2-li-1770"/>functional programs vs. objects, 311–315</li>
<li><a id="b2-li-1771"/>hiding principle, 193<i>n</i></li>
<li><a id="b2-li-1772"/>streams and, 295</li>
<li><a id="b2-li-1773"/>through dispatching on type, 156</li>
<li><a id="b2-li-1774"/>through infinite streams, 312</li>
<li><a id="b2-li-1775"/>through modeling with objects, 197</li>
</ul></li>
<li><a id="b2-li-1776"/>modulo <i>n</i>, 44</li>
<li><a id="b2-li-1777"/><i>modus ponens</i>, 419<i>n</i></li>
<li><a id="b2-li-1778"/>money, changing, <i>see</i> counting change</li>
<li><a id="b2-li-1779"/>monitored function, 196 (ex. 3.2)</li>
<li><a id="b2-li-1780"/><span class="KeyTerm1">monte_carlo</span>, <i>198</i>
<ul class="none">
<li><a id="b2-li-1781"/>infinite stream, <i>312</i></li>
</ul></li>
<li><a id="b2-li-1782"/>Monte Carlo integration, 200 (ex. 3.5)<ul class="none">
<li><a id="b2-li-1783"/>stream formulation, 312 (ex. 3.82)</li>
</ul></li>
<li><a id="b2-li-1784"/>Monte Carlo simulation, 198<ul class="none">
<li><a id="b2-li-1785"/>stream formulation, 311</li>
</ul></li>
<li><a id="b2-li-1786"/>Moon, David A., 494<i>n</i></li>
<li><a id="b2-li-1787"/>Morris, J. H., 204<i>n</i></li>
<li><a id="b2-li-1788"/>Morse code, 140</li>
<li><a id="b2-li-1789"/>Mouse, Minnie and Mickey, 420</li>
<li><a id="b2-li-1790"/><span class="KeyTerm1">mul</span> (generic), <i>165</i>
<ul class="none">
<li><a id="b2-li-1791"/>used for polynomial coefficients, 180</li>
</ul></li>
<li><a id="b2-li-1792"/><span class="KeyTerm1">mul_complex</span>, <i>150</i></li>
<li><a id="b2-li-1793"/><span class="KeyTerm1">mul_interval</span>, <i>81</i>
<ul class="none">
<li><a id="b2-li-1794"/>more efficient version, 82 (ex. 2.11)</li>
</ul></li>
<li><a id="b2-li-1795"/><span class="KeyTerm1">mul_poly</span>, <i>178</i></li>
<li><a id="b2-li-1796"/><span class="KeyTerm1">mul_rat</span>, <i>73</i></li>
<li><a id="b2-li-1797"/><span class="KeyTerm1">mul_series</span>, 294 (ex. 3.60)</li>
<li><a id="b2-li-1798"/><span class="KeyTerm1">mul_streams</span>, 292 (ex. 3.54)</li>
<li><a id="b2-li-1799"/><span class="KeyTerm1">mul_terms</span>, <i>180</i></li>
<li><a id="b2-li-1800"/>Multics time-sharing system, 494<i>n</i></li>
<li><a id="b2-li-1801"/><span class="KeyTerm1">multiplicand</span>, <i>129</i></li>
<li><a id="b2-li-1802"/>multiplication by Russian peasant method, 40<i>n</i></li>
<li><a id="b2-li-1803"/><span class="KeyTerm1">multiplier</span>
<ul class="none">
<li><a id="b2-li-1804"/>primitive constraint, <i>257</i></li>
<li><a id="b2-li-1805"/>selector, <i>129</i></li>
</ul></li>
<li><a id="b2-li-1806"/>Munro, Ian, 104<i>n</i></li>
<li><a id="b2-li-1807"/>mutable data objects, 222–230, <i>see also</i> queue; table<ul class="none">
<li><a id="b2-li-1808"/>functional representation of, 229–230</li>
<li><a id="b2-li-1809"/>implemented with assignment, 229–230</li>
<li><a id="b2-li-1810"/>list structure, 222–226</li>
<li><a id="b2-li-1811"/>pairs, 222–226</li>
<li><a id="b2-li-1812"/>shared data, 228</li>
</ul></li>
<li><a id="b2-li-1813"/>mutator, 222</li>
<li><a id="b2-li-1814"/>mutex, 276</li>
<li><a id="b2-li-1815"/>mutual exclusion, 276<i>n</i></li>
<li><a id="b2-li-1816"/>mutual recursion, 221</li>
<li><a id="b2-li-1817"/><span class="KeyTerm1">mystery</span>, <i>226</i> (ex. 3.14)</li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-1818"/>name, <i>see</i> constant; local name; variable<ul class="none">
<li><a id="b2-li-1819"/>bound, 23</li>
<li><a id="b2-li-1820"/>encapsulated, 193<i>n</i></li>
<li><a id="b2-li-1821"/>free, 23</li>
<li><a id="b2-li-1822"/>of a function, 9</li>
<li><a id="b2-li-1823"/>of a parameter, 23</li>
<li><a id="b2-li-1824"/>parsing of, 330</li>
<li><a id="b2-li-1825"/>scope of, 23, <i>see also</i> scope of a name</li>
<li><a id="b2-li-1826"/>unbound, 206</li>
<li><a id="b2-li-1827"/>value of, 206</li>
</ul></li>
<li><a id="b2-li-1828"/>naming<ul class="none">
<li><a id="b2-li-1829"/>of computational objects, 5</li>
<li><a id="b2-li-1830"/>of functions, 8</li>
</ul></li>
<li><a id="b2-li-1831"/>naming conventions<ul class="none">
<li><a id="b2-li-1832"/>$ for pattern variables, 403</li>
<li><a id="b2-li-1833"/><span class="KeyTerm1">is_</span> for predicates, 20<i>n</i></li>
<li><a id="b2-li-1834"/>snake case, 10<i>n</i></li>
</ul></li>
<li><a id="b2-li-1835"/>NaN, not a typo, 339<i>n</i></li>
<li><a id="b2-li-1836"/>native language of machine, 520</li>
<li><a id="b2-li-1837"/>natural language parsing, <i>see</i> parsing natural language</li>
<li><a id="b2-li-1838"/>needed registers, <i>see</i> instruction sequence</li>
<li><a id="b2-li-1839"/><span class="KeyTerm1">needs_register</span>, <i>543</i></li>
<li><a id="b2-li-1840"/><span class="KeyTerm1">negate</span>, <i>427</i></li>
<li><a id="b2-li-1841"/><span class="KeyTerm1">negated_query</span>, <i>443</i></li>
<li><a id="b2-li-1842"/>negation<ul class="none">
<li><a id="b2-li-1843"/>logical (<span class="KeyTerm1">!</span>), 15</li>
<li><a id="b2-li-1844"/>numeric (<span class="KeyTerm1">-</span>), 15</li>
</ul></li>
<li><a id="b2-li-1845"/>negation as failure, 422<i>n</i></li>
<li><a id="b2-li-1846"/>nested declaration(s), <i>see</i> internal declaration</li>
<li><a id="b2-li-1847"/>nested mapping(s), <i>see</i> mapping</li>
<li><a id="b2-li-1848"/>nested operator combinations, 4</li>
<li><a id="b2-li-1849"/>Netscape Communications Corporation, 2</li>
<li><a id="b2-li-1850"/>Netscape Navigator, 2</li>
<li><a id="b2-li-1851"/><span class="KeyTerm1">new</span> register, 496</li>
<li><a id="b2-li-1852"/><span class="KeyTerm1">new_heads</span> register, 494</li>
<li><a id="b2-li-1853"/><span class="KeyTerm1">new_tails</span> register, 494</li>
<li><a id="b2-li-1854"/>Newton's method<ul class="none">
<li><a id="b2-li-1855"/>for cube roots, 21 (ex. 1.8)</li>
<li><a id="b2-li-1856"/>for differentiable functions, 64–65</li>
<li><a id="b2-li-1857"/>half-interval method vs., 64<i>n</i></li>
<li><a id="b2-li-1858"/>for square roots, 18–20, 65, 66</li>
</ul></li>
<li><a id="b2-li-1859"/><span class="KeyTerm1">newtons_method</span>, <i>65</i></li>
<li><a id="b2-li-1860"/><span class="KeyTerm1">newton_transform</span>, <i>65</i></li>
<li><a id="b2-li-1861"/><span class="KeyTerm1">new_withdraw</span>, <i>193</i></li>
<li><a id="b2-li-1862"/><span class="KeyTerm1">next</span> (linkage descriptor), 523</li>
<li><a id="b2-li-1863"/><span class="KeyTerm1">next_to_in</span> (rules), <i>410</i> (ex. 4.59)</li>
<li><a id="b2-li-1864"/>node of a tree, 7</li>
<li><a id="b2-li-1865"/>noncomputable, 351<i>n</i></li>
<li><a id="b2-li-1866"/>nondeterminism, in behavior of concurrent programs, 267<i>n</i>, 315<i>n</i></li>
<li><a id="b2-li-1867"/>nondeterministic choice point, 375</li>
<li><a id="b2-li-1868"/>nondeterministic computing, 373–385</li>
<li><a id="b2-li-1869"/>nondeterministic evaluator, 386–398<ul class="none">
<li><a id="b2-li-1870"/>order of argument evaluation, 385 (ex. 4.44)</li>
</ul></li>
<li><a id="b2-li-1871"/>nondeterministic programming vs. JavaScript programming, 373, 380 (ex. 4.39), 380 (ex. 4.42)</li>
<li><a id="b2-li-1872"/>nondeterministic programs<ul class="none">
<li><a id="b2-li-1873"/>logic puzzles, 378–380</li>
<li><a id="b2-li-1874"/>pairs with prime sums, 373</li>
<li><a id="b2-li-1875"/>parsing natural language, 381–384</li>
<li><a id="b2-li-1876"/>Pythagorean triples, 377 (ex. 4.33), 378 (ex. 4.34), 378 (ex. 4.35)</li>
</ul></li>
<li><a id="b2-li-1877"/>non-strict, 362</li>
<li><a id="b2-li-1878"/>normal-order evaluation, 13<ul class="none">
<li><a id="b2-li-1879"/>applicative order vs., 17 (ex. 1.5), 43 (ex. 1.20), 361–362</li>
<li><a id="b2-li-1880"/>of conditional expressions, 17 (ex. 1.5)</li>
<li><a id="b2-li-1881"/>delayed evaluation and, 310</li>
<li><a id="b2-li-1882"/>in explicit-control evaluator, 513 (ex. 5.26)</li>
</ul></li>
<li><a id="b2-li-1883"/>normal-order evaluator, <i>see</i> lazy evaluator</li>
<li><a id="b2-li-1884"/><span class="KeyTerm1">not</span> (query language), 406, 421<ul class="none">
<li><a id="b2-li-1885"/>evaluation of, 415, 427, 446 (ex. 4.74)</li>
</ul></li>
<li><a id="b2-li-1886"/>notation in this book<ul class="none">
<li><a id="b2-li-1887"/>box notation for data, 86</li>
<li><a id="b2-li-1888"/>italic symbols in expression syntax, 9<i>n</i></li>
<li><a id="b2-li-1889"/>list notation for data, 87</li>
<li><a id="b2-li-1890"/>slanted characters for interpreter response, 4<i>n</i></li>
</ul></li>
<li><a id="b2-li-1891"/><span class="KeyTerm1">nouns</span>, <i>381</i></li>
<li><a id="b2-li-1892"/><i>n</i>th root, as fixed point, 68 (ex. 1.45)</li>
<li><a id="b2-li-1893"/><span class="KeyTerm1"><b>null</b></span> (keyword)<ul class="none">
<li><a id="b2-li-1894"/>as empty list, 87</li>
<li><a id="b2-li-1895"/>as end-of-list marker, 85</li>
<li><a id="b2-li-1896"/>recognizing with <span class="KeyTerm1">is_null</span>, 87</li>
</ul></li>
<li><a id="b2-li-1897"/>number(s)<ul class="none">
<li><a id="b2-li-1898"/>bignum, 490</li>
<li><a id="b2-li-1899"/>comparison of, 14</li>
<li><a id="b2-li-1900"/>equality of, 14, 125 (ex. 2.54), 490<i>n</i></li>
<li><a id="b2-li-1901"/>in generic arithmetic system, 165</li>
<li><a id="b2-li-1902"/>integer vs. real number, 3<i>n</i></li>
<li><a id="b2-li-1903"/>in JavaScript, 3</li>
</ul></li>
<li><a id="b2-li-1904"/><span class="KeyTerm1">number_equal</span>, <i>130</i></li>
<li><a id="b2-li-1905"/>number theory, 44<i>n</i></li>
<li><a id="b2-li-1906"/><span class="KeyTerm1">numer</span>, 72, <i>74</i>
<ul class="none">
<li><a id="b2-li-1907"/>axiom for, 78</li>
<li><a id="b2-li-1908"/>reducing to lowest terms, <i>77</i></li>
</ul></li>
<li><a id="b2-li-1909"/>numerical analysis, 3<i>n</i></li>
<li><a id="b2-li-1910"/>numerical analyst, 59<i>n</i></li>
<li><a id="b2-li-1911"/>numerical data, 3</li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-1912"/>object(s), 189<ul class="none">
<li><a id="b2-li-1913"/>benefits of modeling with, 197</li>
<li><a id="b2-li-1914"/>with time-varying state, 190</li>
</ul></li>
<li><a id="b2-li-1915"/>object-oriented programming languages, 174<i>n</i></li>
<li><a id="b2-li-1916"/>object program, 520</li>
<li><a id="b2-li-1917"/>Ocaml, 90 (ex. 2.20)</li>
<li><a id="b2-li-1918"/><span class="KeyTerm1">office_move</span>, <i>379</i></li>
<li><a id="b2-li-1919"/><span class="KeyTerm1">old</span> register, 496</li>
<li><a id="b2-li-1920"/><span class="KeyTerm1">oldht</span> register, 497</li>
<li><a id="b2-li-1921"/><span class="KeyTerm1">ones</span> (infinite stream), <i>290</i>
<ul class="none">
<li><a id="b2-li-1922"/>lazy-list version, <i>371</i></li>
</ul></li>
<li><a id="b2-li-1923"/><span class="KeyTerm1">op</span> (in register machine), 453<ul class="none">
<li><a id="b2-li-1924"/>simulating, 482, <i>483</i></li>
</ul></li>
<li><a id="b2-li-1925"/>open coding of primitives, 553 (ex. 5.41)</li>
<li><a id="b2-li-1926"/>operands of a combination, 4</li>
<li><a id="b2-li-1927"/>operation<ul class="none">
<li><a id="b2-li-1928"/>cross-type, 169</li>
<li><a id="b2-li-1929"/>generic, 71</li>
<li><a id="b2-li-1930"/>in register machine, 450–452</li>
</ul></li>
<li><a id="b2-li-1931"/>operation-and-type table, 157<ul class="none">
<li><a id="b2-li-1932"/>assignment needed for, 191<i>n</i></li>
<li><a id="b2-li-1933"/>implementing, 239</li>
</ul></li>
<li><a id="b2-li-1934"/><span class="KeyTerm1">operation_exp_op</span>, <i>483</i></li>
<li><a id="b2-li-1935"/><span class="KeyTerm1">operation_exp_operands</span>, <i>483</i></li>
<li><a id="b2-li-1936"/>operator combination, 4<ul class="none">
<li><a id="b2-li-1937"/>as function application, 335</li>
<li><a id="b2-li-1938"/>as derived component, 335</li>
<li><a id="b2-li-1939"/>evaluation of, 6–8</li>
<li><a id="b2-li-1940"/>parsing of, 334</li>
<li><a id="b2-li-1941"/>as a tree, 7</li>
</ul></li>
<li><a id="b2-li-1942"/><span class="KeyTerm1">operator_combination_to_application</span>, <i>335</i></li>
<li><a id="b2-li-1943"/>operator of a combination, 4</li>
<li><a id="b2-li-1944"/>operator precedence, <i>see</i> precedence operators (ECMAScript may allow<ul class="none">
<li><a id="b2-li-1945"/>additional operand type combinations)</li>
<li><a id="b2-li-1946"/><span class="KeyTerm1">+</span> (for numeric addition), 4</li>
<li><a id="b2-li-1947"/><span class="KeyTerm1">+</span> (for string concatenation), 75</li>
<li><a id="b2-li-1948"/>- (numeric negation operator), 15</li>
<li><a id="b2-li-1949"/>- (numeric subtraction operator), 5</li>
<li><a id="b2-li-1950"/><span class="KeyTerm1">*</span> (multiplication), 4</li>
<li><a id="b2-li-1951"/><span class="KeyTerm1">/</span> (division), 4</li>
<li><a id="b2-li-1952"/><span class="KeyTerm1">%</span> (remainder), 39</li>
<li><a id="b2-li-1953"/><span class="KeyTerm1">!</span> (logical negation), 15</li>
<li><a id="b2-li-1954"/><span class="KeyTerm1">!==</span> (for numeric comparison), 15</li>
<li><a id="b2-li-1955"/><span class="KeyTerm1">!==</span> (for string comparison), 124</li>
<li><a id="b2-li-1956"/><span class="KeyTerm1">===</span> (for nonprimitive values), 228</li>
<li><a id="b2-li-1957"/><span class="KeyTerm1">===</span> (for numeric comparison), 15</li>
<li><a id="b2-li-1958"/><span class="KeyTerm1">===</span> (for string comparison), 124</li>
<li><a id="b2-li-1959"/><span class="KeyTerm1">&lt;</span> (numeric comparison), 15</li>
<li><a id="b2-li-1960"/><span class="KeyTerm1">&lt;=</span> (numeric comparison), 15</li>
<li><a id="b2-li-1961"/><span class="KeyTerm1">&gt;</span> (numeric comparison), 15</li>
<li><a id="b2-li-1962"/><span class="KeyTerm1">&gt;=</span> (numeric comparison), 14</li>
</ul></li>
<li><a id="b2-li-1963"/>optimality<ul class="none">
<li><a id="b2-li-1964"/>of Horner's rule, 104<i>n</i></li>
<li><a id="b2-li-1965"/>of Huffman code, 142</li>
</ul></li>
<li><a id="b2-li-1966"/><span class="KeyTerm1">or</span> (query language), 405<ul class="none">
<li><a id="b2-li-1967"/>evaluation of, 414, 427</li>
</ul></li>
<li><a id="b2-li-1968"/>Oracle Corporation, 2</li>
<li><a id="b2-li-1969"/><span class="KeyTerm1">order</span>, 179, <i>182</i></li>
<li><a id="b2-li-1970"/>ordered-list representation of sets, 133–135</li>
<li><a id="b2-li-1971"/>order notation, 37</li>
<li><a id="b2-li-1972"/>order of evaluation<ul class="none">
<li><a id="b2-li-1973"/>assignment and, 206 (ex. 3.8)</li>
<li><a id="b2-li-1974"/>in compiler, 549 (ex. 5.39)</li>
<li><a id="b2-li-1975"/>in explicit-control evaluator, 506</li>
<li><a id="b2-li-1976"/>in metacircular evaluator, 507<i>n</i></li>
<li><a id="b2-li-1977"/>in JavaScript, 206 (ex. 3.8), 207<i>n</i></li>
<li><a id="b2-li-1978"/>in metacircular evaluator, 328 (ex. 4.1)</li>
</ul></li>
<li><a id="b2-li-1979"/>order of events<ul class="none">
<li><a id="b2-li-1980"/>decoupling apparent from actual, 286</li>
<li><a id="b2-li-1981"/>indeterminacy in concurrent systems, 264</li>
</ul></li>
<li><a id="b2-li-1982"/>order of growth, 36–37<ul class="none">
<li><a id="b2-li-1983"/>linear iterative process, 37</li>
<li><a id="b2-li-1984"/>linear recursive process, 37</li>
<li><a id="b2-li-1985"/>logarithmic, 39</li>
<li><a id="b2-li-1986"/>tree-recursive process, 37</li>
</ul></li>
<li><a id="b2-li-1987"/>order of subexpression evaluation, <i>see</i> order of evaluation</li>
<li><a id="b2-li-1988"/>ordinary numbers (in generic arithmetic system), 165</li>
<li><a id="b2-li-1989"/>or-gate, 241<ul class="none">
<li><a id="b2-li-1990"/><span class="KeyTerm1">or_gate</span>, 245 (ex. 3.28), 245 (ex. 3.29)</li>
</ul></li>
<li><a id="b2-li-1991"/><span class="KeyTerm1">origin_frame</span>, 117</li>
<li><a id="b2-li-1992"/>Ostrowski, A. M., 104<i>n</i></li>
<li><a id="b2-li-1993"/><span class="KeyTerm1">outranked_by</span> (rule), <i>408</i>, 422 (ex. 4.62) overloaded operator <span class="KeyTerm1">+</span>, 75</li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-1994"/>P operation on semaphore, 276<i>n</i></li>
<li><a id="b2-li-1995"/>package, 157<ul class="none">
<li><a id="b2-li-1996"/>complex-number, 167</li>
<li><a id="b2-li-1997"/>JavaScript-number, 165</li>
<li><a id="b2-li-1998"/>polar representation, 159</li>
<li><a id="b2-li-1999"/>polynomial, 178</li>
<li><a id="b2-li-2000"/>rational-number, 166</li>
<li><a id="b2-li-2001"/>rectangular representation, 157</li>
</ul></li>
<li><a id="b2-li-2002"/>painter(s), 110<ul class="none">
<li><a id="b2-li-2003"/>higher-order operations, 115</li>
<li><a id="b2-li-2004"/>operations, 112</li>
<li><a id="b2-li-2005"/>represented as functions, 119</li>
<li><a id="b2-li-2006"/>transforming and combining, 120</li>
</ul></li>
<li><a id="b2-li-2007"/><span class="KeyTerm1">pair</span> (primitive function), 73<ul class="none">
<li><a id="b2-li-2008"/>axiom for, 79</li>
<li><a id="b2-li-2009"/>closure property of, 84</li>
<li><a id="b2-li-2010"/>functional implementation of, <i>79</i>, <i>80</i> (ex. 2.4), <i>229, 230</i>, <i>371</i></li>
<li><a id="b2-li-2011"/>implemented with mutators, 224, <i>225</i></li>
<li><a id="b2-li-2012"/>implemented with vectors, 491</li>
<li><a id="b2-li-2013"/>as list operation, 86</li>
</ul></li>
<li><a id="b2-li-2014"/>pair(s), 73<ul class="none">
<li><a id="b2-li-2015"/>axiomatic definition of, 79</li>
<li><a id="b2-li-2016"/>box-and-pointer notation for, 84</li>
<li><a id="b2-li-2017"/>box notation for, 86</li>
<li><a id="b2-li-2018"/>functional representation of, 79–80, 229–230, 370</li>
<li><a id="b2-li-2019"/>infinite stream of, 299–302</li>
<li><a id="b2-li-2020"/>lazy, 370–372</li>
<li><a id="b2-li-2021"/>mutable, 222–226</li>
<li><a id="b2-li-2022"/>represented using vectors, 488–492</li>
<li><a id="b2-li-2023"/>used to represent sequence, 85</li>
<li><a id="b2-li-2024"/>used to represent tree, 93–96</li>
</ul></li>
<li><a id="b2-li-2025"/><span class="KeyTerm1">pairs</span>, <i>301</i></li>
<li><a id="b2-li-2026"/>Pan, V. Y., 104<i>n</i></li>
<li><a id="b2-li-2027"/><span class="KeyTerm1">parallel_instruction_sequences</span>, <i>546</i></li>
<li><a id="b2-li-2028"/>parameter passing, <i>see</i> call-by-name<ul class="none">
<li><a id="b2-li-2029"/>argument passing; call-by-need</li>
<li><a id="b2-li-2030"/>argument passing</li>
</ul></li>
<li><a id="b2-li-2031"/>parameters, 9<ul class="none">
<li><a id="b2-li-2032"/>distinct from local names, 336 (ex. 4.5)</li>
<li><a id="b2-li-2033"/>duplicate, 336 (ex. 4.5)</li>
<li><a id="b2-li-2034"/>names of, 23</li>
<li><a id="b2-li-2035"/>scope of, 24</li>
<li><a id="b2-li-2036"/>as variables, 192, 194</li>
</ul></li>
<li><a id="b2-li-2037"/>parentheses<ul class="none">
<li><a id="b2-li-2038"/>in function declaration, 9</li>
<li><a id="b2-li-2039"/>to group operator combinations, 4</li>
<li><a id="b2-li-2040"/>around lambda expression, 55</li>
<li><a id="b2-li-2041"/>around parameters of lambda expression, 54</li>
<li><a id="b2-li-2042"/>around predicate of conditional statement, 57</li>
</ul></li>
<li><a id="b2-li-2043"/><span class="KeyTerm1">parse</span>, 328, <i>see also</i> parsing JavaScript<ul class="none">
<li><a id="b2-li-2044"/>in query interpreter, 425</li>
</ul></li>
<li><a id="b2-li-2045"/><span class="KeyTerm1">parse_…</span>, 381–383</li>
<li><a id="b2-li-2046"/>parsing JavaScript, 328–329<ul class="none">
<li><a id="b2-li-2047"/><span class="KeyTerm1">&amp;&amp;</span> (logical conjunction), 336 (ex. 4.4)</li>
<li><a id="b2-li-2048"/><span class="KeyTerm1">||</span> (logical disjunction), 336 (ex. 4.4)</li>
<li><a id="b2-li-2049"/>assignment, 333</li>
<li><a id="b2-li-2050"/>block, 333</li>
<li><a id="b2-li-2051"/>conditional expression, 331</li>
<li><a id="b2-li-2052"/>conditional statement, 331</li>
<li><a id="b2-li-2053"/>constant declaration, 333</li>
<li><a id="b2-li-2054"/>expression statement, 331</li>
<li><a id="b2-li-2055"/>function application, 331</li>
<li><a id="b2-li-2056"/>function declaration, 334</li>
<li><a id="b2-li-2057"/>lambda expression, 332</li>
<li><a id="b2-li-2058"/>literal expression, 330</li>
<li><a id="b2-li-2059"/>name, 330</li>
<li><a id="b2-li-2060"/>operator combination, 334</li>
<li><a id="b2-li-2061"/>return statement, 333</li>
<li><a id="b2-li-2062"/>sequence of statements, 332</li>
<li><a id="b2-li-2063"/>variable declaration, 333</li>
</ul></li>
<li><a id="b2-li-2064"/>parsing natural language, 381–385<ul class="none">
<li><a id="b2-li-2065"/>real language understanding vs. toy parser, 385<i>n</i></li>
</ul></li>
<li><a id="b2-li-2066"/><span class="KeyTerm1">partial_sums</span>, 292 (ex. 3.55) Pascal, Blaise, 36<i>n</i></li>
<li><a id="b2-li-2067"/>Pascal's triangle, 36 (ex. 1.12)</li>
<li><a id="b2-li-2068"/>Pascal, lack of higher-order functions in, 310<i>n</i></li>
<li><a id="b2-li-2069"/>password-protected bank account, 196 (ex. 3.3)</li>
<li><a id="b2-li-2070"/>pattern, 403–404</li>
<li><a id="b2-li-2071"/><span class="KeyTerm1">pattern_match</span>, <i>429</i></li>
<li><a id="b2-li-2072"/>pattern matching, 412<ul class="none">
<li><a id="b2-li-2073"/>implementation, 428–429</li>
<li><a id="b2-li-2074"/>unification vs., 416, 418<i>n</i></li>
</ul></li>
<li><a id="b2-li-2075"/>pattern variable, 403<ul class="none">
<li><a id="b2-li-2076"/>representation of, 437</li>
</ul></li>
<li><a id="b2-li-2077"/><span class="KeyTerm1">pc</span> register, 472</li>
<li><a id="b2-li-2078"/><span class="KeyTerm1">perform</span> (in register machine), 455<ul class="none">
<li><a id="b2-li-2079"/>instruction constructor, <i>481</i></li>
<li><a id="b2-li-2080"/>simulating, 481</li>
</ul></li>
<li><a id="b2-li-2081"/><span class="KeyTerm1">perform_action</span>, <i>481</i></li>
<li><a id="b2-li-2082"/>Perlis, Alan J., xxiii<ul class="none">
<li><a id="b2-li-2083"/>quips by, 5<i>n</i>, 30<i>n</i></li>
</ul></li>
<li><a id="b2-li-2084"/>permutations of a set, 108<ul class="none">
<li><a id="b2-li-2085"/><span class="KeyTerm1">permutations</span>, <i>108</i></li>
</ul></li>
<li><a id="b2-li-2086"/>Peter, Paul and Mary, 267 (ex. 3.38)</li>
<li><a id="b2-li-2087"/>Phillips, Hubert, 380 (ex. 4.40), 380 (ex. 4.41)</li>
<li><a id="b2-li-2088"/><i>π</i> (pi)<ul class="none">
<li><a id="b2-li-2089"/>approximation with half-interval method, 60</li>
<li><a id="b2-li-2090"/>approximation with Monte Carlo integration, 200 (ex. 3.5), 312 (ex. 3.82)</li>
<li><a id="b2-li-2091"/>Dirichlet estimate for, 198, 311</li>
<li><a id="b2-li-2092"/>Leibniz's series for, 49<i>n</i>, 296</li>
<li><a id="b2-li-2093"/>stream of approximations, 296–298</li>
<li><a id="b2-li-2094"/>Wallis's formula for, 52 (ex. 1.31)</li>
</ul></li>
<li><a id="b2-li-2095"/>picture language, 110–123</li>
<li><a id="b2-li-2096"/>Pingala, Áchárya, 40<i>n</i></li>
<li><a id="b2-li-2097"/>pipelining, 263<i>n</i></li>
<li><a id="b2-li-2098"/><span class="KeyTerm1">pi_stream</span>, <i>296</i></li>
<li><a id="b2-li-2099"/><span class="KeyTerm1">pi_sum</span>, <i>49</i>
<ul class="none">
<li><a id="b2-li-2100"/>with higher-order functions, <i>51</i></li>
<li><a id="b2-li-2101"/>with lambda expression, <i>54</i></li>
</ul></li>
<li><a id="b2-li-2102"/>Planner, 376<i>n</i></li>
<li><a id="b2-li-2103"/>point, represented as a pair, 77 (ex. 2.2)</li>
<li><a id="b2-li-2104"/>pointer<ul class="none">
<li><a id="b2-li-2105"/>in box-and-pointer notation, 84</li>
<li><a id="b2-li-2106"/>typed, 489</li>
</ul></li>
<li><a id="b2-li-2107"/><span class="KeyTerm1">polar</span> package, 159</li>
<li><a id="b2-li-2108"/>poly, 177</li>
<li><a id="b2-li-2109"/>polymorphic types, 310<i>n</i></li>
<li><a id="b2-li-2110"/><span class="KeyTerm1">polynomial</span> package, 178</li>
<li><a id="b2-li-2111"/>polynomial(s), 177–188<ul class="none">
<li><a id="b2-li-2112"/>canonical form, 184</li>
<li><a id="b2-li-2113"/>dense, 181</li>
<li><a id="b2-li-2114"/>evaluating with Horner's rule, 103 (ex. 2.34)</li>
<li><a id="b2-li-2115"/>hierarchy of types, 184</li>
<li><a id="b2-li-2116"/>indeterminate of, 177</li>
<li><a id="b2-li-2117"/>sparse, 181</li>
<li><a id="b2-li-2118"/>univariate, 177</li>
</ul></li>
<li><a id="b2-li-2119"/>polynomial arithmetic, 177–188<ul class="none">
<li><a id="b2-li-2120"/>addition, 178–181</li>
<li><a id="b2-li-2121"/>division, 183 (ex. 2.91)</li>
<li><a id="b2-li-2122"/>Euclid's Algorithm, 185<i>n</i></li>
<li><a id="b2-li-2123"/>greatest common divisor, 185–187, 188<i>n</i></li>
<li><a id="b2-li-2124"/>interfaced to generic arithmetic system, 178</li>
<li><a id="b2-li-2125"/>multiplication, 178–181</li>
<li><a id="b2-li-2126"/>probabilistic algorithm for GCD, 188<i>n</i></li>
<li><a id="b2-li-2127"/>rational functions, 184–188</li>
<li><a id="b2-li-2128"/>subtraction, 182 (ex. 2.88)</li>
</ul></li>
<li><a id="b2-li-2129"/><span class="KeyTerm1">pop</span>, <i>471</i></li>
<li><a id="b2-li-2130"/>porting a language, 561</li>
<li><a id="b2-li-2131"/>PowerPC, 279<i>n</i></li>
<li><a id="b2-li-2132"/>power series, as stream, 294 (ex. 3.59)<ul class="none">
<li><a id="b2-li-2133"/>adding, 294 (ex. 3.60)</li>
<li><a id="b2-li-2134"/>dividing, 295 (ex. 3.62)</li>
<li><a id="b2-li-2135"/>integrating, 294 (ex. 3.59)</li>
<li><a id="b2-li-2136"/>multiplying, 294 (ex. 3.60)</li>
</ul></li>
<li><a id="b2-li-2137"/>precedence<ul class="none">
<li><a id="b2-li-2138"/>of conditional expression, 17 (ex. 1.1)</li>
<li><a id="b2-li-2139"/>of lambda expression, 55</li>
<li><a id="b2-li-2140"/>of operators, 5</li>
<li><a id="b2-li-2141"/>of unary operators, 16</li>
</ul></li>
<li><a id="b2-li-2142"/>predicate, 14<ul class="none">
<li><a id="b2-li-2143"/>of clause, 15</li>
<li><a id="b2-li-2144"/>of conditional expression, 14 </li>
<li><a id="b2-li-2145"/>of conditional statement, 57</li>
<li><a id="b2-li-2146"/>naming convention for, 20<i>n</i></li>
</ul></li>
<li><a id="b2-li-2147"/>prefix code, 140</li>
<li><a id="b2-li-2148"/>prefix notation, 128<ul class="none">
<li><a id="b2-li-2149"/>infix notation vs., 131 (ex. 2.58)</li>
</ul></li>
<li><a id="b2-li-2150"/>prefix operator, 15</li>
<li><a id="b2-li-2151"/><span class="KeyTerm1">prepositions</span>, <i>382</i></li>
<li><a id="b2-li-2152"/><span class="KeyTerm1">preserving</span>, 524, 526 (ex. 5.32), <i>545</i>, 553 (ex. 5.40)</li>
<li><a id="b2-li-2153"/>pretty-printing, 335 (ex. 4.2)</li>
<li><a id="b2-li-2154"/>prime number(s), 43–46<ul class="none">
<li><a id="b2-li-2155"/>cryptography and, 46<i>n</i></li>
<li><a id="b2-li-2156"/>Eratosthenes's sieve for, 289</li>
<li><a id="b2-li-2157"/>Fermat test for, 44–45</li>
<li><a id="b2-li-2158"/>infinite stream of, <i>see</i> <span class="KeyTerm1">primes</span></li>
<li><a id="b2-li-2159"/>Miller–Rabin test for, 48 (ex. 1.28)</li>
<li><a id="b2-li-2160"/>testing for, 43–48</li>
</ul></li>
<li><a id="b2-li-2161"/><span class="KeyTerm1">primes</span> (infinite stream), <i>289</i>
<ul class="none">
<li><a id="b2-li-2162"/>implicit definition, <i>291</i></li>
</ul></li>
<li><a id="b2-li-2163"/><span class="KeyTerm1">prime_sum_pair</span>, <i>373</i></li>
<li><a id="b2-li-2164"/><span class="KeyTerm1">prime_sum_pairs</span>, <i>107</i>
<ul class="none">
<li><a id="b2-li-2165"/>infinite stream, 299</li>
</ul></li>
<li><a id="b2-li-2166"/><span class="KeyTerm1">primitive_apply</span>, <i>507</i></li>
<li><a id="b2-li-2167"/>primitive constraints, 253</li>
<li><a id="b2-li-2168"/>primitive expression, 3<ul class="none">
<li><a id="b2-li-2169"/>evaluation of, 7</li>
<li><a id="b2-li-2170"/>name of constant, 5</li>
<li><a id="b2-li-2171"/>number, 3</li>
</ul></li>
<li><a id="b2-li-2172"/>primitive function, 10</li>
<li><a id="b2-li-2173"/><span class="KeyTerm1">primitive_function_objects</span>, <i>345</i></li>
<li><a id="b2-li-2174"/>primitive functions (ECMAScript equivalent in parentheses; those marked <i>ns</i> are not in the ECMAScript standard)<ul class="none">
<li><a id="b2-li-2175"/><span class="KeyTerm1">apply</span> (<span class="KeyTerm1">apply</span>), 346<i>n</i></li>
<li><a id="b2-li-2176"/><span class="KeyTerm1">display</span> (<i>ns</i>), 75<i>n</i></li>
<li><a id="b2-li-2177"/><span class="KeyTerm1">error</span> (<i>ns</i>), 60<i>n</i></li>
<li><a id="b2-li-2178"/><span class="KeyTerm1">eval</span>, 350</li>
<li><a id="b2-li-2179"/><span class="KeyTerm1">get_time</span> (<span class="KeyTerm1">new Date().getTime</span>), 46 (ex. 1.22)</li>
<li><a id="b2-li-2180"/><span class="KeyTerm1">head</span> (<i>ns</i>), 73</li>
<li><a id="b2-li-2181"/><span class="KeyTerm1">is_null</span> (<i>ns</i>), 87</li>
<li><a id="b2-li-2182"/><span class="KeyTerm1">is_number</span> (<i>ns</i>), 127</li>
<li><a id="b2-li-2183"/><span class="KeyTerm1">is_pair</span> (<i>ns</i>), 94</li>
<li><a id="b2-li-2184"/><span class="KeyTerm1">is_string</span> (<i>ns</i>), 128</li>
<li><a id="b2-li-2185"/><span class="KeyTerm1">is_undefined</span>, 157</li>
<li><a id="b2-li-2186"/><span class="KeyTerm1">list</span> (<i>ns</i>), 86</li>
<li><a id="b2-li-2187"/><span class="KeyTerm1">math_atan2</span> (<span class="KeyTerm1">Math.atan2</span>), 151<i>n</i></li>
<li><a id="b2-li-2188"/><span class="KeyTerm1">math_cos</span> (<span class="KeyTerm1">Math.cos</span>), 61</li>
<li><a id="b2-li-2189"/><span class="KeyTerm1">math_floor</span> (<span class="KeyTerm1">Math.floor</span>), 45</li>
<li><a id="b2-li-2190"/><span class="KeyTerm1">math_log</span> (<span class="KeyTerm1">Math.log</span>), 10, 62 (ex. 1.36)</li>
<li><a id="b2-li-2191"/><span class="KeyTerm1">math_max</span> (<span class="KeyTerm1">Math.max</span>), 81</li>
<li><a id="b2-li-2192"/><span class="KeyTerm1">math_min</span> (<span class="KeyTerm1">Math.min</span>), 81</li>
<li><a id="b2-li-2193"/><span class="KeyTerm1">math_random</span> (<span class="KeyTerm1">Math.random</span>), 44</li>
<li><a id="b2-li-2194"/><span class="KeyTerm1">math_round</span> (<span class="KeyTerm1">Math.round</span>), 176<i>n</i></li>
<li><a id="b2-li-2195"/><span class="KeyTerm1">math_sin</span> (<span class="KeyTerm1">Math.sin</span>), 61</li>
<li><a id="b2-li-2196"/><span class="KeyTerm1">math_trunc</span> (<span class="KeyTerm1">Math.trunc</span>), 293 (ex. 3.58)</li>
<li><a id="b2-li-2197"/><span class="KeyTerm1">pair</span> (<i>ns</i>), 73</li>
<li><a id="b2-li-2198"/><span class="KeyTerm1">prompt</span> (<i>ns</i>), 347</li>
<li><a id="b2-li-2199"/><span class="KeyTerm1">set_head</span> (<i>ns</i>), 223</li>
<li><a id="b2-li-2200"/><span class="KeyTerm1">set_tail</span> (<i>ns</i>), 223</li>
<li><a id="b2-li-2201"/><span class="KeyTerm1">stringify</span> (<span class="KeyTerm1">JSON.stringify</span>), 75</li>
<li><a id="b2-li-2202"/><span class="KeyTerm1">tail</span> (<i>ns</i>), 73</li>
<li><a id="b2-li-2203"/><span class="KeyTerm1">vector_ref</span> (<i>ns</i>), 488</li>
<li><a id="b2-li-2204"/><span class="KeyTerm1">vector_set</span> (<i>ns</i>), 488</li>
<li><a id="b2-li-2205"/><span class="KeyTerm1">primitive_function_symbols</span>, <i>345</i></li>
</ul></li>
<li><a id="b2-li-2206"/><span class="KeyTerm1">primitive_implementation</span>, <i>345</i></li>
<li><a id="b2-li-2207"/>primitive query, <i>see</i> simple query principle of least commitment, 152</li>
<li><a id="b2-li-2208"/><span class="KeyTerm1">print_point</span>, <i>78</i> (ex. 2.2)</li>
<li><a id="b2-li-2209"/><span class="KeyTerm1">print_queue</span>, 234 (ex. 3.21)</li>
<li><a id="b2-li-2210"/><span class="KeyTerm1">print_rat</span>, <i>75</i></li>
<li><a id="b2-li-2211"/><span class="KeyTerm1">print_result</span>, <i>514</i>
<ul class="none">
<li><a id="b2-li-2212"/>monitored-stack version, <i>516</i></li>
</ul></li>
<li><a id="b2-li-2213"/><span class="KeyTerm1">print_stack_statistics</span> operation in register machine, 484</li>
<li><a id="b2-li-2214"/>probabilistic algorithm, 45–46, 188<i>n</i>, 289<i>n</i></li>
<li><a id="b2-li-2215"/><span class="KeyTerm1">probe</span>
<ul class="none">
<li><a id="b2-li-2216"/>in constraint system, <i>258</i></li>
<li><a id="b2-li-2217"/>in digital-circuit simulator, <i>248</i></li>
</ul></li>
<li><a id="b2-li-2218"/>process, 1<ul class="none">
<li><a id="b2-li-2219"/>iterative, 29</li>
<li><a id="b2-li-2220"/>linear iterative, 29</li>
<li><a id="b2-li-2221"/>linear recursive, 29</li>
<li><a id="b2-li-2222"/>local evolution of, 26</li>
<li><a id="b2-li-2223"/>order of growth of, 36</li>
<li><a id="b2-li-2224"/>recursive, 29</li>
<li><a id="b2-li-2225"/>resources required by, 36</li>
<li><a id="b2-li-2226"/>shape of, 28</li>
<li><a id="b2-li-2227"/>tree-recursive, 32–35</li>
</ul></li>
<li><a id="b2-li-2228"/><span class="KeyTerm1">product</span>, 52 (ex. 1.31)<ul class="none">
<li><a id="b2-li-2229"/>as accumulation, 53 (ex. 1.32)</li>
</ul></li>
<li><a id="b2-li-2230"/>program, 1<ul class="none">
<li><a id="b2-li-2231"/>as abstract machine, 348</li>
<li><a id="b2-li-2232"/>comments in, 108<i>n</i></li>
<li><a id="b2-li-2233"/>as data, 348–350</li>
<li><a id="b2-li-2234"/>incremental development of, 6</li>
<li><a id="b2-li-2235"/>structured with subroutines, 349<i>n</i></li>
<li><a id="b2-li-2236"/>structure of, 6, 22, 24–26, <i>see also</i> abstraction barriers</li>
<li><a id="b2-li-2237"/>value of, 338 (ex. 4.8)</li>
</ul></li>
<li><a id="b2-li-2238"/>program counter, 472</li>
<li><a id="b2-li-2239"/>program environment, 6, 207, 221</li>
<li><a id="b2-li-2240"/>programming<ul class="none">
<li><a id="b2-li-2241"/>data-directed, <i>see</i> data-directed programming</li>
<li><a id="b2-li-2242"/>demand-driven, 286</li>
<li><a id="b2-li-2243"/>elements of, 3</li>
<li><a id="b2-li-2244"/>functional, <i>see</i> functional programming</li>
<li><a id="b2-li-2245"/>imperative, 204</li>
<li><a id="b2-li-2246"/>odious style, 287<i>n</i></li>
</ul></li>
<li><a id="b2-li-2247"/>programming language, 1<ul class="none">
<li><a id="b2-li-2248"/>design of, 360</li>
<li><a id="b2-li-2249"/>functional, 314</li>
<li><a id="b2-li-2250"/>logic, 400</li>
<li><a id="b2-li-2251"/>object-oriented, 174<i>n</i></li>
<li><a id="b2-li-2252"/>statically typed, 310<i>n</i></li>
<li><a id="b2-li-2253"/>very high-level, 18<i>n</i></li>
</ul></li>
<li><a id="b2-li-2254"/>Prolog, 376<i>n</i>, 399<i>n</i></li>
<li><a id="b2-li-2255"/>promise to evaluate, 283<ul class="none">
<li><a id="b2-li-2256"/>lazy evaluation and, 370</li>
</ul></li>
<li><a id="b2-li-2257"/><span class="KeyTerm1">prompt</span> (primitive function), 347</li>
<li><a id="b2-li-2258"/><span class="KeyTerm1">prompt</span> operation in register machine, 454</li>
<li><a id="b2-li-2259"/>prompts, 346<ul class="none">
<li><a id="b2-li-2260"/>explicit-control evaluator, 514</li>
<li><a id="b2-li-2261"/>lazy evaluator, 365</li>
<li><a id="b2-li-2262"/>metacircular evaluator, 346</li>
<li><a id="b2-li-2263"/>nondeterministic evaluator, 395</li>
<li><a id="b2-li-2264"/>query interpreter, 425</li>
</ul></li>
<li><a id="b2-li-2265"/><span class="KeyTerm1">propagate</span>, <i>248</i></li>
<li><a id="b2-li-2266"/>propagation of constraints, 252–262</li>
<li><a id="b2-li-2267"/>proving programs correct, 18<i>n</i></li>
<li><a id="b2-li-2268"/>pseudodivision of polynomials, 187</li>
<li><a id="b2-li-2269"/>pseudo-random sequence, 197<i>n</i></li>
<li><a id="b2-li-2270"/>pseudoremainder of polynomials, 187 <span class="KeyTerm1">push</span>, <i>471</i></li>
<li><a id="b2-li-2271"/><span class="KeyTerm1">push_marker_to_stack</span> (in register machine), 508, 511 (ex. 5.24)</li>
<li><a id="b2-li-2272"/><span class="KeyTerm1">put</span>, 157, <i>239</i></li>
<li><a id="b2-li-2273"/>puzzles<ul class="none">
<li><a id="b2-li-2274"/>eight-queens puzzle, 108 (ex. 2.42), 380 (ex. 4.42)</li>
<li><a id="b2-li-2275"/>logic puzzles, 378–380</li>
</ul></li>
<li><a id="b2-li-2276"/>Pythagorean triples<ul class="none">
<li><a id="b2-li-2277"/>with nondeterministic programs, 377 (ex. 4.33), 378 (ex. 4.34), 378 (ex. 4.35)</li>
<li><a id="b2-li-2278"/>with streams, 301 (ex. 3.69)</li>
</ul></li>
<li><a id="b2-li-2279"/>Python, recursive functions in, 30</li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-2280"/>quantum mechanics, 315<i>n</i></li>
<li><a id="b2-li-2281"/><span class="KeyTerm1">queens</span>, <i>109</i> (ex. 2.42)</li>
<li><a id="b2-li-2282"/>query, 400, <i>see also</i> compound query; simple query</li>
<li><a id="b2-li-2283"/><span class="KeyTerm1">query_driver_loop</span>, <i>425</i></li>
<li><a id="b2-li-2284"/>query interpreter, 400<ul class="none">
<li><a id="b2-li-2285"/>adding rule or assertion, 419</li>
<li><a id="b2-li-2286"/>compound query, <i>see</i> compound query</li>
<li><a id="b2-li-2287"/>data base, 434–435</li>
<li><a id="b2-li-2288"/>driver loop, 418, 424–425</li>
<li><a id="b2-li-2289"/>environment structure in, 447 (ex. 4.76)</li>
<li><a id="b2-li-2290"/>frame, 412, 444</li>
<li><a id="b2-li-2291"/>improvements to, 423 (ex. 4.65), 446 (ex. 4.73), 446 (ex. 4.74)</li>
<li><a id="b2-li-2292"/>infinite loops, 420–421, 423 (ex. 4.65)</li>
<li><a id="b2-li-2293"/>instantiation, 425, 439–441</li>
<li><a id="b2-li-2294"/>JavaScript interpreter vs., 417, 418, 447 (ex. 4.76)</li>
<li><a id="b2-li-2295"/>as nondeterministic program, 447 (ex. 4.75)</li>
<li><a id="b2-li-2296"/>overview, 411–419</li>
<li><a id="b2-li-2297"/>pattern matching, 412, 428–429</li>
<li><a id="b2-li-2298"/>pattern-variable representation, 437</li>
<li><a id="b2-li-2299"/>problems with <span class="KeyTerm1">not</span> and <span class="KeyTerm1">javascript_predicate</span>, 421–422, 446 (ex. 4.74)</li>
<li><a id="b2-li-2300"/>query evaluator, 418, 425–428</li>
<li><a id="b2-li-2301"/>rule, <i>see</i> rule</li>
<li><a id="b2-li-2302"/>simple query, <i>see</i> simple query stream operations, 435–436</li>
<li><a id="b2-li-2303"/>streams of frames, 412, 419<i>n</i></li>
<li><a id="b2-li-2304"/>syntax of query language, 436–444</li>
<li><a id="b2-li-2305"/>unification, 415–417, 431–433</li>
</ul></li>
<li><a id="b2-li-2306"/>query language, 400–411<ul class="none">
<li><a id="b2-li-2307"/>abstraction in, 407</li>
<li><a id="b2-li-2308"/>compound query, <i>see</i> compound query</li>
<li><a id="b2-li-2309"/>data base, 401–403</li>
<li><a id="b2-li-2310"/>equality testing in, 406<i>n</i></li>
<li><a id="b2-li-2311"/>extensions to, 423 (ex. 4.64), 445 (ex. 4.72)</li>
<li><a id="b2-li-2312"/>logical deductions, 409–411</li>
<li><a id="b2-li-2313"/>mathematical logic vs., 419–424</li>
<li><a id="b2-li-2314"/>rule, <i>see</i> rule</li>
<li><a id="b2-li-2315"/>simple query, <i>see</i> simple query</li>
</ul></li>
<li><a id="b2-li-2316"/>query-language-specific representation, 436–444<ul class="none">
<li><a id="b2-li-2317"/>transforming JavaScript syntax into, 438</li>
</ul></li>
<li><a id="b2-li-2318"/>queue, 231–235<ul class="none">
<li><a id="b2-li-2319"/>double-ended, 235 (ex. 3.23)</li>
<li><a id="b2-li-2320"/>front of, 231</li>
<li><a id="b2-li-2321"/>functional implementation of, 235 (ex. 3.22)</li>
<li><a id="b2-li-2322"/>operations on, 231</li>
<li><a id="b2-li-2323"/>rear of, 231</li>
<li><a id="b2-li-2324"/>in simulation agenda, 250</li>
</ul></li>
<li><a id="b2-li-2325"/>quotation marks<ul class="none">
<li><a id="b2-li-2326"/>back quotes, 546</li>
<li><a id="b2-li-2327"/>double, 124</li>
<li><a id="b2-li-2328"/>single, 126 (ex. 2.55)</li>
</ul></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-2329"/>Rabin, Michael O., 48 (ex. 1.28)</li>
<li><a id="b2-li-2330"/>radicand, 19</li>
<li><a id="b2-li-2331"/>Ramanujan, Srinivasa, 302<i>n</i></li>
<li><a id="b2-li-2332"/>Ramanujan numbers, 302 (ex. 3.71)</li>
<li><a id="b2-li-2333"/><span class="KeyTerm1">rand</span>, <i>197</i>
<ul class="none">
<li><a id="b2-li-2334"/>with reset, 200 (ex. 3.6)</li>
</ul></li>
<li><a id="b2-li-2335"/><span class="KeyTerm1">random_in_range</span>, <i>200</i> (ex. 3.5)</li>
<li><a id="b2-li-2336"/>random-number generator, 191<i>n</i>, 197<ul class="none">
<li><a id="b2-li-2337"/>in Monte Carlo simulation, 198</li>
<li><a id="b2-li-2338"/>in primality testing, 44</li>
<li><a id="b2-li-2339"/>with reset, 200 (ex. 3.6)</li>
<li><a id="b2-li-2340"/>with reset, stream version, 312 (ex. 3.81)</li>
</ul></li>
<li><a id="b2-li-2341"/><span class="KeyTerm1">random_numbers</span> (infinite stream), <i>312</i></li>
<li><a id="b2-li-2342"/>Raphael, Bertram, 399<i>n</i></li>
<li><a id="b2-li-2343"/><span class="KeyTerm1">rational</span> package, 166</li>
<li><a id="b2-li-2344"/>rational function, 184–188<ul class="none">
<li><a id="b2-li-2345"/>reducing to lowest terms, 187–188</li>
</ul></li>
<li><a id="b2-li-2346"/>rational number(s)<ul class="none">
<li><a id="b2-li-2347"/>arithmetic operations on, 72–76</li>
<li><a id="b2-li-2348"/>printing, 75</li>
<li><a id="b2-li-2349"/>reducing to lowest terms, 75, 77</li>
<li><a id="b2-li-2350"/>represented as pairs, 74</li>
</ul></li>
<li><a id="b2-li-2351"/>rational-number arithmetic, 72–76<ul class="none">
<li><a id="b2-li-2352"/>interfaced to generic arithmetic system, 166</li>
<li><a id="b2-li-2353"/>need for compound data, 69</li>
<li><a id="b2-li-2354"/>rational tree, 432<i>n</i></li>
</ul></li>
<li><a id="b2-li-2355"/>Raymond, Eric, 361<i>n</i>, 376<i>n</i></li>
<li><a id="b2-li-2356"/>RC circuit, 303 (ex. 3.73)</li>
<li><a id="b2-li-2357"/><span class="KeyTerm1">read_evaluate_print_loop</span>, <i>514</i></li>
<li><a id="b2-li-2358"/>read-evaluate-print loop, 5, <i>see also</i> driver loop real number, 3<i>n</i> </li>
<li><a id="b2-li-2359"/><span class="KeyTerm1">real_part</span>
<ul class="none">
<li><a id="b2-li-2360"/>data-directed, <i>160</i></li>
<li><a id="b2-li-2361"/>polar representation, <i>152</i></li>
<li><a id="b2-li-2362"/>rectangular representation, <i>151</i></li>
<li><a id="b2-li-2363"/>with tagged data, <i>154</i></li>
</ul></li>
<li><a id="b2-li-2364"/><span class="KeyTerm1">real_part_polar</span>, <i>154</i></li>
<li><a id="b2-li-2365"/><span class="KeyTerm1">real_part_rectangular</span>, <i>153</i></li>
<li><a id="b2-li-2366"/><span class="KeyTerm1">rear_ptr</span>, <i>232</i></li>
<li><a id="b2-li-2367"/><span class="KeyTerm1">receive</span> function, 475<i>n</i></li>
<li><a id="b2-li-2368"/>record, in a data base, 139</li>
<li><a id="b2-li-2369"/>rectangle, representing, 78 (ex. 2.3)</li>
<li><a id="b2-li-2370"/><span class="KeyTerm1">rectangular</span> package, 157</li>
<li><a id="b2-li-2371"/>recursion, 7<ul class="none">
<li><a id="b2-li-2372"/>data-directed, 180</li>
<li><a id="b2-li-2373"/>expressing complicated process, 7</li>
<li><a id="b2-li-2374"/>mutual, 221</li>
<li><a id="b2-li-2375"/>in rules, 408</li>
<li><a id="b2-li-2376"/>in working with trees, 93</li>
</ul></li>
<li><a id="b2-li-2377"/>recursion theory, 350<i>n</i></li>
<li><a id="b2-li-2378"/>recursive function<ul class="none">
<li><a id="b2-li-2379"/>recursive function declaration, 21</li>
<li><a id="b2-li-2380"/>recursive process vs., 30</li>
<li><a id="b2-li-2381"/>specifying without declaration, 352 (ex. 4.18)</li>
</ul></li>
<li><a id="b2-li-2382"/>recursive process, 29<ul class="none">
<li><a id="b2-li-2383"/>iterative process vs., 27–30, 212 (ex. 3.9), 462, 549 (ex. 5.37)</li>
<li><a id="b2-li-2384"/>linear, 29, 37</li>
<li><a id="b2-li-2385"/>recursive function vs., 30</li>
<li><a id="b2-li-2386"/>register machine for, 462–467</li>
<li><a id="b2-li-2387"/>tree, 32–35, 37</li>
</ul></li>
<li><a id="b2-li-2388"/>red-black tree, 137<i>n</i></li>
<li><a id="b2-li-2389"/>reducing to lowest terms, 75, 77, 187–188</li>
<li><a id="b2-li-2390"/>Rees, Jonathan A., 356<i>n</i></li>
<li><a id="b2-li-2391"/>referential transparency, 203</li>
<li><a id="b2-li-2392"/><span class="KeyTerm1">reg</span> (in register machine), 453, <i>482</i>
<ul class="none">
<li><a id="b2-li-2393"/>simulating, 482</li>
</ul></li>
<li><a id="b2-li-2394"/>register(s), 449<ul class="none">
<li><a id="b2-li-2395"/>representing, 470</li>
<li><a id="b2-li-2396"/>tracing, 486 (ex. 5.17)</li>
</ul></li>
<li><a id="b2-li-2397"/><span class="KeyTerm1">register_exp_reg</span>, <i>482</i></li>
<li><a id="b2-li-2398"/>register machine, 449<ul class="none">
<li><a id="b2-li-2399"/>actions, 454–455</li>
<li><a id="b2-li-2400"/>controller, 450–452</li>
<li><a id="b2-li-2401"/>controller diagram, 451</li>
<li><a id="b2-li-2402"/>data-path diagram, 450</li>
<li><a id="b2-li-2403"/>data paths, 450–452</li>
<li><a id="b2-li-2404"/>design of, 450–468</li>
<li><a id="b2-li-2405"/>language for describing, 452–455</li>
<li><a id="b2-li-2406"/>monitoring performance, 484–487</li>
<li><a id="b2-li-2407"/>simulator, 468–487</li>
<li><a id="b2-li-2408"/>stack, 462–467</li>
<li><a id="b2-li-2409"/>subroutine, 457–460</li>
<li><a id="b2-li-2410"/>test operation, 451</li>
</ul></li>
<li><a id="b2-li-2411"/>register-machine language, 468<ul class="none">
<li><a id="b2-li-2412"/><span class="KeyTerm1">assign</span>, 453, 468, <i>478</i></li>
<li><a id="b2-li-2413"/><span class="KeyTerm1">branch</span>, 452, 468, <i>480</i></li>
<li><a id="b2-li-2414"/><span class="KeyTerm1">constant</span>, 453, 468, <i>482</i></li>
<li><a id="b2-li-2415"/>entry point, 452</li>
<li><a id="b2-li-2416"/><span class="KeyTerm1">go_to</span>, 452, 468, <i>480</i></li>
<li><a id="b2-li-2417"/>instructions, 452, 468, 477–484</li>
</ul></li>
<li><a id="b2-li-2418"/><span class="KeyTerm1">label</span>, 452, 468, <i>482</i>
<ul class="none">
<li><a id="b2-li-2419"/>label, 452</li>
<li><a id="b2-li-2420"/><span class="KeyTerm1">op</span>, 453, 468, <i>483</i></li>
<li><a id="b2-li-2421"/><span class="KeyTerm1">perform</span>, 455, 468, <i>481</i></li>
<li><a id="b2-li-2422"/><span class="KeyTerm1">push_marker_to_stack</span>, 508, 511 (ex. 5.24)</li>
<li><a id="b2-li-2423"/><span class="KeyTerm1">reg</span>, 453, 468, <i>482</i></li>
<li><a id="b2-li-2424"/><span class="KeyTerm1">restore</span>, 464, 468, <i>481</i></li>
<li><a id="b2-li-2425"/><span class="KeyTerm1">revert_stack_to_marker</span>, 508, 511 (ex. 5.24)</li>
<li><a id="b2-li-2426"/><span class="KeyTerm1">save</span>, 464, 468, <i>481</i></li>
<li><a id="b2-li-2427"/><span class="KeyTerm1">test</span>, 452, 468, <i>479</i></li>
</ul></li>
<li><a id="b2-li-2428"/>register-machine simulator, 468–487</li>
<li><a id="b2-li-2429"/><span class="KeyTerm1">registers_modified</span>, <i>543</i></li>
<li><a id="b2-li-2430"/><span class="KeyTerm1">registers_needed</span>, <i>543</i></li>
<li><a id="b2-li-2431"/>register table, in simulator, 472</li>
<li><a id="b2-li-2432"/>relations, computing in terms of, 253, 398</li>
<li><a id="b2-li-2433"/>relatively prime, 53 (ex. 1.33)</li>
<li><a id="b2-li-2434"/>relativity, theory of, 280</li>
<li><a id="b2-li-2435"/>release a mutex, 276</li>
<li><a id="b2-li-2436"/>remainder<ul class="none">
<li><a id="b2-li-2437"/>after integer division, 39</li>
<li><a id="b2-li-2438"/>modulo <i>n</i>, 44</li>
</ul></li>
<li><a id="b2-li-2439"/><span class="KeyTerm1">remainder_terms</span>, 186 (ex. 2.94)</li>
<li><a id="b2-li-2440"/><span class="KeyTerm1">remove</span>, <i>108</i></li>
<li><a id="b2-li-2441"/><span class="KeyTerm1">remove_first_agenda_item</span>, 248, <i>251</i></li>
<li><a id="b2-li-2442"/><span class="KeyTerm1">rename_variables_in</span>, <i>431</i></li>
<li><a id="b2-li-2443"/><span class="KeyTerm1">require</span>, <i>375</i>
<ul class="none">
<li><a id="b2-li-2444"/>as a syntactic form, 397 (ex. 4.52)</li>
</ul></li>
<li><a id="b2-li-2445"/>resistance<ul class="none">
<li><a id="b2-li-2446"/>formula for parallel resistors, 81, 83</li>
<li><a id="b2-li-2447"/>tolerance of resistors, 81</li>
</ul></li>
<li><a id="b2-li-2448"/>resolution, Horn-clause, 399<i>n</i></li>
<li><a id="b2-li-2449"/>resolution principle, 398<i>n</i></li>
<li><a id="b2-li-2450"/><span class="KeyTerm1">rest_conjuncts</span>, <i>443</i></li>
<li><a id="b2-li-2451"/><span class="KeyTerm1">rest_disjuncts</span>, <i>443</i></li>
<li><a id="b2-li-2452"/><span class="KeyTerm1">restore</span> (in register machine), 464, 483 (ex. 5.10)<ul class="none">
<li><a id="b2-li-2453"/>implementing, 491</li>
<li><a id="b2-li-2454"/>instruction constructor, <i>481</i></li>
<li><a id="b2-li-2455"/>simulating, 481</li>
</ul></li>
<li><a id="b2-li-2456"/>rest parameter and spread syntax, 276</li>
<li><a id="b2-li-2457"/><span class="KeyTerm1">rest_segments</span>, <i>250</i></li>
<li><a id="b2-li-2458"/><span class="KeyTerm1">rest_statements</span>, <i>332</i></li>
<li><a id="b2-li-2459"/><span class="KeyTerm1">rest_terms</span>, 179, <i>182</i></li>
<li><a id="b2-li-2460"/><span class="KeyTerm1">retry</span>, <i>377</i></li>
<li><a id="b2-li-2461"/><span class="KeyTerm1">return</span> (linkage descriptor), 523</li>
<li><a id="b2-li-2462"/><span class="KeyTerm1"><b>return</b></span> (keyword), 9, <i>see also</i> return statement</li>
<li><a id="b2-li-2463"/><span class="KeyTerm1">return_expression</span>, 333</li>
<li><a id="b2-li-2464"/>returning multiple values, 475<i>n</i></li>
<li><a id="b2-li-2465"/>return statement, 9<ul class="none">
<li><a id="b2-li-2466"/>handling in compiler, 543</li>
<li><a id="b2-li-2467"/>handling in explicit-control evaluator, 509</li>
<li><a id="b2-li-2468"/>handling in metacircular evaluator, 327</li>
<li><a id="b2-li-2469"/>parsing of, 333</li>
<li><a id="b2-li-2470"/>tail recursion and, 509, 541, 542</li>
</ul></li>
<li><a id="b2-li-2471"/><span class="KeyTerm1">return_undefined</span>, <i>509</i></li>
<li><a id="b2-li-2472"/>return value, 9<ul class="none">
<li><a id="b2-li-2473"/>representation in metacircular evaluator, 324, 340</li>
<li><a id="b2-li-2474"/><span class="KeyTerm1">undefined</span> as, 324, 509, 534, 539</li>
</ul></li>
<li><a id="b2-li-2475"/><span class="KeyTerm1">return_value_content</span>, <i>340</i></li>
<li><a id="b2-li-2476"/>Reuter, Andreas, 279<i>n</i></li>
<li><a id="b2-li-2477"/>Reuter, Andreas<span class="KeyTerm1">reverse</span>, 89 (ex. 2.18)<ul class="none">
<li><a id="b2-li-2478"/>as folding, 106 (ex. 2.39)</li>
<li><a id="b2-li-2479"/>rules, 424 (ex. 4.66)</li>
</ul></li>
<li><a id="b2-li-2480"/><span class="KeyTerm1">revert_stack_to_marker</span> (in register machine), 508, 511 (ex. 5.24)</li>
<li><a id="b2-li-2481"/>Rhind Papyrus, 40<i>n</i></li>
<li><a id="b2-li-2482"/>right-associative, 14</li>
<li><a id="b2-li-2483"/><span class="KeyTerm1">right_branch</span>, <i>136</i>, <i>143</i></li>
<li><a id="b2-li-2484"/><span class="KeyTerm1">right_split</span>, <i>115</i></li>
<li><a id="b2-li-2485"/>ripple-carry adder, 245 (ex. 3.30)</li>
<li><a id="b2-li-2486"/>Rivest, Ronald L., 46<i>n</i>, 137<i>n</i></li>
<li><a id="b2-li-2487"/>RLC circuit, 308 (ex. 3.80)</li>
<li><a id="b2-li-2488"/>Robinson, J. A., 399<i>n</i></li>
<li><a id="b2-li-2489"/>robustness, 123</li>
<li><a id="b2-li-2490"/>rock songs, 1950s, 146 (ex. 2.70)</li>
<li><a id="b2-li-2491"/>Rogers, William Barton, 112<i>n</i></li>
<li><a id="b2-li-2492"/><span class="KeyTerm1">root</span> register, 494</li>
<li><a id="b2-li-2493"/>roots of equation, <i>see</i> half-interval method; Newton's method</li>
<li><a id="b2-li-2494"/><span class="KeyTerm1">rotate90</span>, <i>121</i></li>
<li><a id="b2-li-2495"/>roundoff error, 3<i>n</i>, 149<i>n</i></li>
<li><a id="b2-li-2496"/>Rozas, Guillermo Juan, 541<i>n</i></li>
<li><a id="b2-li-2497"/>RSA algorithm, 46<i>n</i></li>
<li><a id="b2-li-2498"/>rule (query language), 407–411<ul class="none">
<li><a id="b2-li-2499"/>applying, 417–418, 430–431, 447 (ex. 4.76)</li>
<li><a id="b2-li-2500"/>without body, 407<i>n</i>, 410, 428</li>
</ul></li>
<li><a id="b2-li-2501"/><span class="KeyTerm1">rule_body</span>, <i>444</i></li>
<li><a id="b2-li-2502"/>Runkle, John Daniel, 112<i>n</i></li>
<li><a id="b2-li-2503"/>Russian peasant method of multiplication, 40<i>n</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-2504"/><span class="KeyTerm1">same</span> (rule), <i>407</i></li>
<li><a id="b2-li-2505"/>sameness and change<ul class="none">
<li><a id="b2-li-2506"/>meaning of, 202–204</li>
<li><a id="b2-li-2507"/>shared data and, 226</li>
</ul></li>
<li><a id="b2-li-2508"/>satisfy a compound query, 405–406</li>
<li><a id="b2-li-2509"/>satisfy a pattern (simple query), 404</li>
<li><a id="b2-li-2510"/><span class="KeyTerm1">save</span> (in register machine), 464, 483 (ex. 5.10)<ul class="none">
<li><a id="b2-li-2511"/>implementing, 491</li>
<li><a id="b2-li-2512"/>instruction constructor, <i>481</i></li>
<li><a id="b2-li-2513"/>simulating, 481</li>
</ul></li>
<li><a id="b2-li-2514"/><span class="KeyTerm1">scale_list</span>, <i>90, 91</i>, <i>371</i></li>
<li><a id="b2-li-2515"/><span class="KeyTerm1">scale_stream</span>, <i>291</i></li>
<li><a id="b2-li-2516"/><span class="KeyTerm1">scale_tree</span>, <i>97</i></li>
<li><a id="b2-li-2517"/><span class="KeyTerm1">scale_vect</span>, 119 (ex. 2.46)</li>
<li><a id="b2-li-2518"/><span class="KeyTerm1">scan</span> register, 495</li>
<li><a id="b2-li-2519"/>scanning out declarations<ul class="none">
<li><a id="b2-li-2520"/>in compiler, 532, 560</li>
<li><a id="b2-li-2521"/>in explicit-control evaluator, 512</li>
<li><a id="b2-li-2522"/>in metacircular evaluator, 326, 352</li>
<li><a id="b2-li-2523"/>sequential declaration processing vs., 353–354</li>
</ul></li>
<li><a id="b2-li-2524"/><span class="KeyTerm1">scan_out_declarations</span>, <i>327</i></li>
<li><a id="b2-li-2525"/>Scheme<ul class="none">
<li><a id="b2-li-2526"/>evaluators written in, 319<i>n</i></li>
<li><a id="b2-li-2527"/>integrated-circuit implementation of, 499</li>
<li><a id="b2-li-2528"/>as JavaScript precursor, 2</li>
<li><a id="b2-li-2529"/><span class="KeyTerm1"><b>let</b>*</span> in, 336 (ex. 4.6)</li>
<li><a id="b2-li-2530"/>nondeterministic extension of, 376<i>n</i></li>
<li><a id="b2-li-2531"/>tail recursion in, 30<i>n</i></li>
<li><a id="b2-li-2532"/>use of “lambda” in, 55<i>n</i></li>
<li><a id="b2-li-2533"/><i>Y</i> operator written in, 353<i>n</i></li>
</ul></li>
<li><a id="b2-li-2534"/>Scheme chip, 499</li>
<li><a id="b2-li-2535"/>Schmidt, Eric, 204<i>n</i></li>
<li><a id="b2-li-2536"/>scope of a name, 23, <i>see also</i> lexical scoping<ul class="none">
<li><a id="b2-li-2537"/>function's parameters, 24</li>
<li><a id="b2-li-2538"/>internal declaration, 351–355</li>
</ul></li>
<li><a id="b2-li-2539"/><span class="KeyTerm1">search</span>, <i>59</i></li>
<li><a id="b2-li-2540"/>search<ul class="none">
<li><a id="b2-li-2541"/>of binary tree, 135</li>
<li><a id="b2-li-2542"/>depth-first, 376</li>
<li><a id="b2-li-2543"/>systematic, 376</li>
</ul></li>
<li><a id="b2-li-2544"/><span class="KeyTerm1">segment_queue</span>, <i>250</i></li>
<li><a id="b2-li-2545"/><span class="KeyTerm1">segments</span>, <i>250</i></li>
<li><a id="b2-li-2546"/><span class="KeyTerm1">segments_to_painter</span>, <i>119</i></li>
<li><a id="b2-li-2547"/><span class="KeyTerm1">segment_time</span>, <i>250</i></li>
<li><a id="b2-li-2548"/>selector, 72<ul class="none">
<li><a id="b2-li-2549"/>as abstraction barrier, 76</li>
<li><a id="b2-li-2550"/>generic, 154, 155</li>
</ul></li>
<li><a id="b2-li-2551"/>Self, 2</li>
<li><a id="b2-li-2552"/>semaphore, 276<i>n</i></li>
<li><a id="b2-li-2553"/>of size <i>n</i>, 278 (ex. 3.47)</li>
<li><a id="b2-li-2554"/>semicolon (<span class="KeyTerm1">;</span>)<ul class="none">
<li><a id="b2-li-2555"/>cancer of, 30<i>n</i></li>
<li><a id="b2-li-2556"/>ending statement, 3, 5, 9</li>
</ul></li>
<li><a id="b2-li-2557"/>separator code, 140</li>
<li><a id="b2-li-2558"/>sequence(s), 85<ul class="none">
<li><a id="b2-li-2559"/>as conventional interface, 98–110</li>
<li><a id="b2-li-2560"/>as source of modularity, 102</li>
<li><a id="b2-li-2561"/>operations on, 100–106</li>
<li><a id="b2-li-2562"/>represented by pairs, 85</li>
</ul></li>
<li><a id="b2-li-2563"/>sequence accelerator, 296</li>
<li><a id="b2-li-2564"/>sequence of statements, 192<ul class="none">
<li><a id="b2-li-2565"/>in block, 192<i>n</i></li>
<li><a id="b2-li-2566"/>in conditional statement, 57</li>
<li><a id="b2-li-2567"/>in function body, 9<i>n</i></li>
<li><a id="b2-li-2568"/>as body of lambda expression, 116<i>n</i></li>
<li><a id="b2-li-2569"/>parsing of, 332</li>
</ul></li>
<li><a id="b2-li-2570"/>sequential declaration processing vs. scanning out, 353–354</li>
<li><a id="b2-li-2571"/><span class="KeyTerm1">serialized_exchange</span>, <i>274</i>
<ul class="none">
<li><a id="b2-li-2572"/>with deadlock avoidance, 279 (ex. 3.48)</li>
</ul></li>
<li><a id="b2-li-2573"/>serializer, 268–272<ul class="none">
<li><a id="b2-li-2574"/>implementing, 276–278</li>
<li><a id="b2-li-2575"/>with multiple shared resources, 272–275</li>
</ul></li>
<li><a id="b2-li-2576"/>series, summation of, 50<ul class="none">
<li><a id="b2-li-2577"/>accelerating sequence of</li>
<li><a id="b2-li-2578"/>approximations, 296</li>
<li><a id="b2-li-2579"/>with streams, 296</li>
</ul></li>
<li><a id="b2-li-2580"/>set, 131<ul class="none">
<li><a id="b2-li-2581"/>data base as, 139</li>
<li><a id="b2-li-2582"/>operations on, 131–132</li>
<li><a id="b2-li-2583"/>permutations of, 108</li>
<li><a id="b2-li-2584"/>represented as binary tree, 135–138</li>
<li><a id="b2-li-2585"/>represented as ordered list, 133–135</li>
<li><a id="b2-li-2586"/>represented as unordered list, 132–133</li>
<li><a id="b2-li-2587"/>subsets of, 98 (ex. 2.32)</li>
</ul></li>
<li><a id="b2-li-2588"/><span class="KeyTerm1">set_contents</span>, <i>471</i></li>
<li><a id="b2-li-2589"/><span class="KeyTerm1">set_current_environment</span>, <i>514</i></li>
<li><a id="b2-li-2590"/><span class="KeyTerm1">set_current_time</span>, <i>250</i></li>
<li><a id="b2-li-2591"/><span class="KeyTerm1">set_front_ptr</span>, <i>232</i></li>
<li><a id="b2-li-2592"/><span class="KeyTerm1">set_head</span> (primitive function), 223<ul class="none">
<li><a id="b2-li-2593"/>functional implementation of, <i>230</i></li>
<li><a id="b2-li-2594"/>implemented with vectors, 491</li>
<li><a id="b2-li-2595"/>value of, 223<i>n</i></li>
</ul></li>
<li><a id="b2-li-2596"/><span class="KeyTerm1">set_inst_execution_fun</span>, <i>476</i></li>
<li><a id="b2-li-2597"/><span class="KeyTerm1">set_rear_ptr</span>, <i>232</i></li>
<li><a id="b2-li-2598"/><span class="KeyTerm1">set_register_contents</span>, 468, <i>472</i></li>
<li><a id="b2-li-2599"/><span class="KeyTerm1">set_segments</span>, <i>250</i></li>
<li><a id="b2-li-2600"/><span class="KeyTerm1">set_signal</span>, 244, <i>247</i></li>
<li><a id="b2-li-2601"/><span class="KeyTerm1">set_tail</span> (primitive function), 223<ul class="none">
<li><a id="b2-li-2602"/>functional implementation of, <i>230</i></li>
<li><a id="b2-li-2603"/>implemented with vectors, 491</li>
<li><a id="b2-li-2604"/>value of, 223<i>n</i></li>
</ul></li>
<li><a id="b2-li-2605"/><span class="KeyTerm1">setup_environment</span>, <i>345</i></li>
<li><a id="b2-li-2606"/><span class="KeyTerm1">set_value</span>, 255, <i>261</i></li>
<li><a id="b2-li-2607"/>shadow a binding, 207</li>
<li><a id="b2-li-2608"/>Shamir, Adi, 46<i>n</i></li>
<li><a id="b2-li-2609"/>shape of a process, 28</li>
<li><a id="b2-li-2610"/>shared data, 226–229</li>
<li><a id="b2-li-2611"/>shared resources, 272–275</li>
<li><a id="b2-li-2612"/>shared state, 265</li>
<li><a id="b2-li-2613"/><span class="KeyTerm1">shrink_to_upper_right</span>, <i>121</i></li>
<li><a id="b2-li-2614"/>Shrobe, Howard E., 400<i>n</i></li>
<li><a id="b2-li-2615"/>SICP, xxi</li>
<li><a id="b2-li-2616"/><span class="KeyTerm1">sicp</span> JavaScript package, 10<i>n</i></li>
<li><a id="b2-li-2617"/>SICP JS, xxi</li>
<li><a id="b2-li-2618"/>side-effect bug, 204<i>n</i></li>
<li><a id="b2-li-2619"/>sieve of Eratosthenes, 289<ul class="none">
<li><a id="b2-li-2620"/><span class="KeyTerm1">sieve</span>, <i>289</i></li>
</ul></li>
<li><a id="b2-li-2621"/><span class="KeyTerm1">Σ</span> (sigma) notation, 50 </li>
<li><a id="b2-li-2622"/>signal, digital, 241</li>
<li><a id="b2-li-2623"/><span class="KeyTerm1">signal_error</span>, <i>515</i></li>
<li><a id="b2-li-2624"/>signal-flow diagram, 99, 305 (fig. 3.33)</li>
<li><a id="b2-li-2625"/>signal processing<ul class="none">
<li><a id="b2-li-2626"/>smoothing a function, 68 (ex. 1.44)</li>
<li><a id="b2-li-2627"/>smoothing a signal, 304 (ex. 3.75), 305 (ex. 3.76)</li>
<li><a id="b2-li-2628"/>stream model of, 302–305</li>
<li><a id="b2-li-2629"/>zero crossings of a signal, 304 (ex. 3.74), 304 (ex. 3.75), 305 (ex. 3.76)</li>
</ul></li>
<li><a id="b2-li-2630"/>signal-processing view of computation, 99</li>
<li><a id="b2-li-2631"/><span class="KeyTerm1">simple_query</span>, <i>426</i>
<ul class="none">
<li><a id="b2-li-2632"/>without delayed expression, <i>444</i> (ex. 4.68)</li>
</ul></li>
<li><a id="b2-li-2633"/>simple query, 403–404<ul class="none">
<li><a id="b2-li-2634"/>processing, 412, 413, 418, 426</li>
</ul></li>
<li><a id="b2-li-2635"/>simplification of algebraic expressions, 129</li>
<li><a id="b2-li-2636"/>Simpson's Rule for numerical integration, 52 (ex. 1.29)</li>
<li><a id="b2-li-2637"/>simulation<ul class="none">
<li><a id="b2-li-2638"/>of digital circuit, <i>see</i> digital-circuit simulation</li>
<li><a id="b2-li-2639"/>event-driven, 241</li>
<li><a id="b2-li-2640"/>as machine-design tool, 516</li>
<li><a id="b2-li-2641"/>for monitoring performance of register machine, 484</li>
<li><a id="b2-li-2642"/>Monte Carlo, <i>see</i> Monte Carlo simulation</li>
<li><a id="b2-li-2643"/>of register machine, 468–487</li>
</ul></li>
<li><a id="b2-li-2644"/>sine<ul class="none">
<li><a id="b2-li-2645"/>approximation for small angle, 37 (ex. 1.15)</li>
<li><a id="b2-li-2646"/>power series for, 294 (ex. 3.59)</li>
</ul></li>
<li><a id="b2-li-2647"/><span class="KeyTerm1">singleton_stream</span>, <i>436</i></li>
<li><a id="b2-li-2648"/>SKETCHPAD, 252<i>n</i></li>
<li><a id="b2-li-2649"/>slash (double slash <i>//</i> for comments in programs), 108<i>n</i></li>
<li><a id="b2-li-2650"/><span class="KeyTerm1">smallest_divisor</span>, <i>43</i>
<ul class="none">
<li><a id="b2-li-2651"/>more efficient version, 47 (ex. 1.23)</li>
</ul></li>
<li><a id="b2-li-2652"/>Smalltalk, 252<i>n</i></li>
<li><a id="b2-li-2653"/>smoothing a function, 68 (ex. 1.44)</li>
<li><a id="b2-li-2654"/>smoothing a signal, 304 (ex. 3.75), 305 (ex. 3.76)</li>
<li><a id="b2-li-2655"/>snake case, 10<i>n</i></li>
<li><a id="b2-li-2656"/>snarf, 361<i>n</i></li>
<li><a id="b2-li-2657"/>Solomonoff, Ray, 197<i>n</i></li>
<li><a id="b2-li-2658"/><span class="KeyTerm1">solve</span> differential equation, <i>306, 307</i>
<ul class="none">
<li><a id="b2-li-2659"/>lazy-list version, <i>372</i></li>
</ul></li>
<li><a id="b2-li-2660"/>solving equation, <i>see</i> half-interval method; Newton's method; <span class="KeyTerm1">solve</span></li>
<li><a id="b2-li-2661"/>source language, 520</li>
<li><a id="b2-li-2662"/>source program, 520</li>
<li><a id="b2-li-2663"/>Spafford, Eugene H., 561<i>n</i></li>
<li><a id="b2-li-2664"/>sparse polynomial, 181</li>
<li><a id="b2-li-2665"/><span class="KeyTerm1">split</span>, 117 (ex. 2.45)</li>
<li><a id="b2-li-2666"/>spread and rest parameter syntax, 276</li>
<li><a id="b2-li-2667"/><span class="KeyTerm1">sqrt</span>, <i>20</i>
<ul class="none">
<li><a id="b2-li-2668"/>block structured, <i>25</i></li>
<li><a id="b2-li-2669"/>in environment model, 218–220</li>
<li><a id="b2-li-2670"/>as fixed point, <i>61</i>, <i>64–66</i></li>
<li><a id="b2-li-2671"/>as iterative improvement, 68 (ex. 1.46)</li>
<li><a id="b2-li-2672"/>with Newton's method, <i>65, 66</i></li>
<li><a id="b2-li-2673"/>register machine for, 457 (ex. 5.3)</li>
<li><a id="b2-li-2674"/>as stream limit, <i>299</i> (ex. 3.64)</li>
</ul></li>
<li><a id="b2-li-2675"/><span class="KeyTerm1">sqrt_stream</span>, <i>296</i></li>
<li><a id="b2-li-2676"/><span class="KeyTerm1">square</span>, <i>8</i>
<ul class="none">
<li><a id="b2-li-2677"/>in environment model, 208–209</li>
</ul></li>
<li><a id="b2-li-2678"/><span class="KeyTerm1">square_limit</span>, <i>115</i>, <i>117</i>, 123 (ex. 2.52)</li>
<li><a id="b2-li-2679"/><span class="KeyTerm1">square_of_four</span>, <i>116</i>, 123 (ex. 2.52)</li>
<li><a id="b2-li-2680"/><span class="KeyTerm1">squarer</span> (constraint), 261 (ex. 3.34), 261 (ex. 3.35)</li>
<li><a id="b2-li-2681"/>square root, 18–20, <i>see also</i> <span class="KeyTerm1">sqrt</span>
<ul class="none">
<li><a id="b2-li-2682"/>stream of approximations, 296</li>
</ul></li>
<li><a id="b2-li-2683"/><span class="KeyTerm1">squash_inwards</span>, <i>121</i></li>
<li><a id="b2-li-2684"/>stack, 29<i>n</i>
<ul class="none">
<li><a id="b2-li-2685"/>framed, 504<i>n</i></li>
<li><a id="b2-li-2686"/>for recursion in register machine, 462–467</li>
<li><a id="b2-li-2687"/>representing, 471, 491</li>
</ul></li>
<li><a id="b2-li-2688"/>stack allocation and tail recursion, 541<i>n</i></li>
<li><a id="b2-li-2689"/><span class="KeyTerm1">stack_inst_reg_name</span>, <i>481</i></li>
<li><a id="b2-li-2690"/>Stallman, Richard M., 252<i>n</i>, 376<i>n</i></li>
<li><a id="b2-li-2691"/><span class="KeyTerm1">start</span> register machine, 469, <i>472</i></li>
<li><a id="b2-li-2692"/><span class="KeyTerm1">start_eceval</span>, <i>559n</i></li>
<li><a id="b2-li-2693"/><span class="KeyTerm1">start_segment</span>, 77 (ex. 2.2), 120 (ex. 2.48)</li>
<li><a id="b2-li-2694"/>state<ul class="none">
<li><a id="b2-li-2695"/>local, <i>see</i> local state</li>
<li><a id="b2-li-2696"/>shared, 265</li>
<li><a id="b2-li-2697"/>vanishes in stream formulation, 313</li>
</ul></li>
<li><a id="b2-li-2698"/>statement, 3<ul class="none">
<li><a id="b2-li-2699"/>value-producing and non-value-producing, 338 (ex. 4.8)</li>
<li><a id="b2-li-2700"/>statement sequence, <i>see</i> sequence of statements</li>
</ul></li>
<li><a id="b2-li-2701"/>state variable, 29, 190<ul class="none">
<li><a id="b2-li-2702"/>local, 190–197</li>
</ul></li>
<li><a id="b2-li-2703"/>statically typed language, 310<i>n</i></li>
<li><a id="b2-li-2704"/>Steele, Guy Lewis Jr., 30<i>n</i>, 205<i>n</i>, 252<i>n</i>, 361<i>n</i>, 376<i>n</i></li>
<li><a id="b2-li-2705"/>Stein, Clifford, 137<i>n</i></li>
<li><a id="b2-li-2706"/>stop-and-copy garbage collector, 493–498</li>
<li><a id="b2-li-2707"/>Stoy, Joseph E., 12<i>n</i>, 41<i>n</i>, 353<i>n</i></li>
<li><a id="b2-li-2708"/>Strachey, Christopher, 67<i>n</i></li>
<li><a id="b2-li-2709"/>stratified design, 123</li>
<li><a id="b2-li-2710"/>stream(s), 189, 280–315<ul class="none">
<li><a id="b2-li-2711"/>delayed evaluation and, 305–309</li>
<li><a id="b2-li-2712"/>empty, 283</li>
<li><a id="b2-li-2713"/>implemented as delayed lists, 281–283</li>
<li><a id="b2-li-2714"/>implemented as lazy lists, 370–372</li>
<li><a id="b2-li-2715"/>implicit definition, 290–292</li>
</ul></li>
<li><a id="b2-li-2716"/>infinite, <i>see</i> infinite streams</li>
<li><a id="b2-li-2717"/>used in query interpreter, 412, 419<i>n</i></li>
<li><a id="b2-li-2718"/><span class="KeyTerm1">stream_append</span>, <i>300</i></li>
<li><a id="b2-li-2719"/><span class="KeyTerm1">stream_append_delayed</span>, <i>435</i></li>
<li><a id="b2-li-2720"/><span class="KeyTerm1">stream_enumerate_interval</span>, <i>284</i></li>
<li><a id="b2-li-2721"/><span class="KeyTerm1">stream_filter</span>, <i>285</i></li>
<li><a id="b2-li-2722"/><span class="KeyTerm1">stream_flatmap</span>, <i>436</i>, 445 (ex. 4.71)</li>
<li><a id="b2-li-2723"/><span class="KeyTerm1">stream_for_each</span>, <i>283</i></li>
<li><a id="b2-li-2724"/><span class="KeyTerm1">stream_limit</span>, 298 (ex. 3.64)</li>
<li><a id="b2-li-2725"/><span class="KeyTerm1">stream_map</span>, <i>283</i>, <i>287</i></li>
<li><a id="b2-li-2726"/><span class="KeyTerm1">stream_map_2</span>, 287 (ex. 3.50)</li>
<li><a id="b2-li-2727"/><span class="KeyTerm1">stream_map_optimized</span>, <i>287</i></li>
<li><a id="b2-li-2728"/><span class="KeyTerm1">stream_ref</span>, <i>283</i></li>
<li><a id="b2-li-2729"/><span class="KeyTerm1">stream_tail</span>, <i>283</i></li>
<li><a id="b2-li-2730"/><span class="KeyTerm1">stream_withdraw</span>, <i>313</i></li>
<li><a id="b2-li-2731"/>strict, 362</li>
<li><a id="b2-li-2732"/>string(s), 124–126<ul class="none">
<li><a id="b2-li-2733"/>concatenation, 75</li>
<li><a id="b2-li-2734"/>equality of, 125 (ex. 2.54)</li>
<li><a id="b2-li-2735"/>interning, 490</li>
<li><a id="b2-li-2736"/>quotation marks for, <i>see</i> quotation marks</li>
<li><a id="b2-li-2737"/>representation of, 490</li>
<li><a id="b2-li-2738"/>typed over multiple lines, 546</li>
<li><a id="b2-li-2739"/>uniqueness of, 227<i>n</i></li>
</ul></li>
<li><a id="b2-li-2740"/><span class="KeyTerm1">stringify</span> (primitive function), 75</li>
<li><a id="b2-li-2741"/>string pool, 490</li>
<li><a id="b2-li-2742"/>Stuckey, Peter J., 432<i>n</i></li>
<li><a id="b2-li-2743"/><span class="KeyTerm1">sub</span> (generic), <i>165</i></li>
<li><a id="b2-li-2744"/><span class="KeyTerm1">sub_complex</span>, <i>150</i></li>
<li><a id="b2-li-2745"/><span class="KeyTerm1">sub_interval</span>, 82 (ex. 2.8)</li>
<li><a id="b2-li-2746"/><span class="KeyTerm1">sub_rat</span>, <i>73</i></li>
<li><a id="b2-li-2747"/>subroutine in register machine, 457–460 <span class="KeyTerm1">subsets</span> of a set, <i>98</i> (ex. 2.32)</li>
<li><a id="b2-li-2748"/>substitution model of function application, 11–13, 206<ul class="none">
<li><a id="b2-li-2749"/>inadequacy of, 200–202</li>
<li><a id="b2-li-2750"/>shape of process, 27–29</li>
</ul></li>
<li><a id="b2-li-2751"/>subtype, 172<ul class="none">
<li><a id="b2-li-2752"/>multiple, 173</li>
</ul></li>
<li><a id="b2-li-2753"/><span class="KeyTerm1">sub_vect</span>, 119 (ex. 2.46)</li>
<li><a id="b2-li-2754"/>success continuation (nondeterministic evaluator), 386, 388</li>
<li><a id="b2-li-2755"/>successive squaring, 38</li>
<li><a id="b2-li-2756"/><span class="KeyTerm1">sum</span>, <i>50</i>
<ul class="none">
<li><a id="b2-li-2757"/>as accumulation, 53 (ex. 1.32)</li>
<li><a id="b2-li-2758"/>iterative version, 52 (ex. 1.30)</li>
</ul></li>
<li><a id="b2-li-2759"/><span class="KeyTerm1">sum_cubes</span>, <i>49</i>
<ul class="none">
<li><a id="b2-li-2760"/>with higher-order functions, <i>50</i></li>
</ul></li>
<li><a id="b2-li-2761"/><span class="KeyTerm1">sum_integers</span>, <i>49</i>
<ul class="none">
<li><a id="b2-li-2762"/>with higher-order functions, <i>50</i></li>
</ul></li>
<li><a id="b2-li-2763"/>summation of a series, 50<ul class="none">
<li><a id="b2-li-2764"/>with streams, 296</li>
</ul></li>
<li><a id="b2-li-2765"/><span class="KeyTerm1">sum_odd_squares</span>, <i>98</i>, <i>101</i></li>
<li><a id="b2-li-2766"/><span class="KeyTerm1">sum_of_squares</span>, <i>10</i>
<ul class="none">
<li><a id="b2-li-2767"/>in environment model, 210–212</li>
</ul></li>
<li><a id="b2-li-2768"/><span class="KeyTerm1">sum_primes</span>, <i>282</i></li>
<li><a id="b2-li-2769"/>supertype, 172<ul class="none">
<li><a id="b2-li-2770"/>multiple, 173</li>
</ul></li>
<li><a id="b2-li-2771"/>Sussman, Gerald Jay, 30<i>n</i>, 252<i>n</i>, 376<i>n</i></li>
<li><a id="b2-li-2772"/>Sutherland, Ivan, 252<i>n</i></li>
<li><a id="b2-li-2773"/>symbol(s)<ul class="none">
<li><a id="b2-li-2774"/>in environment operations, 341</li>
<li><a id="b2-li-2775"/>in global environment, 344</li>
<li><a id="b2-li-2776"/>in parsing of names, 330</li>
<li><a id="b2-li-2777"/>representing names in metacircular evaluator, 323</li>
<li><a id="b2-li-2778"/>in <span class="KeyTerm1">unparse</span>, 441</li>
</ul></li>
<li><a id="b2-li-2779"/>symbolic algebra, 176–188</li>
<li><a id="b2-li-2780"/>symbolic differentiation, 126–131, 160 (ex. 2.73)</li>
<li><a id="b2-li-2781"/>symbolic expression, 71, <i>see also</i> string(s); symbol(s)</li>
<li><a id="b2-li-2782"/><span class="KeyTerm1">symbol_leaf</span>, <i>143</i></li>
<li><a id="b2-li-2783"/><span class="KeyTerm1">symbol_of_name</span>, 331</li>
<li><a id="b2-li-2784"/><span class="KeyTerm1">symbols</span>, <i>143</i></li>
<li><a id="b2-li-2785"/>SYNC, 279<i>n</i></li>
<li><a id="b2-li-2786"/>synchronization, <i>see</i> concurrency</li>
<li><a id="b2-li-2787"/>syntactic analysis, separated from execution<ul class="none">
<li><a id="b2-li-2788"/>in metacircular evaluator, 355–360</li>
<li><a id="b2-li-2789"/>in register-machine simulator, 474, 478</li>
</ul></li>
<li><a id="b2-li-2790"/>syntactic form, 8<ul class="none">
<li><a id="b2-li-2791"/>as derived component, 334–335</li>
<li><a id="b2-li-2792"/>function vs., 362 (ex. 4.24)</li>
<li><a id="b2-li-2793"/>need for, 20 (ex. 1.6)</li>
</ul></li>
<li><a id="b2-li-2794"/>syntactic forms<ul class="none">
<li><a id="b2-li-2795"/>assignment, 192</li>
<li><a id="b2-li-2796"/>block, 25</li>
<li><a id="b2-li-2797"/>break statement, 338 (ex. 4.7)</li>
<li><a id="b2-li-2798"/>conditional expression, 14</li>
<li><a id="b2-li-2799"/>conditional statement, 57</li>
<li><a id="b2-li-2800"/>constant declaration, 5</li>
<li><a id="b2-li-2801"/>continue statement, 338 (ex. 4.7)</li>
<li><a id="b2-li-2802"/>function declaration, 8</li>
<li><a id="b2-li-2803"/>lambda expression, 54</li>
<li><a id="b2-li-2804"/>logical conjunction (<span class="KeyTerm1">&amp;&amp;</span>), 15</li>
<li><a id="b2-li-2805"/>logical disjunction (<span class="KeyTerm1">||</span>), 15</li>
<li><a id="b2-li-2806"/>return statement, 9</li>
<li><a id="b2-li-2807"/>variable declaration, 191</li>
<li><a id="b2-li-2808"/>while loop, 337 (ex. 4.7)</li>
</ul></li>
<li><a id="b2-li-2809"/>syntactic sugar, 15<i>n</i>, 30<i>n</i>
<ul class="none">
<li><a id="b2-li-2810"/><span class="KeyTerm1">&amp;&amp;</span> and <span class="KeyTerm1">||</span> as, 15</li>
<li><a id="b2-li-2811"/>function vs. data as, 247<i>n</i></li>
<li><a id="b2-li-2812"/>looping constructs as, 30</li>
</ul></li>
<li><a id="b2-li-2813"/>syntax, <i>see also</i> syntactic form<ul class="none">
<li><a id="b2-li-2814"/>abstract, <i>see</i> abstract syntax</li>
<li><a id="b2-li-2815"/>of expressions, describing, 9<i>n</i></li>
<li><a id="b2-li-2816"/>of a programming language, 8</li>
</ul></li>
<li><a id="b2-li-2817"/>syntax interface, 247<i>n</i></li>
<li><a id="b2-li-2818"/>systematic search, 376</li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-2819"/>table, 235–241<ul class="none">
<li><a id="b2-li-2820"/>backbone of, 235</li>
<li><a id="b2-li-2821"/>for coercion, 170</li>
<li><a id="b2-li-2822"/>for data-directed programming, 157</li>
<li><a id="b2-li-2823"/>local, 238–239</li>
<li><a id="b2-li-2824"/><i>n</i>-dimensional, 240 (ex. 3.25)</li>
<li><a id="b2-li-2825"/>one-dimensional, 235–237</li>
<li><a id="b2-li-2826"/>operation-and-type, <i>see</i> operation-and-type table </li>
<li><a id="b2-li-2827"/>represented as binary tree vs. unordered list, 240 (ex. 3.26)</li>
<li><a id="b2-li-2828"/>testing equality of keys, 240 (ex. 3.24)</li>
<li><a id="b2-li-2829"/>two-dimensional, 237–238</li>
<li><a id="b2-li-2830"/>used in simulation agenda, 250</li>
<li><a id="b2-li-2831"/>used to store computed values, 240 (ex. 3.27)</li>
</ul></li>
<li><a id="b2-li-2832"/>tableau, 297</li>
<li><a id="b2-li-2833"/>tabulation, 35<i>n</i>, 240 (ex. 3.27)</li>
<li><a id="b2-li-2834"/><span class="KeyTerm1">tack_on_instruction_sequence</span>, <i>545</i></li>
<li><a id="b2-li-2835"/>tagged architecture, 489<i>n</i></li>
<li><a id="b2-li-2836"/>tagged data, 152–155, 489<i>n</i></li>
<li><a id="b2-li-2837"/><span class="KeyTerm1">tail</span> (primitive function), 73<ul class="none">
<li><a id="b2-li-2838"/>axiom for, 79</li>
<li><a id="b2-li-2839"/>functional implementation of, <i>79</i>, 80 (ex. 2.4), <i>229, 230</i>, <i>371</i></li>
<li><a id="b2-li-2840"/>implemented with vectors, 490</li>
<li><a id="b2-li-2841"/>as list operation, 86</li>
</ul></li>
<li><a id="b2-li-2842"/>tail recursion, 30<ul class="none">
<li><a id="b2-li-2843"/>compiler and, 541</li>
<li><a id="b2-li-2844"/>environment model of evaluation and, 213<i>n</i></li>
<li><a id="b2-li-2845"/>explicit-control evaluator and, 511 (ex. 5.22), 509–511, 517 (ex. 5.27), 518 (ex. 5.29)</li>
<li><a id="b2-li-2846"/>garbage collection and, 541<i>n</i></li>
<li><a id="b2-li-2847"/>in JavaScript, 30<i>n</i></li>
<li><a id="b2-li-2848"/>metacircular evaluator and, 324<i>n</i>, 327<i>n</i>, 509</li>
<li><a id="b2-li-2849"/>return statement necessary for, 511, 542</li>
<li><a id="b2-li-2850"/>in Scheme, 30<i>n</i></li>
</ul></li>
<li><a id="b2-li-2851"/>tail-recursive evaluator, 509</li>
<li><a id="b2-li-2852"/>tangent<ul class="none">
<li><a id="b2-li-2853"/>as continued fraction, 63 (ex. 1.39)</li>
<li><a id="b2-li-2854"/>power series for, 295 (ex. 3.62)</li>
</ul></li>
<li><a id="b2-li-2855"/>target register, 523</li>
<li><a id="b2-li-2856"/>TDZ (temporal dead zone), 222<i>n</i>, <i>see also</i> declaration, use of name before</li>
<li><a id="b2-li-2857"/>Technological University of Eindhoven, 276<i>n</i></li>
<li><a id="b2-li-2858"/>temporal dead zone (TDZ), 222<i>n</i>, <i>see also</i> declaration, use of name before</li>
<li><a id="b2-li-2859"/>terminal node of a tree, 7</li>
<li><a id="b2-li-2860"/><span class="KeyTerm1">term_list</span>, <i>178</i></li>
<li><a id="b2-li-2861"/>term list of polynomial, 177<ul class="none">
<li><a id="b2-li-2862"/>representing, 181–183</li>
</ul></li>
<li><a id="b2-li-2863"/>ternary operator, <i>see</i> conditional expression</li>
<li><a id="b2-li-2864"/><span class="KeyTerm1">test</span> (in register machine), 452<ul class="none">
<li><a id="b2-li-2865"/>instruction constructor, <i>479</i></li>
<li><a id="b2-li-2866"/>simulating, 479</li>
</ul></li>
<li><a id="b2-li-2867"/><span class="KeyTerm1">test_and_set</span>, <i>277</i></li>
<li><a id="b2-li-2868"/><span class="KeyTerm1">test_condition</span>, <i>479</i></li>
<li><a id="b2-li-2869"/>test operation in register machine, 451</li>
<li><a id="b2-li-2870"/>Thatcher, James W., 79<i>n</i></li>
<li><a id="b2-li-2871"/><span class="KeyTerm1">the_empty_environment</span>, <i>341</i></li>
<li><a id="b2-li-2872"/><span class="KeyTerm1">the_empty_termlist</span>, 179, <i>182</i></li>
<li><a id="b2-li-2873"/><span class="KeyTerm1">the_global_environment</span>, <i>345</i>, <i>515</i></li>
<li><a id="b2-li-2874"/><span class="KeyTerm1">the_heads</span>
<ul class="none">
<li><a id="b2-li-2875"/>register, 490, 494</li>
<li><a id="b2-li-2876"/>vector, 488</li>
</ul></li>
<li><a id="b2-li-2877"/>THE Multiprogramming System, 276<i>n</i></li>
<li><a id="b2-li-2878"/>theorem proving (automatic), 398<i>n</i></li>
<li><a id="b2-li-2879"/><i>θ</i>(<i>f</i> (<i>n</i>)) (theta of <i>f</i> (<i>n</i>)), 37</li>
<li><a id="b2-li-2880"/><span class="KeyTerm1">the_tails</span>
<ul class="none">
<li><a id="b2-li-2881"/>register, 490, 494</li>
<li><a id="b2-li-2882"/>vector, 488</li>
</ul></li>
<li><a id="b2-li-2883"/>thread, 263</li>
<li><a id="b2-li-2884"/>thunk, 363<ul class="none">
<li><a id="b2-li-2885"/>call-by-name, 286<i>n</i></li>
<li><a id="b2-li-2886"/>call-by-need, 286<i>n</i></li>
<li><a id="b2-li-2887"/>forcing, 363</li>
<li><a id="b2-li-2888"/>implementation of, 366–367</li>
<li><a id="b2-li-2889"/>origin of name, 363<i>n</i></li>
</ul></li>
<li><a id="b2-li-2890"/>time<ul class="none">
<li><a id="b2-li-2891"/>assignment and, 263</li>
<li><a id="b2-li-2892"/>communication and, 280</li>
<li><a id="b2-li-2893"/>in concurrent systems, 264–268</li>
<li><a id="b2-li-2894"/>functional programming and, 313–315</li>
<li><a id="b2-li-2895"/>in nondeterministic computing, 374, 375</li>
<li><a id="b2-li-2896"/>purpose of, 264<i>n</i></li>
</ul></li>
<li><a id="b2-li-2897"/><span class="KeyTerm1">timed_prime_test</span>, 46 (ex. 1.22)</li>
<li><a id="b2-li-2898"/>time segment, in agenda, 250</li>
<li><a id="b2-li-2899"/>time slicing, 277</li>
<li><a id="b2-li-2900"/>timing diagram, 265 (fig. 3.29)</li>
<li><a id="b2-li-2901"/>TK!Solver, 252<i>n</i></li>
<li><a id="b2-li-2902"/>tower of types, 172 (fig. 2.25)</li>
<li><a id="b2-li-2903"/>tracing<ul class="none">
<li><a id="b2-li-2904"/>instruction execution, 486 (ex. 5.15)</li>
<li><a id="b2-li-2905"/>register assignment, 486 (ex. 5.17)</li>
</ul></li>
<li><a id="b2-li-2906"/><span class="KeyTerm1">transform_painter</span>, <i>121</i></li>
<li><a id="b2-li-2907"/>transparency, referential, 203</li>
<li><a id="b2-li-2908"/><span class="KeyTerm1">transpose</span> a matrix, 105 (ex. 2.37)</li>
<li><a id="b2-li-2909"/>tree<ul class="none">
<li><a id="b2-li-2910"/>binary, 135, <i>see also</i> binary tree</li>
<li><a id="b2-li-2911"/>B-tree, 137<i>n</i></li>
<li><a id="b2-li-2912"/>combination viewed as, 7</li>
<li><a id="b2-li-2913"/>counting leaves of, 93</li>
<li><a id="b2-li-2914"/>enumerating leaves of, 101</li>
<li><a id="b2-li-2915"/>fringe of, 95 (ex. 2.28)</li>
<li><a id="b2-li-2916"/>Huffman, 141</li>
<li><a id="b2-li-2917"/>lazy, 371<i>n</i></li>
<li><a id="b2-li-2918"/>mapping over, 96–98</li>
<li><a id="b2-li-2919"/>rational, 432<i>n</i></li>
<li><a id="b2-li-2920"/>red-black, 137<i>n</i></li>
<li><a id="b2-li-2921"/>represented as pairs, 93–96</li>
<li><a id="b2-li-2922"/>reversing at all levels, 95 (ex. 2.27)</li>
</ul></li>
<li><a id="b2-li-2923"/>tree accumulation, 7</li>
<li><a id="b2-li-2924"/><span class="KeyTerm1">tree_map</span>, 97 (ex. 2.31)</li>
<li><a id="b2-li-2925"/>tree-recursive process, 32–35<ul class="none">
<li><a id="b2-li-2926"/>order of growth, 37</li>
</ul></li>
<li><a id="b2-li-2927"/><span class="KeyTerm1">tree_to_list_<i>. . .</i></span>, <i>137</i> (ex. 2.63)</li>
<li><a id="b2-li-2928"/>trigonometric relations, 151</li>
<li><a id="b2-li-2929"/><span class="KeyTerm1"><b>true</b></span> (keyword), 14</li>
<li><a id="b2-li-2930"/>truncation error, 3<i>n</i></li>
<li><a id="b2-li-2931"/>truthiness, 325, 339<i>n</i></li>
<li><a id="b2-li-2932"/>truth maintenance, 376<i>n</i></li>
<li><a id="b2-li-2933"/>Turing, Alan M., 349<i>n</i>, 351<i>n</i></li>
<li><a id="b2-li-2934"/>Turing machine, 349<i>n</i></li>
<li><a id="b2-li-2935"/>Turner, David, 106<i>n</i>, 300<i>n</i>, 314<i>n</i></li>
<li><a id="b2-li-2936"/><span class="KeyTerm1">type</span> in query system, <i>443</i></li>
<li><a id="b2-li-2937"/><span class="KeyTerm1">type</span> in register machine, <i>477</i></li>
<li><a id="b2-li-2938"/>type(s)<ul class="none">
<li><a id="b2-li-2939"/>cross-type operations, 169</li>
<li><a id="b2-li-2940"/>dispatching on, 156</li>
<li><a id="b2-li-2941"/>hierarchy in symbolic algebra, 184</li>
<li><a id="b2-li-2942"/>hierarchy of, 172–176</li>
<li><a id="b2-li-2943"/>lowering, 173, 176 (ex. 2.85)</li>
<li><a id="b2-li-2944"/>multiple subtype and supertype, 173</li>
<li><a id="b2-li-2945"/>polymorphic, 310<i>n</i></li>
<li><a id="b2-li-2946"/>raising, 173, 175 (ex. 2.83)</li>
<li><a id="b2-li-2947"/>subtype, 172</li>
<li><a id="b2-li-2948"/>supertype, 172</li>
<li><a id="b2-li-2949"/>tower of, 172 (fig. 2.25)</li>
</ul></li>
<li><a id="b2-li-2950"/>typed pointer, 489</li>
<li><a id="b2-li-2951"/>type field, 489<i>n</i></li>
<li><a id="b2-li-2952"/>type-inferencing mechanism, 310<i>n</i></li>
<li><a id="b2-li-2953"/><span class="KeyTerm1">type_tag</span>, <i>152</i>
<ul class="none">
<li><a id="b2-li-2954"/>using JavaScript data types, 168 (ex. 2.78)</li>
</ul></li>
<li><a id="b2-li-2955"/>type tag, 148, 152<ul class="none">
<li><a id="b2-li-2956"/>two-level, 168</li>
</ul></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-2957"/>unary operator, 15</li>
<li><a id="b2-li-2958"/>unbound name, 206</li>
<li><a id="b2-li-2959"/><span class="KeyTerm1">undefined</span> (predeclared name), 157</li>
<li><a id="b2-li-2960"/><span class="KeyTerm1">unev</span> register, 500</li>
<li><a id="b2-li-2961"/>unification, 415–417<ul class="none">
<li><a id="b2-li-2962"/>discovery of algorithm, 398<i>n</i></li>
<li><a id="b2-li-2963"/>implementation, 431–433</li>
<li><a id="b2-li-2964"/>pattern matching vs., 416, 418<i>n</i></li>
</ul></li>
<li><a id="b2-li-2965"/><span class="KeyTerm1">unify_match</span>, <i>431</i></li>
<li><a id="b2-li-2966"/><span class="KeyTerm1">union_set</span>, 131<ul class="none">
<li><a id="b2-li-2967"/>binary-tree representation, 138 (ex. 2.65)</li>
<li><a id="b2-li-2968"/>ordered-list representation, 135 (ex. 2.62)</li>
<li><a id="b2-li-2969"/>unordered-list representation, 133 (ex. 2.59)</li>
</ul></li>
<li><a id="b2-li-2970"/><span class="KeyTerm1">unique</span> (query language), 445 (ex. 4.72)</li>
<li><a id="b2-li-2971"/><span class="KeyTerm1">unique_pairs</span>, 108 (ex. 2.40)</li>
<li><a id="b2-li-2972"/>unit square, 117</li>
<li><a id="b2-li-2973"/>univariate polynomial, 177</li>
<li><a id="b2-li-2974"/>universal machine, 349<ul class="none">
<li><a id="b2-li-2975"/>explicit-control evaluator as, 519</li>
<li><a id="b2-li-2976"/>general-purpose computer as, 519</li>
</ul></li>
<li><a id="b2-li-2977"/>University of Edinburgh, 399<i>n</i></li>
<li><a id="b2-li-2978"/>University of Marseille, 399<i>n</i></li>
<li><a id="b2-li-2979"/>UNIX, 561<i>n</i>
<ul class="none">
<li><a id="b2-li-2980"/>epoch, 46<i>n</i></li>
</ul></li>
<li><a id="b2-li-2981"/><span class="KeyTerm1">unknown_component_type</span>, <i>515</i></li>
<li><a id="b2-li-2982"/><span class="KeyTerm1">unknown_function_type</span>, <i>515</i></li>
<li><a id="b2-li-2983"/>unordered-list representation of sets, 132–133</li>
<li><a id="b2-li-2984"/><span class="KeyTerm1">unparse</span>
<ul class="none">
<li><a id="b2-li-2985"/>as inverse of <span class="KeyTerm1">parse</span>, 335 (ex. 4.2)</li>
<li><a id="b2-li-2986"/>in query interpreter, 425, <i>441</i></li>
</ul></li>
<li><a id="b2-li-2987"/><span class="KeyTerm1">update_insts</span>, <i>476</i></li>
<li><a id="b2-li-2988"/><span class="KeyTerm1">upper_bound</span>, 82 (ex. 2.7)</li>
<li><a id="b2-li-2989"/><span class="KeyTerm1">up_split</span>, 115 (ex. 2.44)</li>
<li><a id="b2-li-2990"/>upward compatibility, 370 (ex. 4.29)</li>
<li><a id="b2-li-2991"/><span class="KeyTerm1">user_print</span>, <i>347</i>
<ul class="none">
<li><a id="b2-li-2992"/>modified for compiled code, <i>559n</i></li>
</ul></li>
<li><a id="b2-li-2993"/><span class="KeyTerm1">user_read</span>, <i>347</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-2994"/>V operation on semaphore, 276<i>n</i></li>
<li><a id="b2-li-2995"/><span class="KeyTerm1">val</span> register, 500<ul class="none">
<li><a id="b2-li-2996"/>value</li>
<li><a id="b2-li-2997"/>of an expression, 4, 5<i>n</i></li>
<li><a id="b2-li-2998"/>of a program, 338 (ex. 4.8)</li>
</ul></li>
<li><a id="b2-li-2999"/><span class="KeyTerm1">value_fun</span>, 478</li>
<li><a id="b2-li-3000"/><span class="KeyTerm1">variable</span>, <i>178</i></li>
<li><a id="b2-li-3001"/>variable<ul class="none">
<li><a id="b2-li-3002"/>assignment to, 192</li>
<li><a id="b2-li-3003"/>declaration, 191</li>
<li><a id="b2-li-3004"/>declaration, parsing of, 333</li>
<li><a id="b2-li-3005"/>parameter as, 192</li>
</ul></li>
<li><a id="b2-li-3006"/>variable-length code, 140</li>
<li><a id="b2-li-3007"/>vector (data structure), 488<ul class="none">
<li><a id="b2-li-3008"/>for arguments of <span class="KeyTerm1">apply</span>, 346<i>n</i></li>
<li><a id="b2-li-3009"/>used in spread and rest parameter syntax, 276</li>
</ul></li>
<li><a id="b2-li-3010"/>vector (mathematical)<ul class="none">
<li><a id="b2-li-3011"/>operations on, 105 (ex. 2.37), 118 (ex. 2.46)</li>
<li><a id="b2-li-3012"/>in picture-language frame, 117</li>
<li><a id="b2-li-3013"/>represented as pair, 118 (ex. 2.46)</li>
<li><a id="b2-li-3014"/>represented as sequence, 105 (ex. 2.37) <span class="KeyTerm1">vector_ref</span> (primitive function), 488</li>
</ul></li>
<li><a id="b2-li-3015"/><span class="KeyTerm1">vector_set</span> (primitive function), 488</li>
<li><a id="b2-li-3016"/><span class="KeyTerm1">verbs</span>, <i>381</i></li>
<li><a id="b2-li-3017"/>very high-level language, 18<i>n</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-3018"/>Wadler, Philip, 204<i>n</i></li>
<li><a id="b2-li-3019"/>Wadsworth, Christopher, 310<i>n</i></li>
<li><a id="b2-li-3020"/>Wagner, Eric G., 79<i>n</i></li>
<li><a id="b2-li-3021"/>Walker, Francis Amasa, 112<i>n</i></li>
<li><a id="b2-li-3022"/>walking down a list with <span class="KeyTerm1">tail</span>, 87</li>
<li><a id="b2-li-3023"/>Wallis, John, 52<i>n</i></li>
<li><a id="b2-li-3024"/>Wand, Mitchell, 319<i>n</i>, 506<i>n</i></li>
<li><a id="b2-li-3025"/>Waters, Richard C., 103<i>n</i></li>
<li><a id="b2-li-3026"/>web browser, interpreting JavaScript, 2</li>
<li><a id="b2-li-3027"/><span class="KeyTerm1">weight</span>, <i>143</i></li>
<li><a id="b2-li-3028"/><span class="KeyTerm1">weight_leaf</span>, <i>143</i></li>
<li><a id="b2-li-3029"/>Weyl, Hermann, 69</li>
<li><a id="b2-li-3030"/>“what is” vs. “how to” description, <i>see</i> declarative vs. imperative knowledge</li>
<li><a id="b2-li-3031"/><span class="KeyTerm1">wheel</span> (rule), <i>407</i>, 423 (ex. 4.63)</li>
<li><a id="b2-li-3032"/><span class="KeyTerm1"><b>while</b></span> (keyword), 337 (ex. 4.7), <i>see also</i> while loop while loop<ul class="none">
<li><a id="b2-li-3033"/>implementing in analyzing evaluator, 359 (ex. 4.20)</li>
<li><a id="b2-li-3034"/>implementing in metacircular evaluator, 337 (ex. 4.7)</li>
</ul></li>
<li><a id="b2-li-3035"/>whitespace characters, 335 (ex. 4.2)</li>
<li><a id="b2-li-3036"/><span class="KeyTerm1">width</span>, <i>83</i></li>
<li><a id="b2-li-3037"/>width of an interval, 82 (ex. 2.9)</li>
<li><a id="b2-li-3038"/>Wilde, Oscar (Perlis's paraphrase of), 5<i>n</i></li>
<li><a id="b2-li-3039"/>Wiles, Andrew, 44<i>n</i></li>
<li><a id="b2-li-3040"/>Winograd, Terry, 376<i>n</i></li>
<li><a id="b2-li-3041"/>Winston, Patrick Henry, 376<i>n</i>, 385<i>n</i></li>
<li><a id="b2-li-3042"/>wire, in digital circuit, 241</li>
<li><a id="b2-li-3043"/>Wise, David S., 286<i>n</i></li>
<li><a id="b2-li-3044"/>wishful thinking, 72, 127</li>
<li><a id="b2-li-3045"/><span class="KeyTerm1">withdraw</span>, <i>191</i>
<ul class="none">
<li><a id="b2-li-3046"/>problems in concurrent system, 264</li>
</ul></li>
<li><a id="b2-li-3047"/>world line of a particle, 281<i>n</i>, 314<i>n</i></li>
<li><a id="b2-li-3048"/>Wright, E. M., 292<i>n</i></li>
<li><a id="b2-li-3049"/>Wright, Jesse B., 79<i>n</i></li>
<li><a id="b2-li-3050"/>Wrigstad, Tobias, daughter of, 124</li>
<li><a id="b2-li-3051"/><span class="KeyTerm1">xcor_vect</span>, 118 (ex. 2.46)</li>
<li><a id="b2-li-3052"/>Xerox Palo Alto Research Center, 252<i>n</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-3053"/><i>Y</i> operator, 353<i>n</i></li>
<li><a id="b2-li-3054"/>Yang Hui, 36<i>n</i></li>
<li><a id="b2-li-3055"/><span class="KeyTerm1">ycor_vect</span>, 118 (ex. 2.46)</li>
<li><a id="b2-li-3056"/>Yochelson, Jerome C., 494<i>n</i></li>
</ul>
</section>
<section class="BS_indexSec">
<ul class="none">
<li><a id="b2-li-3057"/>Zabih, Ramin, 376<i>n</i></li>
<li><a id="b2-li-3058"/>zero crossings of a signal, 304 (ex. 3.74), 304 (ex. 3.75), 305 (ex. 3.76)</li>
<li><a id="b2-li-3059"/>zero test (generic), 169 (ex. 2.80)<ul class="none">
<li><a id="b2-li-3060"/>for polynomials, 182 (ex. 2.87)</li>
</ul></li>
<li><a id="b2-li-3061"/>Zilles, Stephen N., 78<i>n</i></li>
<li><a id="b2-li-3062"/>Zippel, Richard E., 188<i>n</i></li>
</ul>
</section>
</section>
</section>
</body>
</html>