<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Preface</title>
<link href="../styles/MIT_style.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:5e22faf7-6d97-43f5-a05d-571a507bcb19" name="Adept.expected.resource"/>
</head>
<body epub:type="frontmatter">
<section epub:type="preface" role="doc-preface">
<header>
<h1><a id="f4-title-0001"/><span class="chapterTitle">Preface</span></h1>
</header>
<p class="paraaftertitle"><a id="f4-para-0001"/>The book <i>Structure and Interpretation of Computer Programs</i> (SICP) introduces the reader to central ideas of computation by establishing a series of mental models for computation. <a href="c001.xhtml">Chapters 1–3</a> cover programming concepts that are common to all modern high-level programming languages. The original first two editions of SICP use the programming language Scheme in their program examples, whose minimalist, expression-oriented syntax allows the book to focus on the underlying ideas rather than the design of the chosen language. <a href="c004.xhtml">Chapters 4</a> and <a href="c005.xhtml">5</a> use Scheme to formulate language processors for Scheme, deepening the readers’ understanding of the mental models and exploring language extensions and alternatives.</p>
<p><a id="f4-para-0002"/>Since its publication in 1984 and its second edition in 1996, SICP has been adopted as a textbook by universities and colleges around the world, including the National University of Singapore (NUS), which introduced the SICP-based introductory course CS1101S in 1997. In the mid-1990s, the languages Python, JavaScript, and Ruby emerged, which share central design elements with Scheme, but which employ a more complex, statement-oriented syntax that uses familiar algebraic (infix) notation. Their rise in popularity led instructors to adapt their SICP-based courses, typically by translating the example programs to their language of choice, by adding material specific to that language, and by omitting the material of <a href="c004.xhtml">chapters 4</a> and <a href="c005.xhtml">5</a>.</p>
<section><a id="f4-title-0002"/>
<section><a id="f4-title-0003"/>
<section><a id="f4-title-0004"/>
<section>
<h5><a id="f4-sec-0004"/><a id="f4-title-0005"/>Adapting SICP to JavaScript</h5>
<p class="paraaftertitle"><a id="f4-para-0003"/>The work on adapting the second edition of SICP to JavaScript (SICP JS) started at NUS in 2008, and CS1101S switched to JavaScript in 2012. The language standard ECMAScript 2015 introduced lambda expressions, tail recursion, and block-scoped variables and constants, which enabled the adaptation to become quite close to the original. We made substantial changes to SICP only when we felt they were forced by differences between JavaScript and Scheme. The book covers just a small fraction of JavaScript, so a reader would be ill-advised to use it to learn the language. For example, the notion of a JavaScript object—considered one of its fundamental ingredients by any measure—is not even mentioned!</p>
<p><a id="f4-para-0004"/>It was straightforward to translate the programs of <a href="c001.xhtml">chapters 1–3</a> to JavaScript by adding libraries that mirror Scheme primitives—including support for list structure—and adapting the text accordingly. However, the switch to JavaScript forced us to make subtle changes in the interpreters and compiler of <a href="c004.xhtml">chapters 4</a> and <a href="c005.xhtml">5</a> in order to handle return statements. Scheme's expression-oriented syntax doesn't have return statements, which are a prominent feature of statement-oriented languages.</p>
<p><a id="f4-para-0005"/>By using JavaScript, <a href="c001.xhtml">chapters 1–3</a> introduce the reader to the syntactic style of most mainstream languages today. However, that same syntactic style gave rise to significant changes in <a href="c004.xhtml">chapter 4</a>, because the direct representation of programs as data structures could no longer be taken for granted. This provided us with an opportunity to introduce the reader to the notion of program parsing in section 4.1, an important component of programming-language processors. In section 4.4, the rigid syntactic structure of JavaScript complicated the implementation of the presented logic programming system and exposed the limitations of JavaScript as a tool for programming language design.</p>
</section>
<section>
<h5><a id="f4-sec-0005"/><a id="f4-title-0006"/>Resources for using SICP JS</h5>
<p class="paraaftertitle"><a id="f4-para-0006"/>The MIT Press web page for SICP JS links to support for users of this book. This provides all programs from the book and extensive instructor resources, including a large collection of additional exercises and recommendations on selecting a subset of SICP JS that can be covered in a typical college semester. The JavaScript programs in the book run in the recommended strict mode in any JavaScript interpreter that complies with the ECMAScript 2020 specification of JavaScript (ECMA 2020). The MIT Press web page includes the JavaScript package <span class="KeyTerm1">sicp</span>, which provides all JavaScript functions that are considered “primitive” in the book.</p>
</section>
<section>
<h5><a id="f4-sec-0006"/><a id="f4-title-0007"/>To the reader</h5>
<p class="paraaftertitle"><a id="f4-para-0007"/>We sincerely hope that if this book is your first encounter with programming you will use your newly gained understanding of the structure and interpretation of computer programs to learn more programming languages, including Scheme and the full JavaScript language. If you have learned JavaScript prior to picking up SICP JS, you might gain new insights into the fundamental concepts that underlie the language and discover how much can be achieved with so little. If you come to SICP JS with a knowledge of the original SICP, you might enjoy seeing familiar ideas presented in a new format—and might appreciate the online comparison edition, available at the book's web page, where SICP JS and SICP can be viewed side by side.</p>
<p> </p>
<p class="paraaftertitle"><a id="f4-para-0008"/>—Martin Henz and Tobias Wrigstad</p>
</section>
</section>
</section>
</section>
</section>
</body>
</html>