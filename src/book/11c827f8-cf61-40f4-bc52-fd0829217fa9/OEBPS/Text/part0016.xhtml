<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 9. The Iterator and Composite Patterns: Well-Managed Collections</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch08.html"/><link rel="next" href="ch10.html"/></head><body><section class="chapter" epub:type="chapter" id="iterator_and_composite_patterns_well-man"><div class="titlepage" id="aid-F8902"><div><div><h2 class="title">Chapter 9. The Iterator and Composite Patterns: Well-Managed Collections</h2></div></div></div><div class="informalfigure"><a id="med_id00451a"></a><div class="mediaobject"><a id="med_id00451"></a><img src="../Images/image00948.jpeg" alt="image with no caption" hisrc="figs/web/323fig01.png.jpg"/></div></div><p><a id="iddle1149" class="indexterm"></a><span class="strong"><strong>There are lots of ways to stuff objects into a collection.</strong></span> Put them into an Array, a Stack, a List, a Hashmap, take your pick. Each has its own advantages and tradeoffs. But at some point your client is going to want to iterate over those objects, and when he does, are you going to show him your implementation? We certainly hope not! That just wouldn’t be professional. Well, you don’t have to risk your career; you’re going to see how you can allow your clients to iterate through your objects without ever getting a peek at how you store your objects. You’re also going to learn how to create some super collections of objects that can leap over some impressive data structures in a single bound. And if that’s not enough, you’re also going to learn a thing or two about object responsibility.</p><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="breaking_news_objectville_diner_and_obje">Breaking News: Objectville Diner and Objectville Pancake House Merge</h2></div></div></div><p><a id="iddle1445" class="indexterm"></a><a id="iddle1824" class="indexterm"></a><a id="iddle1906" class="indexterm"></a>That’s great news! Now we can get those delicious pancake breakfasts at the Pancake House and those yummy lunches at the Diner all in one place. But, there seems to be a slight problem...</p><div class="informalfigure"><a id="med_id00452a"></a><div class="mediaobject"><a id="med_id00452"></a><img src="../Images/image00949.jpeg" alt="image with no caption" hisrc="figs/web/324fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="check_out_the_menu_items">Check out the Menu Items</h2></div></div></div><p>At least Lou and Mel agree on the implementation of the MenuItems. Let’s check out the items on each menu, and also take a look at the implementation.</p><div class="informalfigure"><a id="med_id00453a"></a><div class="mediaobject"><a id="med_id00453"></a><img src="../Images/image00950.jpeg" alt="image with no caption" hisrc="figs/web/325fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00454a"></a><div class="mediaobject"><a id="med_id00454"></a><img src="../Images/image00951.jpeg" alt="image with no caption" hisrc="figs/web/325fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="lou_and_melapostrophes_menu_implementati">Lou and Mel’s Menu implementations</h2></div></div></div><p><a id="iddle1062" class="indexterm"></a><a id="iddle1450" class="indexterm"></a><a id="iddle1829" class="indexterm"></a><a id="iddle1911" class="indexterm"></a>Now let’s take a look at what Lou and Mel are arguing about. They both have lots of time and code invested in the way they store their menu items in a menu, and lots of other code that depends on it.</p><div class="informalfigure"><a id="med_id00455a"></a><div class="mediaobject"><a id="med_id00455"></a><img src="../Images/image00952.jpeg" alt="image with no caption" hisrc="figs/web/326fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00456a"></a><div class="mediaobject"><a id="med_id00456"></a><img src="../Images/image00953.jpeg" alt="image with no caption" hisrc="figs/web/326fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00457a"></a><div class="mediaobject"><a id="med_id00457"></a><img src="../Images/image00954.jpeg" alt="image with no caption" hisrc="figs/web/327fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00458a"></a><div class="mediaobject"><a id="med_id00458"></a><img src="../Images/image00955.jpeg" alt="image with no caption" hisrc="figs/web/327fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="whatapostrophes_the_problem_with_having">What’s the problem with having two different menu representations?</h2></div></div></div><p>To see why having two different menu representations complicates things, let’s try implementing a client that uses the two menus. Imagine you have been hired by the new company formed by the merger of the Diner and the Pancake House to create a Java-enabled waitress (this is Objectville, after all). The spec for the Java-enabled waitress specifies that she can print a custom menu for customers on demand, and even tell you if a menu item is vegetarian without having to ask the cook — now that’s an innovation!</p><p>Let’s check out the spec, and then step through what it might take to implement her...</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="java-enabled_waitress_specification">The Java-Enabled Waitress Specification</h3></div></div></div><div class="informalfigure"><a id="med_id00459a"></a><div class="mediaobject"><a id="med_id00459"></a><img src="../Images/image00956.jpeg" alt="image with no caption" hisrc="figs/web/328fig01.png.jpg"/></div></div><p><a id="iddle1888" class="indexterm"></a>Let’s start by stepping through how we’d implement the printMenu() method:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① To print all the items on each menu, you’ll need to call the getMenuItems() method on the PancakeHouseMenu and the DinerMenu to retrieve their respective menu items. Note that each returns a different type:<div class="informalfigure"><a id="med_id00460a"></a><div class="mediaobject"><a id="med_id00460"></a><img src="../Images/image00957.jpeg" alt="image with no caption" hisrc="figs/web/329fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">② Now, to print out the items from the PancakeHouseMenu, we’ll loop through the items on the breakfastItems ArrayList. And to print out the Diner items we’ll loop through the Array.<div class="informalfigure"><a id="med_id00461a"></a><div class="mediaobject"><a id="med_id00461"></a><img src="../Images/image00958.jpeg" alt="image with no caption" hisrc="figs/web/329fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">③ Implementing every other method in the Waitress is going to be a variation of this theme. We’re always going to need to get both menus and use two loops to iterate through their items. If another restaurant with a different implementation is acquired then we’ll have <span class="emphasis"><em>three</em></span> loops.</li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00102"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1555" class="indexterm"></a><a id="iddle2300" class="indexterm"></a>Based on our implementation of printMenu(), which of the following apply?</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col><col class="c3"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00035"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>A.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We are coding to the PancakeHouseMenu and DinerMenu concrete implementations, not to an interface.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00036"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>B.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The Waitress doesn’t implement the Java Waitress API and so she isn’t adhering to a standard.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00037"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>C.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>If we decided to switch from using DinerMenu to another type of menu that implemented its list of menu items with a Hashtable, we’d have to modify a lot of code in the Waitress.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00038"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>D.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The Waitress needs to know how each menu represents its internal collection of menu items; this violates encapsulation.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00039"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>E.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We have duplicate code: the printMenu() method needs two separate loops to iterate over the two different kinds of menus. And if we added a third menu, we’d have yet another loop.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00040"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>F.</p></td><td style="vertical-align: top; "><p>The implementation isn’t based on MXML (Menu XML) and so isn’t as interoperable as it should be.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_nowquestion_mark">What now?</h2></div></div></div><p>Mel and Lou are putting us in a difficult position. They don’t want to change their implementations because it would mean rewriting a lot of code that is in each respective menu class. But if one of them doesn’t give in, then we’re going to have the job of implementing a Waitress that is going to be hard to maintain and extend.</p><p>It would really be nice if we could find a way to allow them to implement the same interface for their menus (they’re already close, except for the return type of the getMenuItems() method). That way we can minimize the concrete references in the Waitress code and also hopefully get rid of the multiple loops required to iterate over both menus.</p><p>Sound good? Well, how are we going to do that?</p><div class="informalfigure"><a id="med_id00462a"></a><div class="mediaobject"><a id="med_id00462"></a><img src="../Images/image00959.jpeg" alt="image with no caption" hisrc="figs/web/331fig01.png.jpg"/></div></div><p><a id="iddle1889" class="indexterm"></a><span class="strong"><strong>Yes, using for each would allow us to hide the complexity of the different kinds of iteration.</strong></span> But that doesn’t solve the real problem here: that we’ve got two different implementations of the menus, and the Waitress has to know how each kind of menu is implemented. That’s not really the Waitress’s job. We want her to focus on being a waitress, and not have to think about the type of the menus <span class="emphasis"><em>at all</em></span>.</p><div class="informalfigure"><a id="med_id00463a"></a><div class="mediaobject"><a id="med_id00463"></a><img src="../Images/image00960.jpeg" alt="image with no caption" hisrc="figs/web/331fig02.png.jpg"/></div></div><p>Our goal is to decouple the Waitress from the concrete implementations of the menus completely. So hang in there, and you’ll see there’s a better way to do this.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="can_we_encapsulate_the_iterationquestion">Can we encapsulate the iteration?</h2></div></div></div><p><a id="iddle1064" class="indexterm"></a><a id="iddle1448" class="indexterm"></a><a id="iddle1490" class="indexterm"></a><a id="iddle1827" class="indexterm"></a><a id="iddle1841" class="indexterm"></a><a id="iddle1909" class="indexterm"></a>If we’ve learned one thing in this book, it’s encapsulate what varies. It’s obvious what is changing here: the iteration caused by different collections of objects being returned from the menus. But can we encapsulate this? Let’s work through the idea...</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① To iterate through the breakfast items we use the size() and get() methods on the ArrayList:<div class="informalfigure"><a id="med_id00464a"></a><div class="mediaobject"><a id="med_id00464"></a><img src="../Images/image00961.jpeg" alt="image with no caption" hisrc="figs/web/332fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">② And to iterate through the lunch items we use the Array length field and the array subscript notation on the MenuItem Array.<div class="informalfigure"><a id="med_id00465a"></a><div class="mediaobject"><a id="med_id00465"></a><img src="../Images/image00962.jpeg" alt="image with no caption" hisrc="figs/web/332fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">③ Now what if we create an object, let’s call it an Iterator, that encapsulates the way we iterate through a collection of objects? Let’s try this on the ArrayList<div class="informalfigure"><a id="med_id00466a"></a><div class="mediaobject"><a id="med_id00466"></a><img src="../Images/image00963.jpeg" alt="image with no caption" hisrc="figs/web/333fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">④ Let’s try that on the Array too:<div class="informalfigure"><a id="med_id00467a"></a><div class="mediaobject"><a id="med_id00467"></a><img src="../Images/image00964.jpeg" alt="image with no caption" hisrc="figs/web/333fig02.png.jpg"/></div></div></li></ul></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="meet_the_iterator_pattern">Meet the Iterator Pattern</h2></div></div></div><p><a id="iddle1041" class="indexterm"></a><a id="iddle1153" class="indexterm"></a><a id="iddle1156" class="indexterm"></a><a id="iddle1449" class="indexterm"></a><a id="iddle1809" class="indexterm"></a><a id="iddle1828" class="indexterm"></a><a id="iddle1846" class="indexterm"></a><a id="iddle1910" class="indexterm"></a>Well, it looks like our plan of encapsulating iteration just might actually work; and as you’ve probably already guessed, it is a Design Pattern called the Iterator Pattern.</p><p>The first thing you need to know about the Iterator Pattern is that it relies on an interface called Iterator. Here’s one possible Iterator interface:</p><div class="informalfigure"><a id="med_id00468a"></a><div class="mediaobject"><a id="med_id00468"></a><img src="../Images/image00965.jpeg" alt="image with no caption" hisrc="figs/web/334fig01.png.jpg"/></div></div><p>Now, once we have this interface, we can implement Iterators for any kind of collection of objects: arrays, lists, hashmaps, ...pick your favorite collection of objects. Let’s say we wanted to implement the Iterator for the Array used in the DinerMenu. It would look like this:</p><div class="informalfigure"><a id="med_id00469a"></a><div class="mediaobject"><a id="med_id00469"></a><img src="../Images/image00966.jpeg" alt="image with no caption" hisrc="figs/web/334fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00470a"></a><div class="mediaobject"><a id="med_id00470"></a><img src="../Images/image00967.jpeg" alt="image with no caption" hisrc="figs/web/334fig03.png.jpg"/></div></div><p>Let’s go ahead and implement this Iterator and hook it into the DinerMenu to see how this works...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="adding_an_iterator_to_dinermenu">Adding an Iterator to DinerMenu</h2></div></div></div><p><a id="iddle1065" class="indexterm"></a><a id="iddle1066" class="indexterm"></a><a id="iddle1150" class="indexterm"></a><a id="iddle1446" class="indexterm"></a><a id="iddle1724" class="indexterm"></a><a id="iddle1825" class="indexterm"></a><a id="iddle1834" class="indexterm"></a><a id="iddle1907" class="indexterm"></a><a id="iddle1966" class="indexterm"></a>To add an Iterator to the DinerMenu we first need to define the Iterator Interface:</p><div class="informalfigure"><a id="med_id00471a"></a><div class="mediaobject"><a id="med_id00471"></a><img src="../Images/image00968.jpeg" alt="image with no caption" hisrc="figs/web/335fig01.png.jpg"/></div></div><p>And now we need to implement a concrete Iterator that works for the Diner menu:</p><div class="informalfigure"><a id="med_id00472a"></a><div class="mediaobject"><a id="med_id00472"></a><img src="../Images/image00969.jpeg" alt="image with no caption" hisrc="figs/web/335fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="reworking_the_diner_menu_with_iterator">Reworking the Diner Menu with Iterator</h2></div></div></div><p><a id="iddle1520" class="indexterm"></a>Okay, we’ve got the iterator. Time to work it into the DinerMenu; all we need to do is add one method to create a DinerMenuIterator and return it to the client:</p><div class="informalfigure"><a id="med_id00473a"></a><div class="mediaobject"><a id="med_id00473"></a><img src="../Images/image00970.jpeg" alt="image with no caption" hisrc="figs/web/336fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="exercise-id00103"></a><h3 class="title">Exercise</h3><p>Go ahead and implement the PancakeHouseIterator yourself and make the changes needed to incorporate it into the PancakeHouseMenu.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="fixing_up_the_waitress_code">Fixing up the Waitress code</h2></div></div></div><p>Now we need to integrate the iterator code into the Waitress. We should be able to get rid of some of the redundancy in the process. Integration is pretty straightforward: first we create a printMenu() method that takes an Iterator; then we use the createIterator() method on each menu to retrieve the Iterator and pass it to the new method.</p><div class="informalfigure"><a id="med_id00474a"></a><div class="mediaobject"><a id="med_id00474"></a><img src="../Images/image00971.jpeg" alt="image with no caption" hisrc="figs/web/337fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="testing_our_code">Testing our code</h2></div></div></div><p>It’s time to put everything to a test. Let’s write some test drive code and see how the Waitress works...</p><div class="informalfigure"><a id="med_id00475a"></a><div class="mediaobject"><a id="med_id00475"></a><img src="../Images/image00972.jpeg" alt="image with no caption" hisrc="figs/web/338fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="hereapostrophes_the_test_runhellip">Here’s the test run...</h3></div></div></div><div class="informalfigure"><a id="med_id00476a"></a><div class="mediaobject"><a id="med_id00476"></a><img src="../Images/image00973.jpeg" alt="image with no caption" hisrc="figs/web/338fig02.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_have_we_done_so_farquestion_mark">What have we done so far?</h2></div></div></div><p>For starters, we’ve made our Objectville cooks very happy. They settled their differences and kept their own implementations. Once we gave them a PancakeHouseMenuIterator and a DinerMenuIterator, all they had to do was add a createIterator() method and they were finished.</p><p>We’ve also helped ourselves in the process. The Waitress will be much easier to maintain and extend down the road. Let’s go through exactly what we did and think about the consequences:</p><div class="informalfigure"><a id="med_id00477a"></a><div class="mediaobject"><a id="med_id00477"></a><img src="../Images/image00974.jpeg" alt="image with no caption" hisrc="figs/web/339fig01.png.jpg"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Hard to Maintain Waitress Implementation</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>New, Hip Waitress Powered by Iterator</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>The Menus are not well encapsulated; we can see the Diner is using an ArrayList and the Pancake House an Array.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The Menu implementations are now encapsulated. The Waitress has no idea how the Menus hold their collection of menu items.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>We need two loops to iterate through the MenuItems.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>All we need is a loop that polymorphically handles any collection of items as long as it implements Iterator.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>The Waitress is bound to concrete classes (MenuItem[] and ArrayList).</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The Waitress now uses an interface (Iterator).</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>The Waitress is bound to two different concrete Menu classes, despite their interfaces being almost identical.</p></td><td style="vertical-align: top; "><p>The Menu interfaces are now exactly the same and, uh oh, we still don’t have a common interface, which means the Waitress is still bound to two concrete Menu classes. We’d better fix that.</p></td></tr></tbody></table></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_we_have_so_farhellip">What we have so far...</h2></div></div></div><p><a id="iddle1364" class="indexterm"></a><a id="iddle1835" class="indexterm"></a>Before we clean things up, let’s get a bird’s-eye view of our current design.</p><div class="informalfigure"><a id="med_id00478a"></a><div class="mediaobject"><a id="med_id00478"></a><img src="../Images/image00975.jpeg" alt="image with no caption" hisrc="figs/web/340fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="making_some_improvementshellip">Making some improvements...</h2></div></div></div><p><a id="iddle1152" class="indexterm"></a><a id="iddle1823" class="indexterm"></a><a id="iddle1832" class="indexterm"></a><a id="iddle1866" class="indexterm"></a><a id="iddle2233" class="indexterm"></a>Okay, we know the interfaces of PancakeHouseMenu and DinerMenu are exactly the same and yet we haven’t defined a common interface for them. So, we’re going to do that and clean up the Waitress a little more.</p><p>You may be wondering why we’re not using the Java Iterator interface — we did that so you could see how to build an iterator from scratch. Now that we’ve done that, we’re going to switch to using the Java Iterator interface, because we’ll get a lot of leverage by implementing that instead of our home-grown Iterator interface. What kind of leverage? You’ll soon see.</p><p>First, let’s check out the java.util.Iterator interface:</p><div class="informalfigure"><a id="med_id00479a"></a><div class="mediaobject"><a id="med_id00479"></a><img src="../Images/image00976.jpeg" alt="image with no caption" hisrc="figs/web/341fig01.png.jpg"/></div></div><p>This is going to be a piece of cake: we just need to change the interface that both PancakeHouseMenuIterator and DinerMenuIterator extend, right? Almost... actually, it’s even easier than that. Not only does java.util have its own Iterator interface, but ArrayList has an iterator() method that returns an iterator. In other words, we never needed to implement our own iterator for ArrayList. However, we’ll still need our implementation for the DinerMenu because it relies on an Array, which doesn’t support the iterator() method (or any other way to create an array iterator).</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00104"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa1qe1"></a><a id="ch09qa1q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: What if I don’t want to provide the ability to remove something from the underlying collection of objects?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa1q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> The remove() method is considered optional. You don’t have to provide remove functionality. But, you should provide the method because it’s part of the Iterator interface. If you’re not going to allow remove() in your iterator you’ll want to throw the runtime exception java.lang.UnsupportedOperationException. The Iterator API documentation specifies that this exception may be thrown from remove() and any client that is a good citizen will check for this exception when calling the remove() method.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa1qe2"></a><a id="ch09qa1q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: How does remove() behave under multiple threads that may be using different iterators over the same collection of objects?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa1q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> The behavior of the remove() is unspecified if the collection changes while you are iterating over it. So you should be careful in designing your own multithreaded code when accessing a collection concurrently.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="cleaning_things_up_with_javadotutildotit">Cleaning things up with java.util.Iterator</h2></div></div></div><p><a id="iddle1067" class="indexterm"></a><a id="iddle1151" class="indexterm"></a><a id="iddle1447" class="indexterm"></a><a id="iddle1826" class="indexterm"></a><a id="iddle1839" class="indexterm"></a><a id="iddle1865" class="indexterm"></a><a id="iddle1908" class="indexterm"></a>Let’s start with the PancakeHouseMenu. Changing it over to java.util.Iterator is going to be easy. We just delete the PancakeHouseMenuIterator class, add an import java.util.Iterator to the top of PancakeHouseMenu and change one line of the PancakeHouseMenu:</p><div class="informalfigure"><a id="med_id00480a"></a><div class="mediaobject"><a id="med_id00480"></a><img src="../Images/image00977.jpeg" alt="image with no caption" hisrc="figs/web/342fig01.png.jpg"/></div></div><p>And that’s it, PancakeHouseMenu is done.</p><p>Now we need to make the changes to allow the DinerMenu to work with java.util.Iterator.</p><div class="informalfigure"><a id="med_id00481a"></a><div class="mediaobject"><a id="med_id00481"></a><img src="../Images/image00978.jpeg" alt="image with no caption" hisrc="figs/web/342fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="we_are_almost_therehellip">We are almost there...</h2></div></div></div><p>We just need to give the Menus a common interface and rework the Waitress a little. The Menu interface is quite simple: we might want to add a few more methods to it eventually, like addItem(), but for now we will let the chefs control their menus by keeping that method out of the public interface:</p><div class="informalfigure"><a id="med_id00482a"></a><div class="mediaobject"><a id="med_id00482"></a><img src="../Images/image00979.jpeg" alt="image with no caption" hisrc="figs/web/343fig01.png.jpg"/></div></div><p>Now we need to add an <code class="literal">implements Menu</code> to both the PancakeHouseMenu and the DinerMenu class definitions and update the Waitress:</p><div class="informalfigure"><a id="med_id00483a"></a><div class="mediaobject"><a id="med_id00483"></a><img src="../Images/image00980.jpeg" alt="image with no caption" hisrc="figs/web/343fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_does_this_get_usquestion_mark">What does this get us?</h2></div></div></div><p><a id="iddle1365" class="indexterm"></a><a id="iddle1423" class="indexterm"></a><a id="iddle1836" class="indexterm"></a><a id="iddle2144" class="indexterm"></a>The PancakeHouseMenu and DinerMenu classes implement an interface, Menu. Waitress can refer to each menu object using the interface rather than the concrete class. So, we’re reducing the dependency between the Waitress and the concrete classes by “programming to an interface, not an implementation.”</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note01"></a>Note</h3><p>This solves the problem of the Waitress depending on the concrete Menus.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>The new Menu interface has one method, createIterator(), that is implemented by PancakeHouseMenu and DinerMenu. Each menu class assumes the responsibility of creating a concrete Iterator that is appropriate for its internal implementation of the menu items.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note02"></a>Note</h3><p>This solves the problem of the Waitress depending on the implementation of the MenuItems.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00484a"></a><div class="mediaobject"><a id="med_id00484"></a><img src="../Images/image00981.jpeg" alt="image with no caption" hisrc="figs/web/344fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="iterator_pattern_defined">Iterator Pattern defined</h2></div></div></div><p><a id="iddle1042" class="indexterm"></a><a id="iddle1816" class="indexterm"></a><a id="iddle1849" class="indexterm"></a><a id="iddle2133" class="indexterm"></a>You’ve already seen how to implement the Iterator Pattern with your very own iterator. You’ve also seen how Java supports iterators in some of its collection oriented classes (the ArrayList). Now it’s time to check out the official definition of the pattern:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note03"></a>Note</h3><p><span class="strong"><strong>The Iterator Pattern</strong></span> provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>This makes a lot of sense: the pattern gives you a way to step through the elements of an aggregate without having to know how things are represented under the covers. You’ve seen that with the two implementations of Menus. But the effect of using iterators in your design is just as important: once you have a uniform way of accessing the elements of all your aggregate objects, you can write polymorphic code that works with <span class="emphasis"><em>any</em></span> of these aggregates — just like the printMenu() method, which doesn’t care if the menu items are held in an Array or ArrayList (or anything else that can create an Iterator), as long as it can get hold of an Iterator.</p><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>The Iterator Pattern allows traversal of the elements of an aggregate without exposing the underlying implementation.</strong></span></div><div><span class="strong"><strong>It also places the task of traversal on the iterator object, not on the aggregate, which simplifies the aggregate interface and implementation, and places the responsibility where it should be.</strong></span></div></blockquote></div><p>The other important impact on your design is that the Iterator Pattern takes the responsibility of traversing elements and gives that responsibility to the iterator object, not the aggregate object. This not only keeps the aggregate interface and implementation simpler, it removes the responsibility for iteration from the aggregate and keeps the aggregate focused on the things it should be focused on (managing a collection of objects), not on iteration.</p><p>Let’s check out the class diagram to put all the pieces in context...</p><div class="informalfigure"><a id="med_id00485a"></a><div class="mediaobject"><a id="med_id00485"></a><img src="../Images/image00982.jpeg" alt="image with no caption" hisrc="figs/web/346fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note04"></a>Brain Power</h3><p><a id="iddle1366" class="indexterm"></a><a id="iddle1810" class="indexterm"></a><a id="iddle1837" class="indexterm"></a>The class diagram for the Iterator Pattern looks very similar to another pattern you’ve studied; can you think of what it is? Hint: a subclass decides which object to create.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00105"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2qe1"></a><a id="ch09qa2q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle1499" class="indexterm"></a><a id="iddle1594" class="indexterm"></a><a id="iddle1725" class="indexterm"></a><a id="iddle1802" class="indexterm"></a><a id="iddle1843" class="indexterm"></a><a id="iddle1844" class="indexterm"></a><a id="iddle1847" class="indexterm"></a><a id="iddle1848" class="indexterm"></a><a id="iddle1850" class="indexterm"></a><a id="iddle1851" class="indexterm"></a><a id="iddle1864" class="indexterm"></a><a id="iddle1867" class="indexterm"></a><a id="iddle1886" class="indexterm"></a><a id="iddle1965" class="indexterm"></a><a id="iddle2134" class="indexterm"></a><a id="iddle2234" class="indexterm"></a><span class="strong"><strong>Q: I’ve seen other books show the Iterator class diagram with the methods first(), next(), isDone() and currentItem(). Why are these methods different?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Those are the “classic” method names that have been used. These names have changed over time and we now have next(), hasNext() and even remove() in java.util.Iterator.</div><div>Let’s look at the classic methods. The next() and currentItem() have been merged into one method in java.util. The isDone() method has obviously become hasNext(); but we have no method corresponding to first(). That’s because in Java we tend to just get a new iterator whenever we need to start the traversal over. Nevertheless, you can see there is very little difference in these interfaces. In fact, there is a whole range of behaviors you can give your iterators. The remove() method is an example of an extension in java.util.Iterator.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2qe2"></a><a id="ch09qa2q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: I’ve heard about “internal” iterators and “external” iterators. What are they? Which kind did we implement in the example?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> We implemented an external iterator, which means that the client controls the iteration by calling next() to get the next element. An internal iterator is controlled by the iterator itself. In that case, because it’s the iterator that’s stepping through the elements, you have to tell the iterator what to do with those elements as it goes through them. That means you need a way to pass an operation to an iterator. Internal iterators are less flexible than external iterators because the client doesn’t have control of the iteration. However, some might argue that they are easier to use because you just hand them an operation and tell them to iterate, and they do all the work for you.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2qe3"></a><a id="ch09qa2q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Could I implement an Iterator that can go backwards as well as forwards?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Definitely. In that case, you’d probably want to add two methods, one to get to the previous element, and one to tell you when you’re at the beginning of the collection of elements. Java’s Collection Framework provides another type of iterator interface called ListIterator. This iterator adds previous() and a few other methods to the standard Iterator interface. It is supported by any Collection that implements the List interface.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2qe4"></a><a id="ch09qa2q4"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Who defines the ordering of the iteration in a collection like Hashtable, which are inherently unordered?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2q4a4"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Iterators imply no ordering. The underlying collections may be unordered as in a hashtable or in a bag; they may even contain duplicates. So ordering is related to both the properties of the underlying collection and to the implementation. In general, you should make no assumptions about ordering unless the Collection documentation indicates otherwise.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2qe5"></a><a id="ch09qa2q5"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: You said we can write “polymorphic code” using an iterator; can you explain that more?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2q5a5"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> When we write methods that take Iterators as parameters, we are using polymorphic iteration. That means we are creating code that can iterate over any collection as long as it supports Iterator. We don’t care about how the collection is implemented, we can still write code to iterate over it.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2qe6"></a><a id="ch09qa2q6"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: If I’m using Java, won’t I always want to use the java.util.Iterator interface so I can use my own iterator implementations with classes that are already using the Java iterators?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2q6a6"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Probably. If you have a common Iterator interface, it will certainly make it easier for you to mix and match your own aggregates with Java aggregates like ArrayList and Vector. But remember, if you need to add functionality to your Iterator interface for your aggregates, you can always extend the Iterator interface.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2qe7"></a><a id="ch09qa2q7"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: I’ve seen an Enumeration interface in Java; does that implement the Iterator Pattern?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa2q7a7"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> We talked about this in the Adapter Pattern chapter (<a class="xref" href="part0014.xhtml#aid-DB7S2">Chapter 7</a>). Remember? The java.util.Enumeration is an older implementation of Iterator that has since been replaced by java.util. Iterator. Enumeration has two methods, hasMoreElements(), corresponding to hasNext(), and nextElement(), corresponding to next(). However, you’ll probably want to use Iterator over Enumeration as more Java classes support it. If you need to convert from one to another, review <a class="xref" href="part0014.xhtml#aid-DB7S2">Chapter 7</a> again where you implemented the adapter for Enumeration and Iterator.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="single_responsibility">Single Responsibility</h2></div></div></div><p><a id="iddle1101" class="indexterm"></a><a id="iddle1118" class="indexterm"></a><a id="iddle1146" class="indexterm"></a><a id="iddle1412" class="indexterm"></a><a id="iddle1424" class="indexterm"></a><a id="iddle1833" class="indexterm"></a><a id="iddle2063" class="indexterm"></a><a id="iddle2327" class="indexterm"></a>What if we allowed our aggregates to implement their internal collections and related operations AND the iteration methods? Well, we already know that would expand the number of methods in the aggregate, but so what? Why is that so bad?</p><p>Well, to see why, you first need to recognize that when we allow a class to not only take care of its own business (managing some kind of aggregate) but also take on more responsibilities (like iteration) then we’ve given the class two reasons to change. Two? Yup, two: it can change if the collection changes in some way, and it can change if the way we iterate changes. So once again our friend CHANGE is at the center of another design principle:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note05"></a>Design Principle</h3><p><span class="emphasis"><em>A class should have only one reason to change.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>Every responsibility of a class is an area of potential change. More than one responsibility means more than one area of change.</strong></span></div><div><span class="strong"><strong>This principle guides us to keep each class to a single responsibility.</strong></span></div></blockquote></div><p>We know we want to avoid change in a class like the plague — modifying code provides all sorts of opportunities for problems to creep in. Having two ways to change increases the probability the class will change in the future, and when it does, it’s going to affect two aspects of your design.</p><p>The solution? The principle guides us to assign each responsibility to one class, and only one class.</p><p>That’s right, it’s as easy as that, and then again it’s not: separating responsibility in design is one of the most difficult things to do. Our brains are just too good at seeing a set of behaviors and grouping them together even when there are actually two or more responsibilities. The only way to succeed is to be diligent in examining your designs and to watch out for signals that a class is changing in more than one way as your system grows.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="ch09sb05"></a><h3 class="title"></h3><div class="informalfigure"><a id="med_id00486a"></a><div class="mediaobject"><a id="med_id00486"></a><img src="../Images/image00983.jpeg" alt="image with no caption" hisrc="figs/web/348fig01.png.jpg"/></div></div><p><span class="strong"><strong>Cohesion</strong></span> is a term you’ll hear used as a measure of how closely a class or a module supports a single purpose or responsibility.</p><p>We say that a module or class has <span class="emphasis"><em>high cohesion</em></span> when it is designed around a set of related functions, and we say it has <span class="emphasis"><em>low cohesion</em></span> when it is designed around a set of unrelated functions.</p><p>Cohesion is a more general concept than the Single Responsibility Principle, but the two are closely related. Classes that adhere to the principle tend to have high cohesion and are more maintainable than classes that take on multiple responsibilities and have low cohesion.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note06"></a>Brain Power</h3><p>Examine these classes and determine which ones have multiple responsibilities.</p><div class="informalfigure"><a id="med_id00487a"></a><div class="mediaobject"><a id="med_id00487"></a><img src="../Images/image00984.jpeg" alt="image with no caption" hisrc="figs/web/349fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00488a"></a><div class="mediaobject"><a id="med_id00488"></a><img src="../Images/image00985.jpeg" alt="image with no caption" hisrc="figs/web/common15.png.jpg"/><div class="caption"><p>HARD HAT AREA. WATCH OUT FOR FALLING ASSUMPTIONS</p></div></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note07"></a>Brain<sup>2</sup> Power</h3><p>Determine if these classes have low or high cohesion.</p><div class="informalfigure"><a id="med_id00489a"></a><div class="mediaobject"><a id="med_id00489"></a><img src="../Images/image00986.jpeg" alt="image with no caption" hisrc="figs/web/349fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00490a"></a><div class="mediaobject"><a id="med_id00490"></a><img src="../Images/image00987.jpeg" alt="image with no caption" hisrc="figs/web/350fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00491a"></a><div class="mediaobject"><a id="med_id00491"></a><img src="../Images/image00988.jpeg" alt="image with no caption" hisrc="figs/web/350fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="taking_a_look_at_the_cafeacute_menu">Taking a look at the Café Menu</h2></div></div></div><p><a id="iddle1090" class="indexterm"></a><a id="iddle1154" class="indexterm"></a><a id="iddle1533" class="indexterm"></a><a id="iddle1794" class="indexterm"></a><a id="iddle1821" class="indexterm"></a><a id="iddle2272" class="indexterm"></a>Here’s the café menu. It doesn’t look like too much trouble to integrate the CafeMenu class into our framework... let’s check it out.</p><div class="informalfigure"><a id="med_id00492a"></a><div class="mediaobject"><a id="med_id00492"></a><img src="../Images/image00989.jpeg" alt="image with no caption" hisrc="figs/web/351fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00106"></a><h3 class="title">Sharpen your pencil</h3><p>Before looking at the next page, quickly jot down the three things we have to do to this code to fit it into our framework:</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem">_______________________________________________</li><li class="listitem">_______________________________________________</li><li class="listitem">_______________________________________________</li></ol></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="reworking_the_cafeacute_menu_code">Reworking the Café Menu code</h2></div></div></div><p><a id="iddle1091" class="indexterm"></a><a id="iddle1155" class="indexterm"></a><a id="iddle1721" class="indexterm"></a><a id="iddle1795" class="indexterm"></a><a id="iddle1811" class="indexterm"></a><a id="iddle1822" class="indexterm"></a>Integrating the CafeMenu into our framework is easy. Why? Because HashMap is one of those Java collections that supports Iterator. But it’s not quite the same as ArrayList...</p><div class="informalfigure"><a id="med_id00493a"></a><div class="mediaobject"><a id="med_id00493"></a><img src="../Images/image00990.jpeg" alt="image with no caption" hisrc="figs/web/352fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_up_close-id00107"></a><h3 class="title">Code Up Close</h3><p>HashMap is a little more complex than the ArrayList because it supports both keys and values, but we can still get an Iterator for the values (which are the MenuItems).</p><div class="informalfigure"><a id="med_id00494a"></a><div class="mediaobject"><a id="med_id00494"></a><img src="../Images/image00991.jpeg" alt="image with no caption" hisrc="figs/web/352fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="adding_the_cafeacute_menu_to_the_waitres">Adding the Café Menu to the Waitress</h2></div></div></div><p>That was easy; how about modifying the Waitress to support our new Menu? Now that the Waitress expects Iterators, that should be easy too.</p><div class="informalfigure"><a id="med_id00495a"></a><div class="mediaobject"><a id="med_id00495"></a><img src="../Images/image00992.jpeg" alt="image with no caption" hisrc="figs/web/353fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="breakfastcomma_lunch_and_dinner">Breakfast, lunch AND dinner</h2></div></div></div><p>Let’s update our test drive to make sure this all works.</p><div class="informalfigure"><a id="med_id00496a"></a><div class="mediaobject"><a id="med_id00496"></a><img src="../Images/image00993.jpeg" alt="image with no caption" hisrc="figs/web/354fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="hereapostrophes_the_test_runsemicolon_ch">Here’s the test run; check out the new dinner menu from the Café!</h3></div></div></div><div class="informalfigure"><a id="med_id00497a"></a><div class="mediaobject"><a id="med_id00497"></a><img src="../Images/image00994.jpeg" alt="image with no caption" hisrc="figs/web/354fig02.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_did_we_doquestion_mark">What did we do?</h2></div></div></div><div class="informalfigure"><a id="med_id00498a"></a><div class="mediaobject"><a id="med_id00498"></a><img src="../Images/image00995.jpeg" alt="image with no caption" hisrc="figs/web/355fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="we_decoupled_the_waitresshellipdot">We decoupled the Waitress....</h2></div></div></div><div class="informalfigure"><a id="med_id00499a"></a><div class="mediaobject"><a id="med_id00499"></a><img src="../Images/image00996.jpeg" alt="image with no caption" hisrc="figs/web/355fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="hellip_and_we_made_the_waitress_more_ext">... and we made the Waitress more extensible</h2></div></div></div><div class="informalfigure"><a id="med_id00500a"></a><div class="mediaobject"><a id="med_id00500"></a><img src="../Images/image00997.jpeg" alt="image with no caption" hisrc="figs/web/356fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="but_thereapostrophes_moreexclamation_mar">But there’s more!</h2></div></div></div><div class="informalfigure"><a id="med_id00501a"></a><div class="mediaobject"><a id="med_id00501"></a><img src="../Images/image00998.jpeg" alt="image with no caption" hisrc="figs/web/356fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="iterators_and_collections">Iterators and Collections</h2></div></div></div><p><a id="iddle1063" class="indexterm"></a><a id="iddle1367" class="indexterm"></a><a id="iddle1838" class="indexterm"></a><a id="iddle1148" class="indexterm"></a><a id="iddle1722" class="indexterm"></a><a id="iddle1885" class="indexterm"></a><a id="iddle2494" class="indexterm"></a><a id="iddle1164" class="indexterm"></a><a id="iddle1723" class="indexterm"></a><a id="iddle1813" class="indexterm"></a><a id="iddle1840" class="indexterm"></a><a id="iddle1845" class="indexterm"></a><a id="iddle1856" class="indexterm"></a><a id="iddle1862" class="indexterm"></a>We’ve been using a couple of classes that are part of the Java Collections Framework. This “framework” is just a set of classes and interfaces, including ArrayList, which we’ve been using, and many others like Vector, LinkedList, Stack, and PriorityQueue. Each of these classes implements the java.util.Collection interface, which contains a bunch of useful methods for manipulating groups of objects.</p><div class="informalfigure"><a id="med_id00502a"></a><div class="mediaobject"><a id="med_id00502"></a><img src="../Images/image00938.jpeg" alt="image with no caption" hisrc="figs/web/common14.png.jpg"/></div></div><p>Let’s take a quick look at the interface:</p><div class="informalfigure"><a id="med_id00503a"></a><div class="mediaobject"><a id="med_id00503"></a><img src="../Images/image00999.jpeg" alt="image with no caption" hisrc="figs/web/357fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note08"></a>Watch it!</h3><p><span class="strong"><strong>Hashtable is one of a few classes that</strong></span> <span class="bolditalic">indirectly</span> <span class="strong"><strong>supports Iterator.</strong></span></p><p><span class="emphasis"><em>As you saw when we implemented the CafeMenu, you could get an Iterator from it, but only by first retrieving its Collection called values. If you think about it, this makes sense: the HashMap holds two sets of objects: keys and values. If we want to iterate over its values, we first need to retrieve them from the HashMap, and then obtain the iterator.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00504a"></a><div class="mediaobject"><a id="med_id00504"></a><img src="../Images/image01000.jpeg" alt="image with no caption" hisrc="figs/web/357fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_magnets-id00108"></a><h3 class="title">Code Magnets</h3><p><a id="iddle1142" class="indexterm"></a><a id="iddle1505" class="indexterm"></a>The Chefs have decided that they want to be able to alternate their lunch menu items; in other words, they will offer some items on Monday, Wednesday, Friday, and Sunday, and other items on Tuesday, Thursday, and Saturday. Someone already wrote the code for a new “Alternating” DinerMenu Iterator so that it alternates the menu items, but she scrambled it up and put it on the fridge in the Diner as a joke. Can you put it back together? Some of the curly braces fell on the floor and they were too small to pick up, so feel free to add as many of those as you need.</p><div class="informalfigure"><a id="med_id00505a"></a><div class="mediaobject"><a id="med_id00505"></a><img src="../Images/image01001.jpeg" alt="image with no caption" hisrc="figs/web/358fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="is_the_waitress_ready_for_prime_timeques">Is the Waitress ready for prime time?</h2></div></div></div><p><a id="iddle1416" class="indexterm"></a><a id="iddle1812" class="indexterm"></a><a id="iddle2088" class="indexterm"></a>The Waitress has come a long way, but you’ve gotta admit those three calls to printMenu() are looking kind of ugly.</p><p>Let’s be real — every time we add a new menu we are going to have to open up the Waitress implementation and add more code. Can you say “violating the Open Closed Principle”?</p><div class="informalfigure"><a id="med_id00506a"></a><div class="mediaobject"><a id="med_id00506"></a><img src="../Images/image01002.jpeg" alt="image with no caption" hisrc="figs/web/359fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00507a"></a><div class="mediaobject"><a id="med_id00507"></a><img src="../Images/image01003.jpeg" alt="image with no caption" hisrc="figs/web/359fig02.png.jpg"/></div></div><p>It’s not the Waitress’ fault. We have done a great job of decoupling the menu implementation and extracting the iteration into an iterator. But we still are handling the menus with separate, independent objects — we need a way to manage them together.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note09"></a>Brain Power</h3><p>The Waitress still needs to make three calls to printMenu(), one for each menu. Can you think of a way to combine the menus so that only one call needs to be made? Or perhaps so that one Iterator is passed to the Waitress to iterate over all the menus?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00508a"></a><div class="mediaobject"><a id="med_id00508"></a><img src="../Images/image01004.jpeg" alt="image with no caption" hisrc="figs/web/360fig01.png.jpg"/></div></div><p>Sounds like the chef is on to something. Let’s give it a try:</p><div class="informalfigure"><a id="med_id00509a"></a><div class="mediaobject"><a id="med_id00509"></a><img src="../Images/image01005.jpeg" alt="image with no caption" hisrc="figs/web/360fig02.png.jpg"/></div></div><p>This looks pretty good, although we’ve lost the names of the menus, but we could add the names to each menu.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="just_when_we_thought_it_was_safehellip">Just when we thought it was safe...</h2></div></div></div><p><a id="iddle1228" class="indexterm"></a><a id="iddle1439" class="indexterm"></a>Now they want to add a dessert submenu.</p><p>Okay, now what? Now we have to support not only multiple menus, but menus within menus.</p><p>It would be nice if we could just make the dessert menu an element of the DinerMenu collection, but that won’t work as it is now implemented.</p><p>What we want (something like this):</p><div class="informalfigure"><a id="med_id00510a"></a><div class="mediaobject"><a id="med_id00510"></a><img src="../Images/image01006.jpeg" alt="image with no caption" hisrc="figs/web/361fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00511a"></a><div class="mediaobject"><a id="med_id00511"></a><img src="../Images/image01007.jpeg" alt="image with no caption" hisrc="figs/web/361fig02.png.jpg"/></div></div><p><span class="strong"><strong>We can’t assign a dessert menu to a MenuItem array.</strong></span></p><p><span class="strong"><strong>Time for a change!</strong></span></p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_do_we_needquestion_mark">What do we need?</h2></div></div></div><p><a id="iddle2209" class="indexterm"></a>The time has come to make an executive decision to rework the chef’s implementation into something that is general enough to work over all the menus (and now submenus). That’s right, we’re going to tell the chefs that the time has come for us to reimplement their menus.</p><p>The reality is that we’ve reached a level of complexity such that if we don’t rework the design now, we’re never going to have a design that can accommodate further acquisitions or submenus.</p><p>So, what is it we really need out of our new design?</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00041"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We need some kind of a tree-shaped structure that will accommodate menus, submenus, and menu items.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00042"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We need to make sure we maintain a way to traverse the items in each menu that is at least as convenient as what we are doing now with iterators.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00043"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; "><p>We may need to traverse the items in a more flexible manner. For instance, we might need to iterate over only the Diner’s dessert menu, or we might need to iterate over the Diner’s entire menu, including the dessert submenu.</p></td></tr></tbody></table></div><div class="informalfigure"><a id="med_id00512a"></a><div class="mediaobject"><a id="med_id00512"></a><img src="../Images/image01008.jpeg" alt="image with no caption" hisrc="figs/web/362fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note10"></a>Note</h3><p>Because we need to represent menus, nested submenus and menu items, we can naturally fit them in a tree-like structure.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00513a"></a><div class="mediaobject"><a id="med_id00513"></a><img src="../Images/image01009.jpeg" alt="image with no caption" hisrc="figs/web/363fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note11"></a>Brain Power</h3><p>How would you handle this new wrinkle to our design requirements? Think about it before turning the page.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="composite_pattern_defined">The Composite Pattern defined</h2></div></div></div><p><a id="iddle1160" class="indexterm"></a><a id="iddle1227" class="indexterm"></a><a id="iddle1245" class="indexterm"></a><a id="iddle1881" class="indexterm"></a><a id="iddle1969" class="indexterm"></a><a id="iddle2096" class="indexterm"></a><a id="iddle2479" class="indexterm"></a>That’s right; we’re going to introduce another pattern to solve this problem. We didn’t give up on Iterator — it will still be part of our solution — however, the problem of managing menus has taken on a new dimension that Iterator doesn’t solve. So, we’re going to step back and solve it with the Composite Pattern.</p><p>We’re not going to beat around the bush on this pattern; we’re going to go ahead and roll out the official definition now:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note12"></a>Note</h3><p>Here’s a tree structure.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00514a"></a><div class="mediaobject"><a id="med_id00514"></a><img src="../Images/image01010.jpeg" alt="image with no caption" hisrc="figs/web/364fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note13"></a>Note</h3><p><span class="strong"><strong>The Composite Pattern</strong></span> allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Let’s think about this in terms of our menus: this pattern gives us a way to create a tree structure that can handle a nested group of menus <span class="emphasis"><em>and</em></span> menu items in the same structure. By putting menus and items in the same structure we create a part-whole hierarchy; that is, a tree of objects that is made of parts (menus and menu items) but that can be treated as a whole, like one big über menu.</p><p>Once we have our über menu, we can use this pattern to treat “individual objects and compositions uniformly.” What does that mean? It means if we have a tree structure of menus, submenus, and perhaps subsubmenus along with menu items, then any menu is a “composition” because it can contain both other menus and menu items. The individual objects are just the menu items — they don’t hold other objects. As you’ll see, using a design that follows the Composite Pattern is going to allow us to write some simple code that can apply the same operation (like printing!) over the entire menu structure.</p><div class="informalfigure"><a id="med_id00515a"></a><div class="mediaobject"><a id="med_id00515"></a><img src="../Images/image01011.jpeg" alt="image with no caption" hisrc="figs/web/364fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note14"></a>Note</h3><p>We can create arbitrarily complex trees.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00516a"></a><div class="mediaobject"><a id="med_id00516"></a><img src="../Images/image01012.jpeg" alt="image with no caption" hisrc="figs/web/365fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00517a"></a><div class="mediaobject"><a id="med_id00517"></a><img src="../Images/image01013.jpeg" alt="image with no caption" hisrc="figs/web/365fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note15"></a>Note</h3><p>Operations can be applied to the whole.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00518a"></a><div class="mediaobject"><a id="med_id00518"></a><img src="../Images/image01014.jpeg" alt="image with no caption" hisrc="figs/web/365fig03.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note15a"></a>Note</h3><p>Or the parts.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>The Composite Pattern allows us to build structures of objects in the form of trees that contain both compositions of objects and individual objects as nodes.</strong></span></div><div><span class="strong"><strong>Using a composite structure, we can apply the same operations over both composites and individual objects. In other words, in most cases we can <span class="underline">ignore</span> the differences between compositions of objects and individual objects.</strong></span></div></blockquote></div><div class="informalfigure"><a id="med_id00519a"></a><div class="mediaobject"><a id="med_id00519"></a><img src="../Images/image01015.jpeg" alt="image with no caption" hisrc="figs/web/366fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00109"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa3qe1"></a><a id="ch09qa3q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Component, Composite, Trees? I’m confused.</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa3q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> A composite contains components. Components come in two flavors: composites and leaf elements. Sound recursive? It is. A composite holds a set of children; those children may be other composites or leaf elements.</div><div>When you organize data in this way you end up with a tree structure (actually an upside-down tree structure) with a composite at the root and branches of composites growing up to leaf nodes.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch09qa3qe2"></a><a id="ch09qa3q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: How does this relate to iterators?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch09qa3q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Remember, we’re taking a new approach. We’re going to re-implement the menus with a new solution: the Composite Pattern. So don’t look for some magical transformation from an iterator to a composite. That said, the two work very nicely together. You’ll soon see that we can use iterators in a couple of ways in the composite implementation.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="designing_menus_with_composite">Designing Menus with Composite</h2></div></div></div><p><a id="iddle1157" class="indexterm"></a><a id="iddle1229" class="indexterm"></a><a id="iddle1440" class="indexterm"></a>So, how do we apply the Composite Pattern to our menus? To start with, we need to create a component interface; this acts as the common interface for both menus and menu items and allows us to treat them uniformly. In other words, we can call the <span class="emphasis"><em>same</em></span> method on menus or menu items.</p><p>Now, it may not make <span class="emphasis"><em>sense</em></span> to call some of the methods on a menu item or a menu, but we can deal with that, and we will in just a moment. But for now, let’s take a look at a sketch of how the menus are going to fit into a Composite Pattern structure:</p><div class="informalfigure"><a id="med_id00520a"></a><div class="mediaobject"><a id="med_id00520"></a><img src="../Images/image01016.jpeg" alt="image with no caption" hisrc="figs/web/367fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_menu_component">Implementing the Menu Component</h2></div></div></div><p><a id="iddle1158" class="indexterm"></a><a id="iddle1231" class="indexterm"></a><a id="iddle1442" class="indexterm"></a><a id="iddle2138" class="indexterm"></a>Okay, we’re going to start with the MenuComponent abstract class; remember, the role of the menu component is to provide an interface for the leaf nodes and the composite nodes. Now you might be asking, “Isn’t the MenuComponent playing two roles?” It might well be and we’ll come back to that point. However, for now we’re going to provide a default implementation of the methods so that if the MenuItem (the leaf) or the Menu (the composite) doesn’t want to implement some of the methods (like getChild() for a leaf node) they can fall back on some basic behavior:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note16"></a>Note</h3><p><span class="strong"><strong>All components must implement the MenuComponent interface; however, because leaves and nodes have different roles we can’t always define a default implementation for each method that makes sense. Sometimes the best you can do is throw a runtime exception.</strong></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note17"></a>Note</h3><p>Because some of these methods only make sense for MenuItems, and some only make sense for Menus, the <span class="underline">default implementation</span> is UnsupportedOperationException. That way, if MenuItem or Menu doesn’t support an operation, they don’t have to do anything; they can just <span class="underline">inherit</span> the <span class="underline">default im</span>p<span class="underline">lementation</span>.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00521a"></a><div class="mediaobject"><a id="med_id00521"></a><img src="../Images/image01017.jpeg" alt="image with no caption" hisrc="figs/web/368fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_menu_item">Implementing the Menu Item</h2></div></div></div><p>Okay, let’s give the MenuItem class a shot. Remember, this is the leaf class in the Composite diagram and it implements the behavior of the elements of the composite.</p><div class="informalfigure"><a id="med_id00522a"></a><div class="mediaobject"><a id="med_id00522"></a><img src="../Images/image01018.jpeg" alt="image with no caption" hisrc="figs/web/369fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00523a"></a><div class="mediaobject"><a id="med_id00523"></a><img src="../Images/image01019.jpeg" alt="image with no caption" hisrc="figs/web/369fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_composite_menu">Implementing the Composite Menu</h2></div></div></div><p>Now that we have the MenuItem, we just need the composite class, which we’re calling Menu. Remember, the composite class can hold MenuItems <span class="emphasis"><em>or</em></span> other Menus. There’s a couple of methods from MenuComponent this class doesn’t implement: getPrice() and isVegetarian(), because those don’t make a lot of sense for a Menu.</p><div class="informalfigure"><a id="med_id00524a"></a><div class="mediaobject"><a id="med_id00524"></a><img src="../Images/image01020.jpeg" alt="image with no caption" hisrc="figs/web/370fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00525a"></a><div class="mediaobject"><a id="med_id00525"></a><img src="../Images/image01021.jpeg" alt="image with no caption" hisrc="figs/web/371fig01.png.jpg"/></div></div><p>Excellent catch. Because menu is a composite and contains both MenuItems and other Menus, its print() method should print everything it contains. If it didn’t we’d have to iterate through the entire composite and print each item ourselves. That kind of defeats the purpose of having a composite structure.</p><p>As you’re going to see, implementing print() correctly is easy because we can rely on each component to be able to print itself. It’s all wonderfully recursive and groovy. Check it out:</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="fixing_the_printleft_parenthesisright_pa">Fixing the print() method</h3></div></div></div><div class="informalfigure"><a id="med_id00526a"></a><div class="mediaobject"><a id="med_id00526"></a><img src="../Images/image01022.jpeg" alt="image with no caption" hisrc="figs/web/371fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note18"></a>Note</h3><p>NOTE: If, during this iteration, we encounter another Menu object, its print() method will start another iteration, and so on.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="getting_ready_for_a_test_drivehellip">Getting ready for a test drive...</h2></div></div></div><p><a id="iddle1159" class="indexterm"></a><a id="iddle1161" class="indexterm"></a><a id="iddle1232" class="indexterm"></a><a id="iddle1246" class="indexterm"></a><a id="iddle1443" class="indexterm"></a><a id="iddle1882" class="indexterm"></a><a id="iddle1970" class="indexterm"></a><a id="iddle2480" class="indexterm"></a>It’s about time we took this code for a test drive, but we need to update the Waitress code before we do — after all she’s the main client of this code:</p><div class="informalfigure"><a id="med_id00527a"></a><div class="mediaobject"><a id="med_id00527"></a><img src="../Images/image01023.jpeg" alt="image with no caption" hisrc="figs/web/372fig01.png.jpg"/></div></div><p>Okay, one last thing before we write our test drive. Let’s get an idea of what the menu composite is going to look like at runtime:</p><div class="informalfigure"><a id="med_id00528a"></a><div class="mediaobject"><a id="med_id00528"></a><img src="../Images/image01024.jpeg" alt="image with no caption" hisrc="figs/web/372fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="now_for_the_test_drivehellip">Now for the test drive...</h2></div></div></div><p>Okay, now we just need a test drive. Unlike our previous version, we’re going to handle all the menu creation in the test drive. We could ask each chef to give us his new menu, but let’s get it all tested first. Here’s the code:</p><div class="informalfigure"><a id="med_id00529a"></a><div class="mediaobject"><a id="med_id00529"></a><img src="../Images/image01025.jpeg" alt="image with no caption" hisrc="figs/web/373fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="getting_ready_for_a_test_drivehe-id00110">Getting ready for a test drive...</h2></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note18a"></a>Note</h3><p>NOTE: this output is based on the complete source.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00530a"></a><div class="mediaobject"><a id="med_id00530"></a><img src="../Images/image01026.jpeg" alt="image with no caption" hisrc="figs/web/374fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00531a"></a><div class="mediaobject"><a id="med_id00531"></a><img src="../Images/image01027.jpeg" alt="image with no caption" hisrc="figs/web/375fig01.png.jpg"/></div></div><p><a id="iddle1230" class="indexterm"></a><a id="iddle1244" class="indexterm"></a><a id="iddle1413" class="indexterm"></a><a id="iddle1441" class="indexterm"></a><a id="iddle1815" class="indexterm"></a><a id="iddle2064" class="indexterm"></a><a id="iddle2478" class="indexterm"></a>There is some truth to that observation. We could say that the Composite Pattern takes the Single Responsibility design principle and trades it for <span class="emphasis"><em>transparency</em></span>. What’s transparency? Well, by allowing the Component interface to contain the child management operations <span class="emphasis"><em>and</em></span> the leaf operations, a client can treat both composites and leaf nodes uniformly; so whether an element is a composite or leaf node becomes transparent to the client.</p><p>Now given we have both types of operations in the Component class, we lose a bit of <span class="emphasis"><em>safety</em></span> because a client might try to do something inappropriate or meaningless on an element (like try to add a menu to a menu item). This is a design decision; we could take the design in the other direction and separate out the responsibilities into interfaces. This would make our design safe, in the sense that any inappropriate calls on elements would be caught at compile time or runtime, but we’d lose transparency and our code would have to use conditionals and the <code class="literal">instanceof</code> operator.</p><p>So, to return to your question, this is a classic case of tradeoff. We are guided by design principles, but we always need to observe the effect they have on our designs. Sometimes we purposely do things in a way that seems to violate the principle. In some cases, however, this is a matter of perspective; for instance, it might seem incorrect to have child management operations in the leaf nodes (like add(), remove() and getChild()), but then again you can always shift your perspective and see a leaf as a node with zero children.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="flashback_to_iterator">Flashback to Iterator</h2></div></div></div><p><a id="iddle1162" class="indexterm"></a><a id="iddle1225" class="indexterm"></a><a id="iddle1233" class="indexterm"></a><a id="iddle1241" class="indexterm"></a><a id="iddle1248" class="indexterm"></a><a id="iddle1444" class="indexterm"></a><a id="iddle1830" class="indexterm"></a><a id="iddle1852" class="indexterm"></a><a id="iddle1971" class="indexterm"></a>We promised you a few pages back that we’d show you how to use Iterator with a Composite. You know that we are already using Iterator in our internal implementation of the print() method, but we can also allow the Waitress to iterate over an entire composite if she needs to — for instance, if she wants to go through the entire menu and pull out vegetarian items.</p><p>To implement a Composite iterator, let’s add a createIterator() method in every component. We’ll start with the abstract MenuComponent class:</p><div class="informalfigure"><a id="med_id00532a"></a><div class="mediaobject"><a id="med_id00532"></a><img src="../Images/image01028.jpeg" alt="image with no caption" hisrc="figs/web/376fig01.png.jpg"/></div></div><p>Now we need to implement this method in the Menu and MenuItem classes:</p><div class="informalfigure"><a id="med_id00533a"></a><div class="mediaobject"><a id="med_id00533"></a><img src="../Images/image01029.jpeg" alt="image with no caption" hisrc="figs/web/376fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="composite_iterator">The Composite Iterator</h2></div></div></div><p>The CompositeIterator is a SERIOUS iterator. It’s got the job of iterating over the MenuItems in the component, and of making sure all the child Menus (and child child Menus, and so on) are included.</p><p>Here’s the code. Watch out. This isn’t a lot of code, but it can be a little mind bending. As you go through it just repeat to yourself “recursion is my friend, recursion is my friend.”</p><div class="informalfigure"><a id="med_id00534a"></a><div class="mediaobject"><a id="med_id00534"></a><img src="../Images/image01030.jpeg" alt="image with no caption" hisrc="figs/web/common19.png.jpg"/></div></div><p><span class="strong"><strong>W<span class="smaller">ATCH</span> O<span class="smaller">UT</span>: R<span class="smaller">ECURSION</span> Z<span class="smaller">ONE</span> A<span class="smaller">HEAD</span></strong></span></p><div class="informalfigure"><a id="med_id00535a"></a><div class="mediaobject"><a id="med_id00535"></a><img src="../Images/image01031.jpeg" alt="image with no caption" hisrc="figs/web/377fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00536a"></a><div class="mediaobject"><a id="med_id00536"></a><img src="../Images/image01032.jpeg" alt="image with no caption" hisrc="figs/web/378fig01.png.jpg"/></div></div><p><a id="iddle2139" class="indexterm"></a>When we wrote the print() method in the MenuComponent class we used an iterator to step through each item in the component, and if that item was a Menu (rather than a MenuItem), then we recursively called the print() method to handle it. In other words, the MenuComponent handled the iteration itself, <span class="emphasis"><em>internally</em></span>.</p><p>With this code we are implementing an <span class="emphasis"><em>external</em></span> iterator so there is a lot more to keep track of. For starters, an external iterator must maintain its position in the iteration so that an outside client can drive the iteration by calling hasNext() and next(). But in this case, our code also needs to maintain that position over a composite, recursive structure. That’s why we use stacks to maintain our position as we move up and down the composite hierarchy.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note19"></a>Brain Power</h3><p>Draw a diagram of the Menus and MenuItems. Then pretend you are the CompositeIterator, and your job is to handle calls to hasNext() and next(). Trace the way the CompositeIterator traverses the structure as this code is executed:</p><a id="pro_id00036"></a><pre class="programlisting"><span class="strong"><strong>public void testCompositeIterator(MenuComponent component) {</strong></span>
       <span class="strong"><strong>CompositeIterator iterator = new CompositeIterator(component.iterator);</strong></span>

       <span class="strong"><strong>while(iterator.hasNext()) {</strong></span>
              <span class="strong"><strong>MenuComponent component = iterator.next();</strong></span>
       <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="null_iterator">The Null Iterator</h2></div></div></div><p><a id="iddle1831" class="indexterm"></a><a id="iddle1972" class="indexterm"></a>Okay, now what is this Null Iterator all about? Think about it this way: a MenuItem has nothing to iterate over, right? So how do we handle the implementation of its createIterator() method? Well, we have two choices:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch09note20"></a>Note</h3><p>NOTE: Another example of the Null Object “Design Pattern.”</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><span class="strong"><strong>Choice one:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">Return null</li><li class="listitem" style="list-style-type: none">We could return null from createIterator(), but then we’d need conditional code in the client to see if null was returned or not.</li></ul></div><p><span class="strong"><strong>Choice two:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">Return an iterator that always returns false when hasNext() is called</li><li class="listitem" style="list-style-type: none">This seems like a better plan. We can still return an iterator, but the client doesn’t have to worry about whether or not null is ever returned. In effect, we’re creating an iterator that is a “no op.”</li></ul></div><p>The second choice certainly seems better. Let’s call it NullIterator and implement it.</p><div class="informalfigure"><a id="med_id00537a"></a><div class="mediaobject"><a id="med_id00537"></a><img src="../Images/image01033.jpeg" alt="image with no caption" hisrc="figs/web/380fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="give_me_the_vegetarian_menu">Give me the vegetarian menu</h2></div></div></div><p><a id="iddle1249" class="indexterm"></a><a id="iddle2495" class="indexterm"></a>Now we’ve got a way to iterate over every item of the Menu. Let’s take that and give our Waitress a method that can tell us exactly which items are vegetarian.</p><div class="informalfigure"><a id="med_id00538a"></a><div class="mediaobject"><a id="med_id00538"></a><img src="../Images/image01034.jpeg" alt="image with no caption" hisrc="figs/web/381fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="magic_of_iterator_ampersand_composite_to">The magic of Iterator &amp; Composite together...</h2></div></div></div><p>Whooo! It’s been quite a development effort to get our code to this point. Now we’ve got a general menu structure that should last the growing Diner empire for some time. Now it’s time to sit back and order up some veggie food:</p><div class="informalfigure"><a id="med_id00539a"></a><div class="mediaobject"><a id="med_id00539"></a><img src="../Images/image01035.jpeg" alt="image with no caption" hisrc="figs/web/382fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00540a"></a><div class="mediaobject"><a id="med_id00540"></a><img src="../Images/image01036.jpeg" alt="image with no caption" hisrc="figs/web/383fig01.png.jpg"/></div></div><p><a id="iddle1247" class="indexterm"></a><a id="iddle2481" class="indexterm"></a>Let’s take a look at what you’re talking about:</p><div class="informalfigure"><a id="med_id00541a"></a><div class="mediaobject"><a id="med_id00541"></a><img src="../Images/image01037.jpeg" alt="image with no caption" hisrc="figs/web/383fig02.png.jpg"/></div></div><p>In general we agree; try/catch is meant for error handling, not program logic. What are our other options? We could have checked the runtime type of the menu component with instanceof to make sure it’s a MenuItem before making the call to isVegetarian(). But in the process we’d lose <span class="emphasis"><em>transparency</em></span> because we wouldn’t be treating Menus and MenuItems uniformly.</p><p>We could also change isVegetarian() in the Menus so that it returns false. This provides a simple solution and we keep our transparency.</p><p>In our solution we are going for clarity: we really want to communicate that this is an unsupported operation on the Menu (which is different than saying isVegetarian() is false). It also allows for someone to come along and actually implement a reasonable isVegetarian() method for Menu and have it work with the existing code.</p><p>That’s our story and we’re stickin’ to it.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="patterns_exposed-id00111"></a><h3 class="title">Patterns Exposed</h3><p><a id="iddle1163" class="indexterm"></a><a id="iddle1242" class="indexterm"></a><a id="iddle2527" class="indexterm"></a><span class="strong"><strong>This week’s interview: The Composite Pattern, on implementation issues</strong></span></p><p><span class="strong"><strong>HeadFirst</strong></span>: We’re here tonight speaking with the Composite Pattern. Why don’t you tell us a little about yourself, Composite?</p><p><span class="strong"><strong>Composite</strong></span>: Sure... I’m the pattern to use when you have collections of objects with whole-part relationships and you want to be able to treat those objects uniformly.</p><p><span class="strong"><strong>HeadFirst</strong></span>: Okay, let’s dive right in here... what do you mean by whole-part relationships?</p><p><span class="strong"><strong>Composite</strong></span>: Imagine a graphical user interface; there you’ll often find a top level component like a Frame or a Panel, containing other components, like menus, text panes, scrollbars and buttons. So your GUI consists of several parts, but when you display it, you generally think of it as a whole. You tell the top level component to display, and count on that component to display all its parts. We call the components that contain other components, <span class="emphasis"><em>composite objects</em></span>, and components that don’t contain other components, <span class="emphasis"><em>leaf objects</em></span>.</p><p><span class="strong"><strong>HeadFirst</strong></span>: Is that what you mean by treating the objects uniformly? Having common methods you can call on composites and leaves?</p><p><span class="strong"><strong>Composite</strong></span>: Right. I can tell a composite object to display or a leaf object to display and it will do the right thing. The composite object will display by telling all its components to display.</p><p><span class="strong"><strong>HeadFirst</strong></span>: That implies that every object has the same interface. What if you have objects in your composite that do different things?</p><p><span class="strong"><strong>Composite</strong></span>: In order for the composite to work transparently to the client, you must implement the same interface for all objects in the composite; otherwise, the client has to worry about which interface each object is implementing, which kind of defeats the purpose. Obviously that means that at times you’ll have objects for which some of the method calls don’t make sense.</p><p><span class="strong"><strong>HeadFirst</strong></span>: So how do you handle that?</p><p><span class="strong"><strong>Composite</strong></span>: Well, there are a couple of ways to handle it; sometimes you can just do nothing, or return null or false — whatever makes sense in your application. Other times you’ll want to be more proactive and throw an exception. Of course, then the client has to be willing to do a little work and make sure that the method call didn’t do something unexpected.</p><p><span class="strong"><strong>HeadFirst</strong></span>: But if the client doesn’t know which kind of object they’re dealing with, how would they ever know which calls to make without checking the type?</p><p><span class="strong"><strong>Composite</strong></span>: If you’re a little creative you can structure your methods so that the default implementations do something that does make sense. For instance, if the client is calling getChild(), on the composite this makes sense. And it makes sense on a leaf too, if you think of the leaf as an object with no children.</p><p><span class="strong"><strong>HeadFirst</strong></span>: Ah... smart. But, I’ve heard some clients are so worried about this issue, that they require separate interfaces for different objects so they aren’t allowed to make nonsensical method calls. Is that still the Composite Pattern?</p><p><span class="strong"><strong>Composite</strong></span>: Yes. It’s a much safer version of the Composite Pattern, but it requires the client to check the type of every object before making a call so the object can be cast correctly.</p><p><span class="strong"><strong>HeadFirst</strong></span>: Tell us a little more about how these composite and leaf objects are structured.</p><p><span class="strong"><strong>Composite</strong></span>: Usually it’s a tree structure, some kind of hierarchy. The root is the top-level composite, and all its children are either composites or leaf nodes.</p><p><span class="strong"><strong>HeadFirst</strong></span>: Do children ever point back up to their parents?</p><p><span class="strong"><strong>Composite</strong></span>: Yes, a component can have a pointer to a parent to make traversal of the structure easier. And, if you have a reference to a child, and you need to delete it, you’ll need to get the parent to remove the child. Having the parent reference makes that easier too.</p><p><span class="strong"><strong>HeadFirst</strong></span>: There’s really quite a lot to consider in your implementation. Are there other issues we should think about when implementing the Composite Pattern?</p><p><span class="strong"><strong>Composite</strong></span>: Actually there are... one is the ordering of children. What if you have a composite that needs to keep its children in a particular order? Then you’ll need a more sophisticated management scheme for adding and removing children, and you’ll have to be careful about how you traverse the hierarchy.</p><p><span class="strong"><strong>HeadFirst</strong></span>: A good point I hadn’t thought of.</p><p><span class="strong"><strong>Composite</strong></span>: And did you think about caching?</p><p><span class="strong"><strong>HeadFirst</strong></span>: Caching?</p><p><span class="strong"><strong>Composite</strong></span>: Yeah, caching. Sometimes, if the composite structure is complex or expensive to traverse, it’s helpful to implement caching of the composite nodes. For instance, if you are constantly traversing a composite and all its children to compute some result, you could implement a cache that stores the result temporarily to save traversals.</p><p><span class="strong"><strong>HeadFirst</strong></span>: Well, there’s a lot more to the Composite Patterns than I ever would have guessed. Before we wrap this up, one more question: what do you consider your greatest strength?</p><p><span class="strong"><strong>Composite</strong></span>: I think I’d definitely have to say simplifying life for my clients. My clients don’t have to worry about whether they’re dealing with a composite object or a leaf object, so they don’t have to write if statements everywhere to make sure they’re calling the right methods on the right objects. Often, they can make one method call and execute an operation over an entire structure.</p><p><span class="strong"><strong>HeadFirst</strong></span>: That does sound like an important benefit. There’s no doubt you’re a useful pattern to have around for collecting and managing objects. And, with that, we’re out of time... Thanks so much for joining us and come back soon for another Patterns Exposed.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword-id00112"></a><h3 class="title">Design Patterns Crossword</h3><p>Wrap your brain around this composite crossword.</p><div class="informalfigure"><a id="med_id00542a"></a><div class="mediaobject"><a id="med_id00542"></a><img src="../Images/image01038.gif" alt="image with no caption" hisrc="figs/web/386fig01.png"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Across</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Down</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>5. Third company acquired.</p>
<p>6. This class indirectly supports Iterator.</p>
<p>12. HashMap and ArrayList both implement this interface.</p>
<p>13. A separate object that can traverse a collection.</p>
<p>15. We deleted PancakeHouseMenuIterator because this class already provides an Iterator.</p>
<p>16. Has no children.</p>
<p>17. Name of principle that states only one responsibility per class (two words).</p>
<p>19. CompositeIterator used a lot of this.</p></td><td style="vertical-align: top; "><p>1. A class should have only one reason to do this.</p>
<p>2. We encapsulated this.</p>
<p>3. The Iterator Pattern decouples the client from the aggregate’s _________.</p>
<p>4. Merged with the Diner (two words).</p>
<p>7. User interface packages often use this pattern for their components.</p>
<p>8. Collection and Iterator are in this package.</p>
<p>9. Iterators are usually created using this pattern (two words).</p>
<p>10. A composite holds this.</p>
<p>11. We Java-enabled her.</p>
<p>14. This menu caused us to change our entire implementation.</p>
<p>18. A component can be a composite or this.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark-id00113"></a><h3 class="title">Who Does What?</h3><p><a id="iddle1023" class="indexterm"></a><a id="iddle1234" class="indexterm"></a><a id="iddle1582" class="indexterm"></a><a id="iddle1607" class="indexterm"></a><a id="iddle1817" class="indexterm"></a><a id="iddle2036" class="indexterm"></a><a id="iddle2410" class="indexterm"></a><a id="iddle2519" class="indexterm"></a>Match each pattern with its description:</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Pattern</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Description</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Strategy</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Clients treat collections of objects and individual objects uniformly</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Adapter</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Provides a way to traverse a collection of objects without exposing the collection’s implementation</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Iterator</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Simplifies the interface of a group of classes</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Facade</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Changes the interface of one or more classes</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Composite</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Allows a group of objects to be notified when some state changes</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>Observer</p></td><td style="vertical-align: top; "><p>Encapsulates interchangeable behaviors and uses delegation to decide which one to use</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00114">Tools for your Design Toolbox</h2></div></div></div><p>Two new patterns for your toolbox — two great ways to deal with collections of objects.</p><div class="informalfigure"><a id="med_id00543a"></a><div class="mediaobject"><a id="med_id00543"></a><img src="../Images/image01039.jpeg" alt="image with no caption" hisrc="figs/web/388fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00115"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">An Iterator allows access to an aggregate’s elements without exposing its internal structure.</li><li class="listitem">An Iterator takes the job of iterating over an aggregate and encapsulates it in another object.</li><li class="listitem">When using an Iterator, we relieve the aggregate of the responsibility of supporting operations for traversing its data.</li><li class="listitem">An Iterator provides a common interface for traversing the items of an aggregate, allowing you to use polymorphism when writing code that makes use of the items of the aggregate.</li><li class="listitem">We should strive to assign only one responsibility to each class.</li><li class="listitem">The Composite Pattern provides a structure to hold both individual objects and composites.</li><li class="listitem">The Composite Pattern allows clients to treat composites and individual objects uniformly.</li><li class="listitem">A Component is any object in a Composite structure. Components may be other composites or leaf nodes.</li><li class="listitem">There are many design tradeoffs in implementing Composite. You need to balance transparency and safety with your needs.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00116"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1534" class="indexterm"></a><a id="iddle1556" class="indexterm"></a><a id="iddle2273" class="indexterm"></a><a id="iddle2301" class="indexterm"></a>Based on our implementation of printMenu(), which of the following apply?</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col><col class="c3"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00044"></a><img src="../Images/image01040.jpeg" alt="" hisrc="figs/web/389fig01.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>A.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We are coding to the PancakeHouseMenu and DinerMenu concrete implementations, not to an interface.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00045"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>B.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The Waitress doesn’t implement the Java Waitress API and so she isn’t adhering to a standard.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00046"></a><img src="../Images/image01041.jpeg" alt="" hisrc="figs/web/389fig02.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>C.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>If we decided to switch from using DinerMenu to another type of menu that implemented its list of menu items with a Hashtable, we’d have to modify a lot of code in the Waitress.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00047"></a><img src="../Images/image01042.jpeg" alt="" hisrc="figs/web/389fig03.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>D.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The Waitress needs to know how each menu represents its internal collection of menu items; this violates encapsulation.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00048"></a><img src="../Images/image01043.jpeg" alt="" hisrc="figs/web/389fig04.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>E.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We have duplicate code: the printMenu() method needs two separate loops to iterate over the two different kinds of menus. And if we added a third menu, we’d have yet another loop.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00049"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>F.</p></td><td style="vertical-align: top; "><p>The implementation isn’t based on MXML (Menu XML) and so isn’t as interoperable as it should be.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00117"></a><h3 class="title">Sharpen your pencil Solution</h3><p>Before looking at the next page, quickly jot down the three things we have to do to this code to fit it into our framework:</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><span class="underline">implement the Menu interface</span>_________________________________________________________</li><li class="listitem"><span class="underline">get rid of getItems()</span>____________________________________________________________________</li><li class="listitem"><span class="underline">add createIterator() and return an Iterator that can step through the Hashtable values</span>___</li></ol></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_magnets_solution-id00118"></a><h3 class="title">Code Magnets Solution</h3><p><a id="iddle1143" class="indexterm"></a><a id="iddle1506" class="indexterm"></a>The unscrambled “Alternating” DinerMenu Iterator.</p><div class="informalfigure"><a id="med_id00544a"></a><div class="mediaobject"><a id="med_id00544"></a><img src="../Images/image01044.jpeg" alt="image with no caption" hisrc="figs/web/390fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark_solut-id00119"></a><h3 class="title">Who Does What? Solution</h3><p><a id="iddle1024" class="indexterm"></a><a id="iddle1235" class="indexterm"></a><a id="iddle1583" class="indexterm"></a><a id="iddle1608" class="indexterm"></a><a id="iddle1818" class="indexterm"></a><a id="iddle2037" class="indexterm"></a><a id="iddle2411" class="indexterm"></a><a id="iddle2520" class="indexterm"></a>Match each pattern with its description:</p><div class="informalfigure"><a id="med_id00545a"></a><div class="mediaobject"><a id="med_id00545"></a><img src="../Images/image01045.jpeg" alt="image with no caption" hisrc="figs/web/391fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword_soluti-id00120"></a><h3 class="title">Design Patterns Crossword Solution</h3><p>Wrap your brain around this composite crossword. Here’s our solution.</p><div class="informalfigure"><a id="med_id00546a"></a><div class="mediaobject"><a id="med_id00546"></a><img src="../Images/image01046.gif" alt="image with no caption" hisrc="figs/web/392fig01.png"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>