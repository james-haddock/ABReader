<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 12. Compound Patterns: Patterns of Patterns</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch11.html"/><link rel="next" href="ch13.html"/></head><body><section class="chapter" epub:type="chapter" id="compound_patterns_patterns_of_patterns"><div class="titlepage" id="aid-I3QM2"><div><div><h2 class="title">Chapter 12. Compound Patterns: Patterns of Patterns</h2></div></div></div><div class="informalfigure"><a id="med_id00688a"></a><div class="mediaobject"><a id="med_id00688"></a><img src="../Images/image01188.jpeg" alt="image with no caption" hisrc="figs/web/505fig01.png.jpg"/></div></div><p><a id="iddle1093" class="indexterm"></a><a id="iddle1255" class="indexterm"></a><a id="iddle1951" class="indexterm"></a><a id="iddle2099" class="indexterm"></a><a id="iddle2102" class="indexterm"></a><a id="iddle2103" class="indexterm"></a><span class="strong"><strong>Who would have ever guessed that Patterns could work together?</strong></span> You’ve already witnessed the acrimonious Fireside Chats (and you haven’t even seen the Pattern Death Match pages that the editor forced us to remove from the book<sup>[<a id="ch12fn01" epub:type="noteref" class="footnote" href="part0019.xhtml#ftn.ch12fn01">2</a>]</sup>), so who would have thought patterns can actually get along well together? Well, believe it or not, some of the most powerful OO designs use several patterns together. Get ready to take your pattern skills to the next level; it’s time for compound patterns.</p><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="working_together">Working together</h2></div></div></div><p>One of the best ways to use patterns is to get them out of the house so they can interact with other patterns. The more you use patterns the more you’re going to see them showing up together in your designs. We have a special name for a set of patterns that work together in a design that can be applied over many problems: a <span class="emphasis"><em>compound pattern</em></span>. That’s right, we are now talking about patterns made of patterns!</p><div class="informalfigure"><a id="med_id00689a"></a><div class="mediaobject"><a id="med_id00689"></a><img src="../Images/image01189.jpeg" alt="image with no caption" hisrc="figs/web/506fig01.png.jpg"/></div></div><p>You’ll find a lot of compound patterns in use in the real world. Now that you’ve got patterns in your brain, you’ll see that they are really just patterns working together, and that makes them easier to understand.</p><p>We’re going to start this chapter by revisiting our friendly ducks in the SimUDuck duck simulator. It’s only fitting that the ducks should be here when we combine patterns; after all, they’ve been with us throughout the entire book and they’ve been good sports about taking part in lots of patterns. The ducks are going to help you understand how patterns can work together in the same solution. But just because we’ve combined some patterns doesn’t mean we have a solution that qualifies as a compound pattern. For that, it has to be a general-purpose solution that can be applied to many problems. So, in the second half of the chapter we’ll visit a <span class="emphasis"><em>real</em></span> compound pattern: that’s right, Mr. Model-View-Controller himself. If you haven’t heard of him, you will, and you’ll find this compound pattern is one of the most powerful patterns in your design toolbox.</p><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>Patterns are often used together and combined within the same design solution.</strong></span></div><div><span class="strong"><strong>A compound pattern combines two or more patterns into a solution that solves a recurring or general problem.</strong></span></div></blockquote></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="duck_reunion">Duck reunion</h2></div></div></div><p><a id="iddle1456" class="indexterm"></a><a id="iddle1952" class="indexterm"></a><a id="iddle2104" class="indexterm"></a>As you’ve already heard, we’re going to get to work with the ducks again. This time the ducks are going to show you how patterns can coexist and even cooperate within the same solution.</p><p>We’re going to rebuild our duck simulator from scratch and give it some interesting capabilities by using a bunch of patterns. Okay, let’s get started...</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① First, we’ll create a Quackable interface.</strong></span><br/>Like we said, we’re starting from scratch. This time around, the Ducks are going to implement a Quackable interface. That way we’ll know what things in the simulator can quack() — like Mallard Ducks, Redhead Ducks, Duck Calls, and we might even see the Rubber Duck sneak back in.<div class="informalfigure"><a id="med_id00690a"></a><div class="mediaobject"><a id="med_id00690"></a><img src="../Images/image01190.jpeg" alt="image with no caption" hisrc="figs/web/507fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Now, some Ducks that implement Quackable</strong></span><br/>What good is an interface without some classes to implement it? Time to create some concrete ducks (but not the “lawn art” kind, if you know what we mean).<div class="informalfigure"><a id="med_id00691a"></a><div class="mediaobject"><a id="med_id00691"></a><img src="../Images/image01191.jpeg" alt="image with no caption" hisrc="figs/web/507fig02.png.jpg"/></div></div><br/><span class="strong"><strong>This wouldn’t be much fun if we didn’t add other kinds of Ducks too.</strong></span><br/>Remember last time? We had duck calls (those things hunters use — they are definitely quackable) and rubber ducks.<div class="informalfigure"><a id="med_id00692a"></a><div class="mediaobject"><a id="med_id00692"></a><img src="../Images/image01192.jpeg" alt="image with no caption" hisrc="figs/web/508fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Okay, we’ve got our ducks; now all we need is a simulator.</strong></span><br/>Let’s cook up a simulator that creates a few ducks and makes sure their quackers are working...<div class="informalfigure"><a id="med_id00693a"></a><div class="mediaobject"><a id="med_id00693"></a><img src="../Images/image01193.jpeg" alt="image with no caption" hisrc="figs/web/508fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00694a"></a><div class="mediaobject"><a id="med_id00694"></a><img src="../Images/image01194.jpeg" alt="image with no caption" hisrc="figs/web/509fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note01a"></a>Note</h3><p>They all implement the same Quackable interface, but their implementations allow them to quack in their own way.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><br/>It looks like everything is working; so far, so good.</li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ When ducks are around, geese can’t be far.</strong></span><br/>Where there is one waterfowl, there are probably two. Here’s a Goose class that has been hanging around the simulator.<div class="informalfigure"><a id="med_id00695a"></a><div class="mediaobject"><a id="med_id00695"></a><img src="../Images/image01195.jpeg" alt="image with no caption" hisrc="figs/web/509fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note01"></a>Brain Power</h3><p>Let’s say we wanted to be able to use a Goose anywhere we’d want to use a Duck. After all, geese make noise; geese fly; geese swim. Why can’t we have Geese in the simulator?</p><p>What pattern would allow Geese to easily intermingle with Ducks?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem" style="list-style-type: none">⑤ <a id="iddle1018" class="indexterm"></a><a id="iddle1166" class="indexterm"></a><a id="iddle1459" class="indexterm"></a><a id="iddle1955" class="indexterm"></a><a id="iddle2107" class="indexterm"></a><span class="strong"><strong>We need a goose adapter.</strong></span><br/>Our simulator expects to see Quackable interfaces. Since geese aren’t quackers (they’re honkers), we can use an adapter to adapt a goose to a duck.<div class="informalfigure"><a id="med_id00696a"></a><div class="mediaobject"><a id="med_id00696"></a><img src="../Images/image01196.jpeg" alt="image with no caption" hisrc="figs/web/510fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑥ Now geese should be able to play in the simulator, too.</strong></span><br/>All we need to do is create a Goose, wrap it in an adapter that implements Quackable, and we should be good to go.<div class="informalfigure"><a id="med_id00697a"></a><div class="mediaobject"><a id="med_id00697"></a><img src="../Images/image01197.jpeg" alt="image with no caption" hisrc="figs/web/510fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑦ Now let’s give this a quick run....</strong></span><br/>This time when we run the simulator, the list of objects passed to the simulate() method includes a Goose wrapped in a duck adapter. The result? We should see some honking!</li></ul></div><div class="informalfigure"><a id="med_id00698a"></a><div class="mediaobject"><a id="med_id00698"></a><img src="../Images/image01198.jpeg" alt="image with no caption" hisrc="figs/web/511fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="quackology"></a><h3 class="title">Quackology</h3><p>Quackologists are fascinated by all aspects of Quackable behavior. One thing Quackologists have always wanted to study is the total number of quacks made by a flock of ducks.</p><p>How can we add the ability to count duck quacks without having to change the duck classes?</p><p>Can you think of a pattern that would help?</p><div class="informalfigure"><a id="med_id00699a"></a><div class="mediaobject"><a id="med_id00699"></a><img src="../Images/image01199.jpeg" alt="image with no caption" hisrc="figs/web/511fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">⑧ <a id="iddle1169" class="indexterm"></a><a id="iddle1344" class="indexterm"></a><a id="iddle1461" class="indexterm"></a><a id="iddle1957" class="indexterm"></a><a id="iddle2109" class="indexterm"></a><span class="strong"><strong>We’re going to make those Quackologists happy and give them some quack counts.</strong></span><br/>How? Let’s create a decorator that gives the ducks some new behavior (the behavior of counting) by wrapping them with a decorator object. We won’t have to change the Duck code at all.<div class="informalfigure"><a id="med_id00700a"></a><div class="mediaobject"><a id="med_id00700"></a><img src="../Images/image01200.jpeg" alt="image with no caption" hisrc="figs/web/512fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑨ We need to update the simulator to create decorated ducks.</strong></span><br/>Now, we must wrap each Quackable object we instantiate in a QuackCounter decorator. If we don’t, we’ll have ducks running around making uncounted quacks.<div class="informalfigure"><a id="med_id00701a"></a><div class="mediaobject"><a id="med_id00701"></a><img src="../Images/image01201.jpeg" alt="image with no caption" hisrc="figs/web/513fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00702a"></a><div class="mediaobject"><a id="med_id00702"></a><img src="../Images/image01202.jpeg" alt="image with no caption" hisrc="figs/web/514fig01.png.jpg"/></div></div><br/><a id="iddle1007" class="indexterm"></a><a id="iddle1165" class="indexterm"></a><a id="iddle1457" class="indexterm"></a><a id="iddle1640" class="indexterm"></a><a id="iddle1953" class="indexterm"></a><a id="iddle2028" class="indexterm"></a><a id="iddle2105" class="indexterm"></a><a id="iddle2534" class="indexterm"></a><span class="strong"><strong>You have to decorate objects to get decorated behavior.</strong></span><br/>He’s right, that’s the problem with wrapping objects: you have to make sure they get wrapped or they don’t get the decorated behavior.<br/>Why don’t we take the creation of ducks and localize it in one place; in other words, let’s take the duck creation and decorating and encapsulate it.<br/>What pattern does that sound like?</li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑩ We need a factory to produce ducks!</strong></span><br/>Okay, we need some quality control to make sure our ducks get wrapped. We’re going to build an entire factory just to produce them. The factory should produce a family of products that consists of different types of ducks, so we’re going to use the Abstract Factory Pattern.<br/>Let’s start with the definition of the AbstractDuckFactory:<div class="informalfigure"><a id="med_id00703a"></a><div class="mediaobject"><a id="med_id00703"></a><img src="../Images/image01203.jpeg" alt="image with no caption" hisrc="figs/web/514fig02.png.jpg"/></div></div><br/>Let’s start by creating a factory that creates ducks without decorators, just to get the hang of the factory:<div class="informalfigure"><a id="med_id00704a"></a><div class="mediaobject"><a id="med_id00704"></a><img src="../Images/image01204.jpeg" alt="image with no caption" hisrc="figs/web/515fig01.png.jpg"/></div></div><br/>Now let’s create the factory we really want, the CountingDuckFactory:<div class="informalfigure"><a id="med_id00705a"></a><div class="mediaobject"><a id="med_id00705"></a><img src="../Images/image01205.jpeg" alt="image with no caption" hisrc="figs/web/515fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑪ Let’s set up the simulator to use the factory.</strong></span><br/>Remember how Abstract Factory works? We create a polymorphic method that takes a factory and uses it to create objects. By passing in different factories, we get to use different product families in the method.<br/>We’re going to alter the simulate() method so that it takes a factory and uses it to create ducks.<div class="informalfigure"><a id="med_id00706a"></a><div class="mediaobject"><a id="med_id00706"></a><img src="../Images/image01206.jpeg" alt="image with no caption" hisrc="figs/web/516fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note02a"></a>Note</h3><p><a id="iddle1566" class="indexterm"></a><a id="iddle2311" class="indexterm"></a>Here’s the output using the factory...</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00707a"></a><div class="mediaobject"><a id="med_id00707"></a><img src="../Images/image01207.jpeg" alt="image with no caption" hisrc="figs/web/517fig01.png.jpg"/></div></div></li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00164"></a><h3 class="title">Sharpen your pencil</h3><p>We’re still directly instantiating Geese by relying on concrete classes. Can you write an Abstract Factory for Geese? How should it handle creating “goose ducks”?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00708a"></a><div class="mediaobject"><a id="med_id00708"></a><img src="../Images/image01208.jpeg" alt="image with no caption" hisrc="figs/web/518fig01.png.jpg"/></div></div><p><span class="strong"><strong>Ah, he wants to manage a flock of ducks.</strong></span></p><p>Here’s another good question from Ranger Brewer: Why are we managing ducks individually?</p><div class="informalfigure"><a id="med_id00709a"></a><div class="mediaobject"><a id="med_id00709"></a><img src="../Images/image01209.jpeg" alt="image with no caption" hisrc="figs/web/518fig02.png.jpg"/></div></div><p>What we need is a way to talk about collections of ducks and even sub-collections of ducks (to deal with the family request from Ranger Brewer). It would also be nice if we could apply operations across the whole set of ducks.</p><p>What pattern can help us?</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">⑫ <a id="iddle1168" class="indexterm"></a><a id="iddle1170" class="indexterm"></a><a id="iddle1226" class="indexterm"></a><a id="iddle1460" class="indexterm"></a><a id="iddle1462" class="indexterm"></a><a id="iddle1814" class="indexterm"></a><a id="iddle1956" class="indexterm"></a><a id="iddle1958" class="indexterm"></a><a id="iddle2108" class="indexterm"></a><a id="iddle2110" class="indexterm"></a><span class="strong"><strong>Let’s create a flock of ducks (well, actually a flock of Quackables).</strong></span><br/>Remember the Composite Pattern that allows us to treat a collection of objects in the same way as individual objects? What better composite than a flock of Quackables!<br/>Let’s step through how this is going to work:<div class="informalfigure"><a id="med_id00710a"></a><div class="mediaobject"><a id="med_id00710"></a><img src="../Images/image01210.jpeg" alt="image with no caption" hisrc="figs/web/519fig01.png.jpg"/></div></div></li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_up_close-id00165"></a><h3 class="title">Code Up Close</h3><p>Did you notice that we tried to sneak a Design Pattern by you without mentioning it?</p><div class="informalfigure"><a id="med_id00711a"></a><div class="mediaobject"><a id="med_id00711"></a><img src="../Images/image01211.jpeg" alt="image with no caption" hisrc="figs/web/519fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑬ Now we need to alter the simulator.</strong></span><br/>Our composite is ready; we just need some code to round up the ducks into the composite structure.<div class="informalfigure"><a id="med_id00712a"></a><div class="mediaobject"><a id="med_id00712"></a><img src="../Images/image01212.jpeg" alt="image with no caption" hisrc="figs/web/520fig01.png.jpg"/></div></div></li></ul></div><p><a id="iddle1243" class="indexterm"></a>Let’s give it a spin...</p><div class="informalfigure"><a id="med_id00713a"></a><div class="mediaobject"><a id="med_id00713"></a><img src="../Images/image01213.jpeg" alt="image with no caption" hisrc="figs/web/521fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="safety_versus_transparency"></a><h3 class="title">Safety versus transparency</h3><p>You might remember that in the Composite Pattern chapter the composites (the Menus) and the leaf nodes (the MenuItems) had the <span class="emphasis"><em>same</em></span> exact set of methods, including the add() method. Because they had the same set of methods, we could call methods on MenuItems that didn’t really make sense (like trying to add something to a MenuItem by calling add()). The benefit of this was that the distinction between leaves and composites was <span class="emphasis"><em>transparent</em></span>: the client didn’t have to know whether it was dealing with a leaf or a composite; it just called the same methods on both.</p><p>Here, we’ve decided to keep the composite’s child maintenance methods separate from the leaf nodes: that is, only Flocks have the add() method. We know it doesn’t make sense to try to add something to a Duck, and in this implementation, you can’t. You can only add() to a Flock. So this design is <span class="emphasis"><em>safer</em></span> — you can’t call methods that don’t make sense on components — but it’s less transparent. Now the client has to know that a Quackable is a Flock in order to add Quackables to it.</p><p>As always, there are trade-offs when you do OO design and you need to consider them as you create your own composites.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00714a"></a><div class="mediaobject"><a id="med_id00714"></a><img src="../Images/image01214.jpeg" alt="image with no caption" hisrc="figs/web/522fig01.png.jpg"/></div></div><p><a id="iddle1171" class="indexterm"></a><a id="iddle1463" class="indexterm"></a><a id="iddle1959" class="indexterm"></a><a id="iddle2033" class="indexterm"></a><a id="iddle2111" class="indexterm"></a><span class="strong"><strong>Can you say “observer”?</strong></span></p><p>It sounds like the Quackologist would like to observe individual duck behavior. That leads us right to a pattern made for observing the behavior of objects: the Observer Pattern.</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑭ First we need an Observable interface.</strong></span><br/>Remember that an Observable is the object being observed. An Observable needs methods for registering and notifying observers. We could also have a method for removing observers, but we’ll keep the implementation simple here and leave that out.<div class="informalfigure"><a id="med_id00715a"></a><div class="mediaobject"><a id="med_id00715"></a><img src="../Images/image01215.jpeg" alt="image with no caption" hisrc="figs/web/522fig02.png.jpg"/></div></div><br/>Now we need to make sure all Quackables implement this interface...<div class="informalfigure"><a id="med_id00716a"></a><div class="mediaobject"><a id="med_id00716"></a><img src="../Images/image01216.jpeg" alt="image with no caption" hisrc="figs/web/522fig03.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑮ Now, we need to make sure all the concrete classes that implement Quackable can handle being a QuackObservable.</strong></span><br/>We could approach this by implementing registration and notification in each and every class (like we did in <a class="xref" href="part0009.xhtml#aid-8IL22">Chapter 2</a>). But we’re going to do it a little differently this time: we’re going to encapsulate the registration and notification code in another class, call it Observable, and compose it with a QuackObservable. That way, we only write the real code once and the QuackObservable just needs enough code to delegate to the helper class Observable.<br/>Let’s begin with the Observable helper class.<div class="informalfigure"><a id="med_id00717a"></a><div class="mediaobject"><a id="med_id00717"></a><img src="../Images/image01217.jpeg" alt="image with no caption" hisrc="figs/web/523fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00718a"></a><div class="mediaobject"><a id="med_id00718"></a><img src="../Images/image01218.jpeg" alt="image with no caption" hisrc="figs/web/523fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">⑯ <a id="iddle1531" class="indexterm"></a><a id="iddle2270" class="indexterm"></a><span class="strong"><strong>Integrate the helper Observable with the Quackable classes.</strong></span><br/>This shouldn’t be too bad. All we need to do is make sure the Quackable classes are composed with an Observable and that they know how to delegate to it. After that, they’re ready to be Observables. Here’s the implementation of MallardDuck; the other ducks are the same.<div class="informalfigure"><a id="med_id00719a"></a><div class="mediaobject"><a id="med_id00719"></a><img src="../Images/image01219.jpeg" alt="image with no caption" hisrc="figs/web/524fig01.png.jpg"/></div></div></li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00166"></a><h3 class="title">Sharpen your pencil</h3><p>We haven’t changed the implementation of one Quackable, the QuackCounter decorator. We need to make it an Observable too. Why don’t you write that one:</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑰ We’re almost there! We just need to work on the Observer side of the pattern.</strong></span><br/>We’ve implemented everything we need for the Observables; now we need some Observers. We’ll start with the Observer interface:<div class="informalfigure"><a id="med_id00720a"></a><div class="mediaobject"><a id="med_id00720"></a><img src="../Images/image01220.jpeg" alt="image with no caption" hisrc="figs/web/525fig01.png.jpg"/></div></div><br/>Now we need an Observer: where are those Quackologists?!<div class="informalfigure"><a id="med_id00721a"></a><div class="mediaobject"><a id="med_id00721"></a><img src="../Images/image01221.jpeg" alt="image with no caption" hisrc="figs/web/525fig02.png.jpg"/></div></div></li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00167"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1572" class="indexterm"></a><a id="iddle2317" class="indexterm"></a>What if a Quackologist wants to observe an entire flock? What does that mean anyway? Think about it like this: if we observe a composite, then we’re observing everything in the composite. So, when you register with a flock, the flock composite makes sure you get registered with all its children (sorry, all its little quackers), which may include other flocks.</p><p>Go ahead and write the Flock observer code before we go any further.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑱ We’re ready to observe. Let’s update the simulator and give it a try:</strong></span><div class="informalfigure"><a id="med_id00722a"></a><div class="mediaobject"><a id="med_id00722"></a><img src="../Images/image01222.jpeg" alt="image with no caption" hisrc="figs/web/527fig01.png.jpg"/></div></div></li></ul></div><p><a id="iddle1288" class="indexterm"></a>This is the big finale. Five, no, six patterns have come together to create this amazing Duck Simulator. Without further ado, we present the DuckSimulator!</p><div class="informalfigure"><a id="med_id00723a"></a><div class="mediaobject"><a id="med_id00723"></a><img src="../Images/image01223.jpeg" alt="image with no caption" hisrc="figs/web/528fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00168"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa1qe1"></a><a id="ch12qa1q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: So this was a compound pattern?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa1q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> No, this was just a set of patterns working together. A compound pattern is a set of a few patterns that are combined to solve a general problem. We’re just about to take a look at the Model-View-Controller compound pattern; it’s a collection of a few patterns that has been used over and over in many design solutions.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa1qe2"></a><a id="ch12qa1q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: So the real beauty of Design Patterns is that I can take a problem, and start applying patterns to it until I have a solution. Right?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa1q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Wrong. We went through this exercise with Ducks to show you how patterns <span class="emphasis"><em>can</em></span> work together. You’d never actually want to approach a design like we just did. In fact, there may be solutions to parts of the Duck Simulator for which some of these patterns were big time overkill. Sometimes just using good OO design principles can solve a problem well enough on its own.</div><div>We’re going to talk more about this in the next chapter, but you only want to apply patterns when and where they make sense. You never want to start out with the intention of using patterns just for the sake of it. You should consider the design of the Duck Simulator to be forced and artificial. But hey, it was fun and gave us a good idea of how several patterns can fit into a solution.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_did_we_doquestion_mark-id00169">What did we do?</h2></div></div></div><p><span class="strong"><strong>We started with a bunch of Quackables...</strong></span></p><p><span class="strong"><strong>A goose came along and wanted to act like a Quackable too.</strong></span> So we used the <span class="emphasis"><em>Adapter Pattern</em></span> to adapt the goose to a Quackable. Now, you can call quack() on a goose wrapped in the adapter and it will honk!</p><p><span class="strong"><strong>Then, the Quackologists decided they wanted to count quacks.</strong></span> So we used the <span class="emphasis"><em>Decorator Pattern</em></span> to add a QuackCounter decorator that keeps track of the number of times quack() is called, and then delegates the quack to the Quackable it’s wrapping.</p><p><span class="strong"><strong>But the Quackologists were worried they’d forget to add the QuackCounter decorator.</strong></span> So we used the <span class="emphasis"><em>Abstract Factory Pattern</em></span> to create ducks for them. Now, whenever they want a duck, they ask the factory for one, and it hands back a decorated duck. (And don’t forget, they can also use another duck factory if they want an un-decorated duck!)</p><p><span class="strong"><strong>We had management problems keeping track of all those ducks and geese and quackables.</strong></span> So we used the <span class="emphasis"><em>Composite Pattern</em></span> to group Quackables into Flocks. The pattern also allows the Quackologist to create sub-Flocks to manage duck families. We used the <span class="emphasis"><em>Iterator Pattern</em></span> in our implementation by using java.util’s iterator in ArrayList.</p><p><span class="strong"><strong>The Quackologists also wanted to be notified when any Quackable quacked.</strong></span> So we used the <span class="emphasis"><em>Observer Pattern</em></span> to let the Quackologists register as Quackable Observers. Now they’re notified every time any Quackable quacks. We used iterator again in this implementation. The Quackologists can even use the Observer Pattern with their composites.</p><div class="informalfigure"><a id="med_id00724a"></a><div class="mediaobject"><a id="med_id00724"></a><img src="../Images/image01224.jpeg" alt="image with no caption" hisrc="figs/web/529fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="duckapostrophes_eye_view_the_class_diagr">A duck’s eye view: the class diagram</h2></div></div></div><p><a id="iddle1167" class="indexterm"></a><a id="iddle1464" class="indexterm"></a><a id="iddle1960" class="indexterm"></a><a id="iddle2112" class="indexterm"></a>We’ve packed a lot of patterns into one small duck simulator! Here’s the big picture of what we did:</p><div class="informalfigure"><a id="med_id00725a"></a><div class="mediaobject"><a id="med_id00725"></a><img src="../Images/image01225.jpeg" alt="image with no caption" hisrc="figs/web/530fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="king_of_compound_patterns">The King of Compound Patterns</h2></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="if_elvis_were_a_compound_patterncomma_hi">If Elvis were a compound pattern, his name would be Model-View-Controller, and he’d be singing a little song like this...</h3></div></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><a id="iddle1261" class="indexterm"></a><a id="iddle1280" class="indexterm"></a><a id="iddle1922" class="indexterm"></a><a id="iddle1941" class="indexterm"></a>Model, View, Controller</p>
<p>Lyrics and music by James Dempsey.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Model a bottle of fine Chardonnay</p>
<p>Model all the glottal stops people say</p>
<p>Model the coddling of boiling eggs</p>
<p>You can model the waddle in Hexley’s legs</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>MVC’s a paradigm for factoring your code into functional segments, so your brain does not explode.</p>
<p>To achieve reusability, you gotta keep those boundaries clean</p>
<p>Model on the one side, View on the other, the Controller’s in between.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Model View, you can model all the models that pose for GQ</p>
<p>Model View Controller</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00726a"></a><img src="../Images/image01226.jpeg" alt="" hisrc="figs/web/532fig01.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note02"></a>Note</h3><p>So does Java!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div>
<p>View objects tend to be controls used to display and edit</p>
<p>Cocoa’s got a lot of those, well written to its credit.</p>
<p>Take an NSTextView, hand it any old Unicode string</p>
<p>The user can interact with it, it can hold most anything</p>
<p>But the view don’t know about the Model</p>
<p>That string could be a phone number or the works of Aristotle</p>
<p>Keep the coupling loose and so achieve a massive level of reuse</p>
<p>So does Java!</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Model View, it’s got three layers like Oreos do</p>
<p>Model View Controller</p>
<p>Model View, Model View, Model View Controller</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Model View, all rendered very nicely in Aqua blue</p>
<p>Model View Controller</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Model objects represent your application’s raison d’être</p>
<p>Custom objects that contain data, logic, and et cetera</p>
<p>You create custom classes, in your app’s problem domain you can choose to reuse them with all the views but the model objects stay the same.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>You’re probably wondering now</p>
<p>You’re probably wondering how</p>
<p>Data flows between Model and View</p>
<p>The Controller has to mediate</p>
<p>Between each layer’s changing state</p>
<p>To synchronize the data of the two</p>
<p>It pulls and pushes every changed value</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>You can model a throttle and a manifold</p>
<p>Model the toddle of a two year old</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Model View, mad props to the smalltalk crew!</p>
<p>Model View Controller</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Model View, it’s pronounced Oh Oh not Ooo Ooo</p>
<p>Model View Controller</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Model View</p>
<p>How we gonna deep six all that glue</p>
<p>Model View Controller</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>There’s a little left to this story</p>
<p>A few more miles upon this road</p>
<p>Nobody seems to get much glory</p>
<p>From writing the controller code</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Controllers know the Model and View very intimately</p>
<p>They often use hardcoding which can be foreboding for reusability</p>
<p>But now you can connect each model key that you select to any view property</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Well the model’s mission critical</p>
<p>And gorgeous is the view</p>
<p>I might be lazy, but sometimes it’s just crazy</p>
<p>How much code I write is just glue</p>
<p>And it wouldn’t be so tragic</p>
<p>But the code ain’t doing magic</p>
<p>It’s just moving values through</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>And once you start binding</p>
<p>I think you’ll be finding less code in your source tree</p>
<p>Yeah I know I was elated by the stuff they’ve automated and the things you get for free</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>And I don’t mean to be vicious</p>
<p>But it gets repetitious</p>
<p>Doing all the things controllers do</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>And I think it bears repeating all the code you won’t be needing when you hook it up in <span class="inlinemediaobject"><a id="inline_id00063"></a><img src="../Images/image01227.jpeg" alt="" hisrc="figs/web/533fig01.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>And I wish I had a dime</p>
<p>For every single time</p>
<p>I sent a TextField StringValue.</p></td><td style="vertical-align: top; "><p>Model View, even handles multiple selections too</p>
<p>Model View Controller</p>
<p>Model View, bet I ship my application before you</p>
<p>Model View Controller</p></td></tr></tbody></table></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note03"></a>Ear Power</h3><p>Don’t just read! After all, this is a Head First book... grab your iPod, hit this URL:</p><p><span class="emphasis"><em><a class="ulink" href="http://www.youtube.com/watch?v=YYvOGPMLVDo" target="_top">http://www.youtube.com/watch?v=YYvOGPMLVDo</a></em></span></p><p>Sit back and give it a listen.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00727a"></a><div class="mediaobject"><a id="med_id00727"></a><img src="../Images/image01228.jpeg" alt="image with no caption" hisrc="figs/web/534fig01.png.jpg"/></div></div><p><span class="strong"><strong>No. Design Patterns are your key to the MVC.</strong></span></p><p>We were just trying to whet your appetite. Tell you what, after you finish reading this chapter, go back and listen to the song again — you’ll have even more fun.</p><p>It sounds like you’ve had a bad run-in with MVC before? Most of us have. You’ve probably had other developers tell you it’s changed their lives and could possibly create world peace. It’s a powerful compound pattern, for sure, and while we can’t claim it will create world peace, it will save you hours of writing code once you know it.</p><p>But first you have to learn it, right? Well, there’s going to be a big difference this time around because <span class="emphasis"><em>now you know patterns!</em></span></p><p>That’s right, patterns are the key to MVC. Learning MVC from the top down is difficult; not many developers succeed. Here’s the secret to learning MVC: <span class="emphasis"><em>it’s just a few patterns put together.</em></span> When you approach learning MVC by looking at the patterns, all of a sudden it starts to make sense.</p><p>Let’s get started. This time around you’re going to nail MVC!</p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="meet_the_model-view-controller">Meet the Model-View-Controller</h2></div></div></div><p><a id="iddle1262" class="indexterm"></a><a id="iddle1923" class="indexterm"></a>Imagine you’re using your favorite MP3 player, like iTunes. You can use its interface to add new songs, manage playlists and rename tracks. The player takes care of maintaining a little database of all your songs along with their associated names and data. It also takes care of playing the songs and, as it does, the user interface is constantly updated with the current song title, the running time, and so on.</p><p>Well, underneath it all sits the Model-View-Controller...</p><div class="informalfigure"><a id="med_id00728a"></a><div class="mediaobject"><a id="med_id00728"></a><img src="../Images/image01229.jpeg" alt="image with no caption" hisrc="figs/web/535fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="closer_lookhellip">A closer look...</h2></div></div></div><p>The MP3 player description gives us a high-level view of MVC, but it really doesn’t help you understand the nitty gritty of how the compound pattern works, how you’d build one yourself, or why it’s such a good thing. Let’s start by stepping through the relationships among the model, view and controller, and then we’ll take second look from the perspective of Design Patterns.</p><div class="informalfigure"><a id="med_id00729a"></a><div class="mediaobject"><a id="med_id00729"></a><img src="../Images/image01230.jpeg" alt="image with no caption" hisrc="figs/web/536fig01.png.jpg"/></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① You’re the user — you interact with the view.</strong></span><br/>The view is your window to the model. When you do something to the view (like click the Play button) then the view tells the controller what you did. It’s the controller’s job to handle that.</li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② The controller asks the model to change its state.</strong></span><br/>The controller takes your actions and interprets them. If you click on a button, it’s the controller’s job to figure out what that means and how the model should be manipulated based on that action.</li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ The controller may also ask the view to change.</strong></span><br/>When the controller receives an action from the view, it may need to tell the view to change as a result. For example, the controller could enable or disable certain buttons or menu items in the interface.</li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ The model notifies the view when its state has changed.</strong></span><br/>When something changes in the model, based either on some action you took (like clicking a button) or some other internal change (like the next song in the playlist has started), the model notifies the view that its state has changed.</li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑤ The view asks the model for state.</strong></span><br/>The view gets the state it displays directly from the model. For instance, when the model notifies the view that a new song has started playing, the view requests the song name from the model and displays it. The view might also ask the model for state as the result of the controller requesting some change in the view.</li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00170"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa2qe1"></a><a id="ch12qa2q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Does the controller ever become an observer of the model?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa2q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Sure. In some designs the controller registers with the model and is notified of changes. This can be the case when something in the model directly affects the user interface controls. For instance, certain states in the model may dictate that some interface items be enabled or disabled. If so, it is really controller’s job to ask the view to update its display accordingly.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa2qe2"></a><a id="ch12qa2q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: All the controller does is take user input from the view and send it to the model, correct? Why have it at all if that is all it does? Why not just have the code in the view itself? In most cases isn’t the controller just calling a method on the model?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa2q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> The controller does more than just “send it to the model”; it is responsible for interpreting the input and manipulating the model based on that input. But your real question is probably “why can’t I just do that in the view code?”</div><div>You could; however, you don’t want to for two reasons. First, you’ll complicate your view code because it now has two responsibilities: managing the user interface and dealing with the logic of how to control the model. Second, you’re tightly coupling your view to the model. If you want to reuse the view with another model, forget it. The controller separates the logic of control from the view and decouples the view from the model. By keeping the view and controller loosely coupled, you are building a more flexible and extensible design, one that can more easily accommodate change down the road.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="looking_at_mvc_through_patterns-colored">Looking at MVC through patterns-colored glasses</h2></div></div></div><div class="informalfigure"><a id="med_id00730a"></a><div class="mediaobject"><a id="med_id00730"></a><img src="../Images/image01231.jpeg" alt="image with no caption" hisrc="figs/web/538fig01.png.jpg"/></div></div><p><a id="iddle1239" class="indexterm"></a><a id="iddle1266" class="indexterm"></a><a id="iddle1278" class="indexterm"></a><a id="iddle1282" class="indexterm"></a><a id="iddle1927" class="indexterm"></a><a id="iddle1939" class="indexterm"></a><a id="iddle1943" class="indexterm"></a><a id="iddle2041" class="indexterm"></a><a id="iddle2417" class="indexterm"></a>We’ve already told you the best path to learning the MVC is to see it for what it is: a set of patterns working together in the same design.</p><p>Let’s start with the model. As you might have guessed, the model uses Observer to keep the views and controllers updated on the latest state changes. The view and the controller, on the other hand, implement the Strategy Pattern. The controller is the behavior of the view, and it can be easily exchanged with another controller if you want different behavior. The view itself also uses a pattern internally to manage the windows, buttons and other components of the display: the Composite Pattern.</p><p>Let’s take a closer look:</p><div class="informalfigure"><a id="med_id00731a"></a><div class="mediaobject"><a id="med_id00731"></a><img src="../Images/image01232.jpeg" alt="image with no caption" hisrc="figs/web/538fig02.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="observer">Observer</h3></div></div></div><div class="informalfigure"><a id="med_id00732a"></a><div class="mediaobject"><a id="med_id00732"></a><img src="../Images/image01233.jpeg" alt="image with no caption" hisrc="figs/web/539fig01.png.jpg"/></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="strategy">Strategy</h3></div></div></div><div class="informalfigure"><a id="med_id00733a"></a><div class="mediaobject"><a id="med_id00733"></a><img src="../Images/image01234.jpeg" alt="image with no caption" hisrc="figs/web/539fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note04a"></a>Note</h3><p>The view only worries about presentation. The controller worries about translating user input to actions on the model.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="composite">Composite</h3></div></div></div><div class="informalfigure"><a id="med_id00734a"></a><div class="mediaobject"><a id="med_id00734"></a><img src="../Images/image01235.jpeg" alt="image with no caption" hisrc="figs/web/539fig03.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="using_mvc_to_control_the_beathellip">Using MVC to control the beat...</h2></div></div></div><div class="informalfigure"><a id="med_id00735a"></a><div class="mediaobject"><a id="med_id00735"></a><img src="../Images/image01236.jpeg" alt="image with no caption" hisrc="figs/web/540fig01.png.jpg"/></div></div><p><a id="iddle1274" class="indexterm"></a><a id="iddle1451" class="indexterm"></a><a id="iddle1935" class="indexterm"></a>It’s your time to be the DJ. When you’re a DJ it’s all about the beat. You might start your mix with a slowed, downtempo groove at 95 beats per minute (BPM) and then bring the crowd up to a frenzied 140 BPM of trance techno. You’ll finish off your set with a mellow 80 BPM ambient mix.</p><p>How are you going to do that? You have to control the beat and you’re going to build the tool to get you there.</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="meet_the_java_dj_view">Meet the Java DJ View</h3></div></div></div><p>Let’s start with the <span class="strong"><strong>view</strong></span> of the tool. The view allows you to create a driving drum beat and tune its beats per minute...</p><div class="informalfigure"><a id="med_id00736a"></a><div class="mediaobject"><a id="med_id00736"></a><img src="../Images/image01237.jpeg" alt="image with no caption" hisrc="figs/web/540fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note04"></a>Note</h3><p><a id="iddle1264" class="indexterm"></a><a id="iddle1925" class="indexterm"></a>Here are a few more ways to control the DJ View...</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00737a"></a><div class="mediaobject"><a id="med_id00737"></a><img src="../Images/image01238.jpeg" alt="image with no caption" hisrc="figs/web/541fig01.png.jpg"/></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="controller_is_in_the_middlehellip">The controller is in the middle...</h3></div></div></div><p>The <span class="strong"><strong>controller</strong></span> sits between the view and model. It takes your input, like selecting “Start” from the DJ Control menu, and turns it into an action on the model to start the beat generation.</p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="letapostrophes_not_forget_about_the_mode">Let’s not forget about the model underneath it all...</h3></div></div></div><p>You can’t see the <span class="strong"><strong>model</strong></span>, but you can hear it. The model sits underneath everything else, managing the beat and driving the speakers with MIDI.</p><div class="informalfigure"><a id="med_id00738a"></a><div class="mediaobject"><a id="med_id00738"></a><img src="../Images/image01239.jpeg" alt="image with no caption" hisrc="figs/web/541fig02.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="putting_the_pieces_together">Putting the pieces together</h2></div></div></div><div class="informalfigure"><a id="med_id00739a"></a><div class="mediaobject"><a id="med_id00739"></a><img src="../Images/image01240.jpeg" alt="image with no caption" hisrc="figs/web/542fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="building_the_pieces">Building the pieces</h2></div></div></div><p><a id="iddle1279" class="indexterm"></a><a id="iddle1940" class="indexterm"></a><a id="iddle2042" class="indexterm"></a>Okay, you know the model is responsible for maintaining all the data, state and any application logic. So what’s the BeatModel got in it? Its main job is managing the beat, so it has state that maintains the current beats per minute and lots of code that generates MIDI events to create the beat that we hear. It also exposes an interface that lets the controller manipulate the beat and lets the view and controller obtain the model’s state. Also, don’t forget that the model uses the Observer Pattern, so we also need some methods to let objects register as observers and send out notifications.</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="letapostrophes_check_out_the_beatmodelin">Let’s check out the BeatModelInterface before looking at the implementation</h3></div></div></div><div class="informalfigure"><a id="med_id00740a"></a><div class="mediaobject"><a id="med_id00740"></a><img src="../Images/image01241.jpeg" alt="image with no caption" hisrc="figs/web/543fig01.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="now_letapostrophes_have_a_look_at_the_co">Now let’s have a look at the concrete BeatModel class</h2></div></div></div><div class="informalfigure"><a id="med_id00741a"></a><div class="mediaobject"><a id="med_id00741"></a><img src="../Images/image01242.jpeg" alt="image with no caption" hisrc="figs/web/544fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="ready_bake_code-id00171"></a><h3 class="title">Ready Bake Code</h3><p>This model uses Java’s MIDI support to generate beats. You can check out the complete implementation of all the DJ classes in the Java source files available on the wickedlysmart.com site, or look at the code at the end of the chapter.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="view">The View</h2></div></div></div><p>Now the fun starts; we get to hook up a view and visualize the BeatModel!</p><p>The first thing to notice about the view is that we’ve implemented it so that it is displayed in two separate windows. One window contains the current BPM and the pulse; the other contains the interface controls. Why? We wanted to emphasize the difference between the interface that contains the view of the model and the rest of the interface that contains the set of user controls. Let’s take a closer look at the two parts of the view:</p><div class="informalfigure"><a id="med_id00742a"></a><div class="mediaobject"><a id="med_id00742"></a><img src="../Images/image01243.jpeg" alt="image with no caption" hisrc="figs/web/545fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note05"></a>Brain Power</h3><p>Our BeatModel makes no assumptions about the view. The model is implemented using the Observer Pattern, so it just notifies any view registered as an observer when its state changes. The view uses the model’s API to get access to the state. We’ve implemented one type of view; can you think of other views that could make use of the notifications and state in the BeatModel?</p><p><span class="underline">A lightshow that is based on the real-time beat.</span>_____________________________________________</p><p><span class="underline">A textual view that displays a music genre based on the BPM (ambient, downbeat, techno, etc</span>.).</p><p>____________________________________________________________________________________________</p><p>____________________________________________________________________________________________</p><p>____________________________________________________________________________________________</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_view">Implementing the View</h2></div></div></div><p>The two parts of the view — the view of the model, and the view with the user interface controls — are displayed in two windows, but live together in one Java class. We’ll first show you just the code that creates the view of the model, which displays the current BPM and the beat bar. Then we’ll come back on the next page and show you just the code that creates the user interface controls, which displays the BPM text entry field, and the buttons.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note06"></a>Watch it!</h3><p><span class="strong"><strong>The code on these two pages is just an outline!</strong></span></p><p><span class="emphasis"><em>What we’ve done here is split ONE class into TWO, showing you one part of the view on this page, and the other part on the next page. All this code is really in ONE class — DJView.java. It’s all listed at the end of the chapter.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00743a"></a><div class="mediaobject"><a id="med_id00743"></a><img src="../Images/image01244.jpeg" alt="image with no caption" hisrc="figs/web/546fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_viewcomma_continuedhell">Implementing the View, continued...</h2></div></div></div><p>Now, we’ll look at the code for the user interface controls part of the view. This view lets you control the model by telling the controller what to do, which in turn, tells the model what to do. Remember, this code is in the same class file as the other view code.</p><div class="informalfigure"><a id="med_id00744a"></a><div class="mediaobject"><a id="med_id00744"></a><img src="../Images/image01245.jpeg" alt="image with no caption" hisrc="figs/web/547fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="now_for_the_controller">Now for the Controller</h2></div></div></div><p><a id="iddle1273" class="indexterm"></a><a id="iddle1283" class="indexterm"></a><a id="iddle1428" class="indexterm"></a><a id="iddle1510" class="indexterm"></a><a id="iddle1933" class="indexterm"></a><a id="iddle1944" class="indexterm"></a><a id="iddle2418" class="indexterm"></a>It’s time to write the missing piece: the controller. Remember the controller is the strategy that we plug into the view to give it some smarts.</p><p>Because we are implementing the Strategy Pattern, we need to start with an interface for any Strategy that might be plugged into the DJ View. We’re going to call it ControllerInterface.</p><div class="informalfigure"><a id="med_id00745a"></a><div class="mediaobject"><a id="med_id00745"></a><img src="../Images/image01246.jpeg" alt="image with no caption" hisrc="figs/web/548fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle-id00172"></a><h3 class="title">Design Puzzle</h3><p>You’ve seen that the view and controller together make use of the Strategy Pattern. Can you draw a class diagram of the two that represents this pattern?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="and_hereapostrophes_the_implementation_o">And here’s the implementation of the controller</h3></div></div></div><div class="informalfigure"><a id="med_id00746a"></a><div class="mediaobject"><a id="med_id00746"></a><img src="../Images/image01247.jpeg" alt="image with no caption" hisrc="figs/web/549fig01.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="putting_it_all_togetherhellip">Putting it all together...</h2></div></div></div><p><a id="iddle1285" class="indexterm"></a><a id="iddle1947" class="indexterm"></a>We’ve got everything we need: a model, a view, and a controller. Now it’s time to put them all together into a MVC! We’re going to see and hear how well they work together.</p><div class="informalfigure"><a id="med_id00747a"></a><div class="mediaobject"><a id="med_id00747"></a><img src="../Images/image01248.jpeg" alt="image with no caption" hisrc="figs/web/550fig01.png.jpg"/></div></div><p>All we need is a little code to get things started; it won’t take much:</p><div class="informalfigure"><a id="med_id00748a"></a><div class="mediaobject"><a id="med_id00748"></a><img src="../Images/image01249.jpeg" alt="image with no caption" hisrc="figs/web/550fig02.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="and_now_for_a_test_runhellip">And now for a test run...</h3></div></div></div><div class="informalfigure"><a id="med_id00749a"></a><div class="mediaobject"><a id="med_id00749"></a><img src="../Images/image01250.jpeg" alt="image with no caption" hisrc="figs/web/550fig03.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00750a"></a><div class="mediaobject"><a id="med_id00750"></a><img src="../Images/image01251.jpeg" alt="image with no caption" hisrc="figs/web/550fig04.png.jpg"/></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="things_to_do">Things to do</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Start the beat generation with the Start menu item; notice the controller disables the item afterwards.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Use the text entry along with the increase and decrease buttons to change the BPM. Notice how the view display reflects the changes despite the fact that it has no logical link to the controls.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Notice how the beat bar always keeps up with the beat since it’s an observer of the model.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ Put on your favorite song and see if you can beat match the beat by using the increase and decrease controls.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑤ Stop the generator. Notice how the controller disables the Stop menu item and enables the Start menu item.</strong></span></li></ul></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="exploring_strategy">Exploring Strategy</h2></div></div></div><p><a id="iddle1263" class="indexterm"></a><a id="iddle1271" class="indexterm"></a><a id="iddle1284" class="indexterm"></a><a id="iddle1932" class="indexterm"></a><a id="iddle1945" class="indexterm"></a><a id="iddle2419" class="indexterm"></a>Let’s take the Strategy Pattern just a little further to get a better feel for how it is used in MVC. We’re going to see another friendly pattern pop up too — a pattern you’ll often see hanging around the MVC trio: the Adapter Pattern.</p><div class="informalfigure"><a id="med_id00751a"></a><div class="mediaobject"><a id="med_id00751"></a><img src="../Images/image01252.jpeg" alt="image with no caption" hisrc="figs/web/551fig01.png.jpg"/></div></div><p>Think for a second about what the DJ View does: it displays a beat rate and a pulse. Does that sound like something else? How about a heartbeat? It just so happens that we have a heart monitor class; here’s the class diagram:</p><div class="informalfigure"><a id="med_id00752a"></a><div class="mediaobject"><a id="med_id00752"></a><img src="../Images/image01253.jpeg" alt="image with no caption" hisrc="figs/web/551fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note07"></a>Brain Power</h3><p>It certainly would be nice to reuse our current view with the HeartModel, but we need a controller that works with this model. Also, the interface of the HeartModel doesn’t match what the view expects because it has a getHeartRate() method rather than a getBPM(). How would you design a set of classes to allow the view to be reused with the new model? Jot down your class design ideas below.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="adapting_the_model">Adapting the Model</h2></div></div></div><p><a id="iddle1031" class="indexterm"></a><a id="iddle1924" class="indexterm"></a>For starters, we’re going to need to adapt the HeartModel to a BeatModel. If we don’t, the view won’t be able to work with the model, because the view only knows how to getBPM(), and the equivalent heart model method is getHeartRate(). How are we going to do this? We’re going to use the Adapter Pattern, of course! It turns out that this is a common technique when working with the MVC: use an adapter to adapt a model to work with existing controllers and views.</p><p>Here’s the code to adapt a HeartModel to a BeatModel:</p><div class="informalfigure"><a id="med_id00753a"></a><div class="mediaobject"><a id="med_id00753"></a><img src="../Images/image01254.jpeg" alt="image with no caption" hisrc="figs/web/552fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="now_weapostrophere_ready_for_a_heartcont">Now we’re ready for a HeartController</h2></div></div></div><p><a id="iddle1269" class="indexterm"></a><a id="iddle1930" class="indexterm"></a>With our HeartAdapter in hand we should be ready to create a controller and get the view running with the HeartModel. Talk about reuse!</p><div class="informalfigure"><a id="med_id00754a"></a><div class="mediaobject"><a id="med_id00754"></a><img src="../Images/image01255.jpeg" alt="image with no caption" hisrc="figs/web/553fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="and_thatapostrophes_itexclamation_mark_n">And that’s it! Now it’s time for some test code...</h3></div></div></div><div class="informalfigure"><a id="med_id00755a"></a><div class="mediaobject"><a id="med_id00755"></a><img src="../Images/image01256.jpeg" alt="image with no caption" hisrc="figs/web/553fig02.png.jpg"/></div></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="and_now_for_a_test_runhellip-id00173">And now for a test run...</h2></div></div></div><div class="informalfigure"><a id="med_id00756a"></a><div class="mediaobject"><a id="med_id00756"></a><img src="../Images/image01257.jpeg" alt="image with no caption" hisrc="figs/web/554fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00757a"></a><div class="mediaobject"><a id="med_id00757"></a><img src="../Images/image01258.jpeg" alt="image with no caption" hisrc="figs/web/554fig02.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="things_to_do-id00174">Things to do</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Notice that the display works great with a heart! The beat bar looks just like a pulse. Because the HeartModel also supports BPM and Beat Observers we can get beat updates just like with the DJ beats.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② As the heartbeat has natural variation, notice the display is updated with the new beats per minute.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Each time we get a BPM update the adapter is doing its job of translating getBPM() calls to getHeartRate() calls.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ The Start and Stop menu items are not enabled because the controller disabled them.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑤ The other buttons still work but have no effect because the controller implements no ops for them. The view could be changed to support the disabling of these items.</strong></span></li></ul></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="mvc_and_the_web">MVC and the Web</h2></div></div></div><p><a id="iddle1256" class="indexterm"></a><a id="iddle1287" class="indexterm"></a><a id="iddle1916" class="indexterm"></a><a id="iddle1949" class="indexterm"></a><a id="iddle2513" class="indexterm"></a>It wasn’t long after the Web was spun that developers started adapting the MVC to fit the browser/server model. The prevailing adaptation is known simply as “Model 2” and uses a combination of servlet and JSP technology to achieve the same separation of model, view and controller that we see in conventional GUIs.</p><p>Let’s check out how Model 2 works:</p><div class="informalfigure"><a id="med_id00758a"></a><div class="mediaobject"><a id="med_id00758"></a><img src="../Images/image01259.jpeg" alt="image with no caption" hisrc="figs/web/555fig01.png.jpg"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>①</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>You make an HTTP request, which is received by a servlet.</strong></span></p>
<p>Using your web browser you make an HTTP request. This typically involves sending along some form data, like your username and password. A servlet receives this form data and parses it.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>②</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>The servlet acts as the controller.</strong></span></p>
<p>The servlet plays the role of the controller and processes your request, most likely making requests on the model (usually a database). The result of processing the request is usually bundled up in the form of a JavaBean.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>③</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>The controller forwards control to the view.</strong></span></p>
<p>The View is represented by a JSP. The JSP’s only job is to generate the page representing the view of model (❹ which it obtains via the JavaBean) along with any controls needed for further actions.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>④</p></td><td style="vertical-align: top; "><p><span class="strong"><strong>The view returns a page to the browser via HTTP.</strong></span></p>
<p>A page is returned to the browser, where it is displayed as the view. The user submits further requests, which are processed in the same fashion.</p></td></tr></tbody></table></div><div class="informalfigure"><a id="med_id00759a"></a><div class="mediaobject"><a id="med_id00759"></a><img src="../Images/image01260.jpeg" alt="image with no caption" hisrc="figs/web/556fig01.png.jpg"/></div></div><p><span class="strong"><strong>Model 2 is more than just a clean design.</strong></span></p><p>The benefits of the separation of the view, model and controller are pretty clear to you now. But you need to know the “rest of the story” with Model 2 — that it saved many web shops from sinking into chaos.</p><p>How? Well, Model 2 not only provides a separation of components in terms of design, it also provides a separation in <span class="emphasis"><em>production responsibilities</em></span>. Let’s face it, in the old days, anyone with access to your JSPs could get in and write any Java code they wanted, right? And that included a lot of people who didn’t know a jar file from a jar of peanut butter. The reality is that most web producers <span class="emphasis"><em>know about content and HTML, not software</em></span>.</p><p>Luckily Model 2 came to the rescue. With Model 2 we can leave the developer jobs to the men &amp; women who know their servlets and let the web producers loose on simple Model 2-style JSPs where all the producers have access to is HTML and simple JavaBeans.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="model_2_djapostropheing_from_a_cell_phon">Model 2: DJ’ing from a cell phone</h2></div></div></div><p><a id="iddle1069" class="indexterm"></a><a id="iddle1082" class="indexterm"></a><a id="iddle1258" class="indexterm"></a><a id="iddle1727" class="indexterm"></a><a id="iddle1874" class="indexterm"></a><a id="iddle1918" class="indexterm"></a><a id="iddle2258" class="indexterm"></a>You didn’t think we’d try to skip out without moving that great BeatModel over to the Web, did you? Just think, you can control your entire DJ session through a web page on your cellular phone. So now you can get out of that DJ booth and get down in the crowd. What are you waiting for? Let’s write that code!</p><div class="informalfigure"><a id="med_id00760a"></a><div class="mediaobject"><a id="med_id00760"></a><img src="../Images/image01261.jpeg" alt="image with no caption" hisrc="figs/web/557fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="plan">The plan</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Fix up the model.</strong></span><br/>Well, actually, we don’t have to fix the model; it’s fine just like it is!</li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Create a servlet controller</strong></span><br/>We need a simple servlet that can receive our HTTP requests and perform a few operations on the model. All it needs to do is stop, start and change the beats per minute.</li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Create a HTML view.</strong></span><br/>We’ll create a simple view with a JSP. It’s going to receive a JavaBean from the controller that will tell it everything it needs to display. The JSP will then generate an HTML interface.</li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note08"></a>Geek Bits</h3><p><span class="strong"><strong>Setting up your servlet environment</strong></span></p><p>Showing you how to set up your servlet environment is a little bit off topic for a book on Design Patterns, at least if you don’t want the book to weigh more than you do!</p><p>Fire up your web browser and head straight to <a class="ulink" href="http://jakarta.apache.org/tomcat/" target="_top">http://jakarta.apache.org/tomcat/</a> for the Apache Jakarta Project’s Tomcat Servlet Container. You’ll find everything you need there to get you up and running.</p><p>You’ll also want to check out <span class="emphasis"><em>Head First Servlets &amp; JSP</em></span> by Bryan Basham, Kathy Sierra and Bert Bates.</p><div class="informalfigure"><a id="med_id00761a"></a><div class="mediaobject"><a id="med_id00761"></a><img src="../Images/image01262.jpeg" alt="image with no caption" hisrc="figs/web/557fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="step_one_the_model">Step one: the model</h2></div></div></div><p>Remember that in MVC, the model doesn’t know anything about the views or controllers. In other words, it is totally decoupled. All it knows is that it may have observers it needs to notify. That’s the beauty of the Observer Pattern. It also provides an interface the views and controllers can use to get and set its state.</p><p>Now all we need to do is adapt it to work in the web environment, but, given that it doesn’t depend on any outside classes, there is really no work to be done. We can use our BeatModel off the shelf without changes. So, let’s be productive and move on to step two!</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="step_two_the_controller_servlet">Step two: the controller servlet</h2></div></div></div><p>Remember, the servlet is going to act as our controller; it will receive web browser input in a HTTP request and translate it into actions that can be applied to the model.</p><p>Then, given the way the Web works, we need to return a view to the browser. To do this we’ll pass control to the view, which takes the form of a JSP. We’ll get to that in step three.</p><p>Here’s the outline of the servlet; on the next page, we’ll look at the full implementation.</p><div class="informalfigure"><a id="med_id00762a"></a><div class="mediaobject"><a id="med_id00762"></a><img src="../Images/image01263.jpeg" alt="image with no caption" hisrc="figs/web/558fig01.png.jpg"/></div></div><p>Here’s the implementation of the doGet() method from the page before:</p><div class="informalfigure"><a id="med_id00763a"></a><div class="mediaobject"><a id="med_id00763"></a><img src="../Images/image01264.jpeg" alt="image with no caption" hisrc="figs/web/559fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="now_we_need_a_viewhellip">Now we need a view...</h2></div></div></div><p>All we need is a view and we’ve got our browser-based beat generator ready to go! In Model 2, the view is just a JSP. All the JSP knows about is the bean it receives from the controller. In our case, that bean is just the model and the JSP is only going to use its BPM property to extract the current beats per minute. With that data in hand, it creates the view and also the user interface controls.</p><div class="informalfigure"><a id="med_id00764a"></a><div class="mediaobject"><a id="med_id00764"></a><img src="../Images/image01265.jpeg" alt="image with no caption" hisrc="figs/web/560fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note08a"></a>Note</h3><p>NOTICE that just like MVC, in Model 2 the view doesn’t alter the model (that’s the controller’s job); all it does is use its state!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="putting_model_2_to_the_testhellip">Putting Model 2 to the test...</h2></div></div></div><p>It’s time to start your web browser, hit the DJView Servlet and give the system a spin...</p><div class="informalfigure"><a id="med_id00765a"></a><div class="mediaobject"><a id="med_id00765"></a><img src="../Images/image01266.jpeg" alt="image with no caption" hisrc="figs/web/561fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00766a"></a><div class="mediaobject"><a id="med_id00766"></a><img src="../Images/image01267.jpeg" alt="image with no caption" hisrc="figs/web/562fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="things_to_do-id00175">Things to do</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① First, hit the web page; you’ll see the beats per minute at 0. Go ahead and click the “on” button.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Now you should see the beats per minute at the default setting: 90 BPM. You should also hear a beat on the machine the server is running on.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Enter a specific beat, say, 120, and click the “set” button. The page should refresh with a beats per minute of 120 (and you should hear the beat increase).</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ Now play with the increase/decrease buttons to adjust the beat up and down.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑤ Think about how each step of the system works. The HTML interface makes a request to the servlet (the controller); the servlet parses the user input and then makes requests to the model. The servlet then passes control to the JSP (the view), which creates the HTML view that is returned and displayed.</strong></span></li></ul></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="design_patterns_and_model_2">Design Patterns and Model 2</h2></div></div></div><p><a id="iddle1259" class="indexterm"></a><a id="iddle1919" class="indexterm"></a><a id="iddle2040" class="indexterm"></a>After implementing the DJ control for the Web using Model 2, you might be wondering where the patterns went. We have a view created in HTML from a JSP, but the view is no longer a listener of the model. We have a controller that’s a servlet that receives HTTP requests, but are we still using the Strategy Pattern? And what about Composite? We have a view that is made from HTML and displayed in a web browser. Is that still the Composite Pattern?</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="model_2_is_an_adaptation_of_mvc_to_the_w">Model 2 is an adaptation of MVC to the Web</h3></div></div></div><p>Even though Model 2 doesn’t look exactly like “textbook” MVC, all the parts are still there; they’ve just been adapted to reflect the idiosyncrasies of the web browser model. Let’s take another look...</p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="observer-id00176">Observer</h2></div></div></div><p>The view is no longer an observer of the model in the classic sense; that is, it doesn’t register with the model to receive state change notifications.</p><p>However, the view does receive the equivalent of notifications indirectly from the controller when the model has been changed. The controller even passes the view a bean that allows the view to retrieve the model’s state.</p><p>If you think about the browser model, the view only needs an update of state information when an HTTP response is returned to the browser; notifications at any other time would be pointless. Only when a page is being created and returned does it make sense to create the view and incorporate the model’s state.</p><div class="informalfigure"><a id="med_id00767a"></a><div class="mediaobject"><a id="med_id00767"></a><img src="../Images/image01268.jpeg" alt="image with no caption" hisrc="figs/web/563fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="strategy-id00177">Strategy</h3></div></div></div><p><a id="iddle1238" class="indexterm"></a><a id="iddle1257" class="indexterm"></a><a id="iddle1260" class="indexterm"></a><a id="iddle1917" class="indexterm"></a><a id="iddle1920" class="indexterm"></a><a id="iddle2416" class="indexterm"></a>In Model 2, the Strategy object is still the controller servlet; however, it’s not directly composed with the view in the classic manner. That said, it is an object that implements behavior for the view, and we can swap it out for another controller if we want different behavior.</p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="composite-id00178">Composite</h3></div></div></div><p>Like our Swing GUI, the view is ultimately made up of a nested set of graphical components. In this case, they are rendered by a web browser from an HTML description; however, underneath there is an object system that most likely forms a composite.</p><div class="informalfigure"><a id="med_id00768a"></a><div class="mediaobject"><a id="med_id00768"></a><img src="../Images/image01269.jpeg" alt="image with no caption" hisrc="figs/web/564fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch12note09a"></a>Note</h3><p>The controller still provides the view behavior, even if it isn’t composed with the view using object composition.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00179"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3qe1"></a><a id="ch12qa3q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle1240" class="indexterm"></a><a id="iddle1267" class="indexterm"></a><a id="iddle1268" class="indexterm"></a><a id="iddle1276" class="indexterm"></a><a id="iddle1277" class="indexterm"></a><a id="iddle1281" class="indexterm"></a><a id="iddle1286" class="indexterm"></a><a id="iddle1903" class="indexterm"></a><a id="iddle1928" class="indexterm"></a><a id="iddle1929" class="indexterm"></a><a id="iddle1937" class="indexterm"></a><a id="iddle1938" class="indexterm"></a><a id="iddle1942" class="indexterm"></a><a id="iddle1948" class="indexterm"></a><a id="iddle2447" class="indexterm"></a><span class="strong"><strong>Q: It seems like you are really hand-waving the fact that the Composite Pattern is really in MVC. Is it really there?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Yes, Virginia, there really is a Composite Pattern in MVC. But, actually, this is a very good question. Today GUI packages, like Swing, have become so sophisticated that we hardly notice the internal structure and the use of Composite in the building and update of the display. It’s even harder to see when we have web browsers that can take markup language and convert it into a user interface.</div><div>Back when MVC was first discovered, creating GUIs required a lot more manual intervention and the pattern was more obviously part of the MVC.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3qe2"></a><a id="ch12qa3q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Does the controller ever implement any application logic?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> No, the controller implements behavior for the view. It is the smarts that translates the actions from the view to actions on the model. The model takes those actions and implements the application logic to decide what to do in response to those actions. The controller might have to do a little work to determine what method calls to make on the model, but that’s not considered the “application logic.” The application logic is the code that manages and manipulates your data and it lives in your model.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3qe3"></a><a id="ch12qa3q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: I’ve always found the word “model” hard to wrap my head around. I now get that it’s the guts of the application, but why was such a vague, hard-to-understand word used to describe this aspect of the MVC?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> When MVC was named they needed a word that began with a “M” or otherwise they couldn’t have called it MVC.</div><div>But seriously, we agree with you. Everyone scratches their head and wonders what a model is. But then everyone comes to the realization that they can’t think of a better word either.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3qe4"></a><a id="ch12qa3q4"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: You’ve talked a lot about the state of the model. Does this mean it has the State Pattern in it?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3q4a4"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> No, we mean the general idea of state. But certainly some models do use the State Pattern to manage their internal states.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3qe5"></a><a id="ch12qa3q5"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: I’ve seen descriptions of the MVC where the controller is described as a “mediator” between the view and the model. Is the controller implementing the Mediator Pattern?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3q5a5"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> We haven’t covered the Mediator Pattern (although you’ll find a summary of the pattern in the appendix), so we won’t go into too much detail here, but the intent of the mediator is to encapsulate how objects interact and promote loose coupling by keeping two objects from referring to each other explicitly. So, to some degree, the controller can be seen as a mediator, since the view never sets state directly on the model, but rather always goes through the controller. Remember, however, that the view does have a reference to the model to access its state. If the controller were truly a mediator, the view would have to go through the controller to get the state of the model as well.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3qe6"></a><a id="ch12qa3q6"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Does the view always have to ask the model for its state? Couldn’t we use the push model and send the model’s state with the update notification?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3q6a6"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Yes, the model could certainly send its state with the notification, and in fact, if you look again at the JSP/HTML view, that’s exactly what we’re doing. We’re sending the entire model in a bean, which the view uses to access the state it needs using the bean properties. We could do something similar with the BeatModel by sending just the state that the view is interested in. If you remember the Observer Pattern chapter, however, you’ll also remember that there’s a couple of disadvantages to this. If you don’t, go back and have a second look.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3qe7"></a><a id="ch12qa3q7"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: If I have more than one view, do I always need more than one controller?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3q7a7"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Typically, you need one controller per view at runtime; however, the same controller class can easily manage many views.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3qe8"></a><a id="ch12qa3q8"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: The view is not supposed to manipulate the model; however, I noticed in your implementation that the view has full access to the methods that change the model’s state. Is this dangerous?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch12qa3q8a8"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> You are correct; we gave the view full access to the model’s set of methods. We did this to keep things simple, but there may be circumstances where you want to give the view access to only part of your model’s API. There’s a great design pattern that allows you to adapt an interface to only provide a subset. Can you think of it?</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00180">Tools for your Design Toolbox</h2></div></div></div><p>You could impress anyone with your design toolbox. Wow, look at all those principles, patterns and now, compound patterns!</p><div class="informalfigure"><a id="med_id00769a"></a><div class="mediaobject"><a id="med_id00769"></a><img src="../Images/image01270.jpeg" alt="image with no caption" hisrc="figs/web/566fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00181"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The Model View Controller Pattern (MVC) is a compound pattern consisting of the Observer, Strategy and Composite patterns.</li><li class="listitem">The model makes use of the Observer Pattern so that it can keep observers updated yet stay decoupled from them.</li><li class="listitem">The controller is the strategy for the view. The view can use different implementations of the controller to get different behavior.</li><li class="listitem">The view uses the Composite Pattern to implement the user interface, which usually consists of nested components like panels, frames and buttons.</li><li class="listitem">These patterns work together to decouple the three players in the MVC model, which keeps designs clear and flexible.</li><li class="listitem">The Adapter Pattern can be used to adapt a new model to an existing view and controller.</li><li class="listitem">Model 2 is an adaptation of MVC for web applications.</li><li class="listitem">In Model 2, the controller is implemented as a servlet and JSP &amp; HTML implement the view.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="exercise_solutions">Exercise Solutions</h2></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00182"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1532" class="indexterm"></a><a id="iddle2271" class="indexterm"></a>The QuackCounter is a Quackable too. When we change Quackable to extend QuackObservable, we have to change every class that implements Quackable, including QuackCounter:</p><div class="informalfigure"><a id="med_id00770a"></a><div class="mediaobject"><a id="med_id00770"></a><img src="../Images/image01271.jpeg" alt="image with no caption" hisrc="figs/web/567fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00183"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1573" class="indexterm"></a><a id="iddle2318" class="indexterm"></a>What if our Quackologist wants to observe an entire flock? What does that mean anyway? Think about it like this: if we observe a composite, then we’re observing everything in the composite. So, when you register with a flock, the flock composite makes sure you get registered with all its children, which may include other flocks.</p><div class="informalfigure"><a id="med_id00771a"></a><div class="mediaobject"><a id="med_id00771"></a><img src="../Images/image01272.jpeg" alt="image with no caption" hisrc="figs/web/568fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00184"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1008" class="indexterm"></a><a id="iddle1429" class="indexterm"></a><a id="iddle1458" class="indexterm"></a><a id="iddle1511" class="indexterm"></a><a id="iddle1567" class="indexterm"></a><a id="iddle1641" class="indexterm"></a><a id="iddle1954" class="indexterm"></a><a id="iddle2106" class="indexterm"></a><a id="iddle2312" class="indexterm"></a>We’re still directly instantiating Geese by relying on concrete classes. Can you write an Abstract Factory for Geese? How should it handle creating “goose ducks”?</p><div class="blockquote"><blockquote class="blockquote"><div>You could add a createGooseDuck() method to the existing Duck Factories. Or, you could create a completely separate Factory for creating families of Geese.</div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle_solution-id00185"></a><h3 class="title">Design Puzzle Solution</h3><p>You’ve seen that the view and controller together make use of the Strategy Pattern. Can you draw a class diagram of the two that represents this pattern?</p><div class="informalfigure"><a id="med_id00772a"></a><div class="mediaobject"><a id="med_id00772"></a><img src="../Images/image01273.jpeg" alt="image with no caption" hisrc="figs/web/569fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="ready_bake_code-id00186"></a><h3 class="title">Ready Bake Code</h3><p><a id="iddle1265" class="indexterm"></a><a id="iddle1452" class="indexterm"></a><a id="iddle1926" class="indexterm"></a>Here’s the complete implementation of the DJView. It shows all the MIDI code to generate the sound, and all the Swing components to create the view. You can also download this code at <a class="ulink" href="http://www.wickedlysmart.com" target="_top">http://www.wickedlysmart.com</a>. Have fun!</p><a id="pro_id00044"></a><pre class="programlisting"><span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>public class DJTestDrive {</strong></span>

    <span class="strong"><strong>public static void main (String[] args) {</strong></span>
        <span class="strong"><strong>BeatModelInterface model = new BeatModel();</strong></span>
        <span class="strong"><strong>ControllerInterface controller = new BeatController(model);</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre><p><span class="strong"><strong>The Beat Model</strong></span></p><a id="pro_id00045"></a><pre class="programlisting"><span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>public interface BeatModelInterface {</strong></span>
    <span class="strong"><strong>void initialize();</strong></span>

    <span class="strong"><strong>void on();</strong></span>

    <span class="strong"><strong>void off();</strong></span>

    <span class="strong"><strong>void setBPM(int bpm);</strong></span>

    <span class="strong"><strong>int getBPM();</strong></span>

    <span class="strong"><strong>void registerObserver(BeatObserver o);</strong></span>

    <span class="strong"><strong>void removeObserver(BeatObserver o);</strong></span>

    <span class="strong"><strong>void registerObserver(BPMObserver o);</strong></span>

    <span class="strong"><strong>void removeObserver(BPMObserver o);</strong></span>
<span class="strong"><strong>}</strong></span>
<span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>import javax.sound.midi.*;</strong></span>

<span class="strong"><strong>import java.util.*;</strong></span>

<span class="strong"><strong>public class BeatModel implements BeatModelInterface, MetaEventListener {</strong></span>
       <span class="strong"><strong>Sequencer sequencer;</strong></span>
       <span class="strong"><strong>ArrayList&lt;BeatObserver&gt; beatObservers = new ArrayList&lt;BeatObserver&gt;();</strong></span>
       <span class="strong"><strong>ArrayList&lt;BPMObserver&gt; bpmObservers = new ArrayList&lt;BPMObserver&gt;();</strong></span>
       <span class="strong"><strong>int bpm = 90;</strong></span>
       <span class="strong"><strong>Sequence sequence;</strong></span>
       <span class="strong"><strong>Track track;</strong></span>

       <span class="strong"><strong>public void initialize() {</strong></span>
              <span class="strong"><strong>setUpMidi();</strong></span>
              <span class="strong"><strong>buildTrackAndStart();</strong></span>
       <span class="strong"><strong>}</strong></span>

       <span class="strong"><strong>public void on() {</strong></span>
              <span class="strong"><strong>System.out.println("Starting the sequencer");</strong></span>
              <span class="strong"><strong>sequencer.start();</strong></span>
              <span class="strong"><strong>setBPM(90);</strong></span>
       <span class="strong"><strong>}</strong></span>

       <span class="strong"><strong>public void off() {</strong></span>
              <span class="strong"><strong>setBPM(0);</strong></span>
              <span class="strong"><strong>sequencer.stop();</strong></span>
       <span class="strong"><strong>}</strong></span>

       <span class="strong"><strong>public void setBPM(int bpm) {</strong></span>
              <span class="strong"><strong>this.bpm = bpm;</strong></span>
              <span class="strong"><strong>sequencer.setTempoInBPM(getBPM());</strong></span>
              <span class="strong"><strong>notifyBPMObservers();</strong></span>
       <span class="strong"><strong>}</strong></span>

       <span class="strong"><strong>public int getBPM() {</strong></span>
              <span class="strong"><strong>return bpm;</strong></span>
       <span class="strong"><strong>}</strong></span>

       <span class="strong"><strong>void beatEvent() {</strong></span>
              <span class="strong"><strong>notifyBeatObservers();</strong></span>
       <span class="strong"><strong>}</strong></span>

       <span class="strong"><strong>public void registerObserver(BeatObserver o) {</strong></span>
              <span class="strong"><strong>beatObservers.add(o);</strong></span>
       <span class="strong"><strong>}</strong></span></pre><a id="pro_id00046"></a><pre class="programlisting">      <span class="strong"><strong>public void notifyBeatObservers() {</strong></span>
             <span class="strong"><strong>for(int i = 0; i &lt; beatObservers.size(); i++) {</strong></span>
                   <span class="strong"><strong>BeatObserver observer = (BeatObserver)beatObservers.get(i);</strong></span>
                   <span class="strong"><strong>observer.updateBeat();</strong></span>
             <span class="strong"><strong>}</strong></span>
      <span class="strong"><strong>}</strong></span>

      <span class="strong"><strong>public void registerObserver(BPMObserver o) {</strong></span>
             <span class="strong"><strong>bpmObservers.add(o);</strong></span>
      <span class="strong"><strong>}</strong></span>

      <span class="strong"><strong>public void notifyBPMObservers() {</strong></span>
             <span class="strong"><strong>for(int i = 0; i &lt; bpmObservers.size(); i++) {</strong></span>
                 <span class="strong"><strong>BPMObserver observer = (BPMObserver)bpmObservers.get(i);</strong></span>
                 <span class="strong"><strong>observer.updateBPM();</strong></span>
             <span class="strong"><strong>}</strong></span>
      <span class="strong"><strong>}</strong></span>

      <span class="strong"><strong>public void removeObserver(BeatObserver o) {</strong></span>
             <span class="strong"><strong>int i = beatObservers.indexOf(o);</strong></span>
             <span class="strong"><strong>if (i &gt;= 0) {</strong></span>
                 <span class="strong"><strong>beatObservers.remove(i);</strong></span>
             <span class="strong"><strong>}</strong></span>
      <span class="strong"><strong>}</strong></span>

      <span class="strong"><strong>public void removeObserver(BPMObserver o) {</strong></span>
             <span class="strong"><strong>int i = bpmObservers.indexOf(o);</strong></span>
             <span class="strong"><strong>if (i &gt;= 0) {</strong></span>
                 <span class="strong"><strong>bpmObservers.remove(i);</strong></span>
             <span class="strong"><strong>}</strong></span>
      <span class="strong"><strong>}</strong></span>

      <span class="strong"><strong>public void meta(MetaMessage message) {</strong></span>
             <span class="strong"><strong>if (message.getType() == 47) {</strong></span>
                 <span class="strong"><strong>beatEvent();</strong></span>
                 <span class="strong"><strong>sequencer.start();</strong></span>
                 <span class="strong"><strong>setBPM(getBPM());</strong></span>
             <span class="strong"><strong>}</strong></span>
      <span class="strong"><strong>}</strong></span>

      <span class="strong"><strong>public void setUpMidi() {</strong></span>
             <span class="strong"><strong>try {</strong></span>
                   <span class="strong"><strong>sequencer = MidiSystem.getSequencer();</strong></span>
                   <span class="strong"><strong>sequencer.open();</strong></span>
                   <span class="strong"><strong>sequencer.addMetaEventListener(this);</strong></span>
                   <span class="strong"><strong>sequence = new Sequence(Sequence.PPQ,4);</strong></span>
                   <span class="strong"><strong>track = sequence.createTrack();</strong></span>
                   <span class="strong"><strong>sequencer.setTempoInBPM(getBPM());</strong></span>
                   <span class="strong"><strong>sequencer.setLoopCount(Sequencer.LOOP_CONTINUOUSLY);</strong></span>
             <span class="strong"><strong>} catch(Exception e) {</strong></span>
                   <span class="strong"><strong>e.printStackTrace();</strong></span>
             <span class="strong"><strong>}</strong></span>
      <span class="strong"><strong>}</strong></span>

      <span class="strong"><strong>public void buildTrackAndStart() {</strong></span>
             <span class="strong"><strong>int[] trackList = {35, 0, 46, 0};</strong></span>

             <span class="strong"><strong>sequence.deleteTrack(null);</strong></span>
             <span class="strong"><strong>track = sequence.createTrack();</strong></span>

             <span class="strong"><strong>makeTracks(trackList);</strong></span>
             <span class="strong"><strong>track.add(makeEvent(192,9,1,0,4));</strong></span>
             <span class="strong"><strong>try {</strong></span>
                   <span class="strong"><strong>sequencer.setSequence(sequence);</strong></span>
             <span class="strong"><strong>} catch(Exception e) {</strong></span>
                   <span class="strong"><strong>e.printStackTrace();</strong></span>
             <span class="strong"><strong>}</strong></span>
      <span class="strong"><strong>}</strong></span>

      <span class="strong"><strong>public void makeTracks(int[] list) {</strong></span>

             <span class="strong"><strong>for (int i = 0; i &lt; list.length; i++) {</strong></span>
                    <span class="strong"><strong>int key = list[i];</strong></span>

                    <span class="strong"><strong>if (key != 0) {</strong></span>
                           <span class="strong"><strong>track.add(makeEvent(144,9,key, 100, i));</strong></span>
                           <span class="strong"><strong>track.add(makeEvent(128,9,key, 100, i+1));</strong></span>
                    <span class="strong"><strong>}</strong></span>
             <span class="strong"><strong>}</strong></span>
      <span class="strong"><strong>}</strong></span>

      <span class="strong"><strong>public MidiEvent makeEvent(int comd, int chan, int one, int two, int tick) {</strong></span>
            <span class="strong"><strong>MidiEvent event = null;</strong></span>
            <span class="strong"><strong>try {</strong></span>
                   <span class="strong"><strong>ShortMessage a = new ShortMessage();</strong></span>
                   <span class="strong"><strong>a.setMessage(comd, chan, one, two);</strong></span>
                   <span class="strong"><strong>event = new MidiEvent(a, tick);</strong></span>

            <span class="strong"><strong>} catch(Exception e) {</strong></span>
                   <span class="strong"><strong>e.printStackTrace();</strong></span>
            <span class="strong"><strong>}</strong></span>
            <span class="strong"><strong>return event;</strong></span>
      <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre><p><a id="iddle1275" class="indexterm"></a><a id="iddle1936" class="indexterm"></a><span class="strong"><strong>The View</strong></span></p><a id="pro_id00047"></a><pre class="programlisting"><span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>public interface BeatObserver {</strong></span>
    <span class="strong"><strong>void updateBeat();</strong></span>
<span class="strong"><strong>}</strong></span>

<span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>public interface BPMObserver {</strong></span>
    <span class="strong"><strong>void updateBPM();</strong></span>
<span class="strong"><strong>}</strong></span>

<span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>import java.awt.*;</strong></span>
<span class="strong"><strong>import java.awt.event.*;</strong></span>
<span class="strong"><strong>import javax.swing.*;</strong></span>

<span class="strong"><strong>public class DJView implements ActionListener, BeatObserver, BPMObserver {</strong></span>
    <span class="strong"><strong>BeatModelInterface model;</strong></span>
    <span class="strong"><strong>ControllerInterface controller;</strong></span>
    <span class="strong"><strong>JFrame viewFrame;</strong></span>
    <span class="strong"><strong>JPanel viewPanel;</strong></span>
    <span class="strong"><strong>BeatBar beatBar;</strong></span>
    <span class="strong"><strong>JLabel bpmOutputLabel;</strong></span>
    <span class="strong"><strong>JFrame controlFrame;</strong></span>
    <span class="strong"><strong>JPanel controlPanel;</strong></span>
    <span class="strong"><strong>JLabel bpmLabel;</strong></span>
    <span class="strong"><strong>JTextField bpmTextField;</strong></span>
    <span class="strong"><strong>JButton setBPMButton;</strong></span>
    <span class="strong"><strong>JButton increaseBPMButton;</strong></span>
    <span class="strong"><strong>JButton decreaseBPMButton;</strong></span>
    <span class="strong"><strong>JMenuBar menuBar;</strong></span>
    <span class="strong"><strong>JMenu menu;</strong></span>
    <span class="strong"><strong>JMenuItem startMenuItem;</strong></span>
    <span class="strong"><strong>JMenuItem stopMenuItem;</strong></span>

    <span class="strong"><strong>public DJView(ControllerInterface controller, BeatModelInterface model) {</strong></span>
        <span class="strong"><strong>this.controller = controller;</strong></span>
        <span class="strong"><strong>this.model = model;</strong></span>
        <span class="strong"><strong>model.registerObserver((BeatObserver)this);</strong></span>
        <span class="strong"><strong>model.registerObserver((BPMObserver)this);</strong></span>
    <span class="strong"><strong>}</strong></span>

<span class="strong"><strong>public void createView() {</strong></span>
    <span class="strong"><strong>// Create all Swing components here</strong></span>
    <span class="strong"><strong>viewPanel = new JPanel(new GridLayout(1, 2));</strong></span>
    <span class="strong"><strong>viewFrame = new JFrame("View");</strong></span>
    <span class="strong"><strong>viewFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</strong></span>
    <span class="strong"><strong>viewFrame.setSize(new Dimension(100, 80));</strong></span>
    <span class="strong"><strong>bpmOutputLabel = new JLabel("offline", SwingConstants.CENTER);</strong></span>
    <span class="strong"><strong>beatBar = new BeatBar();</strong></span>
    <span class="strong"><strong>beatBar.setValue(0);</strong></span>
    <span class="strong"><strong>JPanel bpmPanel = new JPanel(new GridLayout(2, 1));</strong></span>
    <span class="strong"><strong>bpmPanel.add(beatBar);</strong></span>
    <span class="strong"><strong>bpmPanel.add(bpmOutputLabel);</strong></span>
    <span class="strong"><strong>viewPanel.add(bpmPanel);</strong></span>
    <span class="strong"><strong>viewFrame.getContentPane().add(viewPanel, BorderLayout.CENTER);</strong></span>
    <span class="strong"><strong>viewFrame.pack();</strong></span>
    <span class="strong"><strong>viewFrame.setVisible(true);</strong></span>
<span class="strong"><strong>}</strong></span>

<span class="strong"><strong>public void createControls() {</strong></span>
    <span class="strong"><strong>// Create all Swing components here</strong></span>
    <span class="strong"><strong>JFrame.setDefaultLookAndFeelDecorated(true);</strong></span>
    <span class="strong"><strong>controlFrame = new JFrame("Control");</strong></span>
    <span class="strong"><strong>controlFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</strong></span>
    <span class="strong"><strong>controlFrame.setSize(new Dimension(100, 80));</strong></span>

    <span class="strong"><strong>controlPanel = new JPanel(new GridLayout(1, 2));</strong></span>

    <span class="strong"><strong>menuBar = new JMenuBar();</strong></span>
    <span class="strong"><strong>menu = new JMenu("DJ Control");</strong></span>
    <span class="strong"><strong>startMenuItem = new JMenuItem("Start");</strong></span>
    <span class="strong"><strong>menu.add(startMenuItem);</strong></span>
    <span class="strong"><strong>startMenuItem.addActionListener(new ActionListener() {</strong></span>
        <span class="strong"><strong>public void actionPerformed(ActionEvent event) {</strong></span>
            <span class="strong"><strong>controller.start();</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>});</strong></span>
    <span class="strong"><strong>stopMenuItem = new JMenuItem("Stop");</strong></span>
    <span class="strong"><strong>menu.add(stopMenuItem);</strong></span>
    <span class="strong"><strong>stopMenuItem.addActionListener(new ActionListener() {</strong></span>
        <span class="strong"><strong>public void actionPerformed(ActionEvent event) {</strong></span>
            <span class="strong"><strong>controller.stop();</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>});</strong></span>
    <span class="strong"><strong>JMenuItem exit = new JMenuItem("Quit");</strong></span>
    <span class="strong"><strong>exit.addActionListener(new ActionListener() {</strong></span>
        <span class="strong"><strong>public void actionPerformed(ActionEvent event) {</strong></span>
            <span class="strong"><strong>System.exit(0);</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>});</strong></span></pre><a id="pro_id00048"></a><pre class="programlisting">        <span class="strong"><strong>menu.add(exit);</strong></span>
        <span class="strong"><strong>menuBar.add(menu);</strong></span>
        <span class="strong"><strong>controlFrame.setJMenuBar(menuBar);</strong></span>

        <span class="strong"><strong>bpmTextField = new JTextField(2);</strong></span>
        <span class="strong"><strong>bpmLabel = new JLabel("Enter BPM:", SwingConstants.RIGHT);</strong></span>
        <span class="strong"><strong>setBPMButton = new JButton("Set");</strong></span>
        <span class="strong"><strong>setBPMButton.setSize(new Dimension(10,40));</strong></span>
        <span class="strong"><strong>increaseBPMButton = new JButton("&gt;&gt;");</strong></span>
        <span class="strong"><strong>decreaseBPMButton = new JButton("&lt;&lt;");</strong></span>
        <span class="strong"><strong>setBPMButton.addActionListener(this);</strong></span>
        <span class="strong"><strong>increaseBPMButton.addActionListener(this);</strong></span>
        <span class="strong"><strong>decreaseBPMButton.addActionListener(this);</strong></span>

        <span class="strong"><strong>JPanel buttonPanel = new JPanel(new GridLayout(1, 2));</strong></span>

        <span class="strong"><strong>buttonPanel.add(decreaseBPMButton);</strong></span>
        <span class="strong"><strong>buttonPanel.add(increaseBPMButton);</strong></span>

        <span class="strong"><strong>JPanel enterPanel = new JPanel(new GridLayout(1, 2));</strong></span>
        <span class="strong"><strong>enterPanel.add(bpmLabel);</strong></span>
        <span class="strong"><strong>enterPanel.add(bpmTextField);</strong></span>
        <span class="strong"><strong>JPanel insideControlPanel = new JPanel(new GridLayout(3, 1));</strong></span>
        <span class="strong"><strong>insideControlPanel.add(enterPanel);</strong></span>
        <span class="strong"><strong>insideControlPanel.add(setBPMButton);</strong></span>
        <span class="strong"><strong>insideControlPanel.add(buttonPanel);</strong></span>
        <span class="strong"><strong>controlPanel.add(insideControlPanel);</strong></span>

        <span class="strong"><strong>bpmLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));</strong></span>
        <span class="strong"><strong>bpmOutputLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));</strong></span>

        <span class="strong"><strong>controlFrame.getRootPane().setDefaultButton(setBPMButton);</strong></span>
        <span class="strong"><strong>controlFrame.getContentPane().add(controlPanel, BorderLayout.CENTER);</strong></span>

        <span class="strong"><strong>controlFrame.pack();</strong></span>
        <span class="strong"><strong>controlFrame.setVisible(true);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void enableStopMenuItem() {</strong></span>
        <span class="strong"><strong>stopMenuItem.setEnabled(true);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void disableStopMenuItem() {</strong></span>
        <span class="strong"><strong>stopMenuItem.setEnabled(false);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void enableStartMenuItem() {</strong></span>
        <span class="strong"><strong>startMenuItem.setEnabled(true);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void disableStartMenuItem() {</strong></span>
        <span class="strong"><strong>startMenuItem.setEnabled(false);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void actionPerformed(ActionEvent event) {</strong></span>
        <span class="strong"><strong>if (event.getSource() == setBPMButton) {</strong></span>
            <span class="strong"><strong>int bpm = Integer.parseInt(bpmTextField.getText());</strong></span>
            <span class="strong"><strong>controller.setBPM(bpm);</strong></span>
        <span class="strong"><strong>} else if (event.getSource() == increaseBPMButton) {</strong></span>
            <span class="strong"><strong>controller.increaseBPM();</strong></span>
        <span class="strong"><strong>} else if (event.getSource() == decreaseBPMButton) {</strong></span>
            <span class="strong"><strong>controller.decreaseBPM();</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void updateBPM() {</strong></span>
        <span class="strong"><strong>int bpm = model.getBPM();</strong></span>
        <span class="strong"><strong>if (bpm == 0) {</strong></span>
            <span class="strong"><strong>bpmOutputLabel.setText("offline");</strong></span>
        <span class="strong"><strong>} else {</strong></span>
            <span class="strong"><strong>bpmOutputLabel.setText("Current BPM: " + model.getBPM());</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void updateBeat() {</strong></span>
        <span class="strong"><strong>beatBar.setValue(100);</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre><p><a id="iddle1934" class="indexterm"></a><span class="strong"><strong>The Controller</strong></span></p><a id="pro_id00049"></a><pre class="programlisting"><span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>public interface ControllerInterface {</strong></span>
    <span class="strong"><strong>void start();</strong></span>
    <span class="strong"><strong>void stop();</strong></span>
    <span class="strong"><strong>void increaseBPM();</strong></span>
    <span class="strong"><strong>void decreaseBPM();</strong></span>
    <span class="strong"><strong>void setBPM(int bpm);</strong></span>
<span class="strong"><strong>}</strong></span></pre><a id="pro_id00050"></a><pre class="programlisting"><span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>public class BeatController implements ControllerInterface {</strong></span>
    <span class="strong"><strong>BeatModelInterface model;</strong></span>
    <span class="strong"><strong>DJView view;</strong></span>

    <span class="strong"><strong>public BeatController(BeatModelInterface model) {</strong></span>
        <span class="strong"><strong>this.model = model;</strong></span>
        <span class="strong"><strong>view = new DJView(this, model);</strong></span>
        <span class="strong"><strong>view.createView();</strong></span>
        <span class="strong"><strong>view.createControls();</strong></span>
        <span class="strong"><strong>view.disableStopMenuItem();</strong></span>
        <span class="strong"><strong>view.enableStartMenuItem();</strong></span>
        <span class="strong"><strong>model.initialize();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void start() {</strong></span>
        <span class="strong"><strong>model.on();</strong></span>
        <span class="strong"><strong>view.disableStartMenuItem();</strong></span>
        <span class="strong"><strong>view.enableStopMenuItem();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void stop() {</strong></span>
        <span class="strong"><strong>model.off();</strong></span>
        <span class="strong"><strong>view.disableStopMenuItem();</strong></span>
        <span class="strong"><strong>view.enableStartMenuItem();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void increaseBPM() {</strong></span>
        <span class="strong"><strong>int bpm = model.getBPM();</strong></span>
        <span class="strong"><strong>model.setBPM(bpm + 1);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void decreaseBPM() {</strong></span>
        <span class="strong"><strong>int bpm = model.getBPM();</strong></span>
        <span class="strong"><strong>model.setBPM(bpm - 1);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void setBPM(int bpm) {</strong></span>
        <span class="strong"><strong>model.setBPM(bpm);</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre><p><a id="iddle1272" class="indexterm"></a><a id="iddle1946" class="indexterm"></a><span class="strong"><strong>The Heart Model</strong></span></p><a id="pro_id00051"></a><pre class="programlisting"><span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>public class HeartTestDrive {</strong></span>

    <span class="strong"><strong>public static void main (String[] args) {</strong></span>
        <span class="strong"><strong>HeartModel heartModel = new HeartModel();</strong></span>
        <span class="strong"><strong>ControllerInterface model = new HeartController(heartModel);</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span>

<span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>public interface HeartModelInterface {</strong></span>
    <span class="strong"><strong>int getHeartRate();</strong></span>
    <span class="strong"><strong>void registerObserver(BeatObserver o);</strong></span>
    <span class="strong"><strong>void removeObserver(BeatObserver o);</strong></span>
    <span class="strong"><strong>void registerObserver(BPMObserver o);</strong></span>
    <span class="strong"><strong>void removeObserver(BPMObserver o);</strong></span>
<span class="strong"><strong>}</strong></span>

<span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>import java.util.*;</strong></span>

<span class="strong"><strong>public class HeartModel implements HeartModelInterface, Runnable {</strong></span>
    <span class="strong"><strong>ArrayList&lt;BeatObserver&gt; beatObservers = new ArrayList&lt;BeatObserver&gt;();</strong></span>
    <span class="strong"><strong>ArrayList&lt;BPMObserver&gt; bpmObservers = new ArrayList&lt;BPMObserver&gt;();</strong></span>
    <span class="strong"><strong>int time = 1000;</strong></span>
    <span class="strong"><strong>int bpm = 90;</strong></span>
    <span class="strong"><strong>Random random = new Random(System.currentTimeMillis());</strong></span>
    <span class="strong"><strong>Thread thread;</strong></span>

    <span class="strong"><strong>public HeartModel() {</strong></span>
        <span class="strong"><strong>thread = new Thread(this);</strong></span>
        <span class="strong"><strong>thread.start();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void run() {</strong></span>
        <span class="strong"><strong>int lastrate = -1;</strong></span>

        <span class="strong"><strong>for(;;) {</strong></span>
            <span class="strong"><strong>int change = random.nextInt(10);</strong></span>
            <span class="strong"><strong>if (random.nextInt(2) == 0) {</strong></span>
                <span class="strong"><strong>change = 0 - change;</strong></span>
            <span class="strong"><strong>}</strong></span>
            <span class="strong"><strong>int rate = 60000/(time + change);</strong></span>
            <span class="strong"><strong>if (rate &lt; 120 &amp;&amp; rate &gt; 50) {</strong></span>
                <span class="strong"><strong>time += change;</strong></span>
                <span class="strong"><strong>notifyBeatObservers();</strong></span>
                <span class="strong"><strong>if (rate != lastrate) {</strong></span>
                    <span class="strong"><strong>lastrate = rate;</strong></span>
                    <span class="strong"><strong>notifyBPMObservers();</strong></span>
                <span class="strong"><strong>}</strong></span>
            <span class="strong"><strong>}</strong></span>
            <span class="strong"><strong>try {</strong></span>
                <span class="strong"><strong>Thread.sleep(time);</strong></span>
            <span class="strong"><strong>} catch (Exception e) {}</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public int getHeartRate() {</strong></span>
        <span class="strong"><strong>return 60000/time;</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void registerObserver(BeatObserver o) {</strong></span>
        <span class="strong"><strong>beatObservers.add(o);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void removeObserver(BeatObserver o) {</strong></span>
        <span class="strong"><strong>int i = beatObservers.indexOf(o);</strong></span>
            <span class="strong"><strong>if (i &gt;= 0) {</strong></span>
            <span class="strong"><strong>beatObservers.remove(i);</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void notifyBeatObservers() {</strong></span>
        <span class="strong"><strong>for(int i = 0; i &lt; beatObservers.size(); i++) {</strong></span>
            <span class="strong"><strong>BeatObserver observer = (BeatObserver)beatObservers.get(i);</strong></span>
            <span class="strong"><strong>observer.updateBeat();</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void registerObserver(BPMObserver o) {</strong></span>
        <span class="strong"><strong>bpmObservers.add(o);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void removeObserver(BPMObserver o) {</strong></span>
        <span class="strong"><strong>int i = bpmObservers.indexOf(o);</strong></span>
        <span class="strong"><strong>if (i &gt;= 0) {</strong></span>
            <span class="strong"><strong>bpmObservers.remove(i);</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void notifyBPMObservers() {</strong></span>
        <span class="strong"><strong>for(int i = 0; i &lt; bpmObservers.size(); i++) {</strong></span>
            <span class="strong"><strong>BPMObserver observer = (BPMObserver)bpmObservers.get(i);</strong></span>
            <span class="strong"><strong>observer.updateBPM();</strong></span>
        <span class="strong"><strong>}</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre><p><span class="strong"><strong>The Heart Adapter</strong></span></p><a id="pro_id00052"></a><pre class="programlisting"><span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>public class HeartAdapter implements BeatModelInterface {</strong></span>
    <span class="strong"><strong>HeartModelInterface heart;</strong></span>

    <span class="strong"><strong>public HeartAdapter(HeartModelInterface heart) {</strong></span>
        <span class="strong"><strong>this.heart = heart;</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void initialize() {}</strong></span>

    <span class="strong"><strong>public void on() {}</strong></span>

    <span class="strong"><strong>public void off() {}</strong></span>

    <span class="strong"><strong>public int getBPM() {</strong></span>
        <span class="strong"><strong>return heart.getHeartRate();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void setBPM(int bpm) {}</strong></span>

    <span class="strong"><strong>public void registerObserver(BeatObserver o) {</strong></span>
        <span class="strong"><strong>heart.registerObserver(o);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void removeObserver(BeatObserver o) {</strong></span>
        <span class="strong"><strong>heart.removeObserver(o);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void registerObserver(BPMObserver o) {</strong></span>
        <span class="strong"><strong>heart.registerObserver(o);</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void removeObserver(BPMObserver o) {</strong></span>
        <span class="strong"><strong>heart.removeObserver(o);</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre><p><a id="iddle1270" class="indexterm"></a><a id="iddle1931" class="indexterm"></a><span class="strong"><strong>The Controller</strong></span></p><a id="pro_id00053"></a><pre class="programlisting"><span class="strong"><strong>package headfirst.designpatterns.combined.djview;</strong></span>

<span class="strong"><strong>public class HeartController implements ControllerInterface {</strong></span>
    <span class="strong"><strong>HeartModelInterface model;</strong></span>
    <span class="strong"><strong>DJView view;</strong></span>

    <span class="strong"><strong>public HeartController(HeartModelInterface model) {</strong></span>
        <span class="strong"><strong>this.model = model;</strong></span>
        <span class="strong"><strong>view = new DJView(this, new HeartAdapter(model));</strong></span>
        <span class="strong"><strong>view.createView();</strong></span>
        <span class="strong"><strong>view.createControls();</strong></span>
        <span class="strong"><strong>view.disableStopMenuItem();</strong></span>
        <span class="strong"><strong>view.disableStartMenuItem();</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public void start() {}</strong></span>

    <span class="strong"><strong>public void stop() {}</strong></span>

    <span class="strong"><strong>public void increaseBPM() {}</strong></span>

    <span class="strong"><strong>public void decreaseBPM() {}</strong></span>

    <span class="strong"><strong>public void setBPM(int bpm) {}</strong></span>
<span class="strong"><strong>}</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="footnotes" epub:type="footnotes"><br/><hr style="width: 100; align: left;" data-AmznRemoved-M8="true"/><div class="footnote" epub:type="footnote" id="ftn.ch12fn01"><p><sup>[<a class="para" href="part0019.xhtml#ch12fn01">2</a>] </sup><span class="strong"><strong>send us email for a copy.</strong></span></p></div></div></section></body></html>