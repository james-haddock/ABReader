<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 8. The Template Method Pattern: Encapsulating Algorithms</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch07.html"/><link rel="next" href="ch09.html"/></head><body><section class="chapter" epub:type="chapter" id="template_method_pattern_encapsulating_al"><div class="titlepage" id="aid-E9OE2"><div><div><h2 class="title">Chapter 8. The Template Method Pattern: Encapsulating Algorithms</h2></div></div></div><div class="informalfigure"><a id="med_id00399a"></a><div class="mediaobject"><a id="med_id00399"></a><img src="../Images/image00896.jpeg" alt="image with no caption" hisrc="figs/web/283fig01.png.jpg"/></div></div><p><a id="iddle1045" class="indexterm"></a><a id="iddle1474" class="indexterm"></a><span class="strong"><strong>We’re on an encapsulation roll; we’ve encapsulated object creation, method invocation, complex interfaces, ducks, pizzas...what could be next?</strong></span> We’re going to get down to encapsulating pieces of algorithms so that subclasses can hook themselves right into a computation anytime they want. We’re even going to learn about a design principle inspired by Hollywood.</p><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="itapostrophes_time_for_some_more_caffein">It’s time for some more caffeine</h2></div></div></div><p><a id="iddle1436" class="indexterm"></a><a id="iddle2354" class="indexterm"></a>Some people can’t live without their coffee; some people can’t live without their tea. The common ingredient? Caffeine, of course!</p><p>But there’s more; tea and coffee are made in very similar ways. Let’s check it out:</p><div class="informalfigure"><a id="med_id00400a"></a><div class="mediaobject"><a id="med_id00400"></a><img src="../Images/image00897.jpeg" alt="image with no caption" hisrc="figs/web/284fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="whipping_up_some_coffee_and_tea_classes">Whipping up some coffee and tea classes (in Java)</h2></div></div></div><p>Let’s play “coding barista” and write some code for creating coffee and tea.</p><div class="informalfigure"><a id="med_id00401a"></a><div class="mediaobject"><a id="med_id00401"></a><img src="../Images/image00898.jpeg" alt="image with no caption" hisrc="figs/web/285fig01.png.jpg"/></div></div><p>Here’s the coffee:</p><div class="informalfigure"><a id="med_id00402a"></a><div class="mediaobject"><a id="med_id00402"></a><img src="../Images/image00899.jpeg" alt="image with no caption" hisrc="figs/web/285fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="and_now_the_teahellip">And now the Tea...</h2></div></div></div><div class="informalfigure"><a id="med_id00403a"></a><div class="mediaobject"><a id="med_id00403"></a><img src="../Images/image00900.jpeg" alt="image with no caption" hisrc="figs/web/286fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00404a"></a><div class="mediaobject"><a id="med_id00404"></a><img src="../Images/image00901.jpeg" alt="image with no caption" hisrc="figs/web/286fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00405a"></a><div class="mediaobject"><a id="med_id00405"></a><img src="../Images/image00902.jpeg" alt="image with no caption" hisrc="figs/web/286fig03.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle-id00087"></a><h3 class="title">Design Puzzle</h3><p><a id="iddle1516" class="indexterm"></a>You’ve seen that the Coffee and Tea classes have a fair bit of code duplication. Take another look at the Coffee and Tea classes and draw a class diagram showing how you’d redesign the classes to remove redundancy:</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="sircomma_may_i_abstract_your_coffeecomma">Sir, may I abstract your Coffee, Tea?</h2></div></div></div><p>It looks like we’ve got a pretty straightforward design exercise on our hands with the Coffee and Tea classes. Your first cut might have looked something like this:</p><div class="informalfigure"><a id="med_id00406a"></a><div class="mediaobject"><a id="med_id00406"></a><img src="../Images/image00903.jpeg" alt="image with no caption" hisrc="figs/web/288fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch08note01"></a>Brain Power</h3><p>Did we do a good job on the redesign? Hmmmm, take another look. Are we overlooking some other commonality? What are other ways that Coffee and Tea are similar?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="taking_the_design_furtherhellip">Taking the design further...</h2></div></div></div><p>So what else do Coffee and Tea have in common? Let’s start with the recipes.</p><div class="informalfigure"><a id="med_id00407a"></a><div class="mediaobject"><a id="med_id00407"></a><img src="../Images/image00904.jpeg" alt="image with no caption" hisrc="figs/web/289fig01.png.jpg"/></div></div><p>Notice that both recipes follow the same algorithm:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Boil some water.</strong></span><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch08note01a"></a>Note</h3><p>These two are already abstracted into the base class.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Use the hot water to extract the coffee or tea.</strong></span><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch08note01b"></a>Note</h3><p>These aren’t abstracted but are the same; they just apply to different beverages.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Pour the resulting beverage into a cup.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ Add the appropriate condiments to the beverage.</strong></span></li></ul></div><p>So, can we find a way to abstract prepareRecipe() too? Yes, let’s find out...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="abstracting_preparerecipeleft_parenthesi">Abstracting prepareRecipe()</h2></div></div></div><p><a id="iddle1046" class="indexterm"></a><a id="iddle1475" class="indexterm"></a><a id="iddle2136" class="indexterm"></a><a id="iddle2355" class="indexterm"></a>Let’s step through abstracting prepareRecipe() from each subclass (that is, the Coffee and Tea classes)...</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① The first problem we have is that Coffee uses brewCoffeeGrinds() and addSugarAndMilk() methods, while Tea uses steepTeaBag() and addLemon() methods.<div class="informalfigure"><a id="med_id00408a"></a><div class="mediaobject"><a id="med_id00408"></a><img src="../Images/image00905.jpeg" alt="image with no caption" hisrc="figs/web/290fig01.png.jpg"/></div></div><br/>Let’s think through this: steeping and brewing aren’t so different; they’re pretty analogous. So let’s make a new method name, say, brew(), and we’ll use the same name whether we’re brewing coffee or steeping tea.<br/>Likewise, adding sugar and milk is pretty much the same as adding a lemon: both are adding condiments to the beverage. Let’s also make up a new method name, addCondiments(), to handle this. So, our new prepareRecipe() method will look like this:<a id="pro_id00029"></a><pre class="programlisting">void prepareRecipe() {
    boilWater();
    <span class="gray-background">brew();</span>
    pourInCup();
    <span class="gray-background">addCondiments();</span>
}</pre></li><li class="listitem" style="list-style-type: none">② Now we have a new prepareRecipe() method, but we need to fit it into the code. To do this we are going to start with the CaffeineBeverage superclass:<div class="informalfigure"><a id="med_id00409a"></a><div class="mediaobject"><a id="med_id00409"></a><img src="../Images/image00906.jpeg" alt="image with no caption" hisrc="figs/web/291fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">③ Finally, we need to deal with the Coffee and Tea classes. They now rely on CaffeineBeverage to handle the recipe, so they just need to handle brewing and condiments:<div class="informalfigure"><a id="med_id00410a"></a><div class="mediaobject"><a id="med_id00410"></a><img src="../Images/image00907.jpeg" alt="image with no caption" hisrc="figs/web/291fig02.png.jpg"/></div></div></li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00088"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1537" class="indexterm"></a><a id="iddle2276" class="indexterm"></a>Draw the new class diagram now that we’ve moved the implementation of prepareRecipe() into the CaffeineBeverage class:</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_have_we_donequestion_mark-id00089">What have we done?</h2></div></div></div><div class="informalfigure"><a id="med_id00411a"></a><div class="mediaobject"><a id="med_id00411"></a><img src="../Images/image00908.jpeg" alt="image with no caption" hisrc="figs/web/293fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="meet_the_template_method">Meet the Template Method</h2></div></div></div><p><a id="iddle1047" class="indexterm"></a><a id="iddle1476" class="indexterm"></a><a id="iddle2356" class="indexterm"></a><a id="iddle2438" class="indexterm"></a><a id="iddle2452" class="indexterm"></a>We’ve basically just implemented the Template Method Pattern. What’s that? Let’s look at the structure of the CaffeineBeverage class; it contains the actual “template method”:</p><div class="informalfigure"><a id="med_id00412a"></a><div class="mediaobject"><a id="med_id00412"></a><img src="../Images/image00909.jpeg" alt="image with no caption" hisrc="figs/web/294fig01.png.jpg"/></div></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>The Template Method defines the steps of an algorithm and allows subclasses to provide the implementation for one or more steps.</strong></span></div></blockquote></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="letapostrophes_make_some_teahellip">Let’s make some tea...</h2></div></div></div><div class="informalfigure"><a id="med_id00413a"></a><div class="mediaobject"><a id="med_id00413"></a><img src="../Images/image00686.jpeg" alt="image with no caption" hisrc="figs/web/common17.png.jpg"/></div></div><p><span class="strong"><strong>Behind the Scenes</strong></span></p><p>Let’s step through making a tea and trace through how the template method works. You’ll see that the template method controls the algorithm; at certain points in the algorithm, it lets the subclass supply the implementation of the steps...</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① Okay, first we need a Tea object...<a id="pro_id00030"></a><pre class="programlisting">Tea myTea = new Tea();</pre></li><li class="listitem" style="list-style-type: none">② Then we call the template method:<div class="informalfigure"><a id="med_id00414a"></a><div class="mediaobject"><a id="med_id00414"></a><img src="../Images/image00910.jpeg" alt="image with no caption" hisrc="figs/web/295fig01.png.jpg"/></div></div><br/>which follows the algorithm for making caffeine beverages...</li><li class="listitem" style="list-style-type: none">③ First we boil water:<div class="informalfigure"><a id="med_id00415a"></a><div class="mediaobject"><a id="med_id00415"></a><img src="../Images/image00911.jpeg" alt="image with no caption" hisrc="figs/web/295fig02.png.jpg"/></div></div><br/>which happens in CaffeineBeverage.</li><li class="listitem" style="list-style-type: none">④ Next we need to brew the tea, which only the subclass knows how to do:<a id="pro_id00031"></a><pre class="programlisting">brew();</pre></li><li class="listitem" style="list-style-type: none">⑤ Now we pour the tea in the cup; this is the same for all beverages so it happens in CaffeineBeverage:<a id="pro_id00032"></a><pre class="programlisting">pourInCup();</pre></li><li class="listitem" style="list-style-type: none">⑥ Finally, we add the condiments, which are specific to each beverage, so the subclass implements this:<a id="pro_id00033"></a><pre class="programlisting">addCondiments();</pre></li></ul></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_did_the_template_method_get_usquest">What did the Template Method get us?</h2></div></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00032"></a><img src="../Images/image00912.jpeg" alt="" hisrc="figs/web/296fig01.png.jpg"/></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00033"></a><img src="../Images/image00913.jpeg" alt="" hisrc="figs/web/296fig02.png.jpg"/></span></p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>Underpowered Tea &amp; Coffee implementation</strong></span></p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>New, hip CaffeineBeverage powered by Template Method</strong></span></p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Coffee and Tea are running the show; they control the algorithm.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The CaffeineBeverage class runs the show; it has the algorithm, and protects it.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Code is duplicated across Coffee and Tea.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The CaffeineBeverage class maximizes reuse among the subclasses.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Code changes to the algorithm require opening the subclasses and making multiple changes.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The algorithm lives in one place and code changes only need to be made there.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Classes are organized in a structure that requires a lot of work to add a new caffeine beverage.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>The Template Method version provides a framework that other caffeine beverages can be plugged into. New caffeine beverages only need to implement a couple of methods.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>Knowledge of the algorithm and how to implement it is distributed over many classes.</p></td><td style="vertical-align: top; "><p>The CaffeineBeverage class concentrates knowledge about the algorithm and relies on subclasses to provide complete implementations.</p></td></tr></tbody></table></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="template_method_pattern_defined">Template Method Pattern defined</h2></div></div></div><p><a id="iddle1050" class="indexterm"></a><a id="iddle1479" class="indexterm"></a><a id="iddle2358" class="indexterm"></a><a id="iddle2457" class="indexterm"></a><a id="iddle2459" class="indexterm"></a>You’ve seen how the Template Method Pattern works in our Tea and Coffee example; now, check out the official definition and nail down all the details:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch08note02"></a>Note</h3><p><span class="strong"><strong>The Template Method Pattern</strong></span> defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>This pattern is all about creating a template for an algorithm. What’s a template? As you’ve seen it’s just a method; more specifically, it’s a method that defines an algorithm as a set of steps. One or more of these steps is defined to be abstract and implemented by a subclass. This ensures the algorithm’s structure stays unchanged, while subclasses provide some part of the implementation.</p><p>Let’s check out the class diagram:</p><div class="informalfigure"><a id="med_id00416a"></a><div class="mediaobject"><a id="med_id00416"></a><img src="../Images/image00914.jpeg" alt="image with no caption" hisrc="figs/web/297fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_up_close-id00090"></a><h3 class="title">Code Up Close</h3><p><a id="iddle1002" class="indexterm"></a><a id="iddle1049" class="indexterm"></a><a id="iddle1478" class="indexterm"></a><a id="iddle2357" class="indexterm"></a><a id="iddle2453" class="indexterm"></a><a id="iddle2458" class="indexterm"></a>Let’s take a closer look at how the AbstractClass is defined, including the template method and primitive operations.</p><div class="informalfigure"><a id="med_id00417a"></a><div class="mediaobject"><a id="med_id00417"></a><img src="../Images/image00915.jpeg" alt="image with no caption" hisrc="figs/web/298fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_way_up_close"></a><h3 class="title">Code Way Up Close</h3><p><a id="iddle1003" class="indexterm"></a><a id="iddle1052" class="indexterm"></a><a id="iddle1297" class="indexterm"></a><a id="iddle1481" class="indexterm"></a><a id="iddle1771" class="indexterm"></a><a id="iddle1914" class="indexterm"></a><a id="iddle2360" class="indexterm"></a><a id="iddle2455" class="indexterm"></a><a id="iddle2467" class="indexterm"></a>Now we’re going to look even closer at the types of method that can go in the abstract class:</p><div class="informalfigure"><a id="med_id00418a"></a><div class="mediaobject"><a id="med_id00418"></a><img src="../Images/image00916.jpeg" alt="image with no caption" hisrc="figs/web/299fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="hooked_on_template_methodhellip">Hooked on Template Method...</h2></div></div></div><p>A hook is a method that is declared in the abstract class, but only given an empty or default implementation. This gives subclasses the ability to “hook into” the algorithm at various points, if they wish; a subclass is also free to ignore the hook.</p><div class="informalfigure"><a id="med_id00419a"></a><div class="mediaobject"><a id="med_id00419"></a><img src="../Images/image00917.jpeg" alt="image with no caption" hisrc="figs/web/300fig01.png.jpg"/></div></div><p>There are several uses of hooks; let’s take a look at one now. We’ll talk about a few other uses later:</p><div class="informalfigure"><a id="med_id00420a"></a><div class="mediaobject"><a id="med_id00420"></a><img src="../Images/image00918.jpeg" alt="image with no caption" hisrc="figs/web/300fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="using_the_hook">Using the hook</h2></div></div></div><p>To use the hook, we override it in our subclass. Here, the hook controls whether the CaffeineBeverage evaluates a certain part of the algorithm; that is, whether it adds a condiment to the beverage.</p><p>How do we know whether the customer wants the condiment? Just ask!</p><div class="informalfigure"><a id="med_id00421a"></a><div class="mediaobject"><a id="med_id00421"></a><img src="../Images/image00919.jpeg" alt="image with no caption" hisrc="figs/web/301fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="letapostrophes_run_the_test_drive">Let’s run the Test Drive</h2></div></div></div><p><a id="iddle1056" class="indexterm"></a><a id="iddle1485" class="indexterm"></a><a id="iddle2361" class="indexterm"></a><a id="iddle2474" class="indexterm"></a>Okay, the water’s boiling... Here’s the test code where we create a hot tea and a hot coffee.</p><div class="informalfigure"><a id="med_id00422a"></a><div class="mediaobject"><a id="med_id00422"></a><img src="../Images/image00920.jpeg" alt="image with no caption" hisrc="figs/web/302fig01.png.jpg"/></div></div><p><span class="strong"><strong>And let’s give it a run...</strong></span></p><div class="informalfigure"><a id="med_id00423a"></a><div class="mediaobject"><a id="med_id00423"></a><img src="../Images/image00921.jpeg" alt="image with no caption" hisrc="figs/web/302fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00424a"></a><div class="mediaobject"><a id="med_id00424"></a><img src="../Images/image00922.jpeg" alt="image with no caption" hisrc="figs/web/303fig01.png.jpg"/></div></div><p><a id="iddle1298" class="indexterm"></a><a id="iddle2454" class="indexterm"></a><a id="iddle2468" class="indexterm"></a>You know what? We agree with you. But you have to admit before you thought of that, it was a pretty cool example of how a hook can be used to conditionally control the flow of the algorithm in the abstract class. Right?</p><p>We’re sure you can think of many other more realistic scenarios where you could use the template method and hooks in your own code.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00091"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch08qa1qe1"></a><a id="ch08qa1q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: When I’m creating a template method, how do I know when to use abstract methods and when to use hooks?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch08qa1q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Use abstract methods when your subclass MUST provide an implementation of the method or step in the algorithm. Use hooks when that part of the algorithm is optional. With hooks, a subclass may choose to implement that hook, but it doesn’t have to.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch08qa1qe2"></a><a id="ch08qa1q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: What are hooks really supposed to be used for?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch08qa1q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> There are a few uses of hooks. As we just said, a hook may provide a way for a subclass to implement an optional part of an algorithm, or if it isn’t important to the subclass’s implementation, it can skip it. Another use is to give the subclass a chance to react to some step in the template method that is about to happen, or just happened. For instance, a hook method like justReOrderedList() allows the subclass to perform some activity (such as redisplaying an onscreen representation) after an internal list is reordered. As you’ve seen, a hook can also provide a subclass with the ability to make a decision for the abstract class.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch08qa1qe3"></a><a id="ch08qa1q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Does a subclass have to implement all the abstract methods in the AbstractClass?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch08qa1q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Yes, each concrete subclass defines the entire set of abstract methods and provides a complete implementation of the undefined steps of the template method’s algorithm.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch08qa1qe4"></a><a id="ch08qa1q4"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: It seems like I should keep my abstract methods small in number; otherwise, it will be a big job to implement them in the subclass.</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch08qa1q4a4"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> That’s a good thing to keep in mind when you write template methods. Sometimes this can be done by not making the steps of your algorithm too granular. But it’s obviously a trade off: the less granularity, the less flexibility.</div><div>Remember, too, that some steps will be optional; so you can implement these as hooks rather than abstract methods, easing the burden on the subclasses of your abstract class.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="hollywood_principle">The Hollywood Principle</h2></div></div></div><p><a id="iddle1051" class="indexterm"></a><a id="iddle1372" class="indexterm"></a><a id="iddle1410" class="indexterm"></a><a id="iddle1480" class="indexterm"></a><a id="iddle1731" class="indexterm"></a><a id="iddle2359" class="indexterm"></a><a id="iddle2466" class="indexterm"></a>We’ve got another design principle for you; it’s called the Hollywood Principle:</p><div class="informalfigure"><a id="med_id00425a"></a><div class="mediaobject"><a id="med_id00425"></a><img src="../Images/image00923.jpeg" alt="image with no caption" hisrc="figs/web/304fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch08note03"></a>Note</h3><p><span class="bolditalic">The Hollywood Principle</span></p><p><span class="emphasis"><em>Don’t call us, we’ll call you.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Easy to remember, right? But what has it got to do with OO design?</p><p>The Hollywood Principle gives us a way to prevent “dependency rot.” Dependency rot happens when you have high-level components depending on low-level components depending on high-level components depending on sideways components depending on low-level components, and so on. When rot sets in, no one can easily understand the way a system is designed.</p><p>With the Hollywood Principle, we allow low-level components to hook themselves into a system, but the high-level components determine when they are needed, and how. In other words, the high-level components give the low-level components a “don’t call us, we’ll call you” treatment.</p><div class="informalfigure"><a id="med_id00426a"></a><div class="mediaobject"><a id="med_id00426"></a><img src="../Images/image00924.jpeg" alt="image with no caption" hisrc="figs/web/304fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="hollywood_principle_and_template_method">The Hollywood Principle and Template Method</h2></div></div></div><p>The connection between the Hollywood Principle and the Template Method Pattern is probably somewhat apparent: when we design with the Template Method Pattern, we’re telling subclasses, “don’t call us, we’ll call you.” How? Let’s take another look at our CaffeineBeverage design:</p><div class="informalfigure"><a id="med_id00427a"></a><div class="mediaobject"><a id="med_id00427"></a><img src="../Images/image00925.jpeg" alt="image with no caption" hisrc="figs/web/305fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch08note04"></a>Brain Power</h3><p>What other patterns make use of the Hollywood Principle?</p><p>The Factory Method, Observer; any others?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00092"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch08qa2qe1"></a><a id="ch08qa2q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle1371" class="indexterm"></a><a id="iddle1580" class="indexterm"></a><a id="iddle1647" class="indexterm"></a><a id="iddle2408" class="indexterm"></a><a id="iddle2460" class="indexterm"></a><a id="iddle2517" class="indexterm"></a><span class="strong"><strong>Q: How does the Hollywood Principle relate to the Dependency Inversion Principle that we learned a few chapters back?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch08qa2q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> The Dependency Inversion Principle teaches us to avoid the use of concrete classes and instead work as much as possible with abstractions. The Hollywood Principle is a technique for building frameworks or components so that lower-level components can be hooked into the computation, but without creating dependencies between the lower-level components and the higher-level layers. So, they both have the goal of decoupling, but the Dependency Inversion Principle makes a much stronger and general statement about how to avoid dependencies in design.</div><div>The Hollywood Principle gives us a technique for creating designs that allow low-level structures to interoperate while preventing other classes from becoming too dependent on them.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch08qa2qe2"></a><a id="ch08qa2q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Is a low-level component disallowed from calling a method in a higher-level component?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch08qa2q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Not really. In fact, a low-level component will often end up calling a method defined above it in the inheritance hierarchy purely through inheritance. But we want to avoid creating explicit circular dependencies between the low-level component and the high-level ones.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark-id00093"></a><h3 class="title">Who Does What?</h3><p>Match each pattern with its description:</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Pattern</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Description</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Template Method</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Encapsulate interchangeable behaviors and use delegation to decide which behavior to use.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Strategy</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Subclasses decide how to implement steps in an algorithm.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>Factory Method</p></td><td style="vertical-align: top; "><p>Subclasses decide which concrete classes to instantiate.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="template_methods_in_the_wild">Template Methods in the Wild</h2></div></div></div><p><a id="iddle1053" class="indexterm"></a><a id="iddle1482" class="indexterm"></a><a id="iddle2469" class="indexterm"></a>The Template Method Pattern is a very common pattern and you’re going to find lots of it in the wild. You’ve got to have a keen eye, though, because there are many implementations of the template methods that don’t quite look like the textbook design of the pattern.</p><p>This pattern shows up so often because it’s a great design tool for creating frameworks, where the framework controls how something gets done, but leaves you (the person using the framework) to specify your own details about what is actually happening at each step of the framework’s algorithm.</p><p>Let’s take a little safari through a few uses in the wild (well, okay, in the Java API)...</p><div class="informalfigure"><a id="med_id00428a"></a><div class="mediaobject"><a id="med_id00428"></a><img src="../Images/image00926.jpeg" alt="image with no caption" hisrc="figs/web/307fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="sorting_with_template_method">Sorting with Template Method</h2></div></div></div><p><a id="iddle1054" class="indexterm"></a><a id="iddle1068" class="indexterm"></a><a id="iddle1483" class="indexterm"></a><a id="iddle2353" class="indexterm"></a><a id="iddle2470" class="indexterm"></a>What’s something we often need to do with arrays? Sort them!</p><div class="informalfigure"><a id="med_id00429a"></a><div class="mediaobject"><a id="med_id00429"></a><img src="../Images/image00927.jpeg" alt="image with no caption" hisrc="figs/web/308fig01.png.jpg"/></div></div><p>Recognizing that, the designers of the Java Arrays class have provided us with a handy template method for sorting. Let’s take a look at how this method operates:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch08note05"></a>Note</h3><p>We’ve pared down this code a little to make it easier to explain. If you’d like to see it all, grab the Java source code and check it out...</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00430a"></a><div class="mediaobject"><a id="med_id00430"></a><img src="../Images/image00928.jpeg" alt="image with no caption" hisrc="figs/web/308fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="weapostropheve_got_some_ducks_to_sorthel">We’ve got some ducks to sort...</h2></div></div></div><p>Let’s say you have an array of ducks that you’d like to sort. How do you do it? Well, the sort template method in Arrays gives us the algorithm, but you need to tell it how to compare ducks, which you do by implementing the compareTo() method... Make sense?</p><div class="informalfigure"><a id="med_id00431a"></a><div class="mediaobject"><a id="med_id00431"></a><img src="../Images/image00929.jpeg" alt="image with no caption" hisrc="figs/web/309fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00432a"></a><div class="mediaobject"><a id="med_id00432"></a><img src="../Images/image00930.jpeg" alt="image with no caption" hisrc="figs/web/309fig02.png.jpg"/></div></div><p>Good point. Here’s the deal: the designers of sort() wanted it to be useful across all arrays, so they had to make sort() a static method that could be used from anywhere. But that’s okay, it works almost the same as if it were in a superclass. Now, here is one more detail: because sort() really isn’t defined in our superclass, the sort() method needs to know that you’ve implemented the compareTo() method, or else you don’t have the piece needed to complete the sort algorithm.</p><p>To handle this, the designers made use of the Comparable interface. All you have to do is implement this interface, which has one method (surprise): compareTo().</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_is_comparetoleft_parenthesisright_p">What is compareTo()?</h2></div></div></div><p>The compareTo() method compares two objects and returns whether one is less than, greater than, or equal to the other. sort() uses this as the basis of its comparison of objects in the array.</p><div class="informalfigure"><a id="med_id00433a"></a><div class="mediaobject"><a id="med_id00433"></a><img src="../Images/image00931.jpeg" alt="image with no caption" hisrc="figs/web/309fig03.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="comparing_ducks_and_ducks">Comparing Ducks and Ducks</h2></div></div></div><p>Okay, so you know that if you want to sort Ducks, you’re going to have to implement this compareTo() method; by doing that you’ll give the Arrays class what it needs to complete the algorithm and sort your ducks.</p><p>Here’s the duck implementation:</p><div class="informalfigure"><a id="med_id00434a"></a><div class="mediaobject"><a id="med_id00434"></a><img src="../Images/image00932.jpeg" alt="image with no caption" hisrc="figs/web/310fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00435a"></a><div class="mediaobject"><a id="med_id00435"></a><img src="../Images/image00933.jpeg" alt="image with no caption" hisrc="figs/web/310fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="letapostrophes_sort_some_ducks">Let’s sort some Ducks</h2></div></div></div><p>Here’s the test drive for sorting Ducks...</p><div class="informalfigure"><a id="med_id00436a"></a><div class="mediaobject"><a id="med_id00436"></a><img src="../Images/image00934.jpeg" alt="image with no caption" hisrc="figs/web/311fig01.png.jpg"/></div></div><p><span class="strong"><strong>Let the sorting commence!</strong></span></p><div class="informalfigure"><a id="med_id00437a"></a><div class="mediaobject"><a id="med_id00437"></a><img src="../Images/image00935.jpeg" alt="image with no caption" hisrc="figs/web/311fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="making_of_the_sorting_duck_machine">The making of the sorting duck machine</h2></div></div></div><div class="informalfigure"><a id="med_id00438a"></a><div class="mediaobject"><a id="med_id00438"></a><img src="../Images/image00686.jpeg" alt="image with no caption" hisrc="figs/web/common17.png.jpg"/></div></div><p><span class="strong"><strong>Behind the Scenes</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① First, we need an array of Ducks:<a id="pro_id00034"></a><pre class="programlisting"><span class="strong"><strong>Duck[] ducks = {new Duck("Daffy", 8), ... };</strong></span></pre></li><li class="listitem" style="list-style-type: none">② Then we call the sort() template method in the Array class and pass it our ducks:<div class="informalfigure"><a id="med_id00439a"></a><div class="mediaobject"><a id="med_id00439"></a><img src="../Images/image00936.jpeg" alt="image with no caption" hisrc="figs/web/312fig01.png.jpg"/></div></div><br/>The sort() method (and its helper mergeSort()) control the sort procedure.</li><li class="listitem" style="list-style-type: none">③ To sort an array, you need to compare two items one by one until the entire list is in sorted order.<br/>When it comes to comparing two ducks, the sort method relies on the Duck’s compareTo() method to know how to do this. The compareTo() method is called on the first duck and passed the duck to be compared to:<div class="informalfigure"><a id="med_id00440a"></a><div class="mediaobject"><a id="med_id00440"></a><img src="../Images/image00937.jpeg" alt="image with no caption" hisrc="figs/web/312fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none">④ If the Ducks are not in sorted order, they’re swapped with the concrete swap() method in Arrays:<a id="pro_id00035"></a><pre class="programlisting"><span class="strong"><strong>swap()</strong></span></pre></li><li class="listitem" style="list-style-type: none">⑤ The sort() method continues comparing and swapping Ducks until the array is in the correct order!</li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00094"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch08qa3qe1"></a><a id="ch08qa3q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle2422" class="indexterm"></a><a id="iddle2471" class="indexterm"></a><span class="strong"><strong>Q: Is this really the Template Method Pattern, or are you trying too hard?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch08qa3q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> The pattern calls for implementing an algorithm and letting subclasses supply the implementation of the steps — and the Arrays sort is clearly not doing that! But, as we know, patterns in the wild aren’t always just like the textbook patterns. They have to be modified to fit the context and implementation constraints.</div><div>The designers of the Arrays sort() method had a few constraints. In general, you can’t subclass a Java array and they wanted the sort to be used on all arrays (and each array is a different class). So they defined a static method and deferred the comparison part of the algorithm to the items being sorted.</div><div>So, while it’s not a textbook template method, this implementation is still in the spirit of the Template Method Pattern. Also, by eliminating the requirement that you have to subclass Arrays to use this algorithm, they’ve made sorting in some ways more flexible and useful.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch08qa3qe2"></a><a id="ch08qa3q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: This implementation of sorting actually seems more like the Strategy Pattern than the Template Method Pattern. Why do we consider it Template Method?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch08qa3q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> You’re probably thinking that because the Strategy Pattern uses object composition. You’re right in a way — we’re using the Arrays object to sort our array, so that’s similar to Strategy. But remember, in Strategy, the class that you compose with implements the entire algorithm. The algorithm that Arrays implements for sort is incomplete; it needs a class to fill in the missing compareTo() method. So, in that way, it’s more like Template Method.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch08qa3qe3"></a><a id="ch08qa3q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Are there other examples of template methods in the Java API?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch08qa3q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Yes, you’ll find them in a few places. For example, java.io has a read() method in InputStream that subclasses must implement and is used by the template method read(byte b[], int off, int len).</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch08note06"></a>Brain Power</h3><p>We know that we should favor composition over inheritance, right? Well, the implementers of the sort() template method decided not to use inheritance and instead to implement sort() as a static method that is composed with a Comparable at runtime. How is this better? How is it worse? How would you approach this problem? Do Java arrays make this particularly tricky?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch08note07"></a>Brain<sup>2</sup> Power</h3><p>Think of another pattern that is a specialization of the template method. In this specialization, primitive operations are used to create and return objects. What pattern is this?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="swinginapostrophe_with_frames">Swingin’ with Frames</h2></div></div></div><p><a id="iddle1055" class="indexterm"></a><a id="iddle1484" class="indexterm"></a><a id="iddle1872" class="indexterm"></a><a id="iddle2449" class="indexterm"></a><a id="iddle2473" class="indexterm"></a>Up next on our Template Method safari... keep your eye out for swinging JFrames!</p><div class="informalfigure"><a id="med_id00441a"></a><div class="mediaobject"><a id="med_id00441"></a><img src="../Images/image00938.jpeg" alt="image with no caption" hisrc="figs/web/common14.png.jpg"/></div></div><p>If you haven’t encountered JFrame, it’s the most basic Swing container and inherits a paint() method. By default, paint() does nothing because it’s a hook! By overriding paint(), you can insert yourself into JFrame’s algorithm for displaying its area of the screen and have your own graphic output incorporated into the JFrame. Here’s an embarrassingly simple example of using a JFrame to override the paint() hook method:</p><div class="informalfigure"><a id="med_id00442a"></a><div class="mediaobject"><a id="med_id00442"></a><img src="../Images/image00939.jpeg" alt="image with no caption" hisrc="figs/web/314fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00443a"></a><div class="mediaobject"><a id="med_id00443"></a><img src="../Images/image00940.jpeg" alt="image with no caption" hisrc="figs/web/314fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="applets">Applets</h2></div></div></div><p><a id="iddle1048" class="indexterm"></a><a id="iddle1058" class="indexterm"></a><a id="iddle1477" class="indexterm"></a><a id="iddle2456" class="indexterm"></a>Our final stop on the safari: the applet.</p><div class="informalfigure"><a id="med_id00444a"></a><div class="mediaobject"><a id="med_id00444"></a><img src="../Images/image00938.jpeg" alt="image with no caption" hisrc="figs/web/common14.png.jpg"/></div></div><p>You probably know an applet is a small program that runs in a web page. Any applet must subclass Applet, and this class provides several hooks. Let’s take a look at a few of them:</p><div class="informalfigure"><a id="med_id00445a"></a><div class="mediaobject"><a id="med_id00445"></a><img src="../Images/image00941.jpeg" alt="image with no caption" hisrc="figs/web/315fig01.png.jpg"/></div></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>Concrete applets make extensive use of hooks to supply their own behaviors. Because these methods are implemented as hooks, the applet isn’t required to implement them.</strong></span></div></blockquote></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="fireside_chats-id00095"></a><h3 class="title"><code class="literal">Fireside Chats</code></h3><p><a id="iddle2423" class="indexterm"></a><a id="iddle2472" class="indexterm"></a>Tonight’s talk: <span class="strong"><strong>Template Method and Strategy compare methods.</strong></span></p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Template Method:</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Strategy:</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Hey Strategy, what are you doing in my chapter? I figured I’d get stuck with someone boring like Factory Method.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00034"></a><img src="../Images/image00942.jpeg" alt="" hisrc="figs/web/316fig01.png.jpg"/></span></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Nope, it’s me, although be careful — you and Factory Method are related, aren’t you?</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>I was just kidding! But seriously, what are you doing here? We haven’t heard from you in eight chapters!</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>I’d heard you were on the final draft of your chapter and I thought I’d swing by to see how it was going. We have a lot in common, so I thought I might be able to help...</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>You might want to remind the reader what you’re all about, since it’s been so long.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>I don’t know, since <a class="xref" href="part0008.xhtml#aid-7K4G2">Chapter 1</a>, people have been stopping me in the street saying, “Aren’t you that pattern...?” So I think they know who I am. But for your sake: I define a family of algorithms and make them interchangeable. Since each algorithm is encapsulated, the client can use different algorithms easily.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Hey, that does sound a lot like what I do. But my intent’s a little different from yours; my job is to define the outline of an algorithm, but let my subclasses do some of the work. That way, I can have different implementations of an algorithm’s individual steps, but keep control over the algorithm’s structure. Seems like you have to give up control of your algorithms.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>I’m not sure I’d put it quite like <span class="emphasis"><em>that</em></span>... and anyway, I’m not stuck using inheritance for algorithm implementations. I offer clients a choice of algorithm implementation through object composition.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>I remember that. But I have more control over my algorithm and I don’t duplicate code. In fact, if every part of my algorithm is the same except for, say, one line, then my classes are much more efficient than yours. All my duplicated code gets put into the superclass, so all the subclasses can share it.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>You might be a little more efficient (just a little) and require fewer objects. <span class="emphasis"><em>And</em></span> you might also be a little less complicated in comparison to my delegation model, but I’m more flexible because I use object composition. With me, clients can change their algorithms at runtime simply by using a different strategy object. Come on, they didn’t choose me for <a class="xref" href="part0008.xhtml#aid-7K4G2">Chapter 1</a> for nothing!</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Yeah, well, I’m <span class="emphasis"><em>real</em></span> happy for ya, but don’t forget I’m the most used pattern around. Why? Because I provide a fundamental method for code reuse that allows subclasses to specify behavior. I’m sure you can see that this is perfect for creating frameworks.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Yeah, I guess... but, what about dependency? You’re way more dependent than me.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>How’s that? My superclass is abstract.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>But you have to depend on methods implemented in your subclasses, which are part of your algorithm. I don’t depend on anyone; I can do the entire algorithm myself!</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Like I said, Strategy, I’m <span class="emphasis"><em>real</em></span> happy for you. Thanks for stopping by, but I’ve got to get the rest of this chapter done.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Okay, okay, don’t get touchy. I’ll let you work, but let me know if you need my special techniques anyway; I’m always glad to help.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>Got it. Don’t call us, we’ll call you...</p></td><td> </td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword-id00096"></a><h3 class="title">Design Patterns Crossword</h3><p>It’s that time again....</p><div class="informalfigure"><a id="med_id00446a"></a><div class="mediaobject"><a id="med_id00446"></a><img src="../Images/image00943.gif" alt="image with no caption" hisrc="figs/web/318fig01.png"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Across</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Down</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>1. Strategy uses __________ rather than inheritance.</p>
<p>4. Type of sort used in Arrays.</p>
<p>5. The JFrame hook method that we overrode to print “I Rule”.</p>
<p>6. The Template Method Pattern uses __________ to defer implementation to other classes.</p>
<p>8. Coffee and ________.</p>
<p>9. “Don’t call us, we’ll call you” is known as the __________ Principle.</p>
<p>12. A template method defines the steps of an ____________.</p>
<p>13. In this chapter, we give you more ________.</p>
<p>14. The template method is usually defined in an __________ class.</p>
<p>16. Class that likes web pages.</p></td><td style="vertical-align: top; "><p>2. _____________ algorithm steps are implemented by hook methods.</p>
<p>3. Factory Method is a __________ of Template Method.</p>
<p>7. The steps in the algorithm that must be supplied by the subclasses are usually declared ____________.</p>
<p>8. Huey, Louie, and Dewey all weigh ___________ pounds.</p>
<p>9. A method in the abstract superclass that does nothing or provides default behavior is called a ____________ method.</p>
<p>10. Big-headed pattern.</p>
<p>11. Our favorite coffee shop in Objectville.</p>
<p>15. The Arrays class implements its template method as a __________ method.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00097">Tools for your Design Toolbox</h2></div></div></div><p>We’ve added Template Method to your toolbox. With Template Method you can reuse code like a pro while keeping control of your algorithms.</p><div class="informalfigure"><a id="med_id00447a"></a><div class="mediaobject"><a id="med_id00447"></a><img src="../Images/image00944.jpeg" alt="image with no caption" hisrc="figs/web/319fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00098"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">A “template method” defines the steps of an algorithm, deferring to subclasses for the implementation of those steps.</li><li class="listitem">The Template Method Pattern gives us an important technique for code reuse.</li><li class="listitem">The template method’s abstract class may define concrete methods, abstract methods, and hooks.</li><li class="listitem">Abstract methods are implemented by subclasses.</li><li class="listitem">Hooks are methods that do nothing or default behavior in the abstract class, but may be overridden in the subclass.</li><li class="listitem">To prevent subclasses from changing the algorithm in the template method, declare the template method as final.</li><li class="listitem">The Hollywood Principle guides us to put decision making in high-level modules that can decide how and when to call low-level modules.</li><li class="listitem">You’ll see lots of uses of the Template Method Pattern in real-world code, but don’t expect it all (like any pattern) to be designed “by the book.”</li><li class="listitem">The Strategy and Template Method Patterns both encapsulate algorithms, one by inheritance and one by composition.</li><li class="listitem">The Factory Method is a specialization of Template Method.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00099"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1538" class="indexterm"></a><a id="iddle1581" class="indexterm"></a><a id="iddle1648" class="indexterm"></a><a id="iddle2277" class="indexterm"></a><a id="iddle2409" class="indexterm"></a><a id="iddle2461" class="indexterm"></a><a id="iddle2518" class="indexterm"></a>Draw the new class diagram now that we’ve moved prepareRecipe() into the CaffeineBeverage class:</p><div class="informalfigure"><a id="med_id00448a"></a><div class="mediaobject"><a id="med_id00448"></a><img src="../Images/image00945.jpeg" alt="image with no caption" hisrc="figs/web/320fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark_solut-id00100"></a><h3 class="title">Who Does What? Solution</h3><p>Match each pattern with its description:</p><div class="informalfigure"><a id="med_id00449a"></a><div class="mediaobject"><a id="med_id00449"></a><img src="../Images/image00946.jpeg" alt="image with no caption" hisrc="figs/web/320fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword_soluti-id00101"></a><h3 class="title">Design Patterns Crossword Solution</h3><p>It’s that time again...</p><div class="informalfigure"><a id="med_id00450a"></a><div class="mediaobject"><a id="med_id00450"></a><img src="../Images/image00947.gif" alt="image with no caption" hisrc="figs/web/321fig01.png"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>