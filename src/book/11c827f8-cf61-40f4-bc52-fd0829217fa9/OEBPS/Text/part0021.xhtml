<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Appendix A. Leftover Patterns</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch13.html"/><link rel="next" href="apb.html"/></head><body><section class="appendix" epub:type="appendix" id="leftover_patterns"><div class="titlepage" id="aid-K0RQ2"><div><div><h2 class="title">Appendix A. Leftover Patterns</h2></div></div></div><div class="informalfigure"><a id="med_id00812a"></a><div class="mediaobject"><a id="med_id00812"></a><img src="../Images/image01313.jpeg" alt="image with no caption" hisrc="figs/web/617fig01.png.jpg"/></div></div><p><span class="strong"><strong>Not everyone can be the most popular.</strong></span> A lot has changed in the last 20 years. Since <span class="emphasis"><em>Design Patterns: Elements of Reusable Object-Oriented Software</em></span> first came out, developers have applied these patterns thousands of times. The patterns we summarize in this appendix are full-fledged, card-carrying, official GoF patterns, but aren’t used as often as the patterns we’ve explored so far. But these patterns are awesome in their own right, and if your situation calls for them, you should apply them with your head held high. Our goal in this appendix is to give you a high-level idea of what these patterns are all about.</p><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="bridge">Bridge</h2></div></div></div><p><a id="iddle1085" class="indexterm"></a><span class="strong"><strong>Use the Bridge Pattern to vary not only your implementations, but also your abstractions.</strong></span></p><p><span class="strong"><strong>A scenario</strong></span></p><p>Imagine you’re going to revolutionize “extreme lounging.” You’re writing the code for a new ergonomic and user-friendly remote control for TVs. You already know that you’ve got to use good OO techniques because while the remote is based on the same <span class="emphasis"><em>abstraction</em></span>, there will be lots of <span class="emphasis"><em>implementations</em></span> — one for each model of TV.</p><div class="informalfigure"><a id="med_id00813a"></a><div class="mediaobject"><a id="med_id00813"></a><img src="../Images/image01314.jpeg" alt="image with no caption" hisrc="figs/web/618fig01.png.jpg"/></div></div><p><span class="strong"><strong>Your dilemma</strong></span></p><p>You know that the remote’s user interface won’t be right the first time. In fact, you expect that the product will be refined many times as usability data is collected on the remote control.</p><p>So your dilemma is that the remotes are going to change and the TVs are going to change. You’ve already <span class="emphasis"><em>abstracted</em></span> the user interface so that you can vary the <span class="emphasis"><em>implementation</em></span> over the many TVs your customers will own. But you are also going to need to <span class="emphasis"><em>vary the abstraction</em></span> because it is going to change over time as the remote is improved based on the user feedback.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note01"></a>Note</h3><p>Using this design we can vary <span class="underline">only</span> the TV implementation, not the user interface.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>So how are you going to create an OO design that allows you to vary the implementation <span class="emphasis"><em>and</em></span> the abstraction?</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="why_use_the_bridge_patternquestion_mark">Why use the Bridge Pattern?</h2></div></div></div><p>The Bridge Pattern allows you to vary the implementation <span class="emphasis"><em>and</em></span> the abstraction by placing the two in separate class hierarchies.</p><div class="informalfigure"><a id="med_id00814a"></a><div class="mediaobject"><a id="med_id00814"></a><img src="../Images/image01315.jpeg" alt="image with no caption" hisrc="figs/web/619fig01.png.jpg"/></div></div><p>Now you have two hierarchies, one for the remotes and a separate one for platform-specific TV implementations. The bridge allows you to vary either side of the two hierarchies independently.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note02"></a>Bridge Benefits</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Decouples an implementation so that it is not bound permanently to an interface.</li><li class="listitem">Abstraction and implementation can be extended independently.</li><li class="listitem">Changes to the concrete abstraction classes don’t affect the client.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note03"></a>Bridge Uses and Drawbacks</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Useful in graphics and windowing systems that need to run over multiple platforms.</li><li class="listitem">Useful any time you need to vary an interface and an implementation in different ways.</li><li class="listitem">Increases complexity.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="builder">Builder</h2></div></div></div><p><a id="iddle1086" class="indexterm"></a><a id="iddle1493" class="indexterm"></a><a id="iddle2003" class="indexterm"></a><span class="strong"><strong>Use the Builder Pattern to encapsulate the construction of a product and allow it to be constructed in steps.</strong></span></p><p><span class="strong"><strong>A scenario</strong></span></p><p>You’ve just been asked to build a vacation planner for Patternsland, a new theme park just outside of Objectville. Park guests can choose a hotel and various types of admission tickets, make restaurant reservations, and even book special events. To create a vacation planner, you need to be able to create structures like this:</p><div class="informalfigure"><a id="med_id00815a"></a><div class="mediaobject"><a id="med_id00815"></a><img src="../Images/image01316.jpeg" alt="image with no caption" hisrc="figs/web/620fig01.png.jpg"/></div></div><p><span class="strong"><strong>You need a flexible design</strong></span></p><p>Each guest’s planner can vary in the number of days and types of activities it includes. For instance, a local resident might not need a hotel, but wants to make dinner and special event reservations. Another guest might be flying into Objectville and needs a hotel, dinner reservations, and admission tickets.</p><p>So, you need a flexible data structure that can represent guest planners and all their variations; you also need to follow a sequence of potentially complex steps to create the planner. How can you provide a way to create the complex structure without mixing it with the steps for creating it?</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="why_use_the_builder_patternquestion_mark">Why use the Builder Pattern?</h2></div></div></div><p>Remember Iterator? We encapsulated the iteration into a separate object and hid the internal representation of the collection from the client. It’s the same idea here: we encapsulate the creation of the trip planner in an object (let’s call it a builder), and have our client ask the builder to construct the trip planner structure for it.</p><div class="informalfigure"><a id="med_id00816a"></a><div class="mediaobject"><a id="med_id00816"></a><img src="../Images/image01317.jpeg" alt="image with no caption" hisrc="figs/web/621fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note04"></a>Builder Benefits</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Encapsulates the way a complex object is constructed.</li><li class="listitem">Allows objects to be constructed in a multistep and varying process (as opposed to one-step factories).</li><li class="listitem">Hides the internal representation of the product from the client.</li><li class="listitem">Product implementations can be swapped in and out because the client only sees an abstract interface.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note05"></a>Builder Uses and Drawbacks</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Often used for building composite structures.</li><li class="listitem">Constructing objects requires more domain knowledge of the client than when using a Factory.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="chain_of_responsibility">Chain of Responsibility</h2></div></div></div><p><a id="iddle1098" class="indexterm"></a><span class="strong"><strong>Use the Chain of Responsibility Pattern when you want to give more than one object a chance to handle a request.</strong></span></p><p><span class="strong"><strong>A scenario</strong></span></p><p>Mighty Gumball has been getting more email than they can handle since the release of the Java-powered Gumball Machine. From their own analysis they get four kinds of email: fan mail from customers that love the new 1-in-10 game, complaints from parents whose kids are addicted to the game, and requests to put machines in new locations. They also get a fair amount of spam.</p><p>All fan mail should go straight to the CEO, all complaints should go to the legal department and all requests for new machines should go to business development. Spam should be deleted.</p><p><span class="strong"><strong>Your task</strong></span></p><p>Mighty Gumball has already written some AI detectors that can tell if an email is spam, fan mail, a complaint, or a request, but they need you to create a design that can use the detectors to handle incoming email.</p><div class="informalfigure"><a id="med_id00817a"></a><div class="mediaobject"><a id="med_id00817"></a><img src="../Images/image01318.jpeg" alt="image with no caption" hisrc="figs/web/622fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="how_to_use_the_chain_of_responsibility_p">How to use the Chain of Responsibility Pattern</h2></div></div></div><p>With the Chain of Responsibility Pattern, you create a chain of objects to examine requests. Each object in turn examines a request and either handles it, or passes it on to the next object in the chain.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note05a"></a>Note</h3><p>Each object in the chain acts as a handler and has a successor object. If it can handle the request, it does; otherwise, it forwards the request to its successor.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00818a"></a><div class="mediaobject"><a id="med_id00818"></a><img src="../Images/image01319.jpeg" alt="image with no caption" hisrc="figs/web/623fig01.png.jpg"/></div></div><p>As email is received, it is passed to the first handler: the SpamHandler. If the SpamHandler can’t handle the request, it is passed on to the FanHandler. And so on...</p><div class="informalfigure"><a id="med_id00819a"></a><div class="mediaobject"><a id="med_id00819"></a><img src="../Images/image01320.jpeg" alt="image with no caption" hisrc="figs/web/623fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note06"></a>Chain of Responsibility Benefits</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Decouples the sender of the request and its receivers.</li><li class="listitem">Simplifies your object because it doesn’t have to know the chain’s structure and keep direct references to its members.</li><li class="listitem">Allows you to add or remove responsibilities dynamically by changing the members or order of the chain.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note07"></a>Chain of Responsibility Uses and Drawbacks</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Commonly used in windows systems to handle events like mouse clicks and keyboard events.</li><li class="listitem">Execution of the request isn’t guaranteed; it may fall off the end of the chain if no object handles it (this can be an advantage or a disadvantage).</li><li class="listitem">Can be hard to observe and debug at runtime.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="flyweight">Flyweight</h2></div></div></div><p><a id="iddle1678" class="indexterm"></a><span class="strong"><strong>Use the Flyweight Pattern when one instance of a class can be used to provide many “virtual instances.”</strong></span></p><p><span class="strong"><strong>A scenario</strong></span></p><p>You want to add trees as objects in your hot new landscape design application. In your application, trees don’t really do very much; they have an X-Y location, and they can draw themselves dynamically, depending on how old they are. The thing is, a user might want to have lots and lots of trees in one of their home landscape designs. It might look something like this:</p><div class="informalfigure"><a id="med_id00820a"></a><div class="mediaobject"><a id="med_id00820"></a><img src="../Images/image01321.jpeg" alt="image with no caption" hisrc="figs/web/624fig01.png.jpg"/></div></div><p><span class="strong"><strong>Your big client’s dilemma</strong></span></p><p>You’ve just landed your “reference account.” That key client you’ve been pitching for months. They’re going to buy 1,000 seats of your application, and they’re using your software to do the landscape design for huge planned communities. After using your software for a week, your client is complaining that when they create large groves of trees, the app starts getting sluggish...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="why_use_the_flyweight_patternquestion_ma">Why use the Flyweight Pattern?</h2></div></div></div><p>What if, instead of having thousands of Tree objects, you could redesign your system so that you’ve got only one instance of Tree, and a client object that maintains the state of ALL your trees? That’s the Flyweight!</p><div class="informalfigure"><a id="med_id00821a"></a><div class="mediaobject"><a id="med_id00821"></a><img src="../Images/image01322.jpeg" alt="image with no caption" hisrc="figs/web/625fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note08"></a>Flyweight Benefits</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Reduces the number of object instances at runtime, saving memory.</li><li class="listitem">Centralizes state for many “virtual” objects into a single location.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note09"></a>Flyweight Uses and Drawbacks</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The Flyweight is used when a class has many instances, and they can all be controlled identically.</li><li class="listitem">A drawback of the Flyweight pattern is that once you’ve implemented it, single, logical instances of the class will not be able to behave independently from the other instances.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="interpreter">Interpreter</h2></div></div></div><p><a id="iddle1803" class="indexterm"></a><span class="strong"><strong>Use the Interpreter Pattern to build an interpreter for a language.</strong></span></p><p><span class="strong"><strong>A scenario</strong></span></p><p>Remember the Duck Simulator? You have a hunch it would also make a great educational tool for children to learn programming. Using the simulator, each child gets to control one duck with a simple language. Here’s an example of the language:</p><div class="informalfigure"><a id="med_id00822a"></a><div class="mediaobject"><a id="med_id00822"></a><img src="../Images/image01323.jpeg" alt="image with no caption" hisrc="figs/web/626fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note10"></a>Relax</h3><p><span class="strong"><strong>The Interpreter Pattern requires some knowledge of formal grammars.</strong></span></p><p>If you’ve never studied formal grammars, go ahead and read through the pattern; you’ll still get the gist of it.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Now, remembering how to create grammars from one of your old introductory programming classes, you write out the grammar:</p><div class="informalfigure"><a id="med_id00823a"></a><div class="mediaobject"><a id="med_id00823"></a><img src="../Images/image01324.jpeg" alt="image with no caption" hisrc="figs/web/626fig02.png.jpg"/></div></div><p><span class="strong"><strong>Now what?</strong></span></p><p>You’ve got a grammar; now all you need is a way to represent and interpret sentences in the grammar so that the students can see the effects of their programming on the simulated ducks.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="how_to_implement_an_interpreter">How to implement an interpreter</h2></div></div></div><p>When you need to implement a simple language, the Interpreter Pattern defines a class-based representation for its grammar along with an interpreter to interpret its sentences. To represent the language, you use a class to represent each rule in the language. Here’s the duck language translated into classes. Notice the direct mapping to the grammar.</p><div class="informalfigure"><a id="med_id00824a"></a><div class="mediaobject"><a id="med_id00824"></a><img src="../Images/image01325.jpeg" alt="image with no caption" hisrc="figs/web/627fig01.png.jpg"/></div></div><p>To interpret the language, call the interpret() method on each expression type. This method is passed a context — which contains the input stream of the program we’re parsing — and matches the input and evaluates it.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note11"></a>Interpreter Benefits</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Representing each grammar rule in a class makes the language easy to implement.</li><li class="listitem">Because the grammar is represented by classes, you can easily change or extend the language.</li><li class="listitem">By adding methods to the class structure, you can add new behaviors beyond interpretation, like pretty printing and more sophisticated program validation.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note12"></a>Interpreter Uses and Drawbacks</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Use interpreter when you need to implement a simple language.</li><li class="listitem">Appropriate when you have a simple grammar and simplicity is more important than efficiency.</li><li class="listitem">Used for scripting and programming languages.</li><li class="listitem">This pattern can become cumbersome when the number of grammar rules is large. In these cases a parser/compiler generator may be more appropriate.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="mediator">Mediator</h2></div></div></div><p><a id="iddle1904" class="indexterm"></a><span class="strong"><strong>Use the Mediator Pattern to centralize complex communications and control between related objects.</strong></span></p><p><span class="strong"><strong>A scenario</strong></span></p><p>Bob has a Java-enabled auto-house, thanks to the good folks at HouseOfTheFuture. All of his appliances are designed to make his life easier. When Bob stops hitting the snooze button, his alarm clock tells the coffee maker to start brewing. Even though life is good for Bob, he and other clients are always asking for lots of new features: No coffee on the weekends... Turn off the sprinkler 15 minutes before a shower is scheduled... Set the alarm early on trash days...</p><div class="informalfigure"><a id="med_id00825a"></a><div class="mediaobject"><a id="med_id00825"></a><img src="../Images/image01326.jpeg" alt="image with no caption" hisrc="figs/web/628fig01.png.jpg"/></div></div><p><span class="strong"><strong>HouseOfTheFuture’s dilemma</strong></span></p><p>It’s getting really hard to keep track of which rules reside in which objects, and how the various objects should relate to each other.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="mediator_in_actionhellip">Mediator in action...</h2></div></div></div><p>With a Mediator added to the system, all of the appliance objects can be greatly simplified:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">They tell the Mediator when their state changes.</li><li class="listitem">They respond to requests from the Mediator.</li></ul></div><p>Before we added the Mediator, all of the appliance objects needed to know about each other... they were all tightly coupled. With the Mediator in place, the appliance objects are all completely decoupled from each other.</p><p>The Mediator contains all of the control logic for the entire system. When an existing appliance needs a new rule, or a new appliance is added to the system, you’ll know that all of the necessary logic will be added to the Mediator.</p><div class="informalfigure"><a id="med_id00826a"></a><div class="mediaobject"><a id="med_id00826"></a><img src="../Images/image01327.jpeg" alt="image with no caption" hisrc="figs/web/629fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note13"></a>Mediator Benefits</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Increases the reusability of the objects supported by the Mediator by decoupling them from the system.</li><li class="listitem">Simplifies maintenance of the system by centralizing control logic.</li><li class="listitem">Simplifies and reduces the variety of messages sent between objects in the system.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note14"></a>Mediator Uses and Drawbacks</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The Mediator is commonly used to coordinate related GUI components.</li><li class="listitem">A drawback of the Mediator Pattern is that without proper design, the Mediator object itself can become overly complex.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="memento">Memento</h2></div></div></div><p><a id="iddle1905" class="indexterm"></a><span class="strong"><strong>Use the Memento Pattern when you need to be able to return an object to one of its previous states; for instance, if your user requests an “undo.”</strong></span></p><p><span class="strong"><strong>A scenario</strong></span></p><p>Your interactive role playing game is hugely successful, and has created a legion of addicts, all trying to get to the fabled “level 13.” As users progress to more challenging game levels, the odds of encountering a game-ending situation increase. Fans who have spent days progressing to an advanced level are understandably miffed when their character gets snuffed, and they have to start all over. The cry goes out for a “save progress” command, so that players can store their game progress and at least recover most of their efforts when their character is unfairly extinguished. The “save progress” function needs to be designed to return a resurrected player to the last level she completed successfully.</p><div class="informalfigure"><a id="med_id00827a"></a><div class="mediaobject"><a id="med_id00827"></a><img src="../Images/image01328.jpeg" alt="image with no caption" hisrc="figs/web/630fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="memento_at_work">The Memento at work</h2></div></div></div><p>The Memento has two goals:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Saving the important state of a system’s key object.</li><li class="listitem">Maintaining the key object’s encapsulation.</li></ul></div><p>Keeping the single responsibility principle in mind, it’s also a good idea to keep the state that you’re saving separate from the key object. This separate object that holds the state is known as the Memento object.</p><div class="informalfigure"><a id="med_id00828a"></a><div class="mediaobject"><a id="med_id00828"></a><img src="../Images/image01329.jpeg" alt="image with no caption" hisrc="figs/web/631fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note15"></a>Memento Benefits</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Keeping the saved state external from the key object helps to maintain cohesion.</li><li class="listitem">Keeps the key object’s data encapsulated.</li><li class="listitem">Provides easy-to-implement recovery capability.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note16"></a>Memento Uses and Drawbacks</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The Memento is used to save state.</li><li class="listitem">A drawback to using Memento is that saving and restoring state can be time consuming.</li><li class="listitem">In Java systems, consider using Serialization to save a system’s state.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="prototype">Prototype</h2></div></div></div><p><a id="iddle2153" class="indexterm"></a><span class="strong"><strong>Use the Prototype Pattern when creating an instance of a given class is either expensive or complicated.</strong></span></p><p><span class="strong"><strong>A scenario</strong></span></p><p>Your interactive role playing game has an insatiable appetite for monsters. As your heroes make their journey through a dynamically created landscape, they encounter an endless chain of foes that must be subdued. You’d like the monster’s characteristics to evolve with the changing landscape. It doesn’t make a lot of sense for bird-like monsters to follow your characters into underseas realms. Finally, you’d like to allow advanced players to create their own custom monsters.</p><div class="informalfigure"><a id="med_id00829a"></a><div class="mediaobject"><a id="med_id00829"></a><img src="../Images/image01330.jpeg" alt="image with no caption" hisrc="figs/web/632fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="prototype_to_the_rescue">Prototype to the rescue</h2></div></div></div><p>The Prototype Pattern allows you to make new instances by copying existing instances. (In Java this typically means using the clone() method, or de-serialization when you need deep copies.) A key aspect of this pattern is that the client code can make new instances without knowing which specific class is being instantiated.</p><div class="informalfigure"><a id="med_id00830a"></a><div class="mediaobject"><a id="med_id00830"></a><img src="../Images/image01331.jpeg" alt="image with no caption" hisrc="figs/web/633fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00831a"></a><div class="mediaobject"><a id="med_id00831"></a><img src="../Images/image01332.jpeg" alt="image with no caption" hisrc="figs/web/633fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note17"></a>Prototype Benefits</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Hides the complexities of making new instances from the client.</li><li class="listitem">Provides the option for the client to generate objects whose type is not known.</li><li class="listitem">In some circumstances, copying an object can be more efficient than creating a new object.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note18"></a>Prototype Uses and Drawbacks</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Prototype should be considered when a system must create new objects of many types in a complex class hierarchy.</li><li class="listitem">A drawback to using the Prototype is that making a copy of an object can sometimes be complicated.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="visitor">Visitor</h2></div></div></div><p><a id="iddle2503" class="indexterm"></a><span class="strong"><strong>Use the Visitor Pattern when you want to add capabilities to a composite of objects and encapsulation is not important.</strong></span></p><p><span class="strong"><strong>A scenario</strong></span></p><p>Customers who frequent the Objectville Diner and Objectville Pancake House have recently become more health conscious. They are asking for nutritional information before ordering their meals. Because both establishments are so willing to create special orders, some customers are even asking for nutritional information on a per ingredient basis.</p><p><span class="strong"><strong>Lou’s proposed solution:</strong></span></p><div class="informalfigure"><a id="med_id00832a"></a><div class="mediaobject"><a id="med_id00832"></a><img src="../Images/image01333.jpeg" alt="image with no caption" hisrc="figs/web/634fig01.png.jpg"/></div></div><p><span class="strong"><strong>Mel’s concerns...</strong></span></p><p>“Boy, it seems like we’re opening Pandora’s box. Who knows what new method we’re going to have to add next, and every time we add a new method we have to do it in two places. Plus, what if we want to enhance the base application with, say, a recipes class? Then we’ll have to make these changes in three different places...”</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="visitor_drops_by">The Visitor drops by</h2></div></div></div><p>The Visitor works hand in hand with a Traverser. The Traverser knows how to navigate to all of the objects in a Composite. The Traverser guides the Visitor through the Composite so that the Visitor can collect state as it goes. Once state has been gathered, the Client can have the Visitor perform various operations on the state. When new functionality is required, only the Visitor must be enhanced.</p><div class="informalfigure"><a id="med_id00833a"></a><div class="mediaobject"><a id="med_id00833"></a><img src="../Images/image01334.jpeg" alt="image with no caption" hisrc="figs/web/635fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note19"></a>Visitor Benefits</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Allows you to add operations to a Composite structure without changing the structure itself.</li><li class="listitem">Adding new operations is relatively easy.</li><li class="listitem">The code for operations performed by the Visitor is centralized.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="app01note20"></a>Visitor Drawbacks</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The Composite classes’ encapsulation is broken when the Visitor is used.</li><li class="listitem">Because the traversal function is involved, changes to the Composite structure are more difficult.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>