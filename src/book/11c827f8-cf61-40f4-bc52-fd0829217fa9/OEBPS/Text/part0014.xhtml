<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 7. The Adapter and Facade Patterns: Being Adaptive</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch06.html"/><link rel="next" href="ch08.html"/></head><body><section class="chapter" epub:type="chapter" id="adapter_and_facade_patterns_being_adapti"><div class="titlepage" id="aid-DB7S2"><div><div><h2 class="title">Chapter 7. The Adapter and Facade Patterns: Being Adaptive</h2></div></div></div><div class="informalfigure"><a id="med_id00351a"></a><div class="mediaobject"><a id="med_id00351"></a><img src="../Images/image00848.jpeg" alt="image with no caption" hisrc="figs/web/243fig01.png.jpg"/></div></div><p><span class="strong"><strong>In this chapter we’re going to attempt such impossible feats as putting a square peg in a round hole.</strong></span> Sound impossible? Not when we have Design Patterns. Remember the Decorator Pattern? We <span class="strong"><strong>wrapped objects</strong></span> to give them new responsibilities. Now we’re going to wrap some objects with a different purpose: to make their interfaces look like something they’re not. Why would we do that? So we can adapt a design expecting one interface to a class that implements a different interface. That’s not all; while we’re at it, we’re going to look at another pattern that wraps objects to simplify their interface.</p><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="adapters_all_around_us">Adapters all around us</h2></div></div></div><p><a id="iddle1036" class="indexterm"></a><a id="iddle2007" class="indexterm"></a><a id="iddle2078" class="indexterm"></a><span class="strong"><strong>You’ll have no trouble understanding what an OO adapter is because the real world is full of them. How’s this for an example: Have you ever needed to use a US-made laptop in Great Britain? Then you’ve probably needed an AC power adapter...</strong></span></p><div class="informalfigure"><a id="med_id00352a"></a><div class="mediaobject"><a id="med_id00352"></a><img src="../Images/image00849.jpeg" alt="image with no caption" hisrc="figs/web/244fig01.png.jpg"/></div></div><p>You know what the adapter does: it sits in between the plug of your laptop and the British AC outlet; its job is to adapt the British outlet so that you can plug your laptop into it and receive power. Or look at it this way: the adapter changes the interface of the outlet into one that your laptop expects.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note01"></a>Note</h3><p>How many other real-world adapters can you think of?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Some AC adapters are simple — they only change the shape of the outlet so that it matches your plug, and they pass the AC current straight through — but other adapters are more complex internally and may need to step the power up or down to match your devices’ needs.</p><p>Okay, that’s the real world; what about object-oriented adapters? Well, our OO adapters play the same role as their real-world counterparts: they take an interface and adapt it to one that a client is expecting.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="object-oriented_adapters">Object-oriented adapters</h2></div></div></div><p>Say you’ve got an existing software system that you need to work a new vendor class library into, but the new vendor designed their interfaces differently than the last vendor:</p><div class="informalfigure"><a id="med_id00353a"></a><div class="mediaobject"><a id="med_id00353"></a><img src="../Images/image00850.jpeg" alt="image with no caption" hisrc="figs/web/245fig01.png.jpg"/></div></div><p>Okay, you don’t want to solve the problem by changing your existing code (and you can’t change the vendor’s code). So what do you do? Well, you can write a class that adapts the new vendor interface into the one you’re expecting.</p><div class="informalfigure"><a id="med_id00354a"></a><div class="mediaobject"><a id="med_id00354"></a><img src="../Images/image00851.jpeg" alt="image with no caption" hisrc="figs/web/245fig02.png.jpg"/></div></div><p>The adapter acts as the middleman by receiving requests from the client and converting them into requests that make sense on the vendor classes.</p><div class="informalfigure"><a id="med_id00355a"></a><div class="mediaobject"><a id="med_id00355"></a><img src="../Images/image00852.jpeg" alt="image with no caption" hisrc="figs/web/245fig03.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note02"></a>Note</h3><p>Can you think of a solution that doesn’t require YOU to write ANY additional code to integrate the new vendor classes? How about making the vendor supply the adapter class?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="if_it_walks_like_a_duck_and_quacks_like">If it walks like a duck and quacks like a duck, then it <span class="strikethrough">must</span> might be a <span class="strikethrough">duck</span> turkey wrapped with a duck adapter...</h2></div></div></div><p><a id="iddle1038" class="indexterm"></a><a id="iddle2009" class="indexterm"></a><a id="iddle2080" class="indexterm"></a>It’s time to see an adapter in action. Remember our ducks from <a class="xref" href="part0008.xhtml#aid-7K4G2">Chapter 1</a>? Let’s review a slightly simplified version of the Duck interfaces and classes:</p><div class="informalfigure"><a id="med_id00356a"></a><div class="mediaobject"><a id="med_id00356"></a><img src="../Images/image00853.jpeg" alt="image with no caption" hisrc="figs/web/246fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00357a"></a><div class="mediaobject"><a id="med_id00357"></a><img src="../Images/image00854.jpeg" alt="image with no caption" hisrc="figs/web/246fig02.png.jpg"/></div></div><p>Here’s a subclass of Duck, the MallardDuck.</p><div class="informalfigure"><a id="med_id00358a"></a><div class="mediaobject"><a id="med_id00358"></a><img src="../Images/image00855.jpeg" alt="image with no caption" hisrc="figs/web/246fig03.png.jpg"/></div></div><p>Now it’s time to meet the newest fowl on the block:</p><div class="informalfigure"><a id="med_id00359a"></a><div class="mediaobject"><a id="med_id00359"></a><img src="../Images/image00856.jpeg" alt="image with no caption" hisrc="figs/web/246fig04.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00360a"></a><div class="mediaobject"><a id="med_id00360"></a><img src="../Images/image00857.jpeg" alt="image with no caption" hisrc="figs/web/247fig01.png.jpg"/></div></div><p>Now, let’s say you’re short on Duck objects and you’d like to use some Turkey objects in their place. Obviously we can’t use the turkeys outright because they have a different interface.</p><p>So, let’s write an Adapter:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="code_up_close-id00069"></a><h3 class="title">Code Up Close</h3><div class="informalfigure"><a id="med_id00361a"></a><div class="mediaobject"><a id="med_id00361"></a><img src="../Images/image00858.jpeg" alt="image with no caption" hisrc="figs/web/247fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="test_drive_the_adapter">Test drive the adapter</h2></div></div></div><p><a id="iddle1040" class="indexterm"></a><a id="iddle2010" class="indexterm"></a><a id="iddle2082" class="indexterm"></a>Now we just need some code to test drive our adapter:</p><div class="informalfigure"><a id="med_id00362a"></a><div class="mediaobject"><a id="med_id00362"></a><img src="../Images/image00859.jpeg" alt="image with no caption" hisrc="figs/web/248fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00363a"></a><div class="mediaobject"><a id="med_id00363"></a><img src="../Images/image00860.jpeg" alt="image with no caption" hisrc="figs/web/248fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="adapter_pattern_explained">The Adapter Pattern explained</h2></div></div></div><p><a id="iddle1016" class="indexterm"></a>Now that we have an idea of what an Adapter is, let’s step back and look at all the pieces again.</p><div class="informalfigure"><a id="med_id00364a"></a><div class="mediaobject"><a id="med_id00364"></a><img src="../Images/image00861.jpeg" alt="image with no caption" hisrc="figs/web/249fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="hereapostrophes_how_the_client_uses_the">Here’s how the Client uses the Adapter</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① The client makes a request to the adapter by calling a method on it using the target interface.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② The adapter translates the request into one or more calls on the adaptee using the adaptee interface.</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ The client receives the results of the call and never knows there is an adapter doing the translation.</strong></span></li></ul></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note03"></a>Note</h3><p>Note that the Client and Adaptee are decoupled – neither knows about the other.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00070"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1037" class="indexterm"></a><a id="iddle1108" class="indexterm"></a><a id="iddle1568" class="indexterm"></a><a id="iddle2008" class="indexterm"></a><a id="iddle2025" class="indexterm"></a><a id="iddle2079" class="indexterm"></a><a id="iddle2313" class="indexterm"></a><a id="iddle2482" class="indexterm"></a><a id="iddle2530" class="indexterm"></a>Let’s say we also need an Adapter that converts a Duck to a Turkey. Let’s call it DuckAdapter. Write that class:</p><p>How did you handle the fly method (after all, we know ducks fly longer than turkeys)? Check the answers at the end of the chapter for our solution. Did you think of a better way?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00071"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa1qe1"></a><a id="ch07qa1q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: How much “adapting” does an adapter need to do? It seems like if I need to implement a large target interface, I could have a LOT of work on my hands?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa1q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> You certainly could. The job of implementing an adapter really is proportional to the size of the interface you need to support as your target interface. Think about your options, however. You could rework all your client-side calls to the interface, which would result in a lot of investigative work and code changes. Or, you can cleanly provide one class that encapsulates all the changes in one class.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa1qe2"></a><a id="ch07qa1q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Does an adapter always wrap one and only one class?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa1q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> The Adapter Pattern’s role is to convert one interface into another. While most examples of the adapter pattern show an adapter wrapping one adaptee, we both know the world is often a bit more messy. So, you may well have situations where an adapter holds two or more adaptees that are needed to implement the target interface.</div><div>This relates to another pattern called the Facade Pattern; people often confuse the two. Remind us to revisit this point when we talk about facades later in this chapter.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa1qe3"></a><a id="ch07qa1q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: What if I have old and new parts of my system, and the old parts expect the old vendor interface, but we’ve already written the new parts to use the new vendor interface? It is going to get confusing using an adapter here and the unwrapped interface there. Wouldn’t I be better off just writing my older code and forgetting the adapter?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa1q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Not necessarily. One thing you can do is create a Two Way Adapter that supports both interfaces. To create a Two Way Adapter, just implement both interfaces involved, so the adapter can act as an old interface or a new interface.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="adapter_pattern_defined">Adapter Pattern defined</h2></div></div></div><p><a id="iddle1021" class="indexterm"></a><a id="iddle1110" class="indexterm"></a>Enough ducks, turkeys, and AC power adapters; let’s get real and look at the official definition of the Adapter Pattern:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note04"></a>Note</h3><p><span class="strong"><strong>The Adapter Pattern</strong></span> converts the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Now, we know this pattern allows us to use a client with an incompatible interface by creating an Adapter that does the conversion. This acts to decouple the client from the implemented interface, and if we expect the interface to change over time, the adapter encapsulates that change so that the client doesn’t have to be modified each time it needs to operate against a different interface.</p><p>We’ve taken a look at the runtime behavior of the pattern; let’s take a look at its class diagram as well:</p><div class="informalfigure"><a id="med_id00365a"></a><div class="mediaobject"><a id="med_id00365"></a><img src="../Images/image00862.jpeg" alt="image with no caption" hisrc="figs/web/251fig01.png.jpg"/></div></div><p>The Adapter Pattern is full of good OO design principles: check out the use of object composition to wrap the adaptee with an altered interface. This approach has the added advantage that we can use an adapter with any subclass of the adaptee.</p><p>Also check out how the pattern binds the client to an interface, not an implementation; we could use several adapters, each converting a different backend set of classes. Or, we could add new implementations after the fact, as long as they adhere to the Target interface.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="object_and_class_adapters">Object and class adapters</h2></div></div></div><p><a id="iddle1032" class="indexterm"></a><a id="iddle1039" class="indexterm"></a><a id="iddle1104" class="indexterm"></a><a id="iddle1787" class="indexterm"></a><a id="iddle2002" class="indexterm"></a><a id="iddle2011" class="indexterm"></a><a id="iddle2081" class="indexterm"></a>Now despite having defined the pattern, we haven’t told you the whole story yet. There are actually <span class="emphasis"><em>two</em></span> kinds of adapters: <span class="emphasis"><em>object</em></span> adapters and <span class="emphasis"><em>class</em></span> adapters. This chapter has covered object adapters and the class diagram on the previous page is a diagram of an object adapter.</p><p>So what’s a <span class="emphasis"><em>class</em></span> adapter and why haven’t we told you about it? Because you need multiple inheritance to implement it, which isn’t possible in Java. But, that doesn’t mean you might not encounter a need for class adapters down the road when using your favorite multiple inheritance language! Let’s look at the class diagram for multiple inheritance.</p><div class="informalfigure"><a id="med_id00366a"></a><div class="mediaobject"><a id="med_id00366"></a><img src="../Images/image00863.jpeg" alt="image with no caption" hisrc="figs/web/252fig01.png.jpg"/></div></div><p>Look familiar? That’s right — the only difference is that with class adapter we subclass the Target and the Adaptee, while with object adapter we use composition to pass requests to an Adaptee.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note05"></a>Brain Power</h3><p>Object adapters and class adapters use two different means of adapting the adaptee (composition versus inheritance). How do these implementation differences affect the flexibility of the adapter?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="duck_magnets"></a><h3 class="title">Duck Magnets</h3><p><a id="iddle1455" class="indexterm"></a><a id="iddle1509" class="indexterm"></a><a id="iddle1519" class="indexterm"></a>Your job is to take the duck and turkey magnets and drag them over the part of the diagram that describes the role played by that bird, in our earlier example. (Try not to flip back through the pages.) Then add your own annotations to describe how it works.</p><p><span class="strong"><strong>Class Adapter</strong></span></p><div class="informalfigure"><a id="med_id00367a"></a><div class="mediaobject"><a id="med_id00367"></a><img src="../Images/image00864.jpeg" alt="image with no caption" hisrc="figs/web/253fig01.png.jpg"/></div></div><p><span class="strong"><strong>Object Adapter</strong></span></p><div class="informalfigure"><a id="med_id00368a"></a><div class="mediaobject"><a id="med_id00368"></a><img src="../Images/image00865.jpeg" alt="image with no caption" hisrc="figs/web/253fig02.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00369a"></a><div class="mediaobject"><a id="med_id00369"></a><img src="../Images/image00866.jpeg" alt="image with no caption" hisrc="figs/web/253fig03.png.jpg"/><div class="caption"><p>Drag these onto the class diagram, to show which part of the diagram represents the Duck and which represents the Turkey.</p></div></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="duck_magnets_answer"></a><h3 class="title">Duck Magnets Answer</h3><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note06"></a>Note</h3><p>Note: the class adapter uses multiple inheritance, so you can’t do it in Java...</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><span class="strong"><strong>Class Adapter</strong></span></p><div class="informalfigure"><a id="med_id00370a"></a><div class="mediaobject"><a id="med_id00370"></a><img src="../Images/image00867.jpeg" alt="image with no caption" hisrc="figs/web/254fig01.png.jpg"/></div></div><p><span class="strong"><strong>Object Adapter</strong></span></p><div class="informalfigure"><a id="med_id00371a"></a><div class="mediaobject"><a id="med_id00371"></a><img src="../Images/image00868.jpeg" alt="image with no caption" hisrc="figs/web/254fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="fireside_chats-id00072"></a><h3 class="title"><code class="literal">Fireside Chats</code></h3><p><a id="iddle1254" class="indexterm"></a>Tonight’s talk: <span class="strong"><strong>The Object Adapter and Class Adapter meet face to face.</strong></span></p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Object Adapter:</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Class Adapter:</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Because I use composition I’ve got a leg up. I can not only adapt an adaptee class, but any of its subclasses.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>That’s true, I do have trouble with that because I am committed to one specific adaptee class, but I have a huge advantage because I don’t have to reimplement my entire adaptee. I can also override the behavior of my adaptee if I need to because I’m just subclassing.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>In my part of the world, we like to use composition over inheritance; you may be saving a few lines of code, but all I’m doing is writing a little code to delegate to the adaptee. We like to keep things flexible.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Flexible maybe, but efficient? No. Using a class adapter there is just one of me, not an adapter and an adaptee.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>You’re worried about one little object? You might be able to quickly override a method, but any behavior I add to my adapter code works with my adaptee class <span class="emphasis"><em>and</em></span> all its subclasses.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Yeah, but what if a subclass of adaptee adds some new behavior. Then what?</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Hey, come on, cut me a break, I just need to compose with the subclass to make that work.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Sounds messy...</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>You wanna see messy? Look in the mirror!</p></td><td> </td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="real-world_adapters">Real-world adapters</h2></div></div></div><p><a id="iddle1034" class="indexterm"></a><a id="iddle1496" class="indexterm"></a><a id="iddle1498" class="indexterm"></a><a id="iddle1863" class="indexterm"></a>Let’s take a look at the use of a simple Adapter in the real world (something more serious than Ducks at least)...</p><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="old-world_enumerators">Old-world Enumerators</h3></div></div></div><p>If you’ve been around Java for a while you probably remember that the early collection types (Vector, Stack, Hashtable, and a few others) implement a method, elements(), which returns an Enumeration. The Enumeration interface allows you to step through the elements of a collection without knowing the specifics of how they are managed in the collection.</p><div class="informalfigure"><a id="med_id00372a"></a><div class="mediaobject"><a id="med_id00372"></a><img src="../Images/image00869.jpeg" alt="image with no caption" hisrc="figs/web/256fig01.png.jpg"/></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="new-world_iterators">New-world Iterators</h3></div></div></div><p>The newer Collection classes use an Iterator interface that, like Enumeration, allows you to iterate through a set of items in a collection, but also adds the ability to remove items.</p><div class="informalfigure"><a id="med_id00373a"></a><div class="mediaobject"><a id="med_id00373"></a><img src="../Images/image00870.jpeg" alt="image with no caption" hisrc="figs/web/256fig02.png.jpg"/></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="and_todayhellip">And today...</h3></div></div></div><p>We are often faced with legacy code that exposes the Enumeration interface, yet we’d like for our new code to use only Iterators. It looks like we need to build an adapter.</p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="adapting_an_enumeration_to_an_iterator">Adapting an Enumeration to an Iterator</h2></div></div></div><p><a id="iddle1017" class="indexterm"></a><a id="iddle1022" class="indexterm"></a><a id="iddle1497" class="indexterm"></a><a id="iddle1842" class="indexterm"></a>First we’ll look at the two interfaces to figure out how the methods map from one to the other. In other words, we’ll figure out what to call on the adaptee when the client invokes a method on the target.</p><div class="informalfigure"><a id="med_id00374a"></a><div class="mediaobject"><a id="med_id00374"></a><img src="../Images/image00871.jpeg" alt="image with no caption" hisrc="figs/web/257fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="designing_the_adapter">Designing the Adapter</h3></div></div></div><p>Here’s what the classes should look like: we need an adapter that implements the Target interface and that is composed with an adaptee. The hasNext() and next() methods are going to be straightforward to map from target to adaptee: we just pass them right through. But what do you do about remove()? Think about it for a moment (and we’ll deal with it on the next page). For now, here’s the class diagram:</p><div class="informalfigure"><a id="med_id00375a"></a><div class="mediaobject"><a id="med_id00375"></a><img src="../Images/image00872.jpeg" alt="image with no caption" hisrc="figs/web/257fig02.png.jpg"/></div></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="dealing_with_the_removeleft_parenthesisr">Dealing with the remove() method</h3></div></div></div><p><a id="iddle1019" class="indexterm"></a><a id="iddle1035" class="indexterm"></a><a id="iddle1500" class="indexterm"></a><a id="iddle1853" class="indexterm"></a><a id="iddle2232" class="indexterm"></a>Well, we know Enumeration just doesn’t support remove. It’s a “read only” interface. There’s no way to implement a fully functioning remove() method on the adapter. The best we can do is throw a runtime exception. Luckily, the designers of the Iterator interface foresaw this need and defined the remove() method so that it supports an UnsupportedOperationException.</p><p>This is a case where the adapter isn’t perfect; clients will have to watch out for potential exceptions, but as long as the client is careful and the adapter is well documented this is a perfectly reasonable solution.</p></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="writing_the_enumerationiterator_adapter">Writing the EnumerationIterator adapter</h3></div></div></div><p>Here’s simple but effective code for all those legacy classes still producing Enumerations:</p><div class="informalfigure"><a id="med_id00376a"></a><div class="mediaobject"><a id="med_id00376"></a><img src="../Images/image00873.jpeg" alt="image with no caption" hisrc="figs/web/258fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="exercise-id00073"></a><h3 class="title">Exercise</h3><p><a id="iddle1501" class="indexterm"></a><a id="iddle1590" class="indexterm"></a><a id="iddle1854" class="indexterm"></a>While Java has gone in the direction of the Iterator, there is nevertheless a lot of legacy client code that depends on the Enumeration interface, so an Adapter that converts an Iterator to an Enumeration is also quite useful.</p><p>Write an Adapter that adapts an Iterator to an Enumeration. You can test your code by adapting an ArrayList. The ArrayList class supports the Iterator interface but doesn’t support Enumerations (well, not yet anyway).</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note07"></a>Brain Power</h3><p>Some AC adapters do more than just change the interface — they add other features like surge protection, indicator lights, and other bells and whistles.</p><p>If you were going to implement these kinds of features, what pattern would you use?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="fireside_chats-id00074"></a><h3 class="title"><code class="literal">Fireside Chats</code></h3><p><a id="iddle1020" class="indexterm"></a><a id="iddle1343" class="indexterm"></a><a id="iddle2026" class="indexterm"></a><a id="iddle2531" class="indexterm"></a>Tonight’s talk: <span class="strong"><strong>The Decorator Pattern and the Adapter Pattern discuss their differences.</strong></span></p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Decorator:</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Adapter:</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>I’m important. My job is all about <span class="emphasis"><em>responsibility</em></span> — you know that when a Decorator is involved there’s going to be some new responsibilities or behaviors added to your design.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>You guys want all the glory while us adapters are down in the trenches doing the dirty work: converting interfaces. Our jobs may not be glamorous, but our clients sure do appreciate us making their lives simpler.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>That may be true, but don’t think we don’t work hard. When we have to decorate a big interface, whoa, that can take a lot of code.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Try being an adapter when you’ve got to bring several classes together to provide the interface your client is expecting. Now that’s tough. But we have a saying: “an uncoupled client is a happy client.”</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Cute. Don’t think we get all the glory; sometimes I’m just one decorator that is being wrapped by who knows how many other decorators. When a method call gets delegated to you, you have no idea how many other decorators have already dealt with it and you don’t know that you’ll ever get noticed for your efforts servicing the request.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Hey, if adapters are doing their job, our clients never even know we’re there. It can be a thankless job.</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>But, the great thing about us adapters is that we allow clients to make use of new libraries and subsets without changing <span class="emphasis"><em>any</em></span> code; they just rely on us to do the conversion for them. Hey, it’s a niche, but we’re good at it.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Well, us decorators do that as well, only we allow <span class="emphasis"><em>new behavior</em></span> to be added to classes without altering existing code. I still say that adapters are just fancy decorators — I mean, just like us, you wrap an object.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>No, no, no, not at all. We <span class="emphasis"><em>always</em></span> convert the interface of what we wrap; you <span class="emphasis"><em>never</em></span> do. I’d say a decorator is like an adapter; it is just that you don’t change the interface!</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Uh, no. Our job in life is to extend the behaviors or responsibilities of the objects we wrap; we aren’t a <span class="emphasis"><em>simple pass through</em></span>.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Hey, who are you calling a simple pass through? Come on down and we’ll see how long <span class="emphasis"><em>you</em></span> last converting a few interfaces!</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Maybe we should agree to disagree. We seem to look somewhat similar on paper, but clearly we are <span class="emphasis"><em>miles</em></span> apart in our <span class="emphasis"><em>intent</em></span>.</p></td><td style="border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="border-right: 0.5pt solid ; "> </td><td style="vertical-align: top; "><p>Oh yeah, I’m with you there.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="and_now_for_something_differenthellip">And now for something different...</h2></div></div></div><p><a id="iddle1028" class="indexterm"></a><a id="iddle1350" class="indexterm"></a><a id="iddle1578" class="indexterm"></a><a id="iddle1595" class="indexterm"></a><a id="iddle1612" class="indexterm"></a><span class="strong"><strong>There’s another pattern in this chapter.</strong></span></p><p>You’ve seen how the Adapter Pattern converts the interface of a class into one that a client is expecting. You also know we achieve this in Java by wrapping the object that has an incompatible interface with an object that implements the correct one.</p><p>We’re going to look at a pattern now that alters an interface, but for a different reason: to simplify the interface. It’s aptly named the Facade Pattern because this pattern hides all the complexity of one or more classes behind a clean, well-lit facade.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark-id00075"></a><h3 class="title">Who Does What?</h3><p>Match each pattern with its intent:</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Pattern</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Intent</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Decorator</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Converts one interface to another</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Adapter</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Doesn’t alter the interface, but adds responsibility</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>Facade</p></td><td style="vertical-align: top; "><p>Makes an interface simpler</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="home_sweet_home_theater">Home Sweet Home Theater</h2></div></div></div><p><a id="iddle1599" class="indexterm"></a><a id="iddle1765" class="indexterm"></a>Before we dive into the details of the Facade Pattern, let’s take a look at a growing national obsession: building your own home theater.</p><p>You’ve done your research and you’ve assembled a killer system complete with a DVD player, a projection video system, an automated screen, surround sound, and even a popcorn popper.</p><div class="informalfigure"><a id="med_id00377a"></a><div class="mediaobject"><a id="med_id00377"></a><img src="../Images/image00874.jpeg" alt="image with no caption" hisrc="figs/web/263fig01.png.jpg"/></div></div><p>Check out all the components you’ve put together:</p><div class="informalfigure"><a id="med_id00378a"></a><div class="mediaobject"><a id="med_id00378"></a><img src="../Images/image00875.jpeg" alt="image with no caption" hisrc="figs/web/263fig02.png.jpg"/></div></div><p>You’ve spent weeks running wire, mounting the projector, making all the connections, and fine tuning. Now it’s time to put it all in motion and enjoy a movie...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="watching_a_movie_left_parenthesisthe_har">Watching a movie (the hard way)</h2></div></div></div><p><span class="strong"><strong>Pick out a DVD, relax, and get ready for movie magic. Oh, there’s just one thing — to watch the movie, you need to perform a few tasks:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Turn on the popcorn popper</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Start the popper popping</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Dim the lights</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ Put the screen down</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑤ Turn the projector on</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑥ Set the projector input to DVD</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑦ Put the projector on wide-screen mode</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑧ Turn the sound amplifier on</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑨ Set the amplifier to DVD input</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑩ Set the amplifier to surround sound</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑪ Set the amplifier volume to medium (5)</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑫ Turn the DVD player on</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑬ Start the DVD player playing</strong></span></li></ul></div><div class="informalfigure"><a id="med_id00379a"></a><div class="mediaobject"><a id="med_id00379"></a><img src="../Images/image00876.jpeg" alt="image with no caption" hisrc="figs/web/264fig01.png.jpg"/></div></div><p><span class="strong"><strong>Let’s check out those same tasks in terms of the classes and the method calls needed to perform them:</strong></span></p><div class="informalfigure"><a id="med_id00380a"></a><div class="mediaobject"><a id="med_id00380"></a><img src="../Images/image00877.jpeg" alt="image with no caption" hisrc="figs/web/265fig01.png.jpg"/></div></div><p><span class="strong"><strong>But there’s more...</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">When the movie is over, how do you turn everything off? Wouldn’t you have to do all of this over again, in reverse?</li><li class="listitem">Wouldn’t it be as complex to listen to a CD or the radio?</li><li class="listitem">If you decide to upgrade your system, you’re probably going to have to learn a slightly different procedure.</li></ul></div><p>So what to do? The complexity of using your home theater is becoming apparent!</p><p>Let’s see how the Facade Pattern can get us out of this mess so we can enjoy the movie...</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="lightscomma_cameracomma_facadeexclamatio">Lights, Camera, Facade!</h2></div></div></div><p><a id="iddle1601" class="indexterm"></a><a id="iddle1770" class="indexterm"></a>A Facade is just what you need: with the Facade Pattern you can take a complex subsystem and make it easier to use by implementing a Facade class that provides one, more reasonable interface. Don’t worry; if you need the power of the complex subsystem, it’s still there for you to use, but if all you need is a straightforward interface, the Facade is there for you.</p><p>Let’s take a look at how the Facade operates:</p><div class="informalfigure"><a id="med_id00381a"></a><div class="mediaobject"><a id="med_id00381"></a><img src="../Images/image00878.jpeg" alt="image with no caption" hisrc="figs/web/266fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00076"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa2qe1"></a><a id="ch07qa2q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle1030" class="indexterm"></a><a id="iddle1495" class="indexterm"></a><a id="iddle1596" class="indexterm"></a><a id="iddle1597" class="indexterm"></a><a id="iddle1598" class="indexterm"></a><a id="iddle2027" class="indexterm"></a><a id="iddle2442" class="indexterm"></a><a id="iddle2532" class="indexterm"></a><span class="strong"><strong>Q: If the facade encapsulates the subsystem classes, how does a client that needs lower-level functionality gain access to them?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa2q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Facades don’t “encapsulate” the subsystem classes; they merely provide a simplified interface to their functionality. The subsystem classes still remain available for direct use by clients that need to use more specific interfaces. This is a nice property of the Facade Pattern: it provides a simplified interface while still exposing the full functionality of the system to those who may need it.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa2qe2"></a><a id="ch07qa2q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Does the facade add any functionality or does it just pass through each request to the subsystem?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa2q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> A facade is free to add its own “smarts” in addition to making use of the subsystem. For instance, while our home theater facade doesn’t implement any new behavior, it is smart enough to know that the popcorn popper has to be turned on before it can pop (as well as the details of how to turn on and stage a movie showing).</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa2qe3"></a><a id="ch07qa2q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Does each subsystem have only one facade?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa2q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Not necessarily. The pattern certainly allows for any number of facades to be created for a given subsystem.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa2qe4"></a><a id="ch07qa2q4"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: What is the benefit of the facade other than the fact that I now have a simpler interface?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa2q4a4"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> The Facade Pattern also allows you to decouple your client implementation from any one subsystem. Let’s say that you get a big raise and decide to upgrade your home theater to all new components that have different interfaces. Well, if you coded your client to the facade rather than the subsystem, your client code doesn’t need to change, just the facade (and hopefully the manufacturer is supplying that!).</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa2qe5"></a><a id="ch07qa2q5"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: So the way to tell the difference between the Adapter Pattern and the Facade Pattern is that the adapter wraps one class and the facade may represent many classes?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa2q5a5"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> No! Remember, the Adapter Pattern changes the interface of one or more classes into one interface that a client is expecting. While most textbook examples show the adapter adapting one class, you may need to adapt many classes to provide the interface a client is coded to. Likewise, a Facade may provide a simplified interface to a single class with a very complex interface.</div><div>The difference between the two is not in terms of how many classes they “wrap,” it is in their intent. The intent of the Adapter Pattern is to alter an interface so that it matches one a client is expecting. The intent of the Facade Pattern is to provide a simplified interface to a subsystem.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>A facade not only simplifies an interface, it decouples a client from a subsystem of components.</strong></span></div><div><span class="strong"><strong>Facades and adapters may wrap multiple classes, but a facade’s intent is to simplify, while an adapter’s is to convert the interface to something different.</strong></span></div></blockquote></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="constructing_your_home_theater_facade">Constructing your home theater facade</h2></div></div></div><p><a id="iddle1600" class="indexterm"></a><a id="iddle1766" class="indexterm"></a>Let’s step through the construction of the HomeTheaterFacade. The first step is to use composition so that the facade has access to all the components of the subsystem:</p><div class="informalfigure"><a id="med_id00382a"></a><div class="mediaobject"><a id="med_id00382"></a><img src="../Images/image00879.jpeg" alt="image with no caption" hisrc="figs/web/269fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_simplified_interface">Implementing the simplified interface</h2></div></div></div><p><a id="iddle1602" class="indexterm"></a><a id="iddle1767" class="indexterm"></a>Now it’s time to bring the components of the subsystem together into a unified interface. Let’s implement the watchMovie() and endMovie() methods:</p><div class="informalfigure"><a id="med_id00383a"></a><div class="mediaobject"><a id="med_id00383"></a><img src="../Images/image00880.jpeg" alt="image with no caption" hisrc="figs/web/270fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note08"></a>Brain Power</h3><p>Think about the facades you’ve encountered in the Java API. Where would you like to have a few new ones?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="time_to_watch_a_movie_left_parenthesisth">Time to watch a movie (the easy way)</h2></div></div></div><p><a id="iddle1603" class="indexterm"></a><a id="iddle1769" class="indexterm"></a>It’s SHOWTIME!</p><div class="informalfigure"><a id="med_id00384a"></a><div class="mediaobject"><a id="med_id00384"></a><img src="../Images/image00881.jpeg" alt="image with no caption" hisrc="figs/web/common13.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00385a"></a><div class="mediaobject"><a id="med_id00385"></a><img src="../Images/image00882.jpeg" alt="image with no caption" hisrc="figs/web/271fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00386a"></a><div class="mediaobject"><a id="med_id00386"></a><img src="../Images/image00883.jpeg" alt="image with no caption" hisrc="figs/web/271fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="facade_pattern_defined">Facade Pattern defined</h2></div></div></div><p><a id="iddle1604" class="indexterm"></a><a id="iddle1606" class="indexterm"></a>To use the Facade Pattern, we create a class that simplifies and unifies a set of more complex classes that belong to some subsystem. Unlike a lot of patterns, Facade is fairly straightforward; there are no mind-bending abstractions to get your head around. But that doesn’t make it any less powerful: the Facade Pattern allows us to avoid tight coupling between clients and subsystems, and, as you will see shortly, also helps us adhere to a new object-oriented principle.</p><p>Before we introduce that new principle, let’s take a look at the official definition of the pattern:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note09"></a>Note</h3><p><span class="strong"><strong>The Facade Pattern</strong></span> provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>There isn’t a lot here that you don’t already know, but one of the most important things to remember about a pattern is its intent. This definition tells us loud and clear that the purpose of the facade is to make a subsystem easier to use through a simplified interface. You can see this in the pattern’s class diagram:</p><div class="informalfigure"><a id="med_id00387a"></a><div class="mediaobject"><a id="med_id00387"></a><img src="../Images/image00884.jpeg" alt="image with no caption" hisrc="figs/web/272fig01.png.jpg"/></div></div><p>That’s it; you’ve got another pattern under your belt! Now, it’s time for that new OO principle. Watch out, this one can challenge some assumptions!</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="principle_of_least_knowledge">The Principle of Least Knowledge</h2></div></div></div><p><a id="iddle1224" class="indexterm"></a><a id="iddle1418" class="indexterm"></a><a id="iddle1912" class="indexterm"></a><a id="iddle2018" class="indexterm"></a><a id="iddle2137" class="indexterm"></a>The Principle of Least Knowledge guides us to reduce the interactions between objects to just a few close “friends.” The principle is usually stated as:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note10"></a>Design Principle</h3><p><span class="emphasis"><em>Principle of Least Knowledge: talk only to your immediate friends.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>But what does this mean in real terms? It means when you are designing a system, for any object, be careful of the number of classes it interacts with and also how it comes to interact with those classes.</p><p>This principle prevents us from creating designs that have a large number of classes coupled together so that changes in one part of the system cascade to other parts. When you build a lot of dependencies between many classes, you are building a fragile system that will be costly to maintain and complex for others to understand.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note11"></a>Brain Power</h3><p>How many classes is this code coupled to?</p><a id="pro_id00028"></a><pre class="programlisting"><span class="strong"><strong>public float getTemp() {</strong></span>
    <span class="strong"><strong>return station.getThermometer().getTemperature();</strong></span>
<span class="strong"><strong>}</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="how_not_to_win_friends_and_influence_obj">How NOT to Win Friends and Influence Objects</h2></div></div></div><p>Okay, but how do you keep from doing this? The principle provides some guidelines: take any object; now from any method in that object, the principle tells us that we should only invoke methods that belong to:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The object itself</li><li class="listitem">Objects passed in as a parameter to the method</li><li class="listitem">Any object the method creates or instantiates<div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note11a"></a>Note</h3><p>Notice that these guidelines tell us not to call methods on objects that were returned from calling other methods!!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem">Any components of the object<div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note11b"></a>Note</h3><p>Think of a “component” as any object that is referenced by an instance variable. In other words, think of this as a HAS-A relationship.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li></ul></div><p>This sounds kind of stringent doesn’t it? What’s the harm in calling the method of an object we get back from another call? Well, if we were to do that, then we’d be making a request of another object’s subpart (and increasing the number of objects we directly know). In such cases, the principle forces us to ask the object to make the request for us; that way we don’t have to know about its component objects (and we keep our circle of friends small). For example:</p><div class="informalfigure"><a id="med_id00388a"></a><div class="mediaobject"><a id="med_id00388"></a><img src="../Images/image00885.jpeg" alt="image with no caption" hisrc="figs/web/274fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="keeping_your_method_calls_in_boundshelli">Keeping your method calls in bounds...</h3></div></div></div><p><a id="iddle1879" class="indexterm"></a>Here’s a Car class that demonstrates all the ways you can call methods and still adhere to the Principle of Least Knowledge:</p><div class="informalfigure"><a id="med_id00389a"></a><div class="mediaobject"><a id="med_id00389"></a><img src="../Images/image00886.jpeg" alt="image with no caption" hisrc="figs/web/275fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00077"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa3qe1"></a><a id="ch07qa3q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: There is another principle called the Law of Demeter; how are they related?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa3q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> The two are one and the same and you’ll encounter these terms being used interchangeably. We prefer to use the Principle of Least Knowledge for a couple of reasons: (1) the name is more intuitive and (2) the use of the word “Law” implies we always have to apply this principle. In fact, no principle is a law, all principles should be used when and where they are helpful. All design involves tradeoffs (abstractions versus speed, space versus time, and so on) and while principles provide guidance, all factors should be taken into account before applying them.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa3qe2"></a><a id="ch07qa3q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Are there any disadvantages to applying the Principle of Least Knowledge?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa3q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Yes; while the principle reduces the dependencies between objects and studies have shown this reduces software maintenance, it is also the case that applying this principle results in more “wrapper” classes being written to handle method calls to other components. This can result in increased complexity and development time as well as decreased runtime performance.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00078"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1541" class="indexterm"></a><a id="iddle1768" class="indexterm"></a><a id="iddle2283" class="indexterm"></a>Do either of these classes violate the Principle of Least Knowledge? Why or why not?</p><div class="informalfigure"><a id="med_id00390a"></a><div class="mediaobject"><a id="med_id00390"></a><img src="../Images/image00887.jpeg" alt="image with no caption" hisrc="figs/web/276fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch07note12"></a>Brain Power</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch07qa4qe1"></a><a id="ch07qa4q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div>Can you think of a common use of Java that violates the Principle of Least Knowledge?</div><div>Should you care?</div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch07qa4q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div>Answer: How about System.out.println()?</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="facade_and_the_principle_of_least_knowle">The Facade and the Principle of Least Knowledge</h2></div></div></div><div class="informalfigure"><a id="med_id00391a"></a><div class="mediaobject"><a id="med_id00391"></a><img src="../Images/image00888.jpeg" alt="image with no caption" hisrc="figs/web/277fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00079">Tools for your Design Toolbox</h2></div></div></div><p><a id="iddle1614" class="indexterm"></a>Your toolbox is starting to get heavy! In this chapter we’ve added a couple of patterns that allow us to alter interfaces and reduce coupling between clients and the systems they use.</p><div class="informalfigure"><a id="med_id00392a"></a><div class="mediaobject"><a id="med_id00392"></a><img src="../Images/image00889.jpeg" alt="image with no caption" hisrc="figs/web/278fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00080"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">When you need to use an existing class and its interface is not the one you need, use an adapter.</li><li class="listitem">When you need to simplify and unify a large interface or complex set of interfaces, use a facade.</li><li class="listitem">An adapter changes an interface into one a client expects.</li><li class="listitem">A facade decouples a client from a complex subsystem.</li><li class="listitem">Implementing an adapter may require little work or a great deal of work depending on the size and complexity of the target interface.</li><li class="listitem">Implementing a facade requires that we compose the facade with its subsystem and use delegation to perform the work of the facade.</li><li class="listitem">There are two forms of the Adapter Pattern: object and class adapters. Class adapters require multiple inheritance.</li><li class="listitem">You can implement more than one facade for a subsystem.</li><li class="listitem">An adapter wraps an object to change its interface, a decorator wraps an object to add new behaviors and responsibilities, and a facade “wraps” a set of objects to simplify.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword-id00081"></a><h3 class="title">Design Patterns Crossword</h3><p>Yes, it’s another crossword. All of the solution words are from this chapter.</p><div class="informalfigure"><a id="med_id00393a"></a><div class="mediaobject"><a id="med_id00393"></a><img src="../Images/image00890.gif" alt="image with no caption" hisrc="figs/web/279fig01.png"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Across</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Down</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>1. True or false? Adapters can wrap only one object.</p>
<p>5. An Adapter __________ an interface.</p>
<p>6. Movie we watched (five words).</p>
<p>10. If in Britain, you might need one of these (two words).</p>
<p>11. Adapter with two roles (two words).</p>
<p>14. Facade still ________ low-level access.</p>
<p>15. Ducks do it better than Turkeys.</p>
<p>16. Disadvantage of the Principle of Least Knowledge: too many __________.</p>
<p>17. A __________ simplifies an interface.</p>
<p>19. New American dream (two words).</p></td><td style="vertical-align: top; "><p>2. Decorator called Adapter this (three words).</p>
<p>3. One advantage of Facade.</p>
<p>4. Principle that wasn’t as easy as it sounded (two words).</p>
<p>7. A __________ adds new behavior.</p>
<p>8. Masquerading as a Duck.</p>
<p>9. Example that violates the Principle of Least Knowledge: System.out.__________.</p>
<p>12. No movie is complete without this.</p>
<p>13. Adapter client uses the __________ interface.</p>
<p>18. An Adapter and a Decorator can be said to ________ an object.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00082"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1109" class="indexterm"></a><a id="iddle1542" class="indexterm"></a><a id="iddle1569" class="indexterm"></a><a id="iddle2284" class="indexterm"></a><a id="iddle2314" class="indexterm"></a>Let’s say we also need an Adapter that converts a Duck to a Turkey. Let’s call it DuckAdapter. Here’s our solution:</p><div class="informalfigure"><a id="med_id00394a"></a><div class="mediaobject"><a id="med_id00394"></a><img src="../Images/image00891.jpeg" alt="image with no caption" hisrc="figs/web/280fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00083"></a><h3 class="title">Sharpen your pencil Solution</h3><p>Do either of these classes violate the Principle of Least Knowledge? Why or why not?</p><div class="informalfigure"><a id="med_id00395a"></a><div class="mediaobject"><a id="med_id00395"></a><img src="../Images/image00892.jpeg" alt="image with no caption" hisrc="figs/web/280fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="exercise_solution-id00084"></a><h3 class="title">Exercise Solution</h3><p><a id="iddle1029" class="indexterm"></a><a id="iddle1351" class="indexterm"></a><a id="iddle1502" class="indexterm"></a><a id="iddle1579" class="indexterm"></a><a id="iddle1591" class="indexterm"></a><a id="iddle1613" class="indexterm"></a><a id="iddle1855" class="indexterm"></a><a id="iddle2516" class="indexterm"></a>You’ve seen how to implement an adapter that adapts an Enumeration to an Iterator; now write an adapter that adapts an Iterator to an Enumeration.</p><div class="informalfigure"><a id="med_id00396a"></a><div class="mediaobject"><a id="med_id00396"></a><img src="../Images/image00893.jpeg" alt="image with no caption" hisrc="figs/web/281fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="who_does_whatquestion_mark_solut-id00085"></a><h3 class="title">Who Does What? Solution</h3><p>Match each pattern with its intent:</p><div class="informalfigure"><a id="med_id00397a"></a><div class="mediaobject"><a id="med_id00397"></a><img src="../Images/image00894.jpeg" alt="image with no caption" hisrc="figs/web/281fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword_soluti-id00086"></a><h3 class="title">Design Patterns Crossword Solution</h3><div class="informalfigure"><a id="med_id00398a"></a><div class="mediaobject"><a id="med_id00398"></a><img src="../Images/image00895.gif" alt="image with no caption" hisrc="figs/web/282fig01.png"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>