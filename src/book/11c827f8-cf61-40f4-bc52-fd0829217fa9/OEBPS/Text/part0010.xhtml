<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 3. The Decorator Pattern: Decorating Objects</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="ch02.html"/><link rel="next" href="ch04.html"/></head><body><section class="chapter" epub:type="chapter" id="decorator_pattern_decorating_objects"><div class="titlepage" id="aid-9H5K2"><div><div><h2 class="title">Chapter 3. The Decorator Pattern: Decorating Objects</h2></div></div></div><div class="informalfigure"><a id="med_id00122a"></a><div class="mediaobject"><a id="med_id00122"></a><img src="../Images/image00621.jpeg" alt="image with no caption" hisrc="figs/web/081fig01.png.jpg"/></div></div><p><span class="strong"><strong>Just call this chapter “Design Eye for the Inheritance Guy.”</strong></span> We’ll re-examine the typical overuse of inheritance and you’ll learn how to decorate your classes at runtime using a form of object composition. Why? Once you know the techniques of decorating, you’ll be able to give your (or someone else’s) objects new responsibilities <span class="emphasis"><em>without making any code changes to the underlying classes.</em></span></p><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="welcome_to_starbuzz_coffee">Welcome to Starbuzz Coffee</h2></div></div></div><div class="informalfigure"><a id="med_id00123a"></a><div class="mediaobject"><a id="med_id00123"></a><img src="../Images/image00622.jpeg" alt="image with no caption" hisrc="figs/web/082fig01.png.jpg"/></div></div><p><a id="iddle1355" class="indexterm"></a><a id="iddle2362" class="indexterm"></a><span class="strong"><strong>Starbuzz Coffee has made a name for itself as the fastest growing coffee shop around. If you’ve seen one on your local corner, look across the street; you’ll see another one.</strong></span></p><p><span class="strong"><strong>Because they’ve grown so quickly, they’re scrambling to update their ordering systems to match their beverage offerings.</strong></span></p><p><span class="strong"><strong>When they first went into business they designed their classes like this...</strong></span></p><div class="informalfigure"><a id="med_id00124a"></a><div class="mediaobject"><a id="med_id00124"></a><img src="../Images/image00623.jpeg" alt="image with no caption" hisrc="figs/web/082fig02.png.jpg"/></div></div><p><a id="iddle1106" class="indexterm"></a><a id="iddle2431" class="indexterm"></a><span class="strong"><strong>In addition to your coffee, you can also ask for several condiments like steamed milk, soy, and mocha (otherwise known as chocolate), and have it all topped off with whipped milk. Starbuzz charges a bit for each of these, so they really need to get them built into their order system.</strong></span></p><p><span class="strong"><strong>Here’s their first attempt...</strong></span></p><div class="informalfigure"><a id="med_id00125a"></a><div class="mediaobject"><a id="med_id00125"></a><img src="../Images/image00624.jpeg" alt="image with no caption" hisrc="figs/web/083fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00126a"></a><div class="mediaobject"><a id="med_id00126"></a><img src="../Images/image00625.jpeg" alt="image with no caption" hisrc="figs/web/083fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch03note01"></a>Brain Power</h3><p><a id="iddle1130" class="indexterm"></a><a id="iddle1788" class="indexterm"></a>It’s pretty obvious that Starbuzz has created a maintenance nightmare for themselves. What happens when the price of milk goes up? What do they do when they add a new caramel topping?</p><p>Thinking beyond the maintenance problem, which of the design principles that we’ve covered so far are they violating?</p><p><span class="emphasis"><em>Hint: they’re violating two of them in a big way!</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00127a"></a><div class="mediaobject"><a id="med_id00127"></a><img src="../Images/image00626.jpeg" alt="image with no caption" hisrc="figs/web/084fig01.png.jpg"/></div></div><p>Well, let’s give it a try. Let’s start with the Beverage base class and add instance variables to represent whether or not each beverage has milk, soy, mocha, and whip...</p><div class="informalfigure"><a id="med_id00128a"></a><div class="mediaobject"><a id="med_id00128"></a><img src="../Images/image00627.jpeg" alt="image with no caption" hisrc="figs/web/084fig02.png.jpg"/></div></div><p><a id="iddle1574" class="indexterm"></a><a id="iddle2319" class="indexterm"></a>Now let’s add in the subclasses, one for each beverage on the menu:</p><div class="informalfigure"><a id="med_id00129a"></a><div class="mediaobject"><a id="med_id00129"></a><img src="../Images/image00628.jpeg" alt="image with no caption" hisrc="figs/web/085fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00015"></a><h3 class="title">Sharpen your pencil</h3><p>Write the cost() methods for the following classes (pseudo-Java is okay):</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><a id="pro_id00008"></a><pre class="programlisting"><span class="strong"><strong>public class Beverage {</strong></span>
  <span class="strong"><strong>public double cost() {</strong></span>










  <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre></td><td style="vertical-align: top; "><a id="pro_id00009"></a><pre class="programlisting"><span class="strong"><strong>public class DarkRoast extends Beverage {</strong></span>

  <span class="strong"><strong>public DarkRoast() {</strong></span>
    <span class="strong"><strong>description = "Most Excellent Dark Roast";</strong></span>
  <span class="strong"><strong>}</strong></span>

  <span class="strong"><strong>public double cost() {</strong></span>




  }
}</pre></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00130a"></a><div class="mediaobject"><a id="med_id00130"></a><img src="../Images/image00629.jpeg" alt="image with no caption" hisrc="figs/web/086fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00016"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1546" class="indexterm"></a><a id="iddle2288" class="indexterm"></a>What requirements or other factors might change that will impact this design?</p><div class="informalfigure"><a id="med_id00131a"></a><div class="mediaobject"><a id="med_id00131"></a><img src="../Images/image00630.jpeg" alt="image with no caption" hisrc="figs/web/086fig02.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="master_and_studenthellip-id00017"></a><h3 class="title">Master and Student...</h3><p><a id="iddle1250" class="indexterm"></a><a id="iddle1252" class="indexterm"></a><a id="iddle1368" class="indexterm"></a><a id="iddle1782" class="indexterm"></a><a id="iddle2238" class="indexterm"></a><span class="bolditalic">Master:</span> <span class="emphasis"><em>Grasshopper, it has been some time since our last meeting. Have you been deep in meditation on inheritance?</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>Yes, Master. While inheritance is powerful, I have learned that it doesn’t always lead to the most flexible or maintainable designs.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>Ah yes, you have made some progress. So, tell me, my student, how then will you achieve reuse if not through inheritance?</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>Master, I have learned there are ways of “inheriting” behavior at runtime through composition and delegation.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>Please, go on...</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>When I inherit behavior by subclassing, that behavior is set statically at compile time. In addition, all subclasses must inherit the same behavior. If however, I can extend an object’s behavior through composition, then I can do this dynamically at runtime.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>Very good, Grasshopper, you are beginning to see the power of composition.</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>Yes, it is possible for me to add multiple new responsibilities to objects through this technique, including responsibilities that were not even thought of by the designer of the superclass. And, I don’t have to touch their code!</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>What have you learned about the effect of composition on maintaining your code?</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>Well, that is what I was getting at. By dynamically composing objects, I can add new functionality by writing new code rather than altering existing code. Because I’m not changing existing code, the chances of introducing bugs or causing unintended side effects in pre-existing code are much reduced.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>Very good. Enough for today, Grasshopper. I would like for you to go and meditate further on this topic... Remember, code should be closed (to change) like the lotus flower in the evening, yet open (to extension) like the lotus flower in the morning.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="open-closed_principle">The Open-Closed Principle</h2></div></div></div><p><a id="iddle1074" class="indexterm"></a><a id="iddle1121" class="indexterm"></a><a id="iddle1415" class="indexterm"></a><a id="iddle2090" class="indexterm"></a><span class="strong"><strong>Grasshopper is on to one of the most important design principles:</strong></span></p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch03note02"></a>Design Principle</h3><p><span class="emphasis"><em>Classes should be open for extension, but closed for modification.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00132a"></a><div class="mediaobject"><a id="med_id00132"></a><img src="../Images/image00631.jpeg" alt="image with no caption" hisrc="figs/web/088fig01.png.jpg"/></div></div><p>Come on in; we’re <span class="emphasis"><em>open</em></span>. Feel free to extend our classes with any new behavior you like. If your needs or requirements change (and we know they will), just go ahead and make your own extensions.</p><div class="informalfigure"><a id="med_id00133a"></a><div class="mediaobject"><a id="med_id00133"></a><img src="../Images/image00632.jpeg" alt="image with no caption" hisrc="figs/web/088fig02.png.jpg"/></div></div><p>Sorry, we’re <span class="emphasis"><em>closed</em></span>. That’s right, we spent a lot of time getting this code correct and bug free, so we can’t let you alter the existing code. It must remain closed to modification. If you don’t like it, you can speak to the manager.</p><p><span class="strong"><strong>Our goal is to allow classes to be easily extended to incorporate new behavior without modifying existing code. What do we get if we accomplish this? Designs that are resilient to change and flexible enough to take on new functionality to meet changing requirements.</strong></span></p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00018"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch03qa1qe1"></a><a id="ch03qa1q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle2013" class="indexterm"></a><a id="iddle2084" class="indexterm"></a><span class="strong"><strong>Q: Open for extension and closed for modification? That sounds very contradictory. How can a design be both?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch03qa1q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> That’s a very good question. It certainly sounds contradictory at first. After all, the less modifiable something is, the harder it is to extend, right?</div><div>As it turns out, though, there are some clever OO techniques for allowing systems to be extended, even if we can’t change the underlying code. Think about the Observer Pattern (in <a class="xref" href="part0009.xhtml#aid-8IL22">Chapter 2</a>)... by adding new Observers, we can extend the Subject at any time, without adding code to the Subject. You’ll see quite a few more ways of extending behavior with other OO design techniques.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch03qa1qe2"></a><a id="ch03qa1q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Okay, I understand Observable, but how do I generally design something to be extensible, yet closed for modification?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch03qa1q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Many of the patterns give us time-tested designs that protect your code from being modified by supplying a means of extension. In this chapter you’ll see a good example of using the Decorator Pattern to follow the Open-Closed principle.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch03qa1qe3"></a><a id="ch03qa1q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: How can I make every part of my design follow the Open-Closed Principle?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch03qa1q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Usually, you can’t. Making OO design flexible and open to extension without the modification of existing code takes time and effort. In general, we don’t have the luxury of tying down every part of our designs (and it would probably be wasteful). Following the Open-Closed Principle usually introduces new levels of abstraction, which adds complexity to our code. You want to concentrate on those areas that are most likely to change in your designs and apply the principles there.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch03qa1qe4"></a><a id="ch03qa1q4"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: How do I know which areas of change are more important?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch03qa1q4a4"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> That is partly a matter of experience in designing OO systems and also a matter of knowing the domain you are working in. Looking at other examples will help you learn to identify areas of change in your own designs.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>While it may seem like a contradiction, there are techniques for allowing code to be extended without direct modification.</strong></span></div><div><span class="strong"><strong>Be careful when choosing the areas of code that need to be extended; applying the Open-Closed Principle EVERYWHERE is wasteful and unnecessary, and can lead to complex, hard-to-understand code.</strong></span></div></blockquote></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="meet_the_decorator_pattern">Meet the Decorator Pattern</h2></div></div></div><p><a id="iddle1341" class="indexterm"></a><a id="iddle2024" class="indexterm"></a><a id="iddle2529" class="indexterm"></a>Okay, we’ve seen that representing our beverage plus condiment pricing scheme with inheritance has not worked out very well — we get class explosions and rigid designs, or we add functionality to the base class that isn’t appropriate for some of the subclasses.</p><p>So, here’s what we’ll do instead: we’ll start with a beverage and “decorate” it with the condiments at runtime. For example, if the customer wants a Dark Roast with Mocha and Whip, then we’ll:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Take a DarkRoast object</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Decorate it with a Mocha object</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Decorate it with a Whip object</strong></span></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ Call the cost() method and rely on delegation to add on the condiment costs</strong></span></li></ul></div><p>Okay, but how do you “decorate” an object, and how does delegation come into this? A hint: think of decorator objects as “wrappers.” Let’s see how this works...</p><div class="informalfigure"><a id="med_id00134a"></a><div class="mediaobject"><a id="med_id00134"></a><img src="../Images/image00633.jpeg" alt="image with no caption" hisrc="figs/web/090fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="constructing_a_drink_order_with_decorato">Constructing a drink order with Decorators</h2></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① <a id="iddle1357" class="indexterm"></a><a id="iddle2364" class="indexterm"></a><span class="strong"><strong>We start with our DarkRoast object.</strong></span><div class="informalfigure"><a id="med_id00135a"></a><div class="mediaobject"><a id="med_id00135"></a><img src="../Images/image00634.jpeg" alt="image with no caption" hisrc="figs/web/091fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② The customer wants Mocha, so we create a Mocha object and wrap it around the DarkRoast.</strong></span><div class="informalfigure"><a id="med_id00136a"></a><div class="mediaobject"><a id="med_id00136"></a><img src="../Images/image00635.jpeg" alt="image with no caption" hisrc="figs/web/091fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ The customer also wants Whip, so we create a Whip decorator and wrap Mocha with it.</strong></span><div class="informalfigure"><a id="med_id00137a"></a><div class="mediaobject"><a id="med_id00137"></a><img src="../Images/image00636.jpeg" alt="image with no caption" hisrc="figs/web/091fig03.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch03note03"></a>Note</h3><p>So, a DarkRoast wrapped in Mocha and Whip is still a Beverage and we can do anything with it we can do with a DarkRoast, including call its cost() method.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem" style="list-style-type: none">④ <a id="iddle1076" class="indexterm"></a><span class="strong"><strong>Now it’s time to compute the cost for the customer. We do this by calling cost() on the outermost decorator, Whip, and Whip is going to delegate computing the cost to the objects it decorates. Once it gets a cost, it will add on the cost of the Whip.</strong></span><div class="informalfigure"><a id="med_id00138a"></a><div class="mediaobject"><a id="med_id00138"></a><img src="../Images/image00637.jpeg" alt="image with no caption" hisrc="figs/web/092fig01.png.jpg"/></div></div></li></ul></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="okaycomma_hereapostrophes_what_we_know_s">Okay, here’s what we know so far...</h3></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Decorators have the same supertype as the objects they decorate.</li><li class="listitem">You can use one or more decorators to wrap an object.</li><li class="listitem">Given that the decorator has the same supertype as the object it decorates, we can pass around a decorated object in place of the original (wrapped) object.</li><li class="listitem"><span class="gray-background">The decorator adds its own behavior either before and/or after delegating to the object it decorates to do the rest of the job.</span><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch03note04"></a>Note</h3><p>Key point!</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem">Objects can be decorated at any time, so we can decorate objects dynamically at runtime with as many decorators as we like.</li></ul></div><p><span class="strong"><strong>Now let’s see how this all really works by looking at the Decorator Pattern definition and writing some code.</strong></span></p></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="decorator_pattern_defined">The Decorator Pattern defined</h2></div></div></div><p><a id="iddle1345" class="indexterm"></a><a id="iddle1720" class="indexterm"></a>Let’s first take a look at the Decorator Pattern description:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch03note05"></a>Note</h3><p><span class="strong"><strong>The Decorator Pattern</strong></span> attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>While that describes the <span class="emphasis"><em>role</em></span> of the Decorator Pattern, it doesn’t give us a lot of insight into how we’d <span class="emphasis"><em>apply</em></span> the pattern to our own implementation. Let’s take a look at the class diagram, which is a little more revealing (on the next page we’ll look at the same structure applied to the beverage problem).</p><div class="informalfigure"><a id="med_id00139a"></a><div class="mediaobject"><a id="med_id00139"></a><img src="../Images/image00638.jpeg" alt="image with no caption" hisrc="figs/web/093fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="decorating_our_beverages">Decorating our Beverages</h2></div></div></div><p><a id="iddle1358" class="indexterm"></a><a id="iddle2365" class="indexterm"></a><span class="strong"><strong>Okay, let’s work our Starbuzz beverages into this framework...</strong></span></p><div class="informalfigure"><a id="med_id00140a"></a><div class="mediaobject"><a id="med_id00140"></a><img src="../Images/image00639.jpeg" alt="image with no caption" hisrc="figs/web/094fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch03note06"></a>Brain Power</h3><p>Before going further, think about how you’d implement the cost() method of the coffees and the condiments. Also think about how you’d implement the getDescription() method of the condiments.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="cubicle_conversation-id00019">Cubicle Conversation</h2></div></div></div><p><a id="iddle1253" class="indexterm"></a><a id="iddle1780" class="indexterm"></a><span class="strong"><strong>Some confusion over Inheritance versus Composition</strong></span></p><div class="informalfigure"><a id="med_id00141a"></a><div class="mediaobject"><a id="med_id00141"></a><img src="../Images/image00640.jpeg" alt="image with no caption" hisrc="figs/web/095fig01.png.jpg"/></div></div><p><span class="strong"><strong>Sue:</strong></span> What do you mean?</p><p><span class="strong"><strong>Mary:</strong></span> Look at the class diagram. The CondimentDecorator is extending the Beverage class. That’s inheritance, right?</p><p><span class="strong"><strong>Sue:</strong></span> True. I think the point is that it’s vital that the decorators have the same type as the objects they are going to decorate. So here we’re using inheritance to achieve the <span class="emphasis"><em>type matching</em></span>, but we aren’t using inheritance to get <span class="emphasis"><em>behavior</em></span>.</p><p><span class="strong"><strong>Mary:</strong></span> Okay, I can see how decorators need the same “interface” as the components they wrap because they need to stand in place of the component. But where does the behavior come in?</p><p><span class="strong"><strong>Sue:</strong></span> When we compose a decorator with a component, we are adding new behavior. We are acquiring new behavior not by inheriting it from a superclass, but by composing objects together.</p><p><span class="strong"><strong>Mary:</strong></span> Okay, so we’re subclassing the abstract class Beverage in order to have the correct type, not to inherit its behavior. The behavior comes in through the composition of decorators with the base components as well as other decorators.</p><p><span class="strong"><strong>Sue:</strong></span> That’s right.</p><p><span class="strong"><strong>Mary:</strong></span> Ooooh, I see. And because we are using object composition, we get a whole lot more flexibility about how to mix and match condiments and beverages. Very smooth.</p><p><span class="strong"><strong>Sue:</strong></span> Yes, if we rely on inheritance, then our behavior can only be determined statically at compile time. In other words, we get only whatever behavior the superclass gives us or that we override. With composition, we can mix and match decorators any way we like... <span class="emphasis"><em>at runtime</em></span>.</p><p><span class="strong"><strong>Mary:</strong></span> And as I understand it, we can implement new decorators at any time to add new behavior. If we relied on inheritance, we’d have to go in and change existing code any time we wanted new behavior.</p><p><span class="strong"><strong>Sue:</strong></span> Exactly.</p><p><span class="strong"><strong>Mary:</strong></span> I just have one more question. If all we need to inherit is the type of the component, how come we didn’t use an interface instead of an abstract class for the Beverage class?</p><p><span class="strong"><strong>Sue:</strong></span> Well, remember, when we got this code, Starbuzz already <span class="emphasis"><em>had</em></span> an abstract Beverage class. Traditionally the Decorator Pattern does specify an abstract component, but in Java, obviously, we could use an interface. But we always try to avoid altering existing code, so don’t “fix” it if the abstract class will work just fine.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="new_barista_training">New barista training</h2></div></div></div><p><a id="iddle1359" class="indexterm"></a><a id="iddle2366" class="indexterm"></a>Make a picture for what happens when the order is for a “double mocha soy latte with whip” beverage. Use the menu to get the correct prices, and draw your picture using the same format we used earlier (from a few pages back):</p><div class="informalfigure"><a id="med_id00142a"></a><div class="mediaobject"><a id="med_id00142"></a><img src="../Images/image00641.jpeg" alt="image with no caption" hisrc="figs/web/096fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00143a"></a><div class="mediaobject"><a id="med_id00143"></a><img src="../Images/image00642.jpeg" alt="image with no caption" hisrc="figs/web/096fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00020"></a><h3 class="title">Sharpen your pencil</h3><p>Draw your picture here.</p><div class="informalfigure"><a id="med_id00144a"></a><div class="mediaobject"><a id="med_id00144"></a><img src="../Images/image00643.jpeg" alt="image with no caption" hisrc="figs/web/096fig03.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="writing_the_starbuzz_code">Writing the Starbuzz code</h2></div></div></div><p><a id="iddle1363" class="indexterm"></a><a id="iddle2370" class="indexterm"></a><span class="strong"><strong>It’s time to whip this design into some real code.</strong></span></p><p><span class="strong"><strong>Let’s start with the Beverage class, which doesn’t need to change from Starbuzz’s original design. Let’s take a look:</strong></span></p><div class="informalfigure"><a id="med_id00145a"></a><div class="mediaobject"><a id="med_id00145"></a><img src="../Images/image00644.jpeg" alt="image with no caption" hisrc="figs/web/common10.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00146a"></a><div class="mediaobject"><a id="med_id00146"></a><img src="../Images/image00645.jpeg" alt="image with no caption" hisrc="figs/web/097fig01.png.jpg"/></div></div><p><span class="strong"><strong>Beverage is simple enough. Let’s implement the abstract class for the Condiments (Decorator) as well:</strong></span></p><div class="informalfigure"><a id="med_id00147a"></a><div class="mediaobject"><a id="med_id00147"></a><img src="../Images/image00646.jpeg" alt="image with no caption" hisrc="figs/web/097fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="coding_beverages">Coding beverages</h2></div></div></div><p><span class="strong"><strong>Now that we’ve got our base classes out of the way, let’s implement some beverages. We’ll start with Espresso. Remember, we need to set a description for the specific beverage and also implement the cost() method.</strong></span></p><div class="informalfigure"><a id="med_id00148a"></a><div class="mediaobject"><a id="med_id00148"></a><img src="../Images/image00647.jpeg" alt="image with no caption" hisrc="figs/web/098fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="coding_condiments">Coding condiments</h2></div></div></div><p><a id="iddle1789" class="indexterm"></a><span class="strong"><strong>If you look back at the Decorator Pattern class diagram, you’ll see we’ve now written our abstract component (Beverage), we have our concrete components (HouseBlend), and we have our abstract decorator (CondimentDecorator). Now it’s time to implement the concrete decorators. Here’s Mocha:</strong></span></p><div class="informalfigure"><a id="med_id00149a"></a><div class="mediaobject"><a id="med_id00149"></a><img src="../Images/image00648.jpeg" alt="image with no caption" hisrc="figs/web/099fig01.png.jpg"/></div></div><p>On the next page we’ll actually instantiate the beverage and wrap it with all its condiments (decorators), but first...</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="exercise"></a><h3 class="title">Exercise</h3><p>Write and compile the code for the other Soy and Whip condiments. You’ll need them to finish and test the application.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="serving_some_coffees">Serving some coffees</h2></div></div></div><p><a id="iddle1361" class="indexterm"></a><a id="iddle2368" class="indexterm"></a>Congratulations. It’s time to sit back, order a few coffees, and marvel at the flexible design you created with the Decorator Pattern.</p><p><span class="strong"><strong>Here’s some test code*to make orders:</strong></span></p><div class="informalfigure"><a id="med_id00150a"></a><div class="mediaobject"><a id="med_id00150"></a><img src="../Images/image00649.jpeg" alt="image with no caption" hisrc="figs/web/100fig01.png.jpg"/></div></div><div class="blockquote"><blockquote class="blockquote"><div>* We’re going to see a much better way of creating decorated objects when we cover the Factory and Builder Design Patterns. Please note that the Builder Pattern is covered in the Appendix.</div></blockquote></div><p><span class="strong"><strong>Now, let’s get those orders in:</strong></span></p><div class="informalfigure"><a id="med_id00151a"></a><div class="mediaobject"><a id="med_id00151"></a><img src="../Images/image00650.jpeg" alt="image with no caption" hisrc="figs/web/100fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00021"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch03qa2qe1"></a><a id="ch03qa2q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle1356" class="indexterm"></a><a id="iddle1523" class="indexterm"></a><a id="iddle2262" class="indexterm"></a><a id="iddle2363" class="indexterm"></a><span class="strong"><strong>Q: I’m a little worried about code that might test for a specific concrete component — say, HouseBlend — and do something, like issue a discount. Once I’ve wrapped the HouseBlend with decorators, this isn’t going to work anymore.</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch03qa2q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> That is exactly right. If you have code that relies on the concrete component’s type, decorators will break that code. As long as you only write code against the abstract component type, the use of decorators will remain transparent to your code. However, once you start writing code against concrete components, you’ll want to rethink your application design and your use of decorators.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch03qa2qe2"></a><a id="ch03qa2q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Wouldn’t it be easy for some client of a beverage to end up with a decorator that isn’t the outermost decorator? Like if I had a DarkRoast with Mocha, Soy, and Whip, it would be easy to write code that somehow ended up with a reference to Soy instead of Whip, which means it would not include Whip in the order.</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch03qa2q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> You could certainly argue that you have to manage more objects with the Decorator Pattern and so there is an increased chance that coding errors will introduce the kinds of problems you suggest. However, decorators are typically created by using other patterns like Factory and Builder. Once we’ve covered these patterns, you’ll see that the creation of the concrete component with its decorator is “well encapsulated” and doesn’t lead to these kinds of problems.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch03qa2qe3"></a><a id="ch03qa2q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Can decorators know about the other decorations in the chain? Say I wanted my getDescription() method to print “Whip, Double Mocha” instead of “Mocha, Whip, Mocha.” That would require that my outermost decorator know all the decorators it is wrapping.</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch03qa2q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Decorators are meant to add behavior to the object they wrap. When you need to peek at multiple layers into the decorator chain, you are starting to push the decorator beyond its true intent. Nevertheless, such things are possible. Imagine a CondimentPrettyPrint decorator that parses the final decription and can print “Mocha, Whip, Mocha” as “Whip, Double Mocha.” Note that getDescription() could return an ArrayList of descriptions to make this easier.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00022"></a><h3 class="title">Sharpen your pencil</h3><p>Our friends at Starbuzz have introduced sizes to their menu. You can now order a coffee in tall, grande, and venti sizes (translation: small, medium, and large). Starbuzz saw this as an intrinsic part of the coffee class, so they’ve added two methods to the Beverage class: setSize() and getSize(). They’d also like for the condiments to be charged according to size, so for instance, Soy costs 10¢, 15¢, and 20¢, respectively, for tall, grande, and venti coffees. The updated Beverage class is shown below.</p><p>How would you alter the decorator classes to handle this change in requirements?</p><a id="pro_id00010"></a><pre class="programlisting"><span class="strong"><strong>public abstract class Beverage {</strong></span>
      <span class="strong"><strong><span class="gray-background">public enum Size { TALL, GRANDE, VENTI };</span></strong></span>
      <span class="strong"><strong><span class="gray-background">Size size = Size.TALL;                   </span></strong></span>
      <span class="strong"><strong>String description = "Unknown Beverage";</strong></span>
      <span class="strong"><strong>public String getDescription() {</strong></span>
             <span class="strong"><strong>return description;</strong></span>
      <span class="strong"><strong>}</strong></span>
      <span class="strong"><strong><span class="gray-background">public void setSize(Size size) {</span></strong></span>
             <span class="strong"><strong><span class="gray-background">this.size = size;        </span></strong></span>
      <span class="strong"><strong><span class="gray-background">}                               </span></strong></span>
      <span class="strong"><strong><span class="gray-background">public Size getSize() {         </span></strong></span>
             <span class="strong"><strong><span class="gray-background">return this.size;        </span></strong></span>
      <span class="strong"><strong><span class="gray-background">}                               </span></strong></span>
      <span class="strong"><strong>public abstract double cost();</strong></span>
<span class="strong"><strong>}</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="real_world_decorators_java_isoliduso">Real World Decorators: Java I/O</h2></div></div></div><p><a id="iddle1352" class="indexterm"></a><a id="iddle1362" class="indexterm"></a><a id="iddle1857" class="indexterm"></a><a id="iddle2369" class="indexterm"></a>The large number of classes in the java.io package is... <span class="emphasis"><em>overwhelming</em></span>. Don’t feel alone if you said “whoa” the first (and second and third) time you looked at this API. But now that you know the Decorator Pattern, the I/O classes should make more sense since the java.io package is largely based on Decorator. Here’s a typical set of objects that use decorators to add functionality to reading data from a file:</p><div class="informalfigure"><a id="med_id00152a"></a><div class="mediaobject"><a id="med_id00152"></a><img src="../Images/image00651.jpeg" alt="image with no caption" hisrc="figs/web/102fig01.png.jpg"/></div></div><p><span class="bolditalic">Buffered</span>InputStream and <span class="bolditalic">LineNumber</span>InputStream both extend <span class="bolditalic">Filter</span>InputStream, which acts as the abstract decorator class.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="decorating_the_javadotio_classes">Decorating the java.io classes</h2></div></div></div><div class="informalfigure"><a id="med_id00153a"></a><div class="mediaobject"><a id="med_id00153"></a><img src="../Images/image00652.jpeg" alt="image with no caption" hisrc="figs/web/103fig01.png.jpg"/></div></div><p><a id="iddle1346" class="indexterm"></a>You can see that this isn’t so different from the Starbuzz design. You should now be in a good position to look over the java.io API docs and compose decorators on the various <span class="emphasis"><em>input</em></span> streams.</p><p>You’ll see that the <span class="emphasis"><em>output</em></span> streams have the same design. And you’ve probably already found that the Reader/Writer streams (for character-based data) closely mirror the design of the streams classes (with a few differences and inconsistencies, but close enough to figure out what’s going on).</p><p>Java I/O also points out one of the <span class="emphasis"><em>downsides</em></span> of the Decorator Pattern: designs using this pattern often result in a large number of small classes that can be overwhelming to a developer trying to use the Decorator-based API. But now that you know how Decorator works, you can keep things in perspective and when you’re using someone else’s Decorator-heavy API, you can work through how their classes are organized so that you can easily use wrapping to get the behavior you’re after.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="writing_your_own_java_isoliduso_decorato">Writing your own Java I/O Decorator</h2></div></div></div><p>Okay, you know the Decorator Pattern, you’ve seen the I/O class diagram. You should be ready to write your own input decorator.</p><p>How about this: write a decorator that converts all uppercase characters to lowercase in the input stream. In other words, if we read in “I know the Decorator Pattern therefore I RULE!” then your decorator converts this to “i know the decorator pattern therefore i rule!”</p><div class="informalfigure"><a id="med_id00154a"></a><div class="mediaobject"><a id="med_id00154"></a><img src="../Images/image00653.jpeg" alt="image with no caption" hisrc="figs/web/104fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00155a"></a><div class="mediaobject"><a id="med_id00155"></a><img src="../Images/image00654.jpeg" alt="image with no caption" hisrc="figs/web/104fig02.png.jpg"/></div></div><div class="blockquote"><blockquote class="blockquote"><div>REMEMBER: we don’t provide import and package statements in the code listings. Get the complete source code from <a class="ulink" href="http://wickedlysmart.com/head-first-design-patterns/" target="_top">http://wickedlysmart.com/head-first-design-patterns/</a>.</div></blockquote></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="test_out_your_new_java_isoliduso_decorat">Test out your new Java I/O Decorator</h2></div></div></div><p>Write some quick code to test the I/O decorator:</p><div class="informalfigure"><a id="med_id00156a"></a><div class="mediaobject"><a id="med_id00156"></a><img src="../Images/image00655.jpeg" alt="image with no caption" hisrc="figs/web/105fig01.png.jpg"/></div></div><div class="sect2"><div class="titlepage"><div><div><h3 class="title" id="give_it_a_spin">Give it a spin</h3></div></div></div><div class="informalfigure"><a id="med_id00157a"></a><div class="mediaobject"><a id="med_id00157"></a><img src="../Images/image00656.jpeg" alt="image with no caption" hisrc="figs/web/105fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="patterns_exposed"></a><h3 class="title">Patterns Exposed</h3><p><a id="iddle1342" class="indexterm"></a><span class="strong"><strong>This week’s interview: Confessions of a Decorator</strong></span></p><p><span class="strong"><strong>Head First:</strong></span> Welcome, Decorator Pattern. We’ve heard that you’ve been a bit down on yourself lately?</p><p><span class="strong"><strong>Decorator:</strong></span> Yes, I know the world sees me as the glamorous design pattern, but you know, I’ve got my share of problems just like everyone.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Can you perhaps share some of your troubles with us?</p><p><span class="strong"><strong>Decorator:</strong></span> Sure. Well, you know I’ve got the power to add flexibility to designs, that much is for sure, but I also have a <span class="emphasis"><em>dark side</em></span>. You see, I can sometimes add a lot of small classes to a design and this occasionally results in a design that’s less than straightforward for others to understand.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Can you give us an example?</p><p><span class="strong"><strong>Decorator:</strong></span> Take the Java I/O libraries. These are notoriously difficult for people to understand at first. But if they just saw the classes as a set of wrappers around an InputStream, life would be much easier.</p><p><span class="strong"><strong>HeadFirst:</strong></span> That doesn’t sound so bad. You’re still a great pattern, and improving this is just a matter of public education, right?</p><p><span class="strong"><strong>Decorator:</strong></span> There’s more, I’m afraid. I’ve got typing problems: you see, people sometimes take a piece of client code that relies on specific types and introduce decorators without thinking through everything. Now, one great thing about me is that <span class="emphasis"><em><span class="strong"><strong>you can usually insert decorators transparently and the client never has to know it’s dealing with a decorator</strong></span></em></span>. But like I said, some code is dependent on specific types and when you start introducing decorators, boom! Bad things happen.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Well, I think everyone understands that you have to be careful when inserting decorators. I don’t think this is a reason to be too down on yourself.</p><p><span class="strong"><strong>Decorator:</strong></span> I know, I try not to be. I also have the problem that introducing decorators can increase the complexity of the code needed to instantiate the component. Once you’ve got decorators, you’ve got to not only instantiate the component, but also wrap it with who knows how many decorators.</p><p><span class="strong"><strong>HeadFirst:</strong></span> I’ll be interviewing the Factory and Builder patterns next week — I hear they can be very helpful with this?</p><p><span class="strong"><strong>Decorator:</strong></span> That’s true; I should talk to those guys more often.</p><p><span class="strong"><strong>HeadFirst:</strong></span> Well, we all think you’re a great pattern for creating flexible designs and staying true to the Open-Closed Principle, so keep your chin up and think positively!</p><p><span class="strong"><strong>Decorator:</strong></span> I’ll do my best, thank you.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox-id00023">Tools for your Design Toolbox</h2></div></div></div><p>You’ve got another chapter under your belt and a new principle and pattern in the toolbox.</p><div class="informalfigure"><a id="med_id00158a"></a><div class="mediaobject"><a id="med_id00158"></a><img src="../Images/image00657.jpeg" alt="image with no caption" hisrc="figs/web/107fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points-id00024"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Inheritance is one form of extension, but not necessarily the best way to achieve flexibility in our designs.</li><li class="listitem">In our designs we should allow behavior to be extended without the need to modify existing code.</li><li class="listitem">Composition and delegation can often be used to add new behaviors at runtime.</li><li class="listitem">The Decorator Pattern provides an alternative to subclassing for extending behavior.</li><li class="listitem">The Decorator Pattern involves a set of decorator classes that are used to wrap concrete components.</li><li class="listitem">Decorator classes mirror the type of the components they decorate. (In fact, they are the same type as the components they decorate, either through inheritance or interface implementation.)</li><li class="listitem">Decorators change the behavior of their components by adding new functionality before and/or after (or even in place of) method calls to the component.</li><li class="listitem">You can wrap a component with any number of decorators.</li><li class="listitem">Decorators are typically transparent to the client of the component; that is, unless the client is relying on the component’s concrete type.</li><li class="listitem">Decorators can result in many small objects in our design, and overuse can be complex.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00025"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1575" class="indexterm"></a><a id="iddle2320" class="indexterm"></a>Write the cost() methods for the following classes (pseudo-Java is okay). Here’s our solution:</p><a id="pro_id00011"></a><pre class="programlisting"><span class="strong"><strong>public class Beverage {</strong></span>

<span class="strong"><strong>// declare instance variables for milkCost,</strong></span>
<span class="strong"><strong>// soyCost, mochaCost, and whipCost, and</strong></span>
<span class="strong"><strong>// getters and setters for milk, soy, mocha</strong></span>
<span class="strong"><strong>// and whip.</strong></span>

<span class="strong"><strong>public double cost() {</strong></span>

        <span class="strong"><strong>float condimentCost = 0.0;</strong></span>
        <span class="strong"><strong>if (hasMilk()) {</strong></span>
            <span class="strong"><strong>condimentCost += milkCost;</strong></span>
        <span class="strong"><strong>}</strong></span>
        <span class="strong"><strong>if (hasSoy()) {</strong></span>
            <span class="strong"><strong>condimentCost += soyCost;</strong></span>
        <span class="strong"><strong>}</strong></span>
        <span class="strong"><strong>if (hasMocha()) {</strong></span>
            <span class="strong"><strong>condimentCost += mochaCost;</strong></span>
        <span class="strong"><strong>}</strong></span>
        <span class="strong"><strong>if (hasWhip()) {</strong></span>
            <span class="strong"><strong>condimentCost += whipCost;</strong></span>
        <span class="strong"><strong>}</strong></span>
        <span class="strong"><strong>return condimentCost;</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span>


<span class="strong"><strong>public class DarkRoast extends Beverage {</strong></span>

    <span class="strong"><strong>public DarkRoast() {</strong></span>
        <span class="strong"><strong>description = "Most Excellent Dark Roast";</strong></span>
    <span class="strong"><strong>}</strong></span>

    <span class="strong"><strong>public double cost() {</strong></span>
        <span class="strong"><strong>return 1.99 + super.cost();</strong></span>
    <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00026"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1360" class="indexterm"></a><a id="iddle1543" class="indexterm"></a><a id="iddle2285" class="indexterm"></a><a id="iddle2367" class="indexterm"></a><span class="strong"><strong>New barista training</strong></span></p><p>“double mocha soy latte with whip”</p><div class="informalfigure"><a id="med_id00159a"></a><div class="mediaobject"><a id="med_id00159"></a><img src="../Images/image00658.jpeg" alt="image with no caption" hisrc="figs/web/109fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00027"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1111" class="indexterm"></a><a id="iddle1524" class="indexterm"></a><a id="iddle2263" class="indexterm"></a>Our friends at Starbuzz have introduced sizes to their menu. You can now order a coffee in tall, grande, and venti sizes (for us normal folk: small, medium, and large). Starbuzz saw this as an intrinsic part of the coffee class, so they’ve added two methods to the Beverage class: setSize() and getSize(). They’d also like for the condiments to be charged according to size, so for instance, Soy costs 10¢, 15¢, and 20¢, respectively, for tall, grande, and venti coffees.</p><p>How would you alter the decorator classes to handle this change in requirements? Here’s our solution.</p><div class="informalfigure"><a id="med_id00160a"></a><div class="mediaobject"><a id="med_id00160"></a><img src="../Images/image00659.jpeg" alt="image with no caption" hisrc="figs/web/110fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>