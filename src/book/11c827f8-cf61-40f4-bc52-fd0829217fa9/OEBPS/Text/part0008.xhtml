<?xml version='1.0' encoding='UTF-8'?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 1. Intro to Design Patterns: Welcome to Design Patterns</title><link rel="stylesheet" type="text/css" href="../Styles/style0001.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.76.1"/><link rel="up" href="index.html"/><link rel="prev" href="pr07.html"/><link rel="next" href="ch02.html"/></head><body><section class="chapter" epub:type="chapter" id="intro_to_design_patterns_welcome_to_desi"><div class="titlepage" id="aid-7K4G2"><div><div><h2 class="title">Chapter 1. Intro to Design Patterns: Welcome to Design Patterns</h2></div></div></div><div class="informalfigure"><a id="med_id00023a"></a><div class="mediaobject"><a id="med_id00023"></a><img src="../Images/image00509.jpeg" alt="image with no caption" hisrc="figs/web/001fig01.png.jpg"/></div></div><p><span class="strong"><strong>Someone has already solved your problems.</strong></span> In this chapter, you’ll learn why (and how) you can exploit the wisdom and lessons learned by other developers who’ve been down the same design problem road and survived the trip. Before we’re done, we’ll look at the use and benefits of design patterns, look at some key OO design principles, and walk through an example of how one pattern works. The best way to use patterns is to <span class="emphasis"><em>load your brain</em></span> with them and then <span class="emphasis"><em>recognize places</em></span> in your designs and existing applications where you can <span class="emphasis"><em>apply them</em></span>. Instead of <span class="emphasis"><em>code</em></span> reuse, with patterns you get <span class="emphasis"><em>experience</em></span> reuse.</p><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="it_started_with_a_simple_simuduck_app">It started with a simple SimUDuck app</h2></div></div></div><p>Joe works for a company that makes a highly successful duck pond simulation game, <span class="emphasis"><em>SimUDuck</em></span>. The game can show a large variety of duck species swimming and making quacking sounds. The initial designers of the system used standard OO techniques and created one Duck superclass from which all other duck types inherit.</p><div class="informalfigure"><a id="med_id00024a"></a><div class="mediaobject"><a id="med_id00024"></a><img src="../Images/image00510.jpeg" alt="image with no caption" hisrc="figs/web/002fig01.png.jpg"/></div></div><p>In the last year, the company has been under increasing pressure from competitors. After a week long off-site brainstorming session over golf, the company executives think it’s time for a big innovation. They need something <span class="emphasis"><em>really</em></span> impressive to show at the upcoming shareholders meeting in Maui <span class="emphasis"><em>next week</em></span>.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="but_now_we_need_the_ducks_to_fly">But now we need the ducks to FLY</h2></div></div></div><p>The executives decided that flying ducks is just what the simulator needs to blow away the other duck sim competitors. And of course Joe’s manager told them it’ll be no problem for Joe to just whip something up in a week. “After all,” said Joe’s boss, “he’s an OO programmer... <span class="emphasis"><em>how hard can it be?”</em></span></p><div class="informalfigure"><a id="med_id00025a"></a><div class="mediaobject"><a id="med_id00025"></a><img src="../Images/image00511.jpeg" alt="image with no caption" hisrc="figs/web/003fig03.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00026a"></a><div class="mediaobject"><a id="med_id00026"></a><img src="../Images/image00512.jpeg" alt="image with no caption" hisrc="figs/web/003fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00027a"></a><div class="mediaobject"><a id="med_id00027"></a><img src="../Images/image00513.jpeg" alt="image with no caption" hisrc="figs/web/003fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="but_something_went_horribly_wronghellip">But something went horribly wrong...</h2></div></div></div><div class="informalfigure"><a id="med_id00028a"></a><div class="mediaobject"><a id="med_id00028"></a><img src="../Images/image00514.jpeg" alt="image with no caption" hisrc="figs/web/004fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00029a"></a><div class="mediaobject"><a id="med_id00029"></a><img src="../Images/image00515.jpeg" alt="image with no caption" hisrc="figs/web/004fig02.png.jpg"/></div></div><p><a id="iddle1784" class="indexterm"></a><a id="iddle1785" class="indexterm"></a><a id="iddle1897" class="indexterm"></a><a id="iddle2237" class="indexterm"></a><a id="iddle2435" class="indexterm"></a><a id="iddle2444" class="indexterm"></a><span class="strong"><strong>What happened?</strong></span></p><p>Joe failed to notice that not <span class="emphasis"><em>all</em></span> subclasses of Duck should <span class="emphasis"><em>fly</em></span>. When Joe added new behavior to the Duck superclass, he was also adding behavior that was <span class="emphasis"><em>not</em></span> appropriate for some Duck subclasses. He now has flying inanimate objects in the SimUDuck program.</p><p><span class="emphasis"><em>A localized update to the code caused a nonlocal side effect (flying rubber ducks)!</em></span></p><div class="informalfigure"><a id="med_id00030a"></a><div class="mediaobject"><a id="med_id00030"></a><img src="../Images/image00516.jpeg" alt="image with no caption" hisrc="figs/web/004fig03.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00031a"></a><div class="mediaobject"><a id="med_id00031"></a><img src="../Images/image00517.jpeg" alt="image with no caption" hisrc="figs/web/004fig04.png.jpg"/></div></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>What Joe thought was a great use of inheritance for the purpose of <span class="underline">reuse</span> hasn’t turned out so well when it comes to <span class="underline">maintenance</span>.</strong></span></div></blockquote></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="joe_thinks_about_inheritancehellip">Joe thinks about inheritance...</h2></div></div></div><div class="informalfigure"><a id="med_id00032a"></a><div class="mediaobject"><a id="med_id00032"></a><img src="../Images/image00518.jpeg" alt="image with no caption" hisrc="figs/web/005fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil"></a><h3 class="title">Sharpen your pencil</h3><p><a id="iddle1557" class="indexterm"></a><a id="iddle1779" class="indexterm"></a><a id="iddle1781" class="indexterm"></a><a id="iddle2302" class="indexterm"></a>Which of the following are disadvantages of using <span class="emphasis"><em>inheritance</em></span> to provide Duck behavior? (Choose all that apply.)</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col><col class="c3"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00001"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>A.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Code is duplicated across subclasses.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00002"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>B.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Runtime behavior changes are difficult.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00003"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>C.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We can’t make ducks dance.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00004"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>D.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Hard to gain knowledge of all duck behaviors.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00005"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>E.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Ducks can’t fly and quack at the same time.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00006"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>F.</p></td><td style="vertical-align: top; "><p>Changes can unintentionally affect other ducks.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="how_about_an_interfacequestion_mark">How about an interface?</h2></div></div></div><p>Joe realized that inheritance probably wasn’t the answer, because he just got a memo that says that the executives now want to update the product every six months (in ways they haven’t yet decided on). Joe knows the spec will keep changing and he’ll be forced to look at and possibly override fly() and quack() for every new Duck subclass that’s ever added to the program... <span class="emphasis"><em>forever.</em></span></p><p>So, he needs a cleaner way to have only <span class="emphasis"><em>some</em></span> (but not <span class="emphasis"><em>all</em></span>) of the duck types fly or quack.</p><div class="informalfigure"><a id="med_id00033a"></a><div class="mediaobject"><a id="med_id00033"></a><img src="../Images/image00520.jpeg" alt="image with no caption" hisrc="figs/web/006fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00034a"></a><div class="mediaobject"><a id="med_id00034"></a><img src="../Images/image00521.jpeg" alt="image with no caption" hisrc="figs/web/006fig02.png.jpg"/></div></div><p><span class="strong"><strong>What do YOU think about this design?</strong></span></p><div class="informalfigure"><a id="med_id00035a"></a><div class="mediaobject"><a id="med_id00035"></a><img src="../Images/image00522.jpeg" alt="image with no caption" hisrc="figs/web/007fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="what_would_you_do_if_you_were_joequestio">What would you do if you were Joe?</h2></div></div></div><p>We know that not <span class="emphasis"><em>all</em></span> of the subclasses should have flying or quacking behavior, so inheritance isn’t the right answer. But while having the subclasses implement Flyable and/or Quackable solves <span class="emphasis"><em>part</em></span> of the problem (no inappropriately flying rubber ducks), it completely destroys code reuse for those behaviors, so it just creates a <span class="emphasis"><em>different</em></span> maintenance nightmare. And of course there might be more than one kind of flying behavior even among the ducks that <span class="emphasis"><em>do</em></span> fly...</p><p>At this point you might be waiting for a Design Pattern to come riding in on a white horse and save the day. But what fun would that be? No, we’re going to figure out a solution the old-fashioned way — <span class="emphasis"><em>by applying good OO software design principles.</em></span></p><div class="informalfigure"><a id="med_id00036a"></a><div class="mediaobject"><a id="med_id00036"></a><img src="../Images/image00523.jpeg" alt="image with no caption" hisrc="figs/web/007fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="one_constant_in_software_development">The one constant in software development</h2></div></div></div><p><a id="iddle1099" class="indexterm"></a><a id="iddle1301" class="indexterm"></a><a id="iddle1560" class="indexterm"></a><a id="iddle2305" class="indexterm"></a><span class="strong"><strong>Okay, what’s the one thing you can always count on in software development?</strong></span></p><p>No matter where you work, what you’re building, or what language you are programming in, what’s the one true constant that will be with you always?</p><div class="informalfigure"><a id="med_id00037a"></a><div class="mediaobject"><a id="med_id00037"></a><img src="../Images/image00524.jpeg" alt="image with no caption" hisrc="figs/web/008fig01.png.jpg"/></div></div><p>(use a mirror to see the answer)</p><p>No matter how well you design an application, over time an application must grow and change or it will <span class="emphasis"><em>die</em></span>.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00001"></a><h3 class="title">Sharpen your pencil</h3><p>Lots of things can drive change. List some reasons you’ve had to change code in your applications (we put in a couple of our own to get you started).</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col></colgroup><tbody><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>My customers or users decide they want something else, or they want new functionality.</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>My company decided it is going with another database vendor and it is also purchasing its data from another supplier that uses a different data format. Argh!</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>______________________________________________________________________________</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>______________________________________________________________________________</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>______________________________________________________________________________</p></td></tr><tr><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>______________________________________________________________________________</p></td></tr><tr><td style="vertical-align: top; "><p>______________________________________________________________________________</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="zeroing_in_on_the_problemhellip">Zeroing in on the problem...</h2></div></div></div><p><a id="iddle1402" class="indexterm"></a><a id="iddle1469" class="indexterm"></a>So we know using inheritance hasn’t worked out very well, since the duck behavior keeps changing across the subclasses, and it’s not appropriate for <span class="emphasis"><em>all</em></span> subclasses to have those behaviors. The Flyable and Quackable interface sounded promising at first — only ducks that really do fly will be Flyable, etc. — except Java interfaces have no implementation code, so no code reuse. And that means that whenever you need to modify a behavior, you’re forced to track down and change it in all the different subclasses where that behavior is defined, probably introducing <span class="emphasis"><em>new</em></span> bugs along the way!</p><p>Luckily, there’s a design principle for just this situation.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note01"></a>Design Principle</h3><p><span class="emphasis"><em>Identify the aspects of your application that vary and separate them from what stays the same.</em></span></p><div class="blockquote"><blockquote class="blockquote"><div>The first of many design principles. We’ll spend more time on these throughout the book.</div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>Take what varies and “encapsulate” it so it won’t affect the rest of your code.</strong></span></div><div><span class="strong"><strong>The result? Fewer unintended consequences from code changes and more flexibility in your systems!</strong></span></div></blockquote></div><p>In other words, if you’ve got some aspect of your code that is changing, say with every new requirement, then you know you’ve got a behavior that needs to be pulled out and separated from all the stuff that doesn’t change.</p><p>Here’s another way to think about this principle: <span class="emphasis"><em><span class="strong"><strong>take the parts that vary and encapsulate them, so that later you can alter or extend the parts that vary without affecting those that don’t.</strong></span></em></span></p><p>As simple as this concept is, it forms the basis for almost every design pattern. All patterns provide a way to let <span class="emphasis"><em>some part of a system vary independently of all other parts</em></span>.</p><p>Okay, time to pull the duck behavior out of the Duck classes!</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="separating_what_changes_from_what_stays">Separating what changes from what stays the same</h2></div></div></div><p><a id="iddle1116" class="indexterm"></a>Where do we start? As far as we can tell, other than the problems with fly() and quack(), the Duck class is working well and there are no other parts of it that appear to vary or change frequently. So, other than a few slight changes, we’re going to pretty much leave the Duck class alone.</p><p>Now, to separate the “parts that change from those that stay the same,” we are going to create two <span class="emphasis"><em>sets</em></span> of classes (totally apart from Duck), one for <span class="emphasis"><em>fly</em></span> and one for <span class="emphasis"><em>quack</em></span>. Each set of classes will hold all the implementations of the respective behavior. For instance, we might have <span class="emphasis"><em>one</em></span> class that implements <span class="emphasis"><em>quacking</em></span>, <span class="emphasis"><em>another</em></span> that implements <span class="emphasis"><em>squeaking</em></span>, and <span class="emphasis"><em>another</em></span> that implements <span class="emphasis"><em>silence</em></span>.</p><p><span class="strong"><strong>We know that fly() and quack() are the parts of the Duck class that vary across ducks.</strong></span></p><p><span class="strong"><strong>To separate these behaviors from the Duck class, we’ll pull both methods out of the Duck class and create a new set of classes to represent each behavior.</strong></span></p><div class="informalfigure"><a id="med_id00038a"></a><div class="mediaobject"><a id="med_id00038"></a><img src="../Images/image00525.jpeg" alt="image with no caption" hisrc="figs/web/010fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="designing_the_duck_behaviors">Designing the Duck Behaviors</h2></div></div></div><p><a id="iddle1072" class="indexterm"></a><a id="iddle1077" class="indexterm"></a><a id="iddle1419" class="indexterm"></a><a id="iddle1486" class="indexterm"></a><a id="iddle1798" class="indexterm"></a><a id="iddle2140" class="indexterm"></a><span class="strong"><strong>So how are we going to design the set of classes that implement the fly and quack behaviors?</strong></span></p><p>We’d like to keep things flexible; after all, it was the inflexibility in the duck behaviors that got us into trouble in the first place. And we know that we want to <span class="emphasis"><em>assign</em></span> behaviors to the instances of Duck. For example, we might want to instantiate a new MallardDuck instance and initialize it with a specific <span class="emphasis"><em>type</em></span> of flying behavior. And while we’re there, why not make sure that we can change the behavior of a duck dynamically? In other words, we should include behavior setter methods in the Duck classes so that we can <span class="emphasis"><em>change</em></span> the MallardDuck’s flying behavior <span class="emphasis"><em>at runtime</em></span>.</p><p>Given these goals, let’s look at our second design principle:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note02"></a>Design Principle</h3><p><span class="emphasis"><em>Program to an interface, not an implementation.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>From now on, the Duck behaviors will live in a separate class — a class that implements a particular behavior interface.</strong></span></div><div><span class="strong"><strong>That way, the Duck classes won’t need to know any of the implementation details for their own behaviors.</strong></span></div></blockquote></div><p>We’ll use an interface to represent each behavior — for instance, FlyBehavior and QuackBehavior — and each implementation of a <span class="emphasis"><em>behavior</em></span> will implement one of those interfaces.</p><p>So this time it won’t be the <span class="emphasis"><em>Duck</em></span> classes that will implement the flying and quacking interfaces. Instead, we’ll make a set of classes whose entire reason for living is to represent a behavior (for example, “squeaking”), and it’s the <span class="emphasis"><em>behavior</em></span> class, rather than the Duck class, that will implement the behavior interface.</p><p>This is in contrast to the way we were doing things before, where a behavior came either from a concrete implementation in the superclass Duck, or by providing a specialized implementation in the subclass itself. In both cases we were relying on an <span class="emphasis"><em>implementation</em></span>. We were locked into using that specific implementation and there was no room for changing the behavior (other than writing more code).</p><p>With our new design, the Duck subclasses will use a behavior represented by an <span class="emphasis"><em>interface</em></span> (FlyBehavior and QuackBehavior), so that the actual <span class="emphasis"><em>implementation</em></span> of the behavior (in other words, the specific concrete behavior coded in the class that implements the FlyBehavior or QuackBehavior) won’t be locked into the Duck subclass.</p><div class="informalfigure"><a id="med_id00039a"></a><div class="mediaobject"><a id="med_id00039"></a><img src="../Images/image00526.jpeg" alt="image with no caption" hisrc="figs/web/011fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00040a"></a><div class="mediaobject"><a id="med_id00040"></a><img src="../Images/image00527.jpeg" alt="image with no caption" hisrc="figs/web/012fig01.png.jpg"/></div></div><p><a id="iddle1014" class="indexterm"></a><a id="iddle1296" class="indexterm"></a><a id="iddle2135" class="indexterm"></a><a id="iddle2145" class="indexterm"></a><a id="iddle2443" class="indexterm"></a><a id="iddle2445" class="indexterm"></a><span class="strong"><strong>“Program to an <span class="emphasis"><em>interface</em></span>” really means “Program to a <span class="emphasis"><em>supertype</em></span>.”</strong></span></p><p>The word <span class="emphasis"><em>interface</em></span> is overloaded here. There’s the <span class="emphasis"><em>concept</em></span> of interface, but there’s also the Java construct interface. You can <span class="emphasis"><em>program to an interface</em></span>, without having to actually use a Java interface. The point is to exploit polymorphism by programming to a supertype so that the actual runtime object isn’t locked into the code. And we could rephrase “program to a supertype” as “the declared type of the variables should be a supertype, usually an abstract class or interface, so that the objects assigned to those variables can be of any concrete implementation of the supertype, which means the class declaring them doesn’t have to know about the actual object types!”</p><p>This is probably old news to you, but just to make sure we’re all saying the same thing, here’s a simple example of using a polymorphic type — imagine an abstract class Animal, with two concrete implementations, Dog and Cat.</p><p><span class="strong"><strong>Programming to an implementation</strong></span> would be:</p><a id="pro_id00001"></a><pre class="programlisting"><span class="strong"><strong>Dog d = new Dog();</strong></span>
<span class="strong"><strong>d.bark();</strong></span></pre><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note03"></a>Note</h3><p>Declaring the variable “d” as type Dog (a concrete implementation of Animal) forces us to code to a concrete implementation.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>But <span class="strong"><strong>programming to an interface/supertype</strong></span> would be:</p><a id="pro_id00002"></a><pre class="programlisting"><span class="strong"><strong>Animal animal = new Dog();</strong></span>
<span class="strong"><strong>animal.makeSound();</strong></span></pre><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note04"></a>Note</h3><p>We know it’s a Dog, but we can now use the animal reference polymorphically.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Even better, rather than hardcoding the instantiation of the subtype (like new Dog()) into the code, <span class="strong"><strong>assign the concrete implementation object at runtime:</strong></span></p><a id="pro_id00003"></a><pre class="programlisting"><span class="strong"><strong>a = getAnimal();</strong></span>
<span class="strong"><strong>a.makeSound();</strong></span></pre><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note05"></a>Note</h3><p>We don’t know WHAT the actual animal subtype is... all we care about is that it knows how to respond to makeSound().</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00041a"></a><div class="mediaobject"><a id="med_id00041"></a><img src="../Images/image00528.jpeg" alt="image with no caption" hisrc="figs/web/012fig02.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="implementing_the_duck_behaviors">Implementing the Duck Behaviors</h2></div></div></div><p><a id="iddle1079" class="indexterm"></a><a id="iddle1776" class="indexterm"></a><a id="iddle1786" class="indexterm"></a>Here we have the two interfaces, FlyBehavior and QuackBehavior, along with the corresponding classes that implement each concrete behavior:</p><div class="informalfigure"><a id="med_id00042a"></a><div class="mediaobject"><a id="med_id00042"></a><img src="../Images/image00529.jpeg" alt="image with no caption" hisrc="figs/web/013fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note06"></a>Note</h3><p><span class="strong"><strong>With this design, other types of objects can reuse our fly and quack behaviors because these behaviors are no longer hidden away in our Duck classes!</strong></span></p><p><span class="strong"><strong>And we can add new behaviors without modifying any of our existing behavior classes or touching any of the Duck classes that use flying behaviors.</strong></span></p><div class="blockquote"><blockquote class="blockquote"><div>So we get the benefit of REUSE without all the baggage that comes along with inheritance.</div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch01qa1qe1"></a><a id="ch01qa1q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><a id="iddle1073" class="indexterm"></a><a id="iddle1112" class="indexterm"></a><a id="iddle1554" class="indexterm"></a><a id="iddle2299" class="indexterm"></a><span class="strong"><strong>Q: Do I always have to implement my application first, see where things are changing, and then go back and separate &amp; encapsulate those things?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch01qa1q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Not always; often when you are designing an application, you anticipate those areas that are going to vary and then go ahead and build the flexibility to deal with it into your code. You’ll find that the principles and patterns can be applied at any stage of the development lifecycle.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch01qa1qe2"></a><a id="ch01qa1q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Should we make Duck an interface too?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch01qa1q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Not in this case. As you’ll see once we’ve got everything hooked together, we do benefit by having Duck not be an interface, and having specific ducks, like MallardDuck, inherit common properties and methods. Now that we’ve removed what varies from the Duck inheritance, we get the benefits of this structure without the problems.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch01qa1qe3"></a><a id="ch01qa1q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: It feels a little weird to have a class that’s just a behavior. Aren’t classes supposed to represent things? Aren’t classes supposed to have both state AND behavior?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch01qa1q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> In an OO system, yes, classes represent things that generally have both state (instance variables) and methods. And in this case, the thing happens to be a behavior. But even a behavior can still have state and methods; a flying behavior might have instance variables representing the attributes for the flying (wing beats per minute, max altitude, and speed, etc.) behavior.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil-id00002"></a><h3 class="title">Sharpen your pencil</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① Using our new design, what would you do if you needed to add rocket-powered flying to the SimUDuck app?</li><li class="listitem" style="list-style-type: none">② Can you think of a class that might want to use the Quack behavior that isn’t a duck?</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>Answers:</p><p>1) Create a FlyRocketPowered class that implements the FlyBehavior interface.</p><p>2) One example, a duck call (a device that makes duck sounds).</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="integrating_the_duck_behavior">Integrating the Duck Behavior</h2></div></div></div><p><a id="iddle1075" class="indexterm"></a><a id="iddle1080" class="indexterm"></a><a id="iddle1793" class="indexterm"></a><a id="iddle1800" class="indexterm"></a><a id="iddle2492" class="indexterm"></a><span class="strong"><strong>The key is that a Duck will now <span class="underline"><span class="emphasis"><em>delegate</em></span></span> its flying and quacking behavior, instead of using quacking and flying methods defined in the Duck class (or subclass).</strong></span></p><p><span class="strong"><strong>Here’s how:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① First we’ll add two instance variables</strong></span> to the Duck class called <span class="emphasis"><em>flyBehavior</em></span> and <span class="emphasis"><em>quackBehavior</em></span> that are declared as the interface type (not a concrete class implementation type). Each duck object will set these variables polymorphically to reference the <span class="emphasis"><em>specific</em></span> behavior type it would like at runtime (FlyWithWings, Squeak, etc.).<br/>We’ll also remove the fly() and quack() methods from the Duck class (and any subclasses) because we’ve moved this behavior out into the FlyBehavior and QuackBehavior classes.<br/>We’ll replace fly() and quack() in the Duck class with two similar methods, called performFly() and performQuack(); you’ll see how they work next.<div class="informalfigure"><a id="med_id00043a"></a><div class="mediaobject"><a id="med_id00043"></a><img src="../Images/image00530.jpeg" alt="image with no caption" hisrc="figs/web/015fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Now we implement performQuack():</strong></span><div class="informalfigure"><a id="med_id00044a"></a><div class="mediaobject"><a id="med_id00044"></a><img src="../Images/image00531.jpeg" alt="image with no caption" hisrc="figs/web/015fig02.png.jpg"/></div></div><br/>Pretty simple, huh? To perform the quack, a Duck just allows the object that is referenced by quackBehavior to quack for it.<br/>In this part of the code we don’t care what kind of object it is, <span class="bolditalic">all we care about is that it knows how to quack()!</span></li></ul></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="more_integrationhellip">More integration...</h2></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">③ Okay, time to worry about <span class="strong"><strong>how the flyBehavior and quackBehavior instance variables are set</strong></span>. Let’s take a look at the MallardDuck class:<div class="informalfigure"><a id="med_id00045a"></a><div class="mediaobject"><a id="med_id00045"></a><img src="../Images/image00532.jpeg" alt="image with no caption" hisrc="figs/web/016fig01.png.jpg"/></div></div><br/>So MallardDuck’s quack is a real live duck <span class="strong"><strong>quack</strong></span>, not a <span class="strong"><strong>squeak</strong></span> and not a <span class="strong"><strong>mute quack</strong></span>. So what happens here? When a MallardDuck is instantiated, its constructor initializes the MallardDuck’s inherited quackBehavior instance variable to a new instance of type Quack (a QuackBehavior concrete implementation class).<br/>And the same is true for the duck’s flying behavior — the MallardDuck’s constructor initializes the flyBehavior instance variable with an instance of type FlyWithWings (a FlyBehavior concrete implementation class).</li></ul></div><div class="informalfigure"><a id="med_id00046a"></a><div class="mediaobject"><a id="med_id00046"></a><img src="../Images/image00533.jpeg" alt="image with no caption" hisrc="figs/web/017fig01.png.jpg"/></div></div><p><a id="iddle1774" class="indexterm"></a>Good catch, that’s exactly what we’re doing... <span class="emphasis"><em>for now.</em></span></p><p>Later in the book we’ll have more patterns in our toolbox that can help us fix it.</p><p>Still, notice that while we <span class="emphasis"><em>are</em></span> setting the behaviors to concrete classes (by instantiating a behavior class like Quack or FlyWithWings and assigning it to our behavior reference variable), we could <span class="emphasis"><em>easily</em></span> change that at runtime.</p><p>So, we still have a lot of flexibility here, but we’re doing a poor job of initializing the instance variables in a flexible way. But think about it: since the quackBehavior instance variable is an interface type, we could (through the magic of polymorphism) dynamically assign a different QuackBehavior implementation class at runtime.</p><p>Take a moment and think about how you would implement a duck so that its behavior could change at runtime. (You’ll see the code that does this a few pages from now.)</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="testing_the_duck_code">Testing the Duck code</h2></div></div></div><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① <a id="iddle1801" class="indexterm"></a><span class="strong"><strong>Type and compile the Duck class below (Duck.java), and the MallardDuck class from two pages back (MallardDuck.java).</strong></span><div class="informalfigure"><a id="med_id00047a"></a><div class="mediaobject"><a id="med_id00047"></a><img src="../Images/image00534.jpeg" alt="image with no caption" hisrc="figs/web/018fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Type and compile the FlyBehavior interface (FlyBehavior.java) and the two behavior implementation classes (FlyWithWings.java and FlyNoWay.java).</strong></span><div class="informalfigure"><a id="med_id00048a"></a><div class="mediaobject"><a id="med_id00048"></a><img src="../Images/image00535.jpeg" alt="image with no caption" hisrc="figs/web/018fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Type and compile the QuackBehavior interface (QuackBehavior.java) and the three behavior implementation classes (Quack.java, MuteQuack.java, and Squeak.java).</strong></span><a id="pro_id00004"></a><pre class="programlisting"><span class="strong"><strong>public interface QuackBehavior {</strong></span>
   <span class="strong"><strong>public void quack();</strong></span>
<span class="strong"><strong>}</strong></span>
<span class="strong"><strong>_______________________________________________________________</strong></span>
<span class="strong"><strong>public class Quack implements QuackBehavior {</strong></span>
   <span class="strong"><strong>public void quack() {</strong></span>
      <span class="strong"><strong>System.out.println("Quack");</strong></span>
   <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span>
<span class="strong"><strong>_______________________________________________________________</strong></span>
<span class="strong"><strong>public class MuteQuack implements QuackBehavior {</strong></span>
   <span class="strong"><strong>public void quack() {</strong></span>
       <span class="strong"><strong>System.out.println("&lt;&lt; Silence &gt;&gt;");</strong></span>
   <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span>
<span class="strong"><strong>_______________________________________________________________</strong></span>
<span class="strong"><strong>public class Squeak implements QuackBehavior {</strong></span>
   <span class="strong"><strong>public void quack() {</strong></span>
       <span class="strong"><strong>System.out.println("Squeak");</strong></span>
   <span class="strong"><strong>}</strong></span>
<span class="strong"><strong>}</strong></span></pre></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ Type and compile the test class (MiniDuckSimulator.java).</strong></span><div class="informalfigure"><a id="med_id00049a"></a><div class="mediaobject"><a id="med_id00049"></a><img src="../Images/image00536.jpeg" alt="image with no caption" hisrc="figs/web/019fig01.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>⑤ Run the code!</strong></span><div class="informalfigure"><a id="med_id00050a"></a><div class="mediaobject"><a id="med_id00050"></a><img src="../Images/image00537.jpeg" alt="image with no caption" hisrc="figs/web/019fig02.png.jpg"/></div></div></li></ul></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="setting_behavior_dynamically">Setting behavior dynamically</h2></div></div></div><p><a id="iddle1081" class="indexterm"></a>What a shame to have all this dynamic talent built into our ducks and not be using it! Imagine you want to set the duck’s behavior type through a setter method on the duck subclass, rather than by instantiating it in the duck’s constructor.</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none"><span class="strong"><strong>① Add two new methods to the Duck class:</strong></span><div class="informalfigure"><a id="med_id00051a"></a><div class="mediaobject"><a id="med_id00051"></a><img src="../Images/image00538.jpeg" alt="image with no caption" hisrc="figs/web/020fig01.png.jpg"/></div></div><br/>We can call these methods anytime we want to change the behavior of a duck <span class="underline">on the fly</span>.<div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note07"></a>Note</h3><p>Editor note: gratuitous pun - fix</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>② Make a new Duck type (ModelDuck.java).</strong></span><div class="informalfigure"><a id="med_id00052a"></a><div class="mediaobject"><a id="med_id00052"></a><img src="../Images/image00539.jpeg" alt="image with no caption" hisrc="figs/web/020fig02.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>③ Make a new FlyBehavior type (FlyRocketPowered.java).</strong></span><div class="informalfigure"><a id="med_id00053a"></a><div class="mediaobject"><a id="med_id00053"></a><img src="../Images/image00540.jpeg" alt="image with no caption" hisrc="figs/web/020fig03.png.jpg"/></div></div></li><li class="listitem" style="list-style-type: none"><span class="strong"><strong>④ Change the test class (MiniDuckSimulator.java), add the ModelDuck, and make the ModelDuck rocket-enabled.</strong></span><div class="informalfigure"><a id="med_id00054a"></a><div class="mediaobject"><a id="med_id00054"></a><img src="../Images/image00541.jpeg" alt="image with no caption" hisrc="figs/web/021fig01.png.jpg"/></div></div></li></ul></div><div class="blockquote"><blockquote class="blockquote"><div><span class="strong"><strong>To change a duck’s behavior at runtime, just call the duck’s setter method for that behavior.</strong></span></div></blockquote></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="big_picture_on_encapsulated_behaviors">The Big Picture on encapsulated behaviors</h2></div></div></div><p><a id="iddle1078" class="indexterm"></a><a id="iddle1487" class="indexterm"></a><span class="strong"><strong>Okay, now that we’ve done the deep dive on the duck simulator design, it’s time to come back up for air and take a look at the big picture.</strong></span></p><p>Below is the entire reworked class structure. We have everything you’d expect: ducks extending Duck, fly behaviors implementing FlyBehavior, and quack behaviors implementing QuackBehavior.</p><p>Notice also that we’ve started to describe things a little differently. Instead of thinking of the duck behaviors as a <span class="emphasis"><em>set of behaviors</em></span>, we’ll start thinking of them as a <span class="emphasis"><em>family of algorithms</em></span>. Think about it: in the SimUDuck design, the algorithms represent things a duck would do (different ways of quacking or flying), but we could just as easily use the same techniques for a set of classes that implement the ways to compute state sales tax by different states.</p><p>Pay careful attention to the <span class="emphasis"><em>relationships</em></span> between the classes. In fact, grab your pen and write the appropriate relationship (IS-A, HAS-A, and IMPLEMENTS) on each arrow in the class diagram.</p><div class="informalfigure"><a id="med_id00055a"></a><div class="mediaobject"><a id="med_id00055"></a><img src="../Images/image00542.jpeg" alt="image with no caption" hisrc="figs/web/022fig01.png.jpg"/></div></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="has-a_can_be_better_than_is-a">HAS-A can be better than IS-A</h2></div></div></div><p><a id="iddle1129" class="indexterm"></a><a id="iddle1251" class="indexterm"></a><a id="iddle1406" class="indexterm"></a><a id="iddle1673" class="indexterm"></a><a id="iddle1719" class="indexterm"></a><a id="iddle1783" class="indexterm"></a>The HAS-A relationship is an interesting one: each duck has a FlyBehavior and a QuackBehavior to which it delegates flying and quacking.</p><p>When you put two classes together like this you’re using <span class="strong"><strong>composition</strong></span>. Instead of <span class="emphasis"><em>inheriting</em></span> their behavior, the ducks get their behavior by being <span class="emphasis"><em>composed</em></span> with the right behavior object.</p><p>This is an important technique; in fact, we’ve been using our third design principle:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note08"></a>Design Principle</h3><p><span class="emphasis"><em>Favor composition over inheritance.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p>As you’ve seen, creating systems using composition gives you a lot more flexibility. Not only does it let you encapsulate a family of algorithms into their own set of classes, but it also lets you <span class="bolditalic">change behavior at runtime</span> as long as the object you’re composing with implements the correct behavior interface.</p><p>Composition is used in <span class="underline">many</span> design patterns and you’ll see a lot more about its advantages and disadvantages throughout the book.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note09"></a>Brain Power</h3><p>A duck call is a device that hunters use to mimic the calls (quacks) of ducks. How would you implement your own duck call that does <span class="emphasis"><em>not</em></span> inherit from the Duck class?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="master_and_studenthellip"></a><h3 class="title">Master and Student...</h3><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>Grasshopper, tell me what you have learned of the Object-Oriented ways.</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>Master, I have learned that the promise of the object-oriented way is reuse.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>Grasshopper, continue...</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>Master, through inheritance all good things may be reused and so we come to drastically cut development time like we swiftly cut bamboo in the woods.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>Grasshopper, is more time spent on code</em></span> <span class="bolditalic">before</span> <span class="emphasis"><em>or</em></span> <span class="bolditalic">after</span> <span class="emphasis"><em>development is complete?</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>The answer is</em></span> <span class="bolditalic">after</span>, <span class="emphasis"><em>Master. We always spend more time maintaining and changing software than on initial development.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>So Grasshopper, should effort go into reuse</em></span> <span class="bolditalic">above</span> <span class="emphasis"><em>maintainability and extensibility?</em></span></p><p><span class="bolditalic">Student:</span> <span class="emphasis"><em>Master, I believe that there is truth in this.</em></span></p><p><span class="bolditalic">Master:</span> <span class="emphasis"><em>I can see that you still have much to learn. I would like for you to go and meditate on inheritance further. As you’ve seen, inheritance has its problems, and there are other ways of achieving reuse.</em></span></p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="speaking_of_design_patternshellip">Speaking of Design Patterns...</h2></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="congratulations_on_your_first_patternexc"></a><h3 class="title">Congratulations on your first pattern!</h3><div class="informalfigure"><a id="med_id00840a"></a><div class="mediaobject"><a id="med_id00840"></a><img src="../Images/image00543.jpeg" alt="image with no caption" hisrc="figs/web/common3.png.jpg"/></div></div><p><a id="iddle2407" class="indexterm"></a>You just applied your first design pattern — the <span class="strong"><strong>STRATEGY</strong></span> Pattern. That’s right, you used the Strategy Pattern to rework the SimUDuck app. Thanks to this pattern, the simulator is ready for any changes those execs might cook up on their next business trip to Maui.</p><p>Now that we’ve made you take the long road to apply it, here’s the formal definition of this pattern:</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note10"></a>Note</h3><p><span class="strong"><strong>The Strategy Pattern</strong></span> defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="blockquote"><blockquote class="blockquote"><div>Use THIS definition when you need to impress friends and influence key executives.</div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle"></a><h3 class="title">Design Puzzle</h3><p><a id="iddle1434" class="indexterm"></a><a id="iddle1514" class="indexterm"></a>Below you’ll find a mess of classes and interfaces for an action adventure game. You’ll find classes for game characters along with classes for weapon behaviors the characters can use in the game. Each character can make use of one weapon at a time, but can change weapons at any time during the game. Your job is to sort it all out...</p><p>(Answers are at the end of the chapter.)</p><p><span class="strong"><strong>Your task:</strong></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem" style="list-style-type: none">① Arrange the classes.</li><li class="listitem" style="list-style-type: none">② Identify one abstract class, one interface, and eight classes.</li><li class="listitem" style="list-style-type: none">③ Draw arrows between classes.<div class="orderedlist"><ol class="orderedlist" type="a"><li class="listitem">Draw this kind of arrow for inheritance (“extends”). <span class="inlinemediaobject"><a id="inline_id00007"></a><img src="../Images/image00544.jpeg" alt="" hisrc="figs/web/025fig02.png.jpg"/></span></li><li class="listitem">Draw this kind of arrow for interface (“implements”). <span class="inlinemediaobject"><a id="inline_id00008"></a><img src="../Images/image00545.jpeg" alt="" hisrc="figs/web/025fig03.png.jpg"/></span></li><li class="listitem">Draw this kind of arrow for “HAS-A”. <span class="inlinemediaobject"><a id="inline_id00009"></a><img src="../Images/image00546.jpeg" alt="" hisrc="figs/web/025fig04.png.jpg"/></span></li></ol></div></li><li class="listitem" style="list-style-type: none">④ Put the method setWeapon() into the right class.<div class="informalfigure"><a id="med_id00056a"></a><div class="mediaobject"><a id="med_id00056"></a><img src="../Images/image00547.jpeg" alt="image with no caption" hisrc="figs/web/025fig01.png.jpg"/></div></div></li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="overheard_at_the_local_dinerhellip">Overheard at the local diner...</h2></div></div></div><div class="informalfigure"><a id="med_id00057a"></a><div class="mediaobject"><a id="med_id00057"></a><img src="../Images/image00548.jpeg" alt="image with no caption" hisrc="figs/web/026fig01.png.jpg"/></div></div><p><a id="iddle2259" class="indexterm"></a>What’s the difference between these two orders? Not a thing! They’re both the same order, except Alice is using twice the number of words and trying the patience of a grumpy short-order cook.</p><p>What’s Flo got that Alice doesn’t? <span class="strong"><strong>A shared vocabulary</strong></span> with the short-order cook. Not only does that make it easier to communicate with the cook, but it gives the cook less to remember because he’s got all the diner patterns in his head.</p><p>Design Patterns give you a shared vocabulary with other developers. Once you’ve got the vocabulary you can more easily communicate with other developers and inspire those who don’t know patterns to start learning them. It also elevates your thinking about architectures by letting you <span class="strong"><strong>think at the</strong></span> <span class="bolditalic">pattern</span> <span class="strong"><strong>level</strong></span>, not the nitty-gritty <span class="emphasis"><em>object</em></span> level.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="overheard_in_the_next_cubiclehellip">Overheard in the next cubicle...</h2></div></div></div><div class="informalfigure"><a id="med_id00058a"></a><div class="mediaobject"><a id="med_id00058"></a><img src="../Images/image00549.jpeg" alt="image with no caption" hisrc="figs/web/027fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00059a"></a><div class="mediaobject"><a id="med_id00059"></a><img src="../Images/image00550.jpeg" alt="image with no caption" hisrc="figs/web/027fig02.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note11"></a>Brain Power</h3><p>Can you think of other shared vocabularies that are used beyond OO design and diner talk? (Hint: how about auto mechanics, carpenters, gourmet chefs, air traffic control.) What qualities are communicated along with the lingo?</p><p>Can you think of aspects of OO design that get communicated along with pattern names? What qualities get communicated along with the name “Strategy Pattern”?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="power_of_a_shared_pattern_vocabulary">The power of a shared pattern vocabulary</h2></div></div></div><p><a id="iddle2260" class="indexterm"></a><span class="strong"><strong>When you communicate using patterns you are doing <span class="underline">more</span> than just sharing LINGO.</strong></span></p><p><span class="strong"><strong>Shared pattern vocabularies are POWERFUL.</strong></span> When you communicate with another developer or your team using patterns, you are communicating not just a pattern name but a whole set of qualities, characteristics, and constraints that the pattern represents.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note12"></a>Note</h3><p>“We’re using the Strategy Pattern to implement the various behaviors of our ducks.” This tells you the duck behavior has been encapsulated into its own set of classes that can be easily expanded and changed, even at runtime if needed.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><span class="strong"><strong>Patterns allow you to say more with less.</strong></span> When you use a pattern in a description, other developers quickly know precisely the design you have in mind.</p><p><span class="strong"><strong>Talking at the pattern level allows you to stay “in the design” longer.</strong></span> Talking about software systems using patterns allows you to keep the discussion at the design level, without having to dive down to the nitty-gritty details of implementing objects and classes.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note13"></a>Note</h3><p>How many design meetings have you been in that quickly degrade into implementation details?</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><span class="strong"><strong>Shared vocabularies can turbo-charge your development team.</strong></span> A team well versed in design patterns can move more quickly with less room for misunderstanding.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note14"></a>Note</h3><p>As your team begins to share design ideas and experience in terms of patterns, you will build a community of patterns users.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><p><span class="strong"><strong>Shared vocabularies encourage more junior developers to get up to speed.</strong></span> Junior developers look up to experienced developers. When senior developers make use of design patterns, junior developers also become motivated to learn them. Build a community of pattern users at your organization.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note15"></a>Note</h3><p>Think about starting a patterns study group at your organization. Maybe you can even get paid while you’re learning...</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="how_do_i_use_design_patternsquestion_mar">How do I use Design Patterns?</h2></div></div></div><p><a id="iddle1383" class="indexterm"></a><a id="iddle1386" class="indexterm"></a><a id="iddle1395" class="indexterm"></a><a id="iddle1680" class="indexterm"></a><a id="iddle1883" class="indexterm"></a><a id="iddle1884" class="indexterm"></a>We’ve all used off-the-shelf libraries and frameworks. We take them, write some code against their APIs, compile them into our programs, and benefit from a lot of code someone else has written. Think about the Java APIs and all the functionality they give you: network, GUI, IO, etc. Libraries and frameworks go a long way towards a development model where we can just pick and choose components and plug them right in. But... they don’t help us structure our own applications in ways that are easier to understand, more maintainable and flexible. That’s where Design Patterns come in.</p><p>Design patterns don’t go directly into your code, they first go into your BRAIN. Once you’ve loaded your brain with a good working knowledge of patterns, you can then start to apply them to your new designs, and rework your old code when you find it’s degrading into an inflexible mess of jungle spaghetti code.</p><div class="informalfigure"><a id="med_id00060a"></a><div class="mediaobject"><a id="med_id00060"></a><img src="../Images/image00551.jpeg" alt="image with no caption" hisrc="figs/web/029fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="there_are_no_dumb_questions-id00003"></a><h3 class="title">There Are No Dumb Questions</h3><div class="blockquote"><blockquote class="blockquote"><div class="qandaset"><table style="border: 0; width: 100%; "><colgroup><col style="text-align: left; width: 1%; "></col><col></col></colgroup><tbody><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch01qa2qe1"></a><a id="ch01qa2q1"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: If design patterns are so great, why can’t someone build a library of them so I don’t have to?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch01qa2q1a1"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Design patterns are higher level than libraries. Design patterns tell us how to structure classes and objects to solve certain problems and it is our job to adapt those designs to fit our particular application.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch01qa2qe2"></a><a id="ch01qa2q2"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: Aren’t libraries and frameworks also design patterns?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch01qa2q2a2"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> Frameworks and libraries are not design patterns; they provide specific implementations that we link into our code. Sometimes, however, libraries and frameworks make use of design patterns in their implementations. That’s great, because once you understand design patterns, you’ll more quickly understand APIs that are structured around design patterns.</div></td></tr><tr class="question"><td style="text-align: left; vertical-align: top; "><a id="ch01qa2qe3"></a><a id="ch01qa2q3"></a><div><strong>Q:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>Q: So, there are no libraries of design patterns?</strong></span></div></td></tr><tr class="answer"><td style="text-align: left; vertical-align: top; "><a id="ch01qa2q3a3"></a><div><strong>A:</strong></div></td><td style="text-align: left; vertical-align: top; "><div><span class="strong"><strong>A:</strong></span> No, but you will learn later about pattern catalogs with lists of patterns that you can apply to your applications.</div></td></tr></tbody></table></div></blockquote></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="informalfigure"><a id="med_id00061a"></a><div class="mediaobject"><a id="med_id00061"></a><img src="../Images/image00552.jpeg" alt="image with no caption" hisrc="figs/web/030fig01.png.jpg"/></div></div><div class="informalfigure"><a id="med_id00062a"></a><div class="mediaobject"><a id="med_id00062"></a><img src="../Images/image00553.jpeg" alt="image with no caption" hisrc="figs/web/030fig02.png.jpg"/></div></div><p><a id="iddle2012" class="indexterm"></a><a id="iddle2083" class="indexterm"></a><span class="strong"><strong>Developer:</strong></span> Okay, hmm, but isn’t this all just good object-oriented design; I mean as long as I follow encapsulation and I know about abstraction, inheritance, and polymorphism, do I really need to think about Design Patterns? Isn’t it pretty straightforward? Isn’t this why I took all those OO courses? I think Design Patterns are useful for people who don’t know good OO design.</p><p><span class="strong"><strong>Guru:</strong></span> Ah, this is one of the true misunderstandings of object-oriented development: that by knowing the OO basics we are automatically going to be good at building flexible, reusable, and maintainable systems.</p><p><span class="strong"><strong>Developer:</strong></span> No?</p><p><span class="strong"><strong>Guru:</strong></span> No. As it turns out, constructing OO systems that have these properties is not always obvious and has been discovered only through hard work.</p><p><span class="strong"><strong>Developer:</strong></span> I think I’m starting to get it. These, sometimes non-obvious, ways of constructing object-oriented systems have been collected...</p><p><span class="strong"><strong>Guru:</strong></span> ...yes, into a set of patterns called Design Patterns.</p><p><span class="strong"><strong>Developer:</strong></span> So, by knowing patterns, I can skip the hard work and jump straight to designs that always work?</p><p><span class="strong"><strong>Guru:</strong></span> Yes, to an extent, but remember, design is an art. There will always be tradeoffs. But, if you follow well thought-out and time-tested design patterns, you’ll be way ahead.</p><p><span class="strong"><strong>Developer:</strong></span> What do I do if I can’t find a pattern?</p><div class="informalfigure"><a id="med_id00063a"></a><div class="mediaobject"><a id="med_id00063"></a><img src="../Images/image00554.jpeg" alt="image with no caption" hisrc="figs/web/031fig01.png.jpg"/></div></div><p><span class="strong"><strong>Guru:</strong></span> There are some object-oriented principles that underlie the patterns, and knowing these will help you to cope when you can’t find a pattern that matches your problem.</p><p><span class="strong"><strong>Developer:</strong></span> Principles? You mean beyond abstraction, encapsulation, and...</p><p><span class="strong"><strong>Guru:</strong></span> Yes, one of the secrets to creating maintainable OO systems is thinking about how they might change in the future, and these principles address those issues.</p></div><div class="sect1"><div class="titlepage"><div><div><h2 class="title" style="clear: both" id="tools_for_your_design_toolbox">Tools for your Design Toolbox</h2></div></div></div><p>You’ve nearly made it through the first chapter! You’ve already put a few tools in your OO toolbox; let’s make a list of them before we move on to <a class="xref" href="part0009.xhtml#aid-8IL22">Chapter 2</a>.</p><div class="informalfigure"><a id="med_id00064a"></a><div class="mediaobject"><a id="med_id00064"></a><img src="../Images/image00555.jpeg" alt="image with no caption" hisrc="figs/web/032fig01.png.jpg"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="bullet_points"></a><h3 class="title">Bullet Points</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Knowing the OO basics does not make you a good OO designer.</li><li class="listitem">Good OO designs are reusable, extensible, and maintainable.</li><li class="listitem">Patterns show you how to build systems with good OO design qualities.</li><li class="listitem">Patterns are proven object-oriented experience.</li><li class="listitem">Patterns don’t give you code, they give you general solutions to design problems. You apply them to your specific application.</li><li class="listitem">Patterns aren’t <span class="emphasis"><em>invented</em></span>, they are <span class="emphasis"><em>discovered</em></span>.</li><li class="listitem">Most patterns and principles address issues of <span class="emphasis"><em>change</em></span> in software.</li><li class="listitem">Most patterns allow some part of a system to vary independently of all other parts.</li><li class="listitem">We often try to take what varies in a system and encapsulate it.</li><li class="listitem">Patterns provide a shared language that can maximize the value of your communication with other developers.</li></ul></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword"></a><h3 class="title">Design Patterns Crossword</h3><p><a id="iddle1339" class="indexterm"></a>Let’s give your right brain something to do.</p><p>It’s your standard crossword; all of the solution words are from this chapter.</p><div class="informalfigure"><a id="med_id00065a"></a><div class="mediaobject"><a id="med_id00065"></a><img src="../Images/image00556.gif" alt="image with no caption" hisrc="figs/web/033fig01.png"/></div></div><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col></colgroup><thead><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>Across</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Down</p></td></tr></thead><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>2. ________ what varies.</p>
<p>4. Design patterns __________.</p>
<p>6. Java IO, Networking, Sound.</p>
<p>9. Rubber ducks make a __________.</p>
<p>13. Bartender thought they were called.</p>
<p>15. Program to this, not an implementation.</p>
<p>17. Patterns go into your _________.</p>
<p>18. Learn from the other guy’s ___________.</p>
<p>19. Development constant.</p>
<p>20. Patterns give us a shared ____________.</p></td><td style="vertical-align: top; "><p>1. Patterns _______ in many applications.</p>
<p>3. Favor this over inheritance.</p>
<p>5. Dan was thrilled with this pattern.</p>
<p>7. Most patterns follow from OO _________.</p>
<p>8. Not your own __________.</p>
<p>10. High level libraries.</p>
<p>11. Joe’s favorite drink.</p>
<p>12. Pattern that fixed the simulator.</p>
<p>13. Duck that can’t quack.</p>
<p>14. Grilled cheese with bacon.</p>
<p>15. Duck demo was located here.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_puzzle_solution"></a><h3 class="title">Design Puzzle Solution</h3><p><a id="iddle1435" class="indexterm"></a><a id="iddle1515" class="indexterm"></a>Character is the abstract class for all the other characters (King, Queen, Knight, and Troll), while WeaponBehavior is an interface that all weapon behaviors implement. So all actual characters and weapons are concrete classes.</p><p>To switch weapons, each character calls the setWeapon() method, which is defined in the Character superclass. During a fight the useWeapon() method is called on the current weapon set for a given character to inflict great bodily damage on another character.</p><div class="informalfigure"><a id="med_id00066a"></a><div class="mediaobject"><a id="med_id00066"></a><img src="../Images/image00557.jpeg" alt="image with no caption" hisrc="figs/web/034fig01.png.jpg"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution"></a><h3 class="title">Sharpen your pencil Solution</h3><p><a id="iddle1558" class="indexterm"></a><a id="iddle1561" class="indexterm"></a><a id="iddle2303" class="indexterm"></a><a id="iddle2306" class="indexterm"></a>Which of the following are disadvantages of using subclassing to provide specific Duck behavior? (Choose all that apply.) Here’s our solution.</p><div class="informaltable"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="c1"></col><col class="c2"></col><col class="c3"></col></colgroup><tbody><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00010"></a><img src="../Images/image00558.jpeg" alt="" hisrc="figs/web/035fig01.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>A.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Code is duplicated across subclasses.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00011"></a><img src="../Images/image00559.jpeg" alt="" hisrc="figs/web/035fig02.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>B.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Runtime behavior changes are difficult.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00012"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>C.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>We can’t make duck’s dance.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00013"></a><img src="../Images/image00560.jpeg" alt="" hisrc="figs/web/035fig03.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>D.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Hard to gain knowledge of all duck behaviors.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00014"></a><img src="../Images/image00519.jpeg" alt="" hisrc="figs/web/square.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p>E.</p></td><td style="vertical-align: top; border-bottom: 0.5pt solid ; "><p>Ducks can’t fly and quack at the same time.</p></td></tr><tr><td style="vertical-align: top; border-right: 0.5pt solid ; "><p><span class="inlinemediaobject"><a id="inline_id00015"></a><img src="../Images/image00561.jpeg" alt="" hisrc="figs/web/035fig04.png.jpg"/></span></p></td><td style="vertical-align: top; border-right: 0.5pt solid ; "><p>F.</p></td><td style="vertical-align: top; "><p>Changes can unintentionally affect other ducks.</p></td></tr></tbody></table></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="sharpen_your_pencil_solution-id00004"></a><h3 class="title">Sharpen your pencil Solution</h3><p>What are some factors that drive change in your applications? You might have a very different list, but here’s a few of ours. Look familiar? Here’s our solution.</p><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="note"><h3 class="title"><a id="ch01note16"></a>Note</h3><p>My customers or users decide they want something else, or they want new functionality.</p><p>My company decided it is going with another database vendor and it is also purchasing its data from another supplier that uses a different data format. Argh!</p><p>Well, technology changes and we’ve got to update our code to make use of protocols.</p><p>We’ve learned enough building our system that we’d like to go back and do things a little better.</p></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div><div class="sidebar"><a id="design_patterns_crossword_solution"></a><h3 class="title">Design Patterns Crossword Solution</h3><div class="informalfigure"><a id="med_id00067a"></a><div class="mediaobject"><a id="med_id00067"></a><img src="../Images/image00562.gif" alt="image with no caption" hisrc="figs/web/036fig01.png"/></div></div></div><div class="orm-notedivider"><hr data-AmznRemoved-M8="true"/></div></div></section></body></html>