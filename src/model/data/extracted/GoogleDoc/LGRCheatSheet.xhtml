<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>LGR Cheat Sheet</title>
    <meta charset="UTF-8"/>
    <style type="text/css">@import url(https://themes.googleusercontent.com/fonts/css?kit=cGvuclDC_Z1vE_cnVEU6Ae_NZQ7StBcqH_vXVqoPMX0);.lst-kix_list_4-1&gt;li{counter-increment:lst-ctn-kix_list_4-1}.lst-kix_u12dwo339v7e-5&gt;li:before{content:"\0025a0   "}.lst-kix_f90tmlyeiq78-7&gt;li{counter-increment:lst-ctn-kix_f90tmlyeiq78-7}.lst-kix_u12dwo339v7e-3&gt;li:before{content:"\0025cf   "}.lst-kix_u12dwo339v7e-7&gt;li:before{content:"\0025cb   "}ul.lst-kix_list_1-0{list-style-type:none}.lst-kix_u12dwo339v7e-4&gt;li:before{content:"\0025cb   "}.lst-kix_u12dwo339v7e-8&gt;li:before{content:"\0025a0   "}ol.lst-kix_list_3-1.start{counter-reset:lst-ctn-kix_list_3-1 0}.lst-kix_u12dwo339v7e-6&gt;li:before{content:"\0025cf   "}ol.lst-kix_xmflyhenddll-0.start{counter-reset:lst-ctn-kix_xmflyhenddll-0 0}ul.lst-kix_list_1-3{list-style-type:none}ul.lst-kix_list_1-4{list-style-type:none}ul.lst-kix_list_1-1{list-style-type:none}ul.lst-kix_list_1-2{list-style-type:none}ul.lst-kix_list_1-7{list-style-type:none}ul.lst-kix_list_1-8{list-style-type:none}.lst-kix_xmflyhenddll-3&gt;li{counter-increment:lst-ctn-kix_xmflyhenddll-3}ul.lst-kix_list_1-5{list-style-type:none}ul.lst-kix_list_1-6{list-style-type:none}ol.lst-kix_gg1ysw8aw9tp-3.start{counter-reset:lst-ctn-kix_gg1ysw8aw9tp-3 0}.lst-kix_gg1ysw8aw9tp-1&gt;li{counter-increment:lst-ctn-kix_gg1ysw8aw9tp-1}.lst-kix_b1yjov9mndiw-7&gt;li{counter-increment:lst-ctn-kix_b1yjov9mndiw-7}.lst-kix_list_4-3&gt;li{counter-increment:lst-ctn-kix_list_4-3}ol.lst-kix_b1yjov9mndiw-3.start{counter-reset:lst-ctn-kix_b1yjov9mndiw-3 0}ol.lst-kix_list_4-5.start{counter-reset:lst-ctn-kix_list_4-5 0}.lst-kix_xmflyhenddll-1&gt;li{counter-increment:lst-ctn-kix_xmflyhenddll-1}ol.lst-kix_f90tmlyeiq78-5.start{counter-reset:lst-ctn-kix_f90tmlyeiq78-5 0}ol.lst-kix_list_3-7.start{counter-reset:lst-ctn-kix_list_3-7 0}.lst-kix_u12dwo339v7e-0&gt;li:before{content:"\0025cf   "}.lst-kix_u12dwo339v7e-1&gt;li:before{content:"\0025cb   "}.lst-kix_list_3-2&gt;li{counter-increment:lst-ctn-kix_list_3-2}.lst-kix_u12dwo339v7e-2&gt;li:before{content:"\0025a0   "}.lst-kix_b1yjov9mndiw-0&gt;li{counter-increment:lst-ctn-kix_b1yjov9mndiw-0}ol.lst-kix_b1yjov9mndiw-4.start{counter-reset:lst-ctn-kix_b1yjov9mndiw-4 0}.lst-kix_list_3-0&gt;li{counter-increment:lst-ctn-kix_list_3-0}ol.lst-kix_list_4-0.start{counter-reset:lst-ctn-kix_list_4-0 0}.lst-kix_list_3-6&gt;li{counter-increment:lst-ctn-kix_list_3-6}ol.lst-kix_gg1ysw8aw9tp-8.start{counter-reset:lst-ctn-kix_gg1ysw8aw9tp-8 0}.lst-kix_f90tmlyeiq78-5&gt;li{counter-increment:lst-ctn-kix_f90tmlyeiq78-5}.lst-kix_gg1ysw8aw9tp-3&gt;li{counter-increment:lst-ctn-kix_gg1ysw8aw9tp-3}ol.lst-kix_list_3-2.start{counter-reset:lst-ctn-kix_list_3-2 0}.lst-kix_xmflyhenddll-8&gt;li:before{content:"" counter(lst-ctn-kix_xmflyhenddll-8,lower-roman) ". "}.lst-kix_gg1ysw8aw9tp-8&gt;li{counter-increment:lst-ctn-kix_gg1ysw8aw9tp-8}.lst-kix_list_2-7&gt;li:before{content:"\0025cb   "}.lst-kix_list_2-5&gt;li:before{content:"\0025a0   "}ol.lst-kix_f90tmlyeiq78-1.start{counter-reset:lst-ctn-kix_f90tmlyeiq78-1 0}.lst-kix_f90tmlyeiq78-1&gt;li{counter-increment:lst-ctn-kix_f90tmlyeiq78-1}.lst-kix_xmflyhenddll-6&gt;li:before{content:"" counter(lst-ctn-kix_xmflyhenddll-6,decimal) ". "}ol.lst-kix_list_4-6.start{counter-reset:lst-ctn-kix_list_4-6 0}ol.lst-kix_list_3-0.start{counter-reset:lst-ctn-kix_list_3-0 0}ol.lst-kix_list_4-3.start{counter-reset:lst-ctn-kix_list_4-3 0}.lst-kix_f90tmlyeiq78-0&gt;li{counter-increment:lst-ctn-kix_f90tmlyeiq78-0}.lst-kix_list_4-7&gt;li{counter-increment:lst-ctn-kix_list_4-7}.lst-kix_gg1ysw8aw9tp-1&gt;li:before{content:"" counter(lst-ctn-kix_gg1ysw8aw9tp-1,lower-latin) ". "}.lst-kix_list_4-1&gt;li:before{content:"" counter(lst-ctn-kix_list_4-1,lower-latin) ". "}.lst-kix_b1yjov9mndiw-4&gt;li{counter-increment:lst-ctn-kix_b1yjov9mndiw-4}.lst-kix_xmflyhenddll-0&gt;li:before{content:"" counter(lst-ctn-kix_xmflyhenddll-0,decimal) ". "}.lst-kix_list_4-3&gt;li:before{content:"" counter(lst-ctn-kix_list_4-3,decimal) ". "}.lst-kix_list_4-5&gt;li:before{content:"" counter(lst-ctn-kix_list_4-5,lower-roman) ". "}.lst-kix_gg1ysw8aw9tp-7&gt;li{counter-increment:lst-ctn-kix_gg1ysw8aw9tp-7}.lst-kix_xmflyhenddll-4&gt;li:before{content:"" counter(lst-ctn-kix_xmflyhenddll-4,lower-latin) ". "}.lst-kix_list_3-5&gt;li{counter-increment:lst-ctn-kix_list_3-5}ol.lst-kix_xmflyhenddll-1.start{counter-reset:lst-ctn-kix_xmflyhenddll-1 0}.lst-kix_xmflyhenddll-2&gt;li:before{content:"" counter(lst-ctn-kix_xmflyhenddll-2,lower-roman) ". "}.lst-kix_list_3-4&gt;li{counter-increment:lst-ctn-kix_list_3-4}ol.lst-kix_list_4-4.start{counter-reset:lst-ctn-kix_list_4-4 0}.lst-kix_b1yjov9mndiw-5&gt;li{counter-increment:lst-ctn-kix_b1yjov9mndiw-5}ul.lst-kix_list_2-8{list-style-type:none}ul.lst-kix_list_2-2{list-style-type:none}ul.lst-kix_list_2-3{list-style-type:none}ul.lst-kix_list_2-0{list-style-type:none}.lst-kix_k36rnhq3bscv-7&gt;li:before{content:"\0025cb   "}ul.lst-kix_list_2-1{list-style-type:none}ol.lst-kix_b1yjov9mndiw-1.start{counter-reset:lst-ctn-kix_b1yjov9mndiw-1 0}ul.lst-kix_list_2-6{list-style-type:none}.lst-kix_list_1-1&gt;li:before{content:"\0025cb   "}ul.lst-kix_list_2-7{list-style-type:none}ul.lst-kix_list_2-4{list-style-type:none}ul.lst-kix_list_2-5{list-style-type:none}.lst-kix_list_1-3&gt;li:before{content:"\0025cf   "}.lst-kix_k36rnhq3bscv-3&gt;li:before{content:"\0025cf   "}.lst-kix_k36rnhq3bscv-5&gt;li:before{content:"\0025a0   "}ul.lst-kix_veeg7gwdq0jz-3{list-style-type:none}ul.lst-kix_veeg7gwdq0jz-2{list-style-type:none}.lst-kix_gg1ysw8aw9tp-3&gt;li:before{content:"" counter(lst-ctn-kix_gg1ysw8aw9tp-3,decimal) ". "}.lst-kix_gg1ysw8aw9tp-7&gt;li:before{content:"" counter(lst-ctn-kix_gg1ysw8aw9tp-7,lower-latin) ". "}.lst-kix_xmflyhenddll-5&gt;li{counter-increment:lst-ctn-kix_xmflyhenddll-5}ul.lst-kix_veeg7gwdq0jz-1{list-style-type:none}ul.lst-kix_veeg7gwdq0jz-0{list-style-type:none}.lst-kix_list_4-8&gt;li{counter-increment:lst-ctn-kix_list_4-8}.lst-kix_list_1-7&gt;li:before{content:"\0025cb   "}.lst-kix_list_1-5&gt;li:before{content:"\0025a0   "}.lst-kix_gg1ysw8aw9tp-5&gt;li:before{content:"" counter(lst-ctn-kix_gg1ysw8aw9tp-5,lower-roman) ". "}ol.lst-kix_b1yjov9mndiw-2.start{counter-reset:lst-ctn-kix_b1yjov9mndiw-2 0}.lst-kix_list_2-1&gt;li:before{content:"\0025cb   "}ol.lst-kix_f90tmlyeiq78-0.start{counter-reset:lst-ctn-kix_f90tmlyeiq78-0 0}.lst-kix_list_2-3&gt;li:before{content:"\0025cf   "}.lst-kix_k36rnhq3bscv-1&gt;li:before{content:"\0025cb   "}.lst-kix_list_4-2&gt;li{counter-increment:lst-ctn-kix_list_4-2}ol.lst-kix_list_3-1{list-style-type:none}.lst-kix_f90tmlyeiq78-6&gt;li:before{content:"" counter(lst-ctn-kix_f90tmlyeiq78-6,decimal) ". "}ol.lst-kix_list_3-2{list-style-type:none}.lst-kix_b1yjov9mndiw-7&gt;li:before{content:"" counter(lst-ctn-kix_b1yjov9mndiw-7,lower-latin) ". "}.lst-kix_list_3-1&gt;li{counter-increment:lst-ctn-kix_list_3-1}ol.lst-kix_list_3-3{list-style-type:none}ol.lst-kix_list_3-4.start{counter-reset:lst-ctn-kix_list_3-4 0}ol.lst-kix_list_3-4{list-style-type:none}.lst-kix_f90tmlyeiq78-4&gt;li:before{content:"" counter(lst-ctn-kix_f90tmlyeiq78-4,lower-latin) ". "}.lst-kix_f90tmlyeiq78-8&gt;li:before{content:"" counter(lst-ctn-kix_f90tmlyeiq78-8,lower-roman) ". "}.lst-kix_b1yjov9mndiw-5&gt;li:before{content:"" counter(lst-ctn-kix_b1yjov9mndiw-5,lower-roman) ". "}.lst-kix_gg1ysw8aw9tp-2&gt;li{counter-increment:lst-ctn-kix_gg1ysw8aw9tp-2}.lst-kix_f90tmlyeiq78-3&gt;li:before{content:"" counter(lst-ctn-kix_f90tmlyeiq78-3,decimal) ". "}.lst-kix_f90tmlyeiq78-7&gt;li:before{content:"" counter(lst-ctn-kix_f90tmlyeiq78-7,lower-latin) ". "}.lst-kix_b1yjov9mndiw-6&gt;li:before{content:"" counter(lst-ctn-kix_b1yjov9mndiw-6,decimal) ". "}ol.lst-kix_list_3-0{list-style-type:none}ol.lst-kix_b1yjov9mndiw-6.start{counter-reset:lst-ctn-kix_b1yjov9mndiw-6 0}.lst-kix_f90tmlyeiq78-2&gt;li:before{content:"" counter(lst-ctn-kix_f90tmlyeiq78-2,lower-roman) ". "}ol.lst-kix_xmflyhenddll-3.start{counter-reset:lst-ctn-kix_xmflyhenddll-3 0}.lst-kix_list_3-0&gt;li:before{content:"" counter(lst-ctn-kix_list_3-0,decimal) ". "}.lst-kix_b1yjov9mndiw-8&gt;li:before{content:"" counter(lst-ctn-kix_b1yjov9mndiw-8,lower-roman) ". "}.lst-kix_f90tmlyeiq78-1&gt;li:before{content:"" counter(lst-ctn-kix_f90tmlyeiq78-1,lower-latin) ". "}.lst-kix_b1yjov9mndiw-0&gt;li:before{content:"" counter(lst-ctn-kix_b1yjov9mndiw-0,decimal) ". "}.lst-kix_list_3-1&gt;li:before{content:"" counter(lst-ctn-kix_list_3-1,lower-latin) ". "}.lst-kix_list_3-2&gt;li:before{content:"" counter(lst-ctn-kix_list_3-2,lower-roman) ". "}ol.lst-kix_f90tmlyeiq78-8{list-style-type:none}.lst-kix_f90tmlyeiq78-0&gt;li:before{content:"" counter(lst-ctn-kix_f90tmlyeiq78-0,decimal) ". "}ol.lst-kix_f90tmlyeiq78-7{list-style-type:none}.lst-kix_b1yjov9mndiw-1&gt;li:before{content:"" counter(lst-ctn-kix_b1yjov9mndiw-1,lower-latin) ". "}ol.lst-kix_f90tmlyeiq78-6{list-style-type:none}.lst-kix_list_4-0&gt;li{counter-increment:lst-ctn-kix_list_4-0}ol.lst-kix_f90tmlyeiq78-5{list-style-type:none}.lst-kix_b1yjov9mndiw-2&gt;li:before{content:"" counter(lst-ctn-kix_b1yjov9mndiw-2,lower-roman) ". "}ol.lst-kix_f90tmlyeiq78-4{list-style-type:none}ul.lst-kix_veeg7gwdq0jz-7{list-style-type:none}.lst-kix_list_3-5&gt;li:before{content:"" counter(lst-ctn-kix_list_3-5,lower-roman) ". "}ol.lst-kix_f90tmlyeiq78-3{list-style-type:none}.lst-kix_b1yjov9mndiw-3&gt;li:before{content:"" counter(lst-ctn-kix_b1yjov9mndiw-3,decimal) ". "}ol.lst-kix_b1yjov9mndiw-8{list-style-type:none}ul.lst-kix_veeg7gwdq0jz-6{list-style-type:none}ol.lst-kix_f90tmlyeiq78-2{list-style-type:none}ul.lst-kix_veeg7gwdq0jz-5{list-style-type:none}.lst-kix_list_3-4&gt;li:before{content:"" counter(lst-ctn-kix_list_3-4,lower-latin) ". "}ol.lst-kix_f90tmlyeiq78-1{list-style-type:none}ul.lst-kix_veeg7gwdq0jz-4{list-style-type:none}ol.lst-kix_f90tmlyeiq78-0{list-style-type:none}ol.lst-kix_gg1ysw8aw9tp-6.start{counter-reset:lst-ctn-kix_gg1ysw8aw9tp-6 0}.lst-kix_list_3-3&gt;li:before{content:"" counter(lst-ctn-kix_list_3-3,decimal) ". "}ol.lst-kix_list_3-5{list-style-type:none}ol.lst-kix_list_3-6{list-style-type:none}ol.lst-kix_list_3-7{list-style-type:none}.lst-kix_b1yjov9mndiw-4&gt;li:before{content:"" counter(lst-ctn-kix_b1yjov9mndiw-4,lower-latin) ". "}ul.lst-kix_veeg7gwdq0jz-8{list-style-type:none}ol.lst-kix_list_3-8{list-style-type:none}ol.lst-kix_f90tmlyeiq78-2.start{counter-reset:lst-ctn-kix_f90tmlyeiq78-2 0}ol.lst-kix_b1yjov9mndiw-0{list-style-type:none}ol.lst-kix_b1yjov9mndiw-1{list-style-type:none}.lst-kix_qe4ryx414l01-6&gt;li:before{content:"\0025cf   "}.lst-kix_qe4ryx414l01-7&gt;li:before{content:"\0025cb   "}.lst-kix_list_3-8&gt;li:before{content:"" counter(lst-ctn-kix_list_3-8,lower-roman) ". "}ol.lst-kix_b1yjov9mndiw-2{list-style-type:none}ol.lst-kix_b1yjov9mndiw-3{list-style-type:none}ol.lst-kix_b1yjov9mndiw-4{list-style-type:none}ol.lst-kix_b1yjov9mndiw-5{list-style-type:none}.lst-kix_qe4ryx414l01-5&gt;li:before{content:"\0025a0   "}ol.lst-kix_b1yjov9mndiw-6{list-style-type:none}.lst-kix_f90tmlyeiq78-6&gt;li{counter-increment:lst-ctn-kix_f90tmlyeiq78-6}ol.lst-kix_b1yjov9mndiw-7{list-style-type:none}.lst-kix_qe4ryx414l01-2&gt;li:before{content:"\0025a0   "}.lst-kix_qe4ryx414l01-3&gt;li:before{content:"\0025cf   "}.lst-kix_list_3-6&gt;li:before{content:"" counter(lst-ctn-kix_list_3-6,decimal) ". "}ol.lst-kix_gg1ysw8aw9tp-1{list-style-type:none}.lst-kix_list_3-7&gt;li:before{content:"" counter(lst-ctn-kix_list_3-7,lower-latin) ". "}ol.lst-kix_gg1ysw8aw9tp-0{list-style-type:none}.lst-kix_qe4ryx414l01-4&gt;li:before{content:"\0025cb   "}ol.lst-kix_gg1ysw8aw9tp-3{list-style-type:none}.lst-kix_gg1ysw8aw9tp-4&gt;li{counter-increment:lst-ctn-kix_gg1ysw8aw9tp-4}ol.lst-kix_gg1ysw8aw9tp-2{list-style-type:none}ol.lst-kix_gg1ysw8aw9tp-5{list-style-type:none}.lst-kix_xmflyhenddll-4&gt;li{counter-increment:lst-ctn-kix_xmflyhenddll-4}ol.lst-kix_gg1ysw8aw9tp-4{list-style-type:none}ol.lst-kix_gg1ysw8aw9tp-7{list-style-type:none}ol.lst-kix_gg1ysw8aw9tp-6{list-style-type:none}ol.lst-kix_gg1ysw8aw9tp-0.start{counter-reset:lst-ctn-kix_gg1ysw8aw9tp-0 0}ol.lst-kix_gg1ysw8aw9tp-8{list-style-type:none}.lst-kix_qe4ryx414l01-1&gt;li:before{content:"\0025cb   "}ol.lst-kix_list_4-2.start{counter-reset:lst-ctn-kix_list_4-2 0}ol.lst-kix_b1yjov9mndiw-0.start{counter-reset:lst-ctn-kix_b1yjov9mndiw-0 0}.lst-kix_qe4ryx414l01-0&gt;li:before{content:"\0025cf   "}ol.lst-kix_f90tmlyeiq78-8.start{counter-reset:lst-ctn-kix_f90tmlyeiq78-8 0}.lst-kix_veeg7gwdq0jz-0&gt;li:before{content:"\0025cf   "}ol.lst-kix_xmflyhenddll-8.start{counter-reset:lst-ctn-kix_xmflyhenddll-8 0}.lst-kix_list_4-4&gt;li{counter-increment:lst-ctn-kix_list_4-4}ol.lst-kix_gg1ysw8aw9tp-7.start{counter-reset:lst-ctn-kix_gg1ysw8aw9tp-7 0}.lst-kix_veeg7gwdq0jz-3&gt;li:before{content:"\0025cf   "}.lst-kix_list_4-8&gt;li:before{content:"" counter(lst-ctn-kix_list_4-8,lower-roman) ". "}.lst-kix_list_4-7&gt;li:before{content:"" counter(lst-ctn-kix_list_4-7,lower-latin) ". "}.lst-kix_veeg7gwdq0jz-4&gt;li:before{content:"\0025cb   "}.lst-kix_veeg7gwdq0jz-5&gt;li:before{content:"\0025a0   "}ul.lst-kix_k36rnhq3bscv-7{list-style-type:none}ul.lst-kix_k36rnhq3bscv-8{list-style-type:none}.lst-kix_b1yjov9mndiw-6&gt;li{counter-increment:lst-ctn-kix_b1yjov9mndiw-6}ul.lst-kix_k36rnhq3bscv-5{list-style-type:none}ul.lst-kix_k36rnhq3bscv-6{list-style-type:none}ol.lst-kix_list_4-1.start{counter-reset:lst-ctn-kix_list_4-1 0}ol.lst-kix_list_4-8.start{counter-reset:lst-ctn-kix_list_4-8 0}ul.lst-kix_k36rnhq3bscv-0{list-style-type:none}.lst-kix_xmflyhenddll-0&gt;li{counter-increment:lst-ctn-kix_xmflyhenddll-0}ol.lst-kix_list_3-3.start{counter-reset:lst-ctn-kix_list_3-3 0}ol.lst-kix_gg1ysw8aw9tp-1.start{counter-reset:lst-ctn-kix_gg1ysw8aw9tp-1 0}.lst-kix_veeg7gwdq0jz-2&gt;li:before{content:"\0025a0   "}ul.lst-kix_k36rnhq3bscv-3{list-style-type:none}.lst-kix_xmflyhenddll-6&gt;li{counter-increment:lst-ctn-kix_xmflyhenddll-6}ul.lst-kix_k36rnhq3bscv-4{list-style-type:none}.lst-kix_qe4ryx414l01-8&gt;li:before{content:"\0025a0   "}ul.lst-kix_k36rnhq3bscv-1{list-style-type:none}.lst-kix_veeg7gwdq0jz-1&gt;li:before{content:"\0025cb   "}ul.lst-kix_k36rnhq3bscv-2{list-style-type:none}ol.lst-kix_xmflyhenddll-2.start{counter-reset:lst-ctn-kix_xmflyhenddll-2 0}.lst-kix_list_3-3&gt;li{counter-increment:lst-ctn-kix_list_3-3}.lst-kix_f90tmlyeiq78-2&gt;li{counter-increment:lst-ctn-kix_f90tmlyeiq78-2}.lst-kix_veeg7gwdq0jz-6&gt;li:before{content:"\0025cf   "}.lst-kix_veeg7gwdq0jz-8&gt;li:before{content:"\0025a0   "}.lst-kix_gg1ysw8aw9tp-6&gt;li{counter-increment:lst-ctn-kix_gg1ysw8aw9tp-6}.lst-kix_veeg7gwdq0jz-7&gt;li:before{content:"\0025cb   "}ol.lst-kix_f90tmlyeiq78-3.start{counter-reset:lst-ctn-kix_f90tmlyeiq78-3 0}.lst-kix_f90tmlyeiq78-5&gt;li:before{content:"" counter(lst-ctn-kix_f90tmlyeiq78-5,lower-roman) ". "}ol.lst-kix_b1yjov9mndiw-5.start{counter-reset:lst-ctn-kix_b1yjov9mndiw-5 0}ol.lst-kix_list_4-7.start{counter-reset:lst-ctn-kix_list_4-7 0}.lst-kix_gg1ysw8aw9tp-0&gt;li{counter-increment:lst-ctn-kix_gg1ysw8aw9tp-0}.lst-kix_f90tmlyeiq78-8&gt;li{counter-increment:lst-ctn-kix_f90tmlyeiq78-8}.lst-kix_list_2-6&gt;li:before{content:"\0025cf   "}.lst-kix_list_3-7&gt;li{counter-increment:lst-ctn-kix_list_3-7}.lst-kix_xmflyhenddll-7&gt;li:before{content:"" counter(lst-ctn-kix_xmflyhenddll-7,lower-latin) ". "}ol.lst-kix_gg1ysw8aw9tp-2.start{counter-reset:lst-ctn-kix_gg1ysw8aw9tp-2 0}.lst-kix_list_2-4&gt;li:before{content:"\0025cb   "}.lst-kix_list_2-8&gt;li:before{content:"\0025a0   "}.lst-kix_xmflyhenddll-5&gt;li:before{content:"" counter(lst-ctn-kix_xmflyhenddll-5,lower-roman) ". "}.lst-kix_b1yjov9mndiw-2&gt;li{counter-increment:lst-ctn-kix_b1yjov9mndiw-2}ol.lst-kix_xmflyhenddll-2{list-style-type:none}ol.lst-kix_xmflyhenddll-3{list-style-type:none}ol.lst-kix_xmflyhenddll-0{list-style-type:none}ol.lst-kix_xmflyhenddll-1{list-style-type:none}ol.lst-kix_xmflyhenddll-6{list-style-type:none}ol.lst-kix_xmflyhenddll-7{list-style-type:none}.lst-kix_b1yjov9mndiw-3&gt;li{counter-increment:lst-ctn-kix_b1yjov9mndiw-3}ol.lst-kix_xmflyhenddll-4{list-style-type:none}ol.lst-kix_xmflyhenddll-5{list-style-type:none}.lst-kix_gg1ysw8aw9tp-0&gt;li:before{content:"" counter(lst-ctn-kix_gg1ysw8aw9tp-0,decimal) ". "}ol.lst-kix_xmflyhenddll-8{list-style-type:none}.lst-kix_gg1ysw8aw9tp-2&gt;li:before{content:"" counter(lst-ctn-kix_gg1ysw8aw9tp-2,lower-roman) ". "}ol.lst-kix_f90tmlyeiq78-4.start{counter-reset:lst-ctn-kix_f90tmlyeiq78-4 0}ol.lst-kix_list_3-8.start{counter-reset:lst-ctn-kix_list_3-8 0}.lst-kix_b1yjov9mndiw-1&gt;li{counter-increment:lst-ctn-kix_b1yjov9mndiw-1}ol.lst-kix_xmflyhenddll-7.start{counter-reset:lst-ctn-kix_xmflyhenddll-7 0}.lst-kix_list_4-0&gt;li:before{content:"" counter(lst-ctn-kix_list_4-0,decimal) ". "}ol.lst-kix_b1yjov9mndiw-7.start{counter-reset:lst-ctn-kix_b1yjov9mndiw-7 0}.lst-kix_list_3-8&gt;li{counter-increment:lst-ctn-kix_list_3-8}.lst-kix_list_4-6&gt;li{counter-increment:lst-ctn-kix_list_4-6}.lst-kix_xmflyhenddll-7&gt;li{counter-increment:lst-ctn-kix_xmflyhenddll-7}.lst-kix_list_4-4&gt;li:before{content:"" counter(lst-ctn-kix_list_4-4,lower-latin) ". "}ul.lst-kix_u12dwo339v7e-0{list-style-type:none}.lst-kix_xmflyhenddll-1&gt;li:before{content:"" counter(lst-ctn-kix_xmflyhenddll-1,lower-latin) ". "}ul.lst-kix_u12dwo339v7e-1{list-style-type:none}ul.lst-kix_u12dwo339v7e-2{list-style-type:none}ul.lst-kix_u12dwo339v7e-3{list-style-type:none}.lst-kix_list_4-2&gt;li:before{content:"" counter(lst-ctn-kix_list_4-2,lower-roman) ". "}.lst-kix_list_4-6&gt;li:before{content:"" counter(lst-ctn-kix_list_4-6,decimal) ". "}ol.lst-kix_xmflyhenddll-4.start{counter-reset:lst-ctn-kix_xmflyhenddll-4 0}ul.lst-kix_u12dwo339v7e-4{list-style-type:none}ul.lst-kix_u12dwo339v7e-5{list-style-type:none}ul.lst-kix_u12dwo339v7e-6{list-style-type:none}ul.lst-kix_u12dwo339v7e-7{list-style-type:none}ul.lst-kix_u12dwo339v7e-8{list-style-type:none}.lst-kix_xmflyhenddll-3&gt;li:before{content:"" counter(lst-ctn-kix_xmflyhenddll-3,decimal) ". "}ol.lst-kix_list_4-0{list-style-type:none}.lst-kix_gg1ysw8aw9tp-5&gt;li{counter-increment:lst-ctn-kix_gg1ysw8aw9tp-5}ol.lst-kix_list_4-1{list-style-type:none}ol.lst-kix_list_4-2{list-style-type:none}ol.lst-kix_list_4-3{list-style-type:none}ol.lst-kix_list_3-6.start{counter-reset:lst-ctn-kix_list_3-6 0}ol.lst-kix_gg1ysw8aw9tp-4.start{counter-reset:lst-ctn-kix_gg1ysw8aw9tp-4 0}.lst-kix_f90tmlyeiq78-4&gt;li{counter-increment:lst-ctn-kix_f90tmlyeiq78-4}ol.lst-kix_f90tmlyeiq78-6.start{counter-reset:lst-ctn-kix_f90tmlyeiq78-6 0}ol.lst-kix_xmflyhenddll-5.start{counter-reset:lst-ctn-kix_xmflyhenddll-5 0}ol.lst-kix_list_4-8{list-style-type:none}.lst-kix_list_1-0&gt;li:before{content:"\0025cf   "}.lst-kix_f90tmlyeiq78-3&gt;li{counter-increment:lst-ctn-kix_f90tmlyeiq78-3}ol.lst-kix_list_4-4{list-style-type:none}ol.lst-kix_list_4-5{list-style-type:none}.lst-kix_list_1-2&gt;li:before{content:"\0025a0   "}ol.lst-kix_list_4-6{list-style-type:none}.lst-kix_k36rnhq3bscv-8&gt;li:before{content:"\0025a0   "}ol.lst-kix_list_4-7{list-style-type:none}.lst-kix_gg1ysw8aw9tp-6&gt;li:before{content:"" counter(lst-ctn-kix_gg1ysw8aw9tp-6,decimal) ". "}.lst-kix_list_1-4&gt;li:before{content:"\0025cb   "}ol.lst-kix_list_3-5.start{counter-reset:lst-ctn-kix_list_3-5 0}.lst-kix_gg1ysw8aw9tp-4&gt;li:before{content:"" counter(lst-ctn-kix_gg1ysw8aw9tp-4,lower-latin) ". "}.lst-kix_gg1ysw8aw9tp-8&gt;li:before{content:"" counter(lst-ctn-kix_gg1ysw8aw9tp-8,lower-roman) ". "}ul.lst-kix_qe4ryx414l01-0{list-style-type:none}ul.lst-kix_qe4ryx414l01-1{list-style-type:none}ol.lst-kix_f90tmlyeiq78-7.start{counter-reset:lst-ctn-kix_f90tmlyeiq78-7 0}.lst-kix_k36rnhq3bscv-2&gt;li:before{content:"\0025a0   "}.lst-kix_k36rnhq3bscv-6&gt;li:before{content:"\0025cf   "}ul.lst-kix_qe4ryx414l01-4{list-style-type:none}ul.lst-kix_qe4ryx414l01-5{list-style-type:none}ul.lst-kix_qe4ryx414l01-2{list-style-type:none}ul.lst-kix_qe4ryx414l01-3{list-style-type:none}ul.lst-kix_qe4ryx414l01-8{list-style-type:none}.lst-kix_xmflyhenddll-2&gt;li{counter-increment:lst-ctn-kix_xmflyhenddll-2}.lst-kix_list_1-6&gt;li:before{content:"\0025cf   "}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}ul.lst-kix_qe4ryx414l01-6{list-style-type:none}.lst-kix_k36rnhq3bscv-4&gt;li:before{content:"\0025cb   "}ul.lst-kix_qe4ryx414l01-7{list-style-type:none}ol.lst-kix_gg1ysw8aw9tp-5.start{counter-reset:lst-ctn-kix_gg1ysw8aw9tp-5 0}.lst-kix_list_2-0&gt;li:before{content:"\0025cf   "}ol.lst-kix_b1yjov9mndiw-8.start{counter-reset:lst-ctn-kix_b1yjov9mndiw-8 0}.lst-kix_list_4-5&gt;li{counter-increment:lst-ctn-kix_list_4-5}.lst-kix_xmflyhenddll-8&gt;li{counter-increment:lst-ctn-kix_xmflyhenddll-8}.lst-kix_list_1-8&gt;li:before{content:"\0025a0   "}.lst-kix_list_2-2&gt;li:before{content:"\0025a0   "}ol.lst-kix_xmflyhenddll-6.start{counter-reset:lst-ctn-kix_xmflyhenddll-6 0}.lst-kix_b1yjov9mndiw-8&gt;li{counter-increment:lst-ctn-kix_b1yjov9mndiw-8}.lst-kix_k36rnhq3bscv-0&gt;li:before{content:"\0025cf   "}ol{margin:0;padding:0}table td,table th{padding:0}.c9{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:0pt;border-right-width:0pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:0pt;border-top-style:solid;background-color:#f8f8f8;border-left-style:solid;border-bottom-width:0pt;width:275.4pt;border-top-color:#000000;border-bottom-style:solid}.c32{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:"Arial";font-style:normal}.c10{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c1{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c28{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c31{color:#434343;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:normal}.c18{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c36{padding-top:20pt;padding-bottom:6pt;line-height:1.1500000000000001;page-break-after:avoid;text-align:left;height:20pt}.c47{padding-top:20pt;padding-bottom:6pt;line-height:1.1500000000000001;page-break-after:avoid;text-align:center}.c26{padding-top:0pt;padding-bottom:6pt;line-height:1.1500000000000001;page-break-after:avoid;text-align:left}.c27{padding-top:16pt;padding-bottom:4pt;line-height:1.1500000000000001;page-break-after:avoid;text-align:left}.c13{background-color:#f8f8f8;font-family:"Consolas";font-style:italic;color:#999988;font-weight:400}.c25{padding-top:18pt;padding-bottom:6pt;line-height:1.1500000000000001;page-break-after:avoid;text-align:left}.c50{padding-top:0pt;padding-bottom:4pt;line-height:1.1500000000000001;page-break-after:avoid;text-align:left}.c42{padding-top:18pt;padding-bottom:6pt;line-height:1.1500000000000001;page-break-after:avoid;text-align:center}.c4{background-color:#f8f8f8;font-family:"Consolas";color:#0086b3;font-weight:400}.c37{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c14{background-color:#f8f8f8;font-family:"Consolas";color:#dd1144;font-weight:400}.c8{border-spacing:0;border-collapse:collapse;margin-right:auto}.c3{background-color:#f8f8f8;font-family:"Consolas";color:#008080;font-weight:400}.c2{background-color:#f8f8f8;font-family:"Consolas";color:#333333;font-weight:700}.c7{padding-top:0pt;padding-bottom:0pt;line-height:1.1500000000000001;text-align:left}.c22{padding-top:0pt;padding-bottom:0pt;line-height:1.15;text-align:left}.c6{background-color:#f8f8f8;font-family:"Consolas";color:#990000;font-weight:700}.c41{padding-top:0pt;padding-bottom:0pt;line-height:1.1500000000000001;text-align:center}.c15{text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c34{background-color:#f8f8f8;font-family:"Consolas";color:#990073;font-weight:400}.c0{background-color:#f8f8f8;font-family:"Consolas";color:#333333;font-weight:400}.c20{background-color:#f8f8f8;font-family:"Consolas";color:#445588}.c24{text-decoration:none;vertical-align:baseline;font-size:11pt}.c33{background-color:#f8f8f8;font-family:"Consolas";color:#999999}.c29{font-size:12pt;color:#b31217}.c38{color:inherit;text-decoration:inherit}.c35{font-weight:400;font-family:"Arial"}.c30{padding:0;margin:0}.c21{margin-left:36pt;padding-left:0pt}.c17{orphans:2;widows:2}.c49{height:37.9pt}.c5{height:0pt}.c45{background-color:#ffffff}.c11{font-weight:700}.c43{height:83.8pt}.c46{height:14pt}.c48{height:16pt}.c12{height:11pt}.c44{color:#cccccc}.c39{height:231.2pt}.c19{color:#0086b3}.c16{font-style:italic}.c23{height:111.8pt}.c40{font-size:12pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}</style>
  </head>
  <body class="c45 doc-content">
    <h2 class="c25 c17 c48" id="h.gjdgxs">
      <span class="c1"/>
    </h2>
    <h2 class="c17 c42" id="h.30j0zll">
      <span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 527.00px; height: 122.40px;">
        <img alt="" src="images/image1.png" style="width: 1018.87px; height: 165.45px; margin-left: -247.17px; margin-top: -21.60px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""/>
      </span>
      <span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 758.40px; height: 981.33px;">
        <img alt="" src="images/image2.png" style="width: 758.40px; height: 981.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""/>
      </span>
    </h2>
    <p class="c17 c41">
      <span class="c15 c35 c44">version 1.0.7</span>
    </p>
    <h1 class="c17 c36" id="h.1fob9te">
      <span class="c32"/>
    </h1>
    <h1 class="c17 c47" id="h.3znysh7">
      <span class="c32">Table of Contents</span>
    </h1>
    <p class="c7 c12 c17">
      <span class="c1"/>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c41 c17">
      <span class="c11 c29">YouTube Channel:</span>
      <span class="c11 c40"> </span>
      <span class="c37 c11 c40">
        <a class="c38" href="https://www.google.com/url?q=https://www.youtube.com/c/LetsGetRusty&amp;sa=D&amp;source=editors&amp;ust=1690635611520590&amp;usg=AOvVaw3lNB7NAEuYikmThGlO31yS">https://www.youtube.com/c/LetsGetRusty</a>
      </span>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <h2 class="c26 c17" id="h.4r7qhbze8gk5">
      <span class="c28">Basic Types &amp; Variables</span>
    </h2>
    <p class="c7 c17">
      <span class="c19">bool</span>
      <span class="c1"> - Boolean</span>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c10">Unsigned integers</span>
    </p>
    <p class="c7 c17">
      <span class="c19">u8</span>
      <span>, </span>
      <span class="c19">u16</span>
      <span>, </span>
      <span class="c19">u32</span>
      <span>, </span>
      <span class="c19">u64</span>
      <span>, </span>
      <span class="c15 c19 c35">u128</span>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c10">Signed integers</span>
    </p>
    <p class="c7 c17">
      <span class="c19">i8</span>
      <span>, </span>
      <span class="c19">i16</span>
      <span>,</span>
      <span class="c19"> i32</span>
      <span>, </span>
      <span class="c19">i64</span>
      <span>, </span>
      <span class="c15 c35 c19">i128</span>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c10">Floating point numbers</span>
    </p>
    <p class="c7 c17">
      <span class="c19">f32</span>
      <span>, </span>
      <span class="c15 c35 c19">f64</span>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c10">Platform specific integers</span>
    </p>
    <p class="c7 c17">
      <span class="c19">usize</span>
      <span class="c1"> - Unsigned integer. Same number of bits as the platform's pointer type.</span>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c19">isize</span>
      <span class="c1"> - Signed integer. Same number of bits as the platform's pointer type.</span>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c19">char</span>
      <span> - </span>
      <span class="c37">
        <a class="c38" href="https://www.google.com/url?q=http://www.unicode.org/glossary/%23unicode_scalar_value&amp;sa=D&amp;source=editors&amp;ust=1690635611524094&amp;usg=AOvVaw3836eCYlb6zD8O98YvRnim">Unicode scalar value</a>
      </span>
    </p>
    <p class="c7 c17">
      <span class="c19">&amp;str</span>
      <span class="c1"> - String slice</span>
    </p>
    <p class="c7 c17">
      <span class="c19">String</span>
      <span class="c1"> - Owned string</span>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c10">Tuple</span>
    </p>
    <a id="t.9e85c37b566df994e42eb6bc695ba9dc25f13b93"/>
    <a id="t.0"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> coordinates = (</span>
            <span class="c3">82</span>
            <span class="c0">, </span>
            <span class="c3">64</span>
            <span class="c0">
              );
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> score = (</span>
            <span class="c14">"Team A"</span>
            <span class="c0">, </span>
            <span class="c3">12</span>
            <span class="c15 c0">)</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c11">Array &amp; Slice</span>
    </p>
    <a id="t.abe986ba04fa8830bd751cb4a5fe97882118ab18"/>
    <a id="t.1"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c13">// Arrays must have a known length and all elements must be initialized</span>
            <span class="c0 c16">
              <br/>
            </span>
            <span class="c2 c16">let</span>
            <span class="c0 c16"> array = [</span>
            <span class="c3 c16">1</span>
            <span class="c0 c16">, </span>
            <span class="c3 c16">2</span>
            <span class="c0 c16">, </span>
            <span class="c3 c16">3</span>
            <span class="c0 c16">, </span>
            <span class="c3 c16">4</span>
            <span class="c0 c16">, </span>
            <span class="c3 c16">5</span>
            <span class="c0 c16">
              ];
              <br/>
            </span>
            <span class="c2 c16">let</span>
            <span class="c0 c16"> array2 = [</span>
            <span class="c3 c16">0</span>
            <span class="c0 c16">; </span>
            <span class="c3 c16">3</span>
            <span class="c0 c16">]; </span>
            <span class="c13 c24">// [0, 0, 0]</span>
          </p>
          <p class="c7">
            <span class="c0 c16">
              <br/>
            </span>
            <span class="c13">// Unlike arrays the length of a slice is determined at runtime</span>
            <span class="c0 c16">
              <br/>
            </span>
            <span class="c2 c16">let</span>
            <span class="c0 c16"> slice = &amp;array[</span>
            <span class="c3 c16">1</span>
            <span class="c0 c16"> .. </span>
            <span class="c3 c16">3</span>
            <span class="c0 c16">];</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c11">HashMap</span>
    </p>
    <a id="t.dd561e29962aae9e0f3bff24a3cc96930f44eec8"/>
    <a id="t.2"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c22">
            <span class="c2">use</span>
            <span class="c0">
               std::collections::HashMap;
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c2">mut</span>
            <span class="c0">
               subs = HashMap::new();
              <br/>
              subs.insert(
            </span>
            <span class="c4">String</span>
            <span class="c0">::from(</span>
            <span class="c14">"LGR"</span>
            <span class="c0">), </span>
            <span class="c3">100000</span>
            <span class="c0">
              );
              <br/>
            </span>
            <span class="c13">// Insert key if it doesn't have a value</span>
            <span class="c0">
              <br/>
              subs.entry(
            </span>
            <span class="c14">"Golang Dojo"</span>
            <span class="c0">.to_owned()) .or_insert(</span>
            <span class="c3">3</span>
            <span class="c0">);</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7">
      <span class="c11">Struct</span>
    </p>
    <a id="t.805a5876888b4d461cbca1520f63694598dc57b2"/>
    <a id="t.3"/>
    <table class="c8">
      <tr class="c39">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c13">// Definition</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">User</span>
            <span class="c0">
               {
              <br/>
                username: 
            </span>
            <span class="c4">String</span>
            <span class="c0">
              ,
              <br/>
                active: 
            </span>
            <span class="c4">bool</span>
            <span class="c0">
              ,
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c13">// Instantiation</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0">
               user1 = User {
              <br/>
                username: 
            </span>
            <span class="c4">String</span>
            <span class="c0">::from(</span>
            <span class="c14">"bogdan"</span>
            <span class="c0">
              ),
              <br/>
                active: 
            </span>
            <span class="c3">true</span>
            <span class="c0">
              ,
              <br/>
              };
              <br/>
              <br/>
            </span>
            <span class="c13">// Tuple struct</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Color</span>
            <span class="c0">(</span>
            <span class="c4">i32</span>
            <span class="c0">, </span>
            <span class="c4">i32</span>
            <span class="c0">, </span>
            <span class="c4">i32</span>
            <span class="c0">
              );
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> black = Color(</span>
            <span class="c3">0</span>
            <span class="c0">, </span>
            <span class="c3">0</span>
            <span class="c0">, </span>
            <span class="c3">0</span>
            <span class="c15 c0">);</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7">
      <span class="c11">Enum</span>
    </p>
    <a id="t.3aeab01870f64bce0a6552c7104c50a6c384c0ce"/>
    <a id="t.4"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c22">
            <span class="c13">// Definition</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">enum</span>
            <span class="c0"> </span>
            <span class="c20 c11">Command</span>
            <span class="c0">
               {
              <br/>
                Quit,
              <br/>
                Move { x: 
            </span>
            <span class="c4">i32</span>
            <span class="c0">, y: </span>
            <span class="c4">i32</span>
            <span class="c0">
               },
              <br/>
                Speak(
            </span>
            <span class="c4">String</span>
            <span class="c0">
              ),
              <br/>
                ChangeBGColor(
            </span>
            <span class="c4">i32</span>
            <span class="c0">, </span>
            <span class="c4">i32</span>
            <span class="c0">, </span>
            <span class="c4">i32</span>
            <span class="c0">
              ),
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c13">// Instantiation</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0">
               msg1 = Command::Quit;
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> msg2 = Command::Move{ x: </span>
            <span class="c3">1</span>
            <span class="c0">, y: </span>
            <span class="c3">2</span>
            <span class="c0">
               };
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> msg3 = Command::Speak(</span>
            <span class="c14">"Hi"</span>
            <span class="c0">
              .to_owned());
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> msg4 = Command::ChangeBGColor(</span>
            <span class="c3">0</span>
            <span class="c0">, </span>
            <span class="c3">0</span>
            <span class="c0">, </span>
            <span class="c3">0</span>
            <span class="c0">);</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c17 c12">
      <span class="c10"/>
    </p>
    <p class="c7 c17">
      <span class="c11">Constant</span>
    </p>
    <a id="t.326d5856ab904c942d30055379f5cf017ce56bb5"/>
    <a id="t.5"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">const</span>
            <span class="c0"> MAX_POINTS: </span>
            <span class="c4">u32</span>
            <span class="c0"> = </span>
            <span class="c3">100_000</span>
            <span class="c0">;</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c11">Static variable</span>
    </p>
    <a id="t.8bef710cf209048ffff25b780668a21a88920f4b"/>
    <a id="t.6"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c13">// Unlike constants static variables are</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c13">// stored in a dedicated memory location</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c13">// and can be mutated.</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">static</span>
            <span class="c0"> MAJOR_VERSION: </span>
            <span class="c4">u32</span>
            <span class="c0"> = </span>
            <span class="c3">1</span>
            <span class="c0">
              ;
              <br/>
            </span>
            <span class="c2">static</span>
            <span class="c0"> </span>
            <span class="c2">mut</span>
            <span class="c0"> COUNTER: </span>
            <span class="c4">u32</span>
            <span class="c0"> = </span>
            <span class="c3">0</span>
            <span class="c0">;</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c17 c12">
      <span class="c10"/>
    </p>
    <p class="c7 c17 c12">
      <span class="c10"/>
    </p>
    <p class="c7 c17 c12">
      <span class="c10"/>
    </p>
    <p class="c7 c17 c12">
      <span class="c10"/>
    </p>
    <p class="c7 c17">
      <span class="c11">Mutability</span>
    </p>
    <a id="t.c8707d9d420d9335755f5f039d9e4e288639e0b9"/>
    <a id="t.7"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c2">mut</span>
            <span class="c0"> x = </span>
            <span class="c3">5</span>
            <span class="c0">
              ;
              <br/>
              x = 
            </span>
            <span class="c3">6</span>
            <span class="c0">;</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c11">Shadowing</span>
    </p>
    <a id="t.c166a517685de59b88a95012074f6cf19c76a1ea"/>
    <a id="t.8"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> x = </span>
            <span class="c3">5</span>
            <span class="c0">
              ;
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> x = x * </span>
            <span class="c3">2</span>
            <span class="c0">;</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c11">Type alias</span>
    </p>
    <a id="t.28689fb4d246f390967013a675c2ee1ecd822a0d"/>
    <a id="t.9"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c13">// `NanoSecond` is a new name for `u64`.</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">type</span>
            <span class="c0"> </span>
            <span class="c20 c11">NanoSecond</span>
            <span class="c0"> = </span>
            <span class="c4">u64</span>
            <span class="c0">;</span>
          </p>
        </td>
      </tr>
    </table>
    <h2 class="c25 c17" id="h.tyjcwt">
      <span class="c28">Control Flow</span>
    </h2>
    <p class="c7 c17">
      <span class="c10">if and if let</span>
    </p>
    <a id="t.74ff92593ad38e84cd14ff20aa8389a653c66e82"/>
    <a id="t.10"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> num = </span>
            <span class="c3">Some</span>
            <span class="c0">(</span>
            <span class="c3">22</span>
            <span class="c0">
              );
              <br/>
              <br/>
            </span>
            <span class="c2">if</span>
            <span class="c0">
               num.is_some() {
              <br/>
                
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"number is: {}"</span>
            <span class="c15 c0">, num.unwrap());</span>
          </p>
          <p class="c7">
            <span class="c15 c0">
              }
              <br/>
            </span>
          </p>
          <p class="c7">
            <span class="c13">// match pattern and assign variable</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">if</span>
            <span class="c0"> </span>
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c3">Some</span>
            <span class="c0">
              (i) = num {
              <br/>
                
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"number is: {}"</span>
            <span class="c0">
              , i);
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c17 c12">
      <span class="c10"/>
    </p>
    <p class="c7 c17">
      <span class="c10">loop</span>
    </p>
    <a id="t.0d187ec78a0eebd684af547ed35bdb8911440105"/>
    <a id="t.11"/>
    <table class="c8">
      <tr class="c23">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c2">mut</span>
            <span class="c0"> count = </span>
            <span class="c3">0</span>
            <span class="c0">
              ;
              <br/>
            </span>
            <span class="c2">loop</span>
            <span class="c0">
               {
              <br/>
                count += 
            </span>
            <span class="c3">1</span>
            <span class="c0">
              ;
              <br/>
                
            </span>
            <span class="c2">if</span>
            <span class="c0"> count == </span>
            <span class="c3">5</span>
            <span class="c0">
               {
              <br/>
                  
            </span>
            <span class="c2">break</span>
            <span class="c0">; </span>
            <span class="c13">// Exit loop</span>
            <span class="c0">
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17">
      <span class="c11">Nested loops &amp; labels</span>
    </p>
    <a id="t.f19c50eb17bf2ee3f76c2c9eab42d9580824fe36"/>
    <a id="t.12"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c34">'outer</span>
            <span class="c0">: </span>
            <span class="c2">loop</span>
            <span class="c0">
               {
              <br/>
                
            </span>
            <span class="c34">'inner</span>
            <span class="c0">: </span>
            <span class="c2">loop</span>
            <span class="c0">
               {
              <br/>
                  
            </span>
            <span class="c13">// This breaks the inner loop</span>
            <span class="c0">
              <br/>
                  
            </span>
            <span class="c2">break</span>
            <span class="c0">
              ;
              <br/>
                  
            </span>
            <span class="c13">// This breaks the outer loop</span>
            <span class="c0">
              <br/>
                  
            </span>
            <span class="c2">break</span>
            <span class="c0"> </span>
            <span class="c34">'outer</span>
            <span class="c0">
              ;
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7">
      <span class="c10">Returning from loops</span>
    </p>
    <a id="t.39f810b662f18abd98e1ecdbd824b19b9890ecc6"/>
    <a id="t.13"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c2">mut</span>
            <span class="c0"> counter = </span>
            <span class="c3">0</span>
            <span class="c0">
              ;
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> result = </span>
            <span class="c2">loop</span>
            <span class="c0">
               {
              <br/>
                counter += 
            </span>
            <span class="c3">1</span>
            <span class="c0">
              ;
              <br/>
              <br/>
                
            </span>
            <span class="c2">if</span>
            <span class="c0"> counter == </span>
            <span class="c3">10</span>
            <span class="c0">
               {
              <br/>
                  
            </span>
            <span class="c2">break</span>
            <span class="c0">
               counter;
              <br/>
                }
              <br/>
              };
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7">
      <span class="c11">while and while let</span>
    </p>
    <a id="t.28e778741f544e6b46271f2cc50a2f182eb897bf"/>
    <a id="t.14"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">while</span>
            <span class="c0"> n &lt; </span>
            <span class="c3">101</span>
            <span class="c0">
               {
              <br/>
                n += 
            </span>
            <span class="c3">1</span>
            <span class="c0">
              ;
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c2">mut</span>
            <span class="c0"> optional = </span>
            <span class="c3">Some</span>
            <span class="c0">(</span>
            <span class="c3">0</span>
            <span class="c0">
              );
              <br/>
              <br/>
            </span>
            <span class="c2">while</span>
            <span class="c0"> </span>
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c3">Some</span>
            <span class="c0">
              (i) = optional {
              <br/>
                
            </span>
            <span class="c4">print!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c15 c0">
              , i);
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">for loop</span>
    </p>
    <a id="t.f94ef3dd69010be83ed1e6d847aed1d1ed73d369"/>
    <a id="t.15"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">for</span>
            <span class="c0"> n </span>
            <span class="c2">in</span>
            <span class="c0"> </span>
            <span class="c3">1</span>
            <span class="c0">..</span>
            <span class="c3">101</span>
            <span class="c0">
               {
              <br/>
                
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">
              , n);
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> names = </span>
            <span class="c4">vec!</span>
            <span class="c0">[</span>
            <span class="c14">"Bogdan"</span>
            <span class="c0">, </span>
            <span class="c14">"Wallace"</span>
            <span class="c0">
              ];
              <br/>
              <br/>
            </span>
            <span class="c2">for</span>
            <span class="c0"> name </span>
            <span class="c2">in</span>
            <span class="c0">
               names.iter() {
              <br/>
                
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">
              , name);
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">match</span>
    </p>
    <a id="t.e97139268e7fb686a7651a2fb2235ba3e2cbb92d"/>
    <a id="t.16"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> optional = </span>
            <span class="c3">Some</span>
            <span class="c0">(</span>
            <span class="c3">0</span>
            <span class="c0">
              );
              <br/>
              <br/>
            </span>
            <span class="c2">match</span>
            <span class="c0">
               optional {
              <br/>
                
            </span>
            <span class="c3">Some</span>
            <span class="c0">(i) =&gt; </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">
              , i),
              <br/>
                
            </span>
            <span class="c3">None</span>
            <span class="c0"> =&gt; </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"No value."</span>
            <span class="c0">
              )
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <h2 class="c26 c17" id="h.3dy6vkm">
      <span class="c28">References, Ownership, and Borrowing</span>
    </h2>
    <p class="c7">
      <span class="c10">Ownership rules</span>
    </p>
    <ol class="c30 lst-kix_f90tmlyeiq78-0 start" start="1">
      <li class="c7 c21 li-bullet-0">
        <span class="c1">Each value in Rust has a variable that’s called its owner.</span>
      </li>
      <li class="c7 c21 li-bullet-0">
        <span class="c1">There can only be one owner at a time.</span>
      </li>
      <li class="c7 c21 li-bullet-0">
        <span class="c1">When the owner goes out of scope, the value will be dropped.</span>
      </li>
    </ol>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Borrowing rules</span>
    </p>
    <ol class="c30 lst-kix_gg1ysw8aw9tp-0 start" start="1">
      <li class="c7 c21 li-bullet-0">
        <span>At any given time, you can have </span>
        <span class="c16">either</span>
        <span> one mutable reference </span>
        <span class="c16">or</span>
        <span class="c1"> any number of immutable references.</span>
      </li>
      <li class="c7 c21 li-bullet-0">
        <span class="c1">References must always be valid.</span>
      </li>
    </ol>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Creating references</span>
    </p>
    <a id="t.d6606eb13f1540b22968153a21679bf8ed579a02"/>
    <a id="t.17"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> s1 = </span>
            <span class="c4">String</span>
            <span class="c0">::from(</span>
            <span class="c14">"hello world!"</span>
            <span class="c0">
              );
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> s1_ref = &amp;s1; </span>
            <span class="c13">// immutable reference</span>
            <span class="c0">
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c2">mut</span>
            <span class="c0"> s2 = </span>
            <span class="c4">String</span>
            <span class="c0">::from(</span>
            <span class="c14">"hello"</span>
            <span class="c0">
              );
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> s2_ref = &amp;</span>
            <span class="c2">mut</span>
            <span class="c0"> s2; </span>
            <span class="c13">// mutable reference</span>
            <span class="c0">
              <br/>
              <br/>
              s2_ref.push_str(
            </span>
            <span class="c14">" world!"</span>
            <span class="c0">);</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Copy, Move, and Clone</span>
    </p>
    <a id="t.0d29073b602fa86ca880a3ab2debc747ae358430"/>
    <a id="t.18"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c13">// Simple values which implement the Copy trait are copied by value</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> x = </span>
            <span class="c3">5</span>
            <span class="c0">
              ;
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0">
               y = x;
              <br/>
              <br/>
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">, x); </span>
            <span class="c13">// x is still valid</span>
            <span class="c0">
              <br/>
              <br/>
            </span>
            <span class="c13">// The string is moved to s2 and s1 is invalidated </span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> s1 = </span>
            <span class="c4">String</span>
            <span class="c0">::from(</span>
            <span class="c14">"Let's Get Rusty!"</span>
            <span class="c0">
              );
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> s2 = s1; </span>
            <span class="c13">// Shallow copy a.k.a move</span>
            <span class="c0">
              <br/>
              <br/>
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">, s1); </span>
            <span class="c13">// Error: s1 is invalid</span>
            <span class="c0">
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> s1 = </span>
            <span class="c4">String</span>
            <span class="c0">::from(</span>
            <span class="c14">"Let's Get Rusty!"</span>
            <span class="c0">
              );
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> s2 = s1.clone(); </span>
            <span class="c13">// Deep copy</span>
            <span class="c15 c0">
              <br/>
            </span>
          </p>
          <p class="c7">
            <span class="c13">// Valid because s1 isn't moved</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">, s1);</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7">
      <span class="c11">Ownership and functions</span>
    </p>
    <a id="t.8cd081d543d01cf2c658df34cede9915f17def22"/>
    <a id="t.19"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">main</span>
            <span class="c0">
              () {
              <br/>
                
            </span>
            <span class="c2">let</span>
            <span class="c0"> x = </span>
            <span class="c3">5</span>
            <span class="c0">
              ;
              <br/>
                takes_copy(x); 
            </span>
            <span class="c13">// x is copied by value</span>
            <span class="c0">
              <br/>
              <br/>
                
            </span>
            <span class="c2">let</span>
            <span class="c0"> s = </span>
            <span class="c4">String</span>
            <span class="c0">::from(</span>
            <span class="c14">"Let’s Get Rusty!"</span>
            <span class="c0 c15">);</span>
          </p>
          <p class="c7">
            <span class="c13">  // s is moved into the function</span>
            <span class="c15 c0">
              <br/>
                takes_ownership(s);
            </span>
          </p>
          <p class="c7">
            <span class="c13 c24">  </span>
          </p>
          <p class="c7">
            <span class="c13">  // return value is moved into s1</span>
            <span class="c0">
              <br/>
                
            </span>
            <span class="c2">let</span>
            <span class="c15 c0">
               s1 = gives_ownership();
              <br/>
                
            </span>
          </p>
          <p class="c7">
            <span class="c2">  let</span>
            <span class="c0"> s2 = </span>
            <span class="c4">String</span>
            <span class="c0">::from(</span>
            <span class="c14">"LGR"</span>
            <span class="c0">
              );
              <br/>
                
            </span>
            <span class="c2">let</span>
            <span class="c0">
               s3 = takes_and_gives_back(s2);
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">takes_copy</span>
            <span class="c0">(some_integer: </span>
            <span class="c4">i32</span>
            <span class="c0">
              ) {
              <br/>
                
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">
              , some_integer);
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">takes_ownership</span>
            <span class="c0">(some_string: </span>
            <span class="c4">String</span>
            <span class="c0">
              ) {
              <br/>
                
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">
              , some_string);
              <br/>
              } 
            </span>
            <span class="c13">// some_string goes out of scope and drop is called. The backing memory is freed.</span>
            <span class="c0">
              <br/>
              <br/>
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">gives_ownership</span>
            <span class="c0">() -&gt; </span>
            <span class="c4">String</span>
            <span class="c0">
               {
              <br/>
                
            </span>
            <span class="c2">let</span>
            <span class="c0"> some_string = </span>
            <span class="c4">String</span>
            <span class="c0">::from(</span>
            <span class="c14">"LGR"</span>
            <span class="c0">
              );
              <br/>
                some_string
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">takes_and_gives_back</span>
            <span class="c0">(some_string: </span>
            <span class="c4">String</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">String</span>
            <span class="c0">
               {
              <br/>
                some_string
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <h2 class="c26" id="h.ny39k0mrv251">
      <span class="c28">Pattern Matching</span>
    </h2>
    <p class="c7">
      <span class="c11">Basics</span>
    </p>
    <a id="t.2b908de45c85f545c3c31123016ea33f77273876"/>
    <a id="t.20"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> x = </span>
            <span class="c3">5</span>
            <span class="c0">
              ;
              <br/>
                  
              <br/>
            </span>
            <span class="c2">match</span>
            <span class="c0">
               x {
              <br/>
                
            </span>
            <span class="c13">// matching literals</span>
            <span class="c0">
              <br/>
                
            </span>
            <span class="c3">1</span>
            <span class="c0"> =&gt; </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"one"</span>
            <span class="c0">
              ),
              <br/>
                
            </span>
            <span class="c13">// matching multiple patterns</span>
            <span class="c0">
              <br/>
                
            </span>
            <span class="c3">2</span>
            <span class="c0"> | </span>
            <span class="c3">3</span>
            <span class="c0"> =&gt; </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"two or three"</span>
            <span class="c0">
              ),
              <br/>
                
            </span>
            <span class="c13">// matching ranges</span>
            <span class="c0">
              <br/>
                
            </span>
            <span class="c3">4</span>
            <span class="c0">..=</span>
            <span class="c3">9</span>
            <span class="c0"> =&gt; </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"within range"</span>
            <span class="c0">
              ),
              <br/>
                
            </span>
            <span class="c13">// matching named variables</span>
            <span class="c0">
              <br/>
                x =&gt; 
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">
              , x),
              <br/>
                
            </span>
            <span class="c13">// default case (ignores value)</span>
            <span class="c0">
              <br/>
                _ =&gt; 
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"default Case"</span>
            <span class="c0">
              )
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Destructuring</span>
    </p>
    <a id="t.be63697998c8dd201078a39ef07f901228ac80f6"/>
    <a id="t.21"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Point</span>
            <span class="c0">
               {
              <br/>
                x: 
            </span>
            <span class="c4">i32</span>
            <span class="c0">
              ,
              <br/>
                y: 
            </span>
            <span class="c4">i32</span>
            <span class="c0">
              ,
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> p = Point { x: </span>
            <span class="c3">0</span>
            <span class="c0">, y: </span>
            <span class="c3">7</span>
            <span class="c0">
               };
              <br/>
              <br/>
            </span>
            <span class="c2">match</span>
            <span class="c0">
               p {
              <br/>
                Point { x, y: 
            </span>
            <span class="c3">0</span>
            <span class="c0">
               } =&gt; {
              <br/>
                  
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">
               , x);
              <br/>
                },
              <br/>
                Point { x, y } =&gt; {
              <br/>
                  
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{} {}"</span>
            <span class="c0">
               , x, y);
              <br/>
                },
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">enum</span>
            <span class="c0"> </span>
            <span class="c20 c11">Shape</span>
            <span class="c0">
               {
              <br/>
                Rectangle { width: 
            </span>
            <span class="c4">i32</span>
            <span class="c0">, height: </span>
            <span class="c4">i32</span>
            <span class="c0">
               },
              <br/>
                Circle(
            </span>
            <span class="c4">i32</span>
            <span class="c0">
              ),
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> shape = Shape::Circle(</span>
            <span class="c3">10</span>
            <span class="c0">
              );
              <br/>
              <br/>
            </span>
            <span class="c2">match</span>
            <span class="c0">
               shape {
              <br/>
                Shape::Rectangle { x, y } =&gt; 
            </span>
            <span class="c13">//...</span>
            <span class="c0">
              <br/>
                Shape::Circle(radius) =&gt; 
            </span>
            <span class="c13">//...</span>
            <span class="c0">
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7">
      <span class="c10">Ignoring values</span>
    </p>
    <a id="t.29043a65a1de7ad3b4e1558d055aef258e197ee3"/>
    <a id="t.22"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">SemVer</span>
            <span class="c0">(</span>
            <span class="c4">i32</span>
            <span class="c0">, </span>
            <span class="c4">i32</span>
            <span class="c0">, </span>
            <span class="c4">i32</span>
            <span class="c0">
              );
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> version = SemVer(</span>
            <span class="c3">1</span>
            <span class="c0">, </span>
            <span class="c3">32</span>
            <span class="c0">, </span>
            <span class="c3">2</span>
            <span class="c0">
              );
              <br/>
              <br/>
            </span>
            <span class="c2">match</span>
            <span class="c0">
               version {
              <br/>
                SemVer(major, _, _) =&gt; {
              <br/>
                  
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">
              , major);
              <br/>
                }
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> numbers = (</span>
            <span class="c3">2</span>
            <span class="c0">, </span>
            <span class="c3">4</span>
            <span class="c0">, </span>
            <span class="c3">8</span>
            <span class="c0">, </span>
            <span class="c3">16</span>
            <span class="c0">, </span>
            <span class="c3">32</span>
            <span class="c0">
              );
              <br/>
              <br/>
            </span>
            <span class="c2">match</span>
            <span class="c0">
               numbers {
              <br/>
                (first, .., last) =&gt; {
              <br/>
                  
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}, {}"</span>
            <span class="c15 c0">
              , first, last);
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Match guards</span>
    </p>
    <a id="t.17a63a374849762e11a5cdb5d07162f06a13730d"/>
    <a id="t.23"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> num = </span>
            <span class="c3">Some</span>
            <span class="c0">(</span>
            <span class="c3">4</span>
            <span class="c0">
              );
              <br/>
              <br/>
            </span>
            <span class="c2">match</span>
            <span class="c0">
               num {
              <br/>
                
            </span>
            <span class="c3">Some</span>
            <span class="c0">(x) </span>
            <span class="c2">if</span>
            <span class="c0"> x &lt; </span>
            <span class="c3">5</span>
            <span class="c0"> =&gt; </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"less than five: {}"</span>
            <span class="c0">
              , x),
              <br/>
                
            </span>
            <span class="c3">Some</span>
            <span class="c0">(x) =&gt; </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"{}"</span>
            <span class="c0">
              , x),
              <br/>
                
            </span>
            <span class="c3">None</span>
            <span class="c0">
               =&gt; (),
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">@ bindings</span>
    </p>
    <a id="t.2d082cfacb02458d1c578c5d0ba1a578d5a2727e"/>
    <a id="t.24"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">User</span>
            <span class="c0">
               {
              <br/>
                id: 
            </span>
            <span class="c4">i32</span>
            <span class="c0">
              <br/>
              }
              <br/>
                  
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> user = User { id: </span>
            <span class="c3">5</span>
            <span class="c0">
               };
              <br/>
                  
              <br/>
            </span>
            <span class="c2">match</span>
            <span class="c0">
               user {
              <br/>
                User {
              <br/>
                  id: id_variable @ 
            </span>
            <span class="c3">3</span>
            <span class="c0">..=</span>
            <span class="c3">7</span>
            <span class="c0">
              ,
              <br/>
                } =&gt; 
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"id: {}"</span>
            <span class="c0">
              , id_variable),
              <br/>
                User { id: 
            </span>
            <span class="c3">10</span>
            <span class="c0">..=</span>
            <span class="c3">12</span>
            <span class="c0">
               } =&gt; {
              <br/>
                  
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"within range"</span>
            <span class="c0">
              );
              <br/>
                },
              <br/>
                User { id } =&gt; 
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"id: {}"</span>
            <span class="c0">
              , id),
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <h2 class="c26 c17" id="h.4d34og8">
      <span class="c28">Iterators</span>
    </h2>
    <p class="c7">
      <span class="c10">Usage</span>
    </p>
    <a id="t.e61b9cae7efe37bc79c8a1eac3069cb693b9a118"/>
    <a id="t.25"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c13">// Methods that consume iterators</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> v1 = </span>
            <span class="c4">vec!</span>
            <span class="c0">[</span>
            <span class="c3">1</span>
            <span class="c0">, </span>
            <span class="c3">2</span>
            <span class="c0">, </span>
            <span class="c3">3</span>
            <span class="c0">
              ];
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0">
               v1_iter = v1.iter();
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> total: </span>
            <span class="c4">i32</span>
            <span class="c0">
               = v1_iter.sum();
              <br/>
              <br/>
            </span>
            <span class="c13">// Methods that produce new iterators</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> v1: </span>
            <span class="c4">Vec</span>
            <span class="c0">&lt;</span>
            <span class="c4">i32</span>
            <span class="c0">&gt; = </span>
            <span class="c4">vec!</span>
            <span class="c0">[</span>
            <span class="c3">1</span>
            <span class="c0">, </span>
            <span class="c3">2</span>
            <span class="c0">, </span>
            <span class="c3">3</span>
            <span class="c0">
              ];
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> iter = v1.iter().map(|x| x + </span>
            <span class="c3">1</span>
            <span class="c0">
              );
              <br/>
              <br/>
            </span>
            <span class="c13">// Turning iterators into a collection</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> v1: </span>
            <span class="c4">Vec</span>
            <span class="c0">&lt;</span>
            <span class="c4">i32</span>
            <span class="c0">&gt; = </span>
            <span class="c4">vec!</span>
            <span class="c0">[</span>
            <span class="c3">1</span>
            <span class="c0">, </span>
            <span class="c3">2</span>
            <span class="c0">, </span>
            <span class="c3">3</span>
            <span class="c0">
              ];
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> v2: </span>
            <span class="c4">Vec</span>
            <span class="c0">&lt;_&gt; = v1.iter().map(|x| x + </span>
            <span class="c3">1</span>
            <span class="c0">).collect();</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Implementing the Iterator trait</span>
    </p>
    <a id="t.b1af4b33a8e67bc49342793c68799da7916567f6"/>
    <a id="t.26"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Counter</span>
            <span class="c0">
               {
              <br/>
                count: 
            </span>
            <span class="c4">u32</span>
            <span class="c0">
              ,
              <br/>
              }
              <br/>
                  
              <br/>
            </span>
            <span class="c2">impl</span>
            <span class="c0">
               Counter {
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">new</span>
            <span class="c0">
              () -&gt; Counter {
              <br/>
                  Counter { count: 
            </span>
            <span class="c3">0</span>
            <span class="c0">
               }
              <br/>
                }
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">impl</span>
            <span class="c0"> </span>
            <span class="c4">Iterator</span>
            <span class="c0"> </span>
            <span class="c2">for</span>
            <span class="c0">
               Counter {
              <br/>
                
            </span>
            <span class="c2">type</span>
            <span class="c0"> </span>
            <span class="c11 c20">Item</span>
            <span class="c0"> = </span>
            <span class="c4">u32</span>
            <span class="c0">
              ;
              <br/>
                  
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">next</span>
            <span class="c0">(&amp;</span>
            <span class="c2">mut</span>
            <span class="c0"> </span>
            <span class="c2">self</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">Option</span>
            <span class="c15 c0">&lt;Self::Item&gt; </span>
          </p>
          <p class="c7">
            <span class="c0">
                {
              <br/>
                  
            </span>
            <span class="c2">if</span>
            <span class="c0"> </span>
            <span class="c2">self</span>
            <span class="c0">.count &lt; </span>
            <span class="c3">5</span>
            <span class="c0">
               {
              <br/>
                    
            </span>
            <span class="c2">self</span>
            <span class="c0">.count += </span>
            <span class="c3">1</span>
            <span class="c0">
              ;
              <br/>
                    
            </span>
            <span class="c3">Some</span>
            <span class="c0">(</span>
            <span class="c2">self</span>
            <span class="c0">
              .count)
              <br/>
                  } 
            </span>
            <span class="c2">else</span>
            <span class="c0">
               {
              <br/>
                    
            </span>
            <span class="c3">None</span>
            <span class="c0">
              <br/>
                  }
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <h2 class="c26 c17" id="h.2s8eyo1">
      <span class="c28">Error Handling</span>
    </h2>
    <p class="c7">
      <span class="c10">Throw unrecoverable error</span>
    </p>
    <a id="t.8ea65b37892dc453c990de7069ba9eda3c55e1e7"/>
    <a id="t.27"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c4">panic!</span>
            <span class="c0">(</span>
            <span class="c14">"Critical error! Exiting!"</span>
            <span class="c0">);</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Option enum</span>
    </p>
    <a id="t.c7673cf7e56c20f474732deaff6e5362c55cd10b"/>
    <a id="t.28"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c22">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">get_user_id</span>
            <span class="c0">(name: &amp;</span>
            <span class="c4">str</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">Option</span>
            <span class="c0">&lt;</span>
            <span class="c4">u32</span>
            <span class="c0">
              &gt; {
              <br/>
                
            </span>
            <span class="c2">if</span>
            <span class="c0">
               database.user_exists(name) {
              <br/>
                  
            </span>
            <span class="c2">return</span>
            <span class="c0"> </span>
            <span class="c3">Some</span>
            <span class="c0">
              (database.get_id(name))
              <br/>
                }
              <br/>
                
              <br/>
                
            </span>
            <span class="c3">None</span>
            <span class="c15 c0">
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Result enum</span>
    </p>
    <a id="t.ba225a5259d498085ef5d3658323c6ba16dc4b7f"/>
    <a id="t.29"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">get_user</span>
            <span class="c0">(id: </span>
            <span class="c4">u32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">Result</span>
            <span class="c0">
              &lt;User, Error&gt; {
              <br/>
                
            </span>
            <span class="c2">if</span>
            <span class="c0">
               is_logged_in_as(id) {
              <br/>
                  
            </span>
            <span class="c2">return </span>
            <span class="c3">Ok</span>
            <span class="c0">
              (get_user_object(id))
              <br/>
                }
              <br/>
                
              <br/>
                
            </span>
            <span class="c3">Err</span>
            <span class="c0">(Error { msg: </span>
            <span class="c14">"not logged in"</span>
            <span class="c15 c0">
               })
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7">
      <span class="c10">? operator</span>
    </p>
    <a id="t.a446f82b9426cb6b9552364ff48d31f57b2f4c8e"/>
    <a id="t.30"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c22">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">get_salary</span>
            <span class="c0">(db: Database, id: </span>
            <span class="c4">i32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">Option</span>
            <span class="c0">&lt;</span>
            <span class="c4">u32</span>
            <span class="c0">
              &gt; {
              <br/>
                
            </span>
            <span class="c3">Some</span>
            <span class="c0">
              (db.get_user(id)?.get_job()?.salary)
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">connect</span>
            <span class="c0">(db: Database) -&gt; </span>
            <span class="c4">Result</span>
            <span class="c0">
              &lt;Connection, Error&gt; {
              <br/>
                
            </span>
            <span class="c2">let</span>
            <span class="c0">
               conn =
              <br/>
                  db.get_active_instance()?.connect()?;
              <br/>
                
            </span>
            <span class="c3">Ok</span>
            <span class="c0">
              (conn)
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <h3 class="c27 c46" id="h.17dp8vu">
      <span class="c31"/>
    </h3>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c17 c12">
      <span class="c1"/>
    </p>
    <h3 class="c50" id="h.3rdcrjn">
      <span class="c31">Combinators</span>
    </h3>
    <p class="c7">
      <span class="c11">.map</span>
    </p>
    <a id="t.9fd66707e936d21b4d4740f894c9b5689133c157"/>
    <a id="t.31"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c22">
            <span class="c2">let</span>
            <span class="c0"> some_string = </span>
            <span class="c3">Some</span>
            <span class="c0">(</span>
            <span class="c14">"LGR"</span>
            <span class="c0">
              .to_owned());
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0">
               some_len = some_string.map(|s| s.len());
              <br/>
              <br/>
            </span>
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Error</span>
            <span class="c0"> { msg: </span>
            <span class="c4">String</span>
            <span class="c0">
               }
              <br/>
            </span>
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">User</span>
            <span class="c0"> { name: </span>
            <span class="c4">String</span>
            <span class="c0">
               }
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> string_result: </span>
            <span class="c4">Result</span>
            <span class="c0">&lt;</span>
            <span class="c4">String</span>
            <span class="c0">, Error&gt; = </span>
            <span class="c3">Ok</span>
            <span class="c0">(</span>
            <span class="c14">"Bogdan"</span>
            <span class="c0">
              .to_owned());
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> user_result: </span>
            <span class="c4">Result</span>
            <span class="c15 c0">
              &lt;User, Error&gt; =   
              <br/>
                string_result.map(|name| {
              <br/>
                  User { name }
              <br/>
                });
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">.and_then</span>
    </p>
    <a id="t.3f512c1a2f68b96cd51f8af13d257bff464a0716"/>
    <a id="t.32"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> vec = </span>
            <span class="c3">Some</span>
            <span class="c0">(</span>
            <span class="c4">vec!</span>
            <span class="c0">[</span>
            <span class="c3">1</span>
            <span class="c0">, </span>
            <span class="c3">2</span>
            <span class="c0">, </span>
            <span class="c3">3</span>
            <span class="c0">
              ]);
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0">
               first_element = vec.and_then(
              <br/>
                |vec| vec.into_iter().next()
              <br/>
              );
              <br/>
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> string_result: </span>
            <span class="c4">Result</span>
            <span class="c0">&lt;&amp;</span>
            <span class="c34">'static</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c0">, _&gt; = </span>
            <span class="c3">Ok</span>
            <span class="c0">(</span>
            <span class="c14">"5"</span>
            <span class="c0">
              );
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0">
               number_result = 
              <br/>
                string_result
              <br/>
                .and_then(|s| s.parse::&lt;
            </span>
            <span class="c4">u32</span>
            <span class="c15 c0">&gt;());</span>
          </p>
        </td>
      </tr>
    </table>
    <h3 class="c27" id="h.26in1rg">
      <span class="c31">Multiple error types</span>
    </h3>
    <p class="c7">
      <span class="c11">Define custom error type</span>
    </p>
    <a id="t.3279378ad602db58b79c486b7fb5e36f2a7a9d26"/>
    <a id="t.33"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">type</span>
            <span class="c0"> </span>
            <span class="c20 c11">Result</span>
            <span class="c0">&lt;T&gt; = std::result::</span>
            <span class="c4">Result</span>
            <span class="c0">
              &lt;T, CustomError&gt;;
              <br/>
              <br/>
            </span>
            <span class="c33 c11">#[derive(Debug, Clone)]</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">CustomError</span>
            <span class="c0">
              ;
              <br/>
              <br/>
            </span>
            <span class="c2">impl</span>
            <span class="c0"> fmt::Display </span>
            <span class="c2">for</span>
            <span class="c0">
               CustomError {
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">fmt</span>
            <span class="c0">(&amp;</span>
            <span class="c2">self</span>
            <span class="c0">, f: &amp;</span>
            <span class="c2">mut</span>
            <span class="c0"> fmt::Formatter) -&gt; fmt::</span>
            <span class="c4">Result</span>
            <span class="c0">
               {
              <br/>
                  
            </span>
            <span class="c4">write!</span>
            <span class="c0">(f, </span>
            <span class="c14">"custom error message"</span>
            <span class="c0">
              )
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7">
      <span class="c11">Boxing errors</span>
    </p>
    <a id="t.32aeba6feb693ced9a1987b5b587dcd83cc227dd"/>
    <a id="t.34"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">use</span>
            <span class="c0">
               std::error;
              <br/>
              <br/>
            </span>
            <span class="c2">type</span>
            <span class="c0"> </span>
            <span class="c20 c11">Result</span>
            <span class="c0">&lt;T&gt; = std::result::</span>
            <span class="c4">Result</span>
            <span class="c0">&lt;T, </span>
            <span class="c4">Box</span>
            <span class="c0">&lt;dyn error::Error&gt;&gt;;</span>
          </p>
        </td>
      </tr>
    </table>
    <h3 class="c27" id="h.lnxbz9">
      <span class="c31">Iterating over errors</span>
    </h3>
    <p class="c7">
      <span class="c11">Ignore failed items with filter_map()</span>
    </p>
    <a id="t.03dc755145baa6b06288bdf5a6e55443af58204b"/>
    <a id="t.35"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> strings = </span>
            <span class="c4">vec!</span>
            <span class="c0">[</span>
            <span class="c14">"LGR"</span>
            <span class="c0">, </span>
            <span class="c14">"22"</span>
            <span class="c0">, </span>
            <span class="c14">"7"</span>
            <span class="c0">
              ];
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> numbers: </span>
            <span class="c4">Vec</span>
            <span class="c0">
              &lt;_&gt; = strings
              <br/>
                .into_iter()
              <br/>
                .filter_map(|s| s.parse::&lt;
            </span>
            <span class="c4">i32</span>
            <span class="c0">
              &gt;().ok())
              <br/>
                .collect();
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7">
      <span class="c10">Fail the entire operation with collect()</span>
    </p>
    <a id="t.561f2dba03a9b8ef07df1c752d86c96682b7c241"/>
    <a id="t.36"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> strings = </span>
            <span class="c4">vec!</span>
            <span class="c0">[</span>
            <span class="c14">"LGR"</span>
            <span class="c0">, </span>
            <span class="c14">"22"</span>
            <span class="c0">, </span>
            <span class="c14">"7"</span>
            <span class="c15 c0">];</span>
          </p>
          <p class="c7">
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> numbers: </span>
            <span class="c4">Result</span>
            <span class="c0">&lt;</span>
            <span class="c4">Vec</span>
            <span class="c0">
              &lt;_&gt;, _&gt; = strings
              <br/>
                .into_iter()
              <br/>
                .map(|s| s.parse::&lt;
            </span>
            <span class="c4">i32</span>
            <span class="c0">
              &gt;())
              <br/>
                .collect();
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Collect all valid values and failures with partition()</span>
    </p>
    <a id="t.b2d4a9ffe08cd9bd17788dbe4d6c2b1cc4ee7b51"/>
    <a id="t.37"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> strings = </span>
            <span class="c4">vec!</span>
            <span class="c0">[</span>
            <span class="c14">"LGR"</span>
            <span class="c0">, </span>
            <span class="c14">"22"</span>
            <span class="c0">, </span>
            <span class="c14">"7"</span>
            <span class="c15 c0">];</span>
          </p>
          <p class="c7">
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> (numbers, errors): (</span>
            <span class="c4">Vec</span>
            <span class="c0">&lt;_&gt;, </span>
            <span class="c4">Vec</span>
            <span class="c0">
              &lt;_&gt;) = strings
              <br/>
                .into_iter()
              <br/>
                .map(|s| s.parse::&lt;
            </span>
            <span class="c4">i32</span>
            <span class="c0">
              &gt;())
              <br/>
                .partition(
            </span>
            <span class="c4">Result</span>
            <span class="c15 c0">::is_ok);</span>
          </p>
          <p class="c7">
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> numbers: </span>
            <span class="c4">Vec</span>
            <span class="c15 c0">&lt;_&gt; = numbers</span>
          </p>
          <p class="c7">
            <span class="c15 c0">  .into_iter()</span>
          </p>
          <p class="c7">
            <span class="c0">  .map(</span>
            <span class="c4">Result</span>
            <span class="c15 c0">::unwrap)</span>
          </p>
          <p class="c7">
            <span class="c15 c0">  .collect();</span>
          </p>
          <p class="c7">
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> errors: </span>
            <span class="c4">Vec</span>
            <span class="c15 c0">&lt;_&gt; = errors</span>
          </p>
          <p class="c7">
            <span class="c15 c0">  .into_iter()</span>
          </p>
          <p class="c7">
            <span class="c0">  .map(</span>
            <span class="c4">Result</span>
            <span class="c15 c0">::unwrap_err)</span>
          </p>
          <p class="c7">
            <span class="c0">  .collect();</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <h2 class="c26" id="h.35nkun2">
      <span class="c28">Generics, Traits, and Lifetimes</span>
    </h2>
    <p class="c7">
      <span class="c10">Using generics</span>
    </p>
    <a id="t.8eef75c8b19953d7ea03834bba6b6b898c00cc8f"/>
    <a id="t.38"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Point</span>
            <span class="c0">
              &lt;T, U&gt; {
              <br/>
                x: T,
              <br/>
                y: U,
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">impl</span>
            <span class="c0">
              &lt;T, U&gt; Point&lt;T, U&gt; {
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">mixup</span>
            <span class="c0">&lt;V, W&gt;(</span>
            <span class="c2">self</span>
            <span class="c0">
              , other: Point&lt;V, W&gt;) -&gt; Point&lt;T, W&gt; {
              <br/>
                  Point {
              <br/>
                    x: 
            </span>
            <span class="c2">self</span>
            <span class="c0">
              .x,
              <br/>
                    y: other.y,
              <br/>
                  }
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Defining traits</span>
    </p>
    <a id="t.23f1aaeec5e39c9dcfd3079249b6c34410788eee"/>
    <a id="t.39"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">trait</span>
            <span class="c0"> </span>
            <span class="c20 c11">Animal</span>
            <span class="c0">
               {
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">new</span>
            <span class="c0">(name: &amp;</span>
            <span class="c34">'static</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c0">) -&gt; </span>
            <span class="c2">Self</span>
            <span class="c0">
              ;
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">noise</span>
            <span class="c0">(&amp;</span>
            <span class="c2">self</span>
            <span class="c0">) -&gt; &amp;</span>
            <span class="c34">'static</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c0"> { </span>
            <span class="c14">""</span>
            <span class="c0">
               }
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Dog</span>
            <span class="c0"> { name: &amp;</span>
            <span class="c34">'static</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c0">
               }
              <br/>
              <br/>
            </span>
            <span class="c2">impl</span>
            <span class="c0">
               Dog {
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">fetch</span>
            <span class="c0">() { </span>
            <span class="c13">// ... </span>
            <span class="c0">
              }
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">impl</span>
            <span class="c0"> Animal </span>
            <span class="c2">for</span>
            <span class="c0">
               Dog {
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">new</span>
            <span class="c0">(name: &amp;</span>
            <span class="c34">'static</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c15 c0">) -&gt; Dog {</span>
          </p>
          <p class="c7">
            <span class="c0">
                  Dog { name: name }
              <br/>
                }
              <br/>
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">noise</span>
            <span class="c0">(&amp;</span>
            <span class="c2">self</span>
            <span class="c0">) -&gt; &amp;</span>
            <span class="c34">'static</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c0">
               {
              <br/>
                  
            </span>
            <span class="c14">"woof!"</span>
            <span class="c0">
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Default implementations with Derive</span>
    </p>
    <a id="t.205e6dd11a1da96227699928283b94621ceeaa4a"/>
    <a id="t.40"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c13">// A tuple struct that can be printed</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c11 c33">#[derive(Debug)]</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Inches</span>
            <span class="c0">(</span>
            <span class="c4">i32</span>
            <span class="c0">);</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Trait bounds</span>
    </p>
    <a id="t.c88111829f89f5f379a41319075191d5d6897523"/>
    <a id="t.41"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c22">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">largest</span>
            <span class="c0">&lt;T: </span>
            <span class="c4">PartialOrd</span>
            <span class="c0"> + </span>
            <span class="c4">Copy</span>
            <span class="c0">
              &gt;(list: &amp;[T]) -&gt; T {
              <br/>
                
            </span>
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c2">mut</span>
            <span class="c0"> largest = list[</span>
            <span class="c3">0</span>
            <span class="c0">
              ];
              <br/>
              <br/>
                
            </span>
            <span class="c2">for</span>
            <span class="c0"> &amp;item </span>
            <span class="c2">in</span>
            <span class="c0">
               list {
              <br/>
                  
            </span>
            <span class="c2">if</span>
            <span class="c0">
               item &gt; largest {
              <br/>
                    largest = item;
              <br/>
                  }
              <br/>
                }
              <br/>
              <br/>
                largest
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">impl trait</span>
    </p>
    <a id="t.6563613afae0097ae7460e0e099526bc414b0ffd"/>
    <a id="t.42"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">make_adder_function</span>
            <span class="c0">(y: </span>
            <span class="c4">i32</span>
            <span class="c0">) -&gt; </span>
            <span class="c2">impl</span>
            <span class="c0"> </span>
            <span class="c4">Fn</span>
            <span class="c0">(</span>
            <span class="c4">i32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">i32</span>
            <span class="c0">
               {
              <br/>
                
            </span>
            <span class="c2">let</span>
            <span class="c0"> closure = </span>
            <span class="c2">move</span>
            <span class="c0"> |x: </span>
            <span class="c4">i32</span>
            <span class="c0">
              | { x + y };
              <br/>
                closure
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Trait objects</span>
    </p>
    <a id="t.e235d16893f2333c24d0f78ab7847cbc7c073ce5"/>
    <a id="t.43"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">pub</span>
            <span class="c0"> </span>
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Screen</span>
            <span class="c0">
               {
              <br/>
                
            </span>
            <span class="c2">pub</span>
            <span class="c0"> components: </span>
            <span class="c4">Vec</span>
            <span class="c0">&lt;</span>
            <span class="c4">Box</span>
            <span class="c0">
              &lt;dyn Draw&gt;&gt;,
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Operator overloading</span>
    </p>
    <a id="t.eeb9498a201927f135f5eb127a3a55767e8c8552"/>
    <a id="t.44"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">use</span>
            <span class="c0">
               std::ops::Add;
              <br/>
              <br/>
            </span>
            <span class="c33 c11">#[derive(Debug, Copy, Clone, PartialEq)]</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Point</span>
            <span class="c0">
               {
              <br/>
                x: 
            </span>
            <span class="c4">i32</span>
            <span class="c0">
              ,
              <br/>
                y: 
            </span>
            <span class="c4">i32</span>
            <span class="c0">
              ,
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">impl</span>
            <span class="c0"> Add </span>
            <span class="c2">for</span>
            <span class="c0">
               Point {
              <br/>
                
            </span>
            <span class="c2">type</span>
            <span class="c0"> </span>
            <span class="c20 c11">Output</span>
            <span class="c0">
               = Point;
              <br/>
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">add</span>
            <span class="c0">(</span>
            <span class="c2">self</span>
            <span class="c0">
              , other: Point) -&gt; Point {
              <br/>
                  Point {
              <br/>
                    x: 
            </span>
            <span class="c2">self</span>
            <span class="c0">
              .x + other.x,
              <br/>
                    y: 
            </span>
            <span class="c2">self</span>
            <span class="c0">
              .y + other.y,
              <br/>
                  }
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7">
      <span class="c11">Supertraits</span>
    </p>
    <a id="t.0efd0f77008504e665f890c7ffb60c00b2cf4b1d"/>
    <a id="t.45"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">use</span>
            <span class="c0">
               std::fmt;
              <br/>
              <br/>
            </span>
            <span class="c2">trait</span>
            <span class="c0"> </span>
            <span class="c20 c11">Log</span>
            <span class="c0">
              : fmt::Display {
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">log</span>
            <span class="c0">(&amp;</span>
            <span class="c2">self</span>
            <span class="c0">
              ) {
              <br/>
                  
            </span>
            <span class="c2">let</span>
            <span class="c0"> output = </span>
            <span class="c2">self</span>
            <span class="c0">
              .to_string();
              <br/>
                  
            </span>
            <span class="c4">println!</span>
            <span class="c0">(</span>
            <span class="c14">"Logging: {}"</span>
            <span class="c0">
              , output);
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Lifetimes in function signatures</span>
    </p>
    <a id="t.430f1f6ac17cb1d06feb91f8353ec1c959fa3bf5"/>
    <a id="t.46"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">longest</span>
            <span class="c0">&lt;</span>
            <span class="c34">'a</span>
            <span class="c0">&gt;(x: &amp;</span>
            <span class="c34">'a</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c0">, y: &amp;</span>
            <span class="c34">'a</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c0">) -&gt; &amp;</span>
            <span class="c34">'a</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c0">
               {
              <br/>
                
            </span>
            <span class="c2">if</span>
            <span class="c0">
               x.len() &gt; y.len() {
              <br/>
                  x
              <br/>
                } 
            </span>
            <span class="c2">else</span>
            <span class="c0">
               {
              <br/>
                  y
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Lifetimes in struct definitions</span>
    </p>
    <a id="t.0f77544fec29d59d11a0822f9a134a21455512d3"/>
    <a id="t.47"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">User</span>
            <span class="c0">&lt;</span>
            <span class="c34">'a</span>
            <span class="c0">
              &gt; {
              <br/>
                full_name: &amp;
            </span>
            <span class="c34">'a</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c0">
              ,
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Static lifetimes</span>
    </p>
    <a id="t.70b5df903a73ea9d2e2d58748f0519cd45416cdb"/>
    <a id="t.48"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> s: &amp;</span>
            <span class="c34">'static</span>
            <span class="c0"> </span>
            <span class="c4">str</span>
            <span class="c0"> = </span>
            <span class="c14">"Let’s Get Rusty!"</span>
            <span class="c0">;</span>
          </p>
        </td>
      </tr>
    </table>
    <h2 class="c25" id="h.1ksv4uv">
      <span class="c28">Functions, Function Pointers &amp; Closures</span>
    </h2>
    <p class="c7">
      <span class="c10">Associated functions and methods</span>
    </p>
    <a id="t.cab0235213982f70f1f19361e77a45a8733d9ed3"/>
    <a id="t.49"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Point</span>
            <span class="c0"> { x: </span>
            <span class="c4">i32</span>
            <span class="c0">, y: </span>
            <span class="c4">i32</span>
            <span class="c0">
              , }
              <br/>
              <br/>
            </span>
            <span class="c2">impl</span>
            <span class="c0">
               Point {
              <br/>
                
            </span>
            <span class="c13">// Associated function</span>
            <span class="c0">
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">new</span>
            <span class="c0">(x: </span>
            <span class="c4">i32</span>
            <span class="c0">, y: </span>
            <span class="c4">i32</span>
            <span class="c0">
              ) -&gt; Point {
              <br/>
                  Point { x: x, y: y }
              <br/>
                }
              <br/>
              <br/>
                
            </span>
            <span class="c13">// Method</span>
            <span class="c0">
              <br/>
                
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">getX</span>
            <span class="c0">(&amp;</span>
            <span class="c2">self</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">i32</span>
            <span class="c0"> { </span>
            <span class="c2">self</span>
            <span class="c0">
              .x }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Function pointers</span>
    </p>
    <a id="t.6162cf6f31d39113d6b515db9c6c6c1f5d39e2da"/>
    <a id="t.50"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">do_twice</span>
            <span class="c0">(f: </span>
            <span class="c2">fn</span>
            <span class="c0">(</span>
            <span class="c4">i32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">i32</span>
            <span class="c0">, arg: </span>
            <span class="c4">i32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">i32</span>
            <span class="c0">
               {
              <br/>
                f(arg) + f(arg)
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7">
      <span class="c10">Creating closures</span>
    </p>
    <a id="t.2cfdbc4501837b0db58fe59c6a95e9da284c61dc"/>
    <a id="t.51"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> add_one = |num: </span>
            <span class="c4">u32</span>
            <span class="c0">| -&gt; </span>
            <span class="c4">u32</span>
            <span class="c0">
               {
              <br/>
                num + 
            </span>
            <span class="c3">1</span>
            <span class="c15 c0">
              <br/>
              };
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Returning closures</span>
    </p>
    <a id="t.e64c427b00b732a5b11943e448d3804d717f30a6"/>
    <a id="t.52"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">add_one</span>
            <span class="c0">() -&gt; </span>
            <span class="c2">impl</span>
            <span class="c0"> </span>
            <span class="c4">Fn</span>
            <span class="c0">(</span>
            <span class="c4">i32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">i32</span>
            <span class="c0">
               {
              <br/>
                |x| x + 
            </span>
            <span class="c3">1</span>
            <span class="c0">
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">add_or_subtract</span>
            <span class="c0">(x: </span>
            <span class="c4">i32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">Box</span>
            <span class="c0">&lt;dyn </span>
            <span class="c4">Fn</span>
            <span class="c0">(</span>
            <span class="c4">i32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">i32</span>
            <span class="c0">
              &gt; {
              <br/>
                
            </span>
            <span class="c2">if</span>
            <span class="c0"> x &gt; </span>
            <span class="c3">10</span>
            <span class="c0">
               {
              <br/>
                  
            </span>
            <span class="c4">Box</span>
            <span class="c0">::new(</span>
            <span class="c2">move</span>
            <span class="c0">
               |y| y + x)
              <br/>
                } 
            </span>
            <span class="c2">else</span>
            <span class="c0">
               {
              <br/>
                  
            </span>
            <span class="c4">Box</span>
            <span class="c0">::new(</span>
            <span class="c2">move</span>
            <span class="c15 c0">
               |y| y - x)
              <br/>
                }
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Closure traits</span>
    </p>
    <ul class="c30 lst-kix_veeg7gwdq0jz-0 start">
      <li class="c7 c21 li-bullet-0">
        <span class="c11">FnOnce</span>
        <span class="c1"> - consumes the variables it captures from its enclosing scope.</span>
      </li>
      <li class="c7 c21 li-bullet-0">
        <span class="c11">FnMut</span>
        <span class="c1"> - mutably borrows values from its enclosing scope.</span>
      </li>
      <li class="c7 c21 li-bullet-0">
        <span class="c11">Fn</span>
        <span class="c1"> - immutably borrows values from its enclosing scope.</span>
      </li>
    </ul>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Store closure in struct</span>
    </p>
    <a id="t.ec8a7a2373a7694fa932805407991f7bf0385a7b"/>
    <a id="t.53"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">struct</span>
            <span class="c0"> </span>
            <span class="c20 c11">Cacher</span>
            <span class="c0">
              &lt;T&gt;
              <br/>
            </span>
            <span class="c2">where</span>
            <span class="c0">
              <br/>
                T: 
            </span>
            <span class="c4">Fn</span>
            <span class="c0">(</span>
            <span class="c4">u32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">u32</span>
            <span class="c0">
              ,
              <br/>
              {
              <br/>
                calculation: T,
              <br/>
                value: 
            </span>
            <span class="c4">Option</span>
            <span class="c0">&lt;</span>
            <span class="c4">u32</span>
            <span class="c0">
              &gt;,
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7">
      <span class="c10">Function that accepts closure or function pointer</span>
    </p>
    <a id="t.eefe7f85bac9fb2b64503fd8ca86848b0dee8021"/>
    <a id="t.54"/>
    <table class="c8">
      <tr class="c43">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">do_twice</span>
            <span class="c0">&lt;T&gt;(f: T, x: </span>
            <span class="c4">i32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">i32</span>
            <span class="c0">
              <br/>
                
            </span>
            <span class="c2">where</span>
            <span class="c0"> T: </span>
            <span class="c4">Fn</span>
            <span class="c0">(</span>
            <span class="c4">i32</span>
            <span class="c0">) -&gt; </span>
            <span class="c4">i32</span>
            <span class="c0">
              <br/>
              {
              <br/>
                f(x) + f(x)
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <h2 class="c25" id="h.44sinio">
      <span class="c28">Pointers</span>
    </h2>
    <p class="c7">
      <span class="c10">References</span>
    </p>
    <a id="t.d788aec4104c318076af6490484a26f1e179080a"/>
    <a id="t.55"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c2">mut</span>
            <span class="c0"> num = </span>
            <span class="c3">5</span>
            <span class="c0">
              ;
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> r1 = &amp;num; </span>
            <span class="c13">// immutable reference</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> r2 = &amp;</span>
            <span class="c2">mut</span>
            <span class="c0"> num; </span>
            <span class="c13">// mutable reference</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Raw pointers</span>
    </p>
    <a id="t.ef22a1a67dbeb79ed0004574bcfb308d2db957c2"/>
    <a id="t.56"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> </span>
            <span class="c2">mut</span>
            <span class="c0"> num = </span>
            <span class="c3">5</span>
            <span class="c0">
              ;
              <br/>
            </span>
            <span class="c13">// immutable raw pointer</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> r1 = &amp;num </span>
            <span class="c2">as</span>
            <span class="c0"> *</span>
            <span class="c2">const</span>
            <span class="c0"> </span>
            <span class="c4">i32</span>
            <span class="c0">
              ;
              <br/>
            </span>
            <span class="c13">// mutable raw pointer</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> r2 = &amp;</span>
            <span class="c2">mut</span>
            <span class="c0"> num </span>
            <span class="c2">as</span>
            <span class="c0"> *</span>
            <span class="c2">mut</span>
            <span class="c0"> </span>
            <span class="c4">i32</span>
            <span class="c15 c0">;</span>
          </p>
        </td>
      </tr>
    </table>
    <h3 class="c27" id="h.2jxsxqh">
      <span class="c31">Smart pointers</span>
    </h3>
    <p class="c7">
      <span class="c11">Box&lt;T&gt; </span>
      <span class="c1">- for allocating values on the heap</span>
    </p>
    <a id="t.fd4a7e70c620d348127ba8e7316353059b43a169"/>
    <a id="t.57"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> b = </span>
            <span class="c4">Box</span>
            <span class="c0">::new(</span>
            <span class="c3">5</span>
            <span class="c0">);</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Rc&lt;T&gt; </span>
      <span>-</span>
      <span class="c11"> </span>
      <span class="c1">multiple ownership with reference counting</span>
    </p>
    <a id="t.e73636560679703e46c50984f6fb6b9a2bd148db"/>
    <a id="t.58"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> a = Rc::new(</span>
            <span class="c3">5</span>
            <span class="c0">
              );
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> b = Rc::clone(&amp;a);</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Ref&lt;T&gt;, RefMut&lt;T&gt;, and RefCell&lt;T&gt;</span>
      <span class="c1"> - enforce borrowing rules at runtime instead of compile time. </span>
    </p>
    <a id="t.4ca7f2b96b7b452c59336ae2790c6a9394e3f38a"/>
    <a id="t.59"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> num = </span>
            <span class="c3">5</span>
            <span class="c0">
              ;
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> r1 = RefCell::new(</span>
            <span class="c3">5</span>
            <span class="c0">
              );
              <br/>
            </span>
            <span class="c13">// Ref - immutable borrow</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0">
               r2 = r1.borrow();
              <br/>
            </span>
            <span class="c13">// RefMut - mutable borrow</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0">
               r3 = r1.borrow_mut();
              <br/>
            </span>
            <span class="c13">// RefMut - second mutable borrow</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">let</span>
            <span class="c0"> r4 = r1.borrow_mut();</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Multiple owners of mutable data</span>
    </p>
    <a id="t.a16f76b7928d93febc9973db78e073b607b3b7d0"/>
    <a id="t.60"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">let</span>
            <span class="c0"> x = Rc::new(RefCell::new(</span>
            <span class="c3">5</span>
            <span class="c0">));</span>
          </p>
        </td>
      </tr>
    </table>
    <h2 class="c26" id="h.z337ya">
      <span class="c28">Packages, Crates, and Modules</span>
    </h2>
    <p class="c7">
      <span class="c11">Definitions</span>
    </p>
    <ul class="c30 lst-kix_k36rnhq3bscv-0 start">
      <li class="c7 c21 li-bullet-0">
        <span class="c11">Packages</span>
        <span class="c1"> - A Cargo feature that lets you build, test, and share crates.</span>
      </li>
      <li class="c7 c21 li-bullet-0">
        <span class="c11">Crates</span>
        <span class="c1"> - A tree of modules that produces a library or executable.</span>
      </li>
      <li class="c7 c21 li-bullet-0">
        <span class="c11">Modules</span>
        <span> and </span>
        <span class="c11">use</span>
        <span class="c1"> - Let you control the organization, scope, and privacy of paths.</span>
      </li>
      <li class="c7 c21 li-bullet-0">
        <span class="c11">Paths</span>
        <span class="c1"> - A way of naming an item, such as a struct, function, or module.</span>
      </li>
    </ul>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Creating a new package with a binary crate</span>
    </p>
    <a id="t.d48344d391b1d19f5e3a6937c575a18a586ccbed"/>
    <a id="t.61"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c0">$ cargo new my-project</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c10">Creating a new package with a library crate</span>
    </p>
    <a id="t.162fa136d3641a56c0578eeda97f29bca3802bea"/>
    <a id="t.62"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c0">$ cargo new my-project --lib</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7">
      <span class="c11">Defining and using modules</span>
    </p>
    <a id="t.a94ccf47bc63604ad8af79c903d9a8b31cc581dc"/>
    <a id="t.63"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">some_function</span>
            <span class="c0">
              () {}
              <br/>
              <br/>
            </span>
            <span class="c2">mod</span>
            <span class="c0"> outer_module { </span>
            <span class="c13">// private module</span>
            <span class="c0">
              <br/>
                
            </span>
            <span class="c2">pub</span>
            <span class="c0"> </span>
            <span class="c2">mod</span>
            <span class="c0"> inner_module { </span>
            <span class="c13">// public module</span>
            <span class="c0">
              <br/>
                  
            </span>
            <span class="c2">pub</span>
            <span class="c0"> </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">inner_public_function</span>
            <span class="c0">
              () {
              <br/>
                    super::super::some_function();
              <br/>
                  }
              <br/>
              <br/>
                  
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">inner_private_function</span>
            <span class="c0">
              () {}
              <br/>
                }
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">main</span>
            <span class="c0">
              () {
              <br/>
                
            </span>
            <span class="c13">// absolute path</span>
            <span class="c0">
              <br/>
                crate::outer_module::
              <br/>
                inner_module::inner_public_function();
              <br/>
              <br/>
                
            </span>
            <span class="c13">// relative path path</span>
            <span class="c0">
              <br/>
                outer_module::
              <br/>
                inner_module::inner_public_function();
              <br/>
              <br/>
                
            </span>
            <span class="c13">// bringing path into scope</span>
            <span class="c0">
              <br/>
                
            </span>
            <span class="c2">use</span>
            <span class="c15 c0">
               outer_module::inner_module;
              <br/>
                inner_module::inner_public_function();
              <br/>
              }
            </span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c10"/>
    </p>
    <p class="c7">
      <span class="c11">Renaming with </span>
      <span class="c11 c16">as</span>
      <span class="c11"> keyword</span>
    </p>
    <a id="t.0cbf3f8c36c1334fd3d0c11dc9156fb3184ee4eb"/>
    <a id="t.64"/>
    <table class="c8">
      <tr class="c49">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">use</span>
            <span class="c0"> std::fmt::</span>
            <span class="c4">Result</span>
            <span class="c0">
              ;
              <br/>
            </span>
            <span class="c2">use</span>
            <span class="c0"> std::io::</span>
            <span class="c4">Result</span>
            <span class="c0"> </span>
            <span class="c2">as</span>
            <span class="c0"> IoResult;</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Re-exporting with </span>
      <span class="c11 c16">pub use</span>
    </p>
    <a id="t.90e1aae2818462871bb5227b40df98c7c2db41b3"/>
    <a id="t.65"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c2">mod</span>
            <span class="c0">
               outer_module {
              <br/>
                  
            </span>
            <span class="c2">pub</span>
            <span class="c0"> </span>
            <span class="c2">mod</span>
            <span class="c0">
               inner_module {
              <br/>
                      
            </span>
            <span class="c2">pub</span>
            <span class="c0"> </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">inner_public_function</span>
            <span class="c0">
              () {}
              <br/>
                  }
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c2">pub</span>
            <span class="c0"> </span>
            <span class="c2">use</span>
            <span class="c0"> crate::outer_module::inner_module;</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7">
      <span class="c11">Defining modules in separate files</span>
    </p>
    <a id="t.2d2329e5541a4df5d07e24b752dac6634ddd3ac5"/>
    <a id="t.66"/>
    <table class="c8">
      <tr class="c5">
        <td class="c9" colspan="1" rowspan="1">
          <p class="c7">
            <span class="c13">// src/lib.rs</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">mod</span>
            <span class="c0">
               my_module;
              <br/>
              <br/>
            </span>
            <span class="c2">pub</span>
            <span class="c0"> </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">some_function</span>
            <span class="c0">
              () {
              <br/>
                my_module::my_function();
              <br/>
              }
              <br/>
              <br/>
            </span>
            <span class="c13">// src/my_module.rs</span>
            <span class="c0">
              <br/>
            </span>
            <span class="c2">pub</span>
            <span class="c0"> </span>
            <span class="c2">fn</span>
            <span class="c0"> </span>
            <span class="c6">my_function</span>
            <span class="c0">() {}</span>
          </p>
        </td>
      </tr>
    </table>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
    <p class="c7 c12">
      <span class="c1"/>
    </p>
  </body>
</html>
